{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue or a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>This tutorial is designed for you to gain a basic understanding of the DJI Mobile SDK. It will implement the FPV view and two basic camera functionalities: <strong>Take Photo</strong> and <strong>Record video</strong>.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"preparation\">Preparation</h2>\n<h3 id=\"download-the-sdk\">Download the SDK</h3>\n<p>You can download the latest Android SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads\">https://developer.dji.com/mobile-sdk/downloads</a></a>.</p>\n<h3 id=\"setup-android-development-environment\">Setup Android Development Environment</h3>\n<p>  Throughout this tutorial we will be using Android Studio 2.1, which you can download from here: <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\"><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></a>.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>In our previous tutorial <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a>, you have learned how to import the DJI Android SDK into your Android Studio project and activate your application. If you haven&#39;t read that previously, please take a look at it. Once you&#39;ve done that, let&#39;s continue to create the project.</p>\n<h3 id=\"importing-the-framework-and-libraries\">Importing the Framework and Libraries</h3>\n<p> <strong>1</strong>. Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &#39;FPVDemo&#39;. Enter the company domain and package name (Here we use &quot;com.dji.FPVDemo&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<p> <strong>2</strong>. Unzip the Android SDK package downloaded from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/FPVDemo/importsSDK.png\" alt=\"importSDK\"></p>\n<p> <strong>3</strong>. Next, double click on the &quot;build.gradle(Module: app)&quot; in the project navigator to open it and replace the content with the following:</p>\n<pre><code class=\"lang-java\">apply plugin: &#39;com.android.application&#39;\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion &#39;23.0.2&#39;\n\n    defaultConfig {\n        applicationId &quot;com.dji.FPVDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile &#39;com.android.support:design:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<p> In the code above, we modify its dependencies by adding <code>compile project(&#39;:dJISDKLIB&#39;)</code> in the &quot;dependencies&quot; part at the bottom, and change the compileSdkVersion, buildToolsVersion number, etc. </p>\n<p> <img src=\"../images/tutorials-and-samples/Android/FPVDemo/buildGradle.png\" alt=\"configureAndroidSDK\"></p>\n<p> Then, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p> <strong>4</strong>. Let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/FPVDemo/dependencies.png\" alt=\"dependencies\"></p>\n<p> <strong>5</strong>. Now, open the MainActivity.java file in <code>com.dji.FPVDemo</code> package and add <code>import dji.sdk.SDKManager.DJISDKManager;</code> at the bottom of the import classes section as shown below:</p>\n<pre><code class=\"lang-java\">package com.dji.FPVDemo;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport dji.sdk.SDKManager.DJISDKManager;</code></pre>\n<p>  Wait for a few seconds and check if the words turn red, if they remain gray color, it means you can use DJI Android SDK in your project successfully now.</p>\n<h3 id=\"building-the-layouts-of-activity\">Building the Layouts of Activity</h3>\n<h4 id=\"1-creating-fpvdemoapplication-class\">1. Creating FPVDemoApplication Class</h4>\n<p>Right-click on the package <code>com.dji.FPVDemo</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;FPVDemoApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>Next, Replace the code of the &quot;FPVDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.FPVDemo;\nimport android.app.Application;\n\npublic class FPVDemoApplication extends Application{\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n}</code></pre>\n<p>Here, we override the onCreate() method. We can do some settings when the application is created here.</p>\n<h4 id=\"2-implementing-mainactivity-class\">2. Implementing MainActivity Class</h4>\n<p>The MainActivity.java file is created by Android Studio by default. Let&#39;s replace the code of it with the following:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends Activity implements TextureView.SurfaceTextureListener, View.OnClickListener {\n\n    protected TextView mConnectStatusTextView;\n\n    protected TextureView mVideoSurface = null;\n    private Button mCaptureBtn, mShootPhotoModeBtn, mRecordVideoModeBtn;\n    private ToggleButton mRecordBtn;\n    private TextView recordingTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the\n        // following permissions at runtime to ensure the\n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n        initUI();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    public void onReturn(View view){\n        this.finish();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n    }\n\n    @Override\n    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {\n    }\n\n    @Override\n    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n        return false;\n    }\n\n    @Override\n    public void onSurfaceTextureUpdated(SurfaceTexture surface) {\n    }\n\n    private void initUI() {\n        mConnectStatusTextView = (TextView) findViewById(R.id.ConnectStatusTextView);\n        // init mVideoSurface\n        mVideoSurface = (TextureView)findViewById(R.id.video_previewer_surface);\n\n        recordingTime = (TextView) findViewById(R.id.timer);\n        mCaptureBtn = (Button) findViewById(R.id.btn_capture);\n        mRecordBtn = (ToggleButton) findViewById(R.id.btn_record);\n        mShootPhotoModeBtn = (Button) findViewById(R.id.btn_shoot_photo_mode);\n        mRecordVideoModeBtn = (Button) findViewById(R.id.btn_record_video_mode);\n\n        if (null != mVideoSurface) {\n            mVideoSurface.setSurfaceTextureListener(this);\n        }\n\n        mCaptureBtn.setOnClickListener(this);\n        mRecordBtn.setOnClickListener(this);\n        mShootPhotoModeBtn.setOnClickListener(this);\n        mRecordVideoModeBtn.setOnClickListener(this);\n\n        recordingTime.setVisibility(View.INVISIBLE);\n\n        mRecordBtn.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n\n           }\n        });\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.btn_capture:{\n                break;\n            }\n            case R.id.btn_shoot_photo_mode:{\n                break;\n            }\n            case R.id.btn_record_video_mode:{\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n}</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create the layout UI elements variables, including a TextureView <code>mVideoSurface</code>, three Buttons <code>mCaptureBtn</code>, <code>mShootPhotoModeBtn</code>, <code>mRecordVideoModeBtn</code>, one Toggle Button <code>mRecordBtn</code> and a TextView <code>recordingTime</code>.</p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</p>\n<p><strong>3.</strong> Then invoke the <code>initUI()</code> method to initialize UI variables. And implement the <code>setOnClickListener()</code> method of Button for all the Buttons. Also implement the <code>setOnCheckedChangeListener()</code> method for Toggle Button.</p>\n<p><strong>4.</strong> Override the <code>onClick()</code> method to implement the three Buttons&#39; click actions.</p>\n<h4 id=\"3-implementing-the-mainactivity-layout\">3. Implementing the MainActivity Layout</h4>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;RelativeLayout\n        android:id=&quot;@+id/main_title_rl&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;40dp&quot;\n        android:background=&quot;@color/black_overlay&quot; &gt;\n\n        &lt;ImageButton\n            android:id=&quot;@+id/ReturnBtnCamera&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;35dp&quot;\n            android:layout_alignParentLeft=&quot;true&quot;\n            android:layout_centerVertical=&quot;true&quot;\n            android:layout_marginLeft=&quot;20dp&quot;\n            android:adjustViewBounds=&quot;true&quot;\n            android:background=&quot;@android:color/transparent&quot;\n            android:onClick=&quot;onReturn&quot;\n            android:scaleType=&quot;centerInside&quot;\n            android:src=&quot;@drawable/selector_back_button&quot; /&gt;\n\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_centerInParent=&quot;true&quot;\n            android:text=&quot;&quot;\n            android:textColor=&quot;@android:color/white&quot;\n            android:textSize=&quot;21sp&quot; /&gt;\n    &lt;/RelativeLayout&gt;\n\n    &lt;TextureView\n        android:id=&quot;@+id/video_previewer_surface&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;\n        android:layout_below=&quot;@id/main_title_rl&quot;\n        android:layout_gravity=&quot;center&quot;\n        android:layout_centerHorizontal=&quot;true&quot;\n        android:layout_above=&quot;@+id/linearLayout&quot; /&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;\n        android:layout_alignParentBottom=&quot;true&quot;\n        android:id=&quot;@+id/linearLayout&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/btn_capture&quot;\n            android:layout_width=&quot;0dp&quot;\n            android:layout_weight=&quot;1&quot;\n            android:layout_gravity=&quot;center_vertical&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Capture&quot;\n            android:textSize=&quot;12sp&quot;/&gt;\n\n        &lt;ToggleButton\n            android:id=&quot;@+id/btn_record&quot;\n            android:layout_width=&quot;0dp&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Start Record&quot;\n            android:textOff=&quot;Start Record&quot;\n            android:textOn=&quot;Stop Record&quot;\n            android:layout_weight=&quot;1&quot;\n            android:layout_gravity=&quot;center_vertical&quot;\n            android:textSize=&quot;12dp&quot;\n            android:checked=&quot;false&quot; /&gt;\n\n        &lt;Button\n            android:id=&quot;@+id/btn_shoot_photo_mode&quot;\n            android:layout_width=&quot;0dp&quot;\n            android:layout_weight=&quot;1&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_gravity=&quot;center_vertical&quot;\n            android:text=&quot;Shoot Photo Mode&quot;\n            android:textSize=&quot;12sp&quot;/&gt;\n\n        &lt;Button\n            android:id=&quot;@+id/btn_record_video_mode&quot;\n            android:layout_width=&quot;0dp&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Record Video Mode&quot;\n            android:layout_weight=&quot;1&quot;\n            android:layout_gravity=&quot;center_vertical&quot; /&gt;\n\n    &lt;/LinearLayout&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/timer&quot;\n        android:layout_width=&quot;150dp&quot;\n        android:layout_weight=&quot;1&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_gravity=&quot;center_vertical&quot;\n        android:layout_marginTop=&quot;23dp&quot;\n        android:gravity=&quot;center&quot;\n        android:textColor=&quot;#ffffff&quot;\n        android:layout_alignTop=&quot;@+id/video_previewer_surface&quot;\n        android:layout_centerHorizontal=&quot;true&quot; /&gt;\n\n&lt;/RelativeLayout&gt;</code></pre>\n<p>  In the xml file, firstly, we implement the RelativeLayout element. We declare an ImageButton(id: ReturnBtnCamera) element to exit the application, and a TextView(id: ConnectStatusTextView) element to show the connection status text. </p>\n<p>  Next, create a TextureView(id: video_previewer_surface) element to show the live video stream from the camera. Moreover, we implement a LinearLayout element to create the &quot;Capture&quot; Button(id: btn_capture), &quot;Record&quot; ToggleButton(id: btn_record), &quot;Shoot Photo Mode&quot; Button(id: btn_shoot_photo_mode) and &quot;Record Video Mode&quot; Button(id: btn_record_video_mode).</p>\n<p>  Lastly, we create a TextView(id: timer) element to show the record video time.</p>\n<h4 id=\"4-configuring-the-resource-xmls\">4. Configuring the Resource XMLs</h4>\n<p>  Once you finish the above steps, let&#39;s copy all the images file from this Github sample project&#39;s <strong>drawable</strong> folder (<strong>app-&gt;src-&gt;main-&gt;res-&gt;drawable</strong>) to the same folder in your project.</p>\n<p>  <img src=\"../images/tutorials-and-samples/Android/FPVDemo/imageFiles.png\" alt=\"imageFiles\"></p>\n<p>  Moreover, open the colors.xml file and update the content as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n    &lt;color name=&quot;colorPrimary&quot;&gt;#3F51B5&lt;/color&gt;\n    &lt;color name=&quot;colorPrimaryDark&quot;&gt;#303F9F&lt;/color&gt;\n    &lt;color name=&quot;colorAccent&quot;&gt;#FF4081&lt;/color&gt;\n    &lt;color name=&quot;black_overlay&quot;&gt;#66000000&lt;/color&gt;\n&lt;/resources&gt;</code></pre>\n<p>Now, if you open the activity_main.xml file, and click on the <strong>Design</strong> tab on the bottom left, you should see the preview screenshot of MainActivity as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/FPVDemo/mainActivityImage.png\" alt=\"MainActivity\"></p>\n<p>For more details, please check the Github source code of this tutorial.</p>\n<h2 id=\"registering-the-application\">Registering the Application</h2>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>1.</strong> Let&#39;s open the AndroidManifest.xml file and add the following elements on top of the <strong>application</strong> element:</p>\n<pre><code class=\"lang-xml\">&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n&lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.host&quot;\n    android:required=&quot;false&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.accessory&quot;\n    android:required=&quot;true&quot; /&gt;</code></pre>\n<p>Here, we request permissions that the application must be granted in order for it to register DJI SDK correctly. Also we declare the camera and usb hardwares which is used by the application.</p>\n<p>Moreover, let&#39;s add the following elements as childs of element on top of the &quot;MainActivity&quot; activity element as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n&lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n&lt;meta-data\n    android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;Please enter your APP Key here.&quot; /&gt;\n\n&lt;activity\n    android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n    android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n    &lt;/intent-filter&gt;\n\n    &lt;meta-data\n        android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n        android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n&lt;/activity&gt;\n&lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n&lt;/service&gt;\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, you should substitude your <strong>App Key</strong> of the application for &quot;Please enter your App Key here.&quot; in the <strong>value</strong> attribute under the <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute.</p>\n<p><strong>2.</strong> After you finish the steps above, open the &quot;FPVDemoApplication.java&quot; file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onCreate() {\n    super.onCreate();\n    mHandler = new Handler(Looper.getMainLooper());\n    //This is used to start SDK services and initiate SDK.\n    DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\n/**\n * When starting SDK services, an instance of interface DJISDKManager.DJISDKManagerCallback will be used to listen to \n * the SDK Registration result and the product changing.\n */\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n\n    //Listens to the SDK registration result\n    @Override\n    public void onGetRegisteredResult(DJIError error) {\n        if(error == DJISDKError.REGISTRATION_SUCCESS) {\n          DJISDKManager.getInstance().startConnectionToProduct();\n          Handler handler = new Handler(Looper.getMainLooper());\n          handler.post(new Runnable() {\n              @Override\n              public void run() {\n                  Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n              }\n          });\n\n        } else {\n\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;register sdk fails, check network is available&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n        Log.e(&quot;TAG&quot;, error.toString());\n    }\n\n    //Listens to the connected product changing, including two parts, component changing or product connection changing.\n    @Override\n    public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n\n        mProduct = newProduct;\n        if(mProduct != null) {\n            mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n        }\n\n        notifyStatusChange();\n    }\n};\n\nprivate DJIBaseProductListener mDJIBaseProductListener = new DJIBaseProductListener() {\n\n    @Override\n    public void onComponentChange(DJIComponentKey key, DJIBaseComponent oldComponent, DJIBaseComponent newComponent) {\n\n        if(newComponent != null) {\n            newComponent.setDJIComponentListener(mDJIComponentListener);\n        }\n        notifyStatusChange();\n    }\n\n    @Override\n    public void onProductConnectivityChanged(boolean isConnected) {\n\n        notifyStatusChange();\n    }\n};</code></pre>\n<p>Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of <code>DJISDKManagerCallback</code>. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n<li>Implement the two interface methods of <code>DJIBaseProductListener</code>. You can use the <code>onComponentChange()</code> method to check the product component change status and invoke the <code>notifyStatusChange()</code> method to notify status changes. Also, you can use the <code>onProductConnectivityChanged()</code> method to notify the product connectivity changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/FPVDemo/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/FPVDemo/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<p>For more details of registering your application, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a>.</p>\n<h2 id=\"implementing-the-first-person-view\">Implementing the First Person View</h2>\n<p>Now, let&#39;s continue to declare the <code>TAG</code> and <code>mReceivedVideoDataCallBack</code> variables as shown below:</p>\n<pre><code class=\"lang-java\">private static final String TAG = MainActivity.class.getName();\nprotected DJICamera.CameraReceivedVideoDataCallback mReceivedVideoDataCallBack = null;</code></pre>\n<p>Then add the following codes at the bottom of <code>onCreate()</code> method:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    initUI();\n\n    // The callback for receiving the raw H264 video data for camera live view\n    mReceivedVideoDataCallBack = new DJICamera.CameraReceivedVideoDataCallback() {\n\n        @Override\n        public void onResult(byte[] videoBuffer, int size) {\n            if(mCodecManager != null){\n                // Send the raw H264 video data to codec manager for decoding\n                mCodecManager.sendDataToDecoder(videoBuffer, size);\n            }else {\n                Log.e(TAG, &quot;mCodecManager is null&quot;);\n            }\n        }\n    };\n\n    // Register the broadcast receiver for receiving the device connection&#39;s changes.\n    IntentFilter filter = new IntentFilter();\n    filter.addAction(FPVDemoApplication.FLAG_CONNECTION_CHANGE);\n    registerReceiver(mReceiver, filter);\n}</code></pre>\n<p>In the code above, we initialize the <code>mReceivedVideoDataCallBack</code> variable using DJICamera&#39;s <code>CameraReceivedVideoDataCallback()</code>. Inside the callback, we override its <code>onResult()</code> method to get the raw H264 video data and send them to <code>mCodecManager</code> for decoding.  Next, we register the broadcast receiver for receiving the device connection changes status. </p>\n<p>Moreover, let&#39;s create the &quot;BroadcastReceiver&quot; and override its <code>onReceive()</code> method to update the title Bar and invoke the <code>onProductChange()</code> method:</p>\n<pre><code class=\"lang-java\">protected BroadcastReceiver mReceiver = new BroadcastReceiver() {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        updateTitleBar();\n        onProductChange();\n    }\n};</code></pre>\n<p>Next, let&#39;s implement the <code>updateTitleBar()</code> and <code>onProductChange()</code> methods： </p>\n<pre><code class=\"lang-java\">private void updateTitleBar() {\n    if(mConnectStatusTextView == null) return;\n    boolean ret = false;\n    DJIBaseProduct product = FPVDemoApplication.getProductInstance();\n    if (product != null) {\n        if(product.isConnected()) {\n            //The product is connected\n            mConnectStatusTextView.setText(FPVDemoApplication.getProductInstance().getModel() + &quot; Connected&quot;);\n            ret = true;\n        } else {\n            if(product instanceof DJIAircraft) {\n                DJIAircraft aircraft = (DJIAircraft)product;\n                if(aircraft.getRemoteController() != null &amp;&amp; aircraft.getRemoteController().isConnected()) {\n                    // The product is not connected, but the remote controller is connected\n                    mConnectStatusTextView.setText(&quot;only RC Connected&quot;);\n                    ret = true;\n                }\n            }\n        }\n    }\n    if(!ret) {\n        // The product or the remote controller are not connected.\n//            mConnectStatusTextView.setText(&quot;Disconnected&quot;);\n    }\n}\n\nprotected void onProductChange() {\n    initPreviewer();\n}</code></pre>\n<p>In the <code>updateTitleBar()</code> method, we check the product connection status and modify the text on <code>mConnectStatusTextView</code>.</p>\n<p>Furthermore, let&#39;s implement two important methods to show and reset the live video stream on our <code>mVideoSurface</code> TextureView:</p>\n<pre><code class=\"lang-java\">private void initPreviewer() {\n\n    DJIBaseProduct product = FPVDemoApplication.getProductInstance();\n\n    if (product == null || !product.isConnected()) {\n        showToast(getString(R.string.disconnected));\n    } else {\n        if (null != mVideoSurface) {\n            mVideoSurface.setSurfaceTextureListener(this);\n        }\n        if (!product.getModel().equals(DJIBaseProduct.Model.UnknownAircraft))   \n        {\n            DJICamera camera = product.getCamera();\n            if (camera != null){\n                // Set the callback\n                camera.setDJICameraReceivedVideoDataCallback(mReceivedVideoDataCallBack);\n            }\n        }\n    }\n}\n\nprivate void uninitPreviewer() {\n    DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null){\n        // Reset the callback\n        FPVDemoApplication.getCameraInstance().setDJICameraReceivedVideoDataCallback(null);\n    }\n}</code></pre>\n<p>In the <code>initPreviewer()</code> method, firstly, we check the product connection status and invoke the <code>setSurfaceTextureListener()</code> method of TextureView to set texture listener to MainActivity. Then get the DJICamera variable by invoking the <code>getCamera()</code> method of DJIBaseProduct and set <code>mReceivedVideoDataCallBack</code> as its &quot;DJICameraReceivedVideoDataCallback&quot;. So once the camera is connected and receive video data, it will show on the <code>mVideoSurface</code> TextureView.</p>\n<p>Moreover, we implement the <code>uninitPreviewer()</code> method to reset DJICamera&#39;s &quot;DJICameraReceivedVideoDataCallback&quot; to null.</p>\n<p>Now, let&#39;s override the four SurfaceTextureListener interface methods as shown below:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n    Log.e(TAG, &quot;onSurfaceTextureAvailable&quot;);\n    if (mCodecManager == null) {\n        mCodecManager = new DJICodecManager(this, surface, width, height);\n    }\n}\n\n@Override\npublic void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {\n    Log.e(TAG, &quot;onSurfaceTextureSizeChanged&quot;);\n}\n\n@Override\npublic boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n    Log.e(TAG,&quot;onSurfaceTextureDestroyed&quot;);\n    if (mCodecManager != null) {\n        mCodecManager.cleanSurface();\n        mCodecManager = null;\n    }\n\n    return false;\n}\n\n@Override\npublic void onSurfaceTextureUpdated(SurfaceTexture surface) {\n//        Log.e(TAG, &quot;onSurfaceTextureUpdated&quot;);\n}</code></pre>\n<p>We init the <code>mCodecManager</code> variable in the <code>onSurfaceTextureAvailable()</code> method, then reset the <code>mCodecManager</code> and invoke its <code>cleanSurface()</code> method to reset the surface data.</p>\n<p>For more detail implementations, please check the Github source code of this tutorial.</p>\n<h2 id=\"connecting-to-the-aircraft-or-handheld-device\">Connecting to the Aircraft or Handheld Device</h2>\n<p>After you finish the steps above, you can now connect your mobile device to your DJI Aircraft to use the application, like checking the FPV View. Here are the guidelines:</p>\n<ul>\n<li><p>In order to connect to a DJI Phantom 4, Inspire 1, Phantom 3 Professional, etc:</p>\n<p><strong>1</strong>. First, turn on your remote controller.</p>\n<p><strong>2</strong>. Then, turn on the power of the DJI aircraft.</p>\n<p><strong>3</strong>. Connect your Android device to the remote controller using the USB cable.</p>\n<p><strong>4</strong>. Run the application and wait for a few seconds, you will be able to view the live video stream from your aircraft&#39;s camera based on what we&#39;ve finished of the application so far!</p>\n</li>\n<li><p>In order to connect to Phantom 3 Standard, Phantom 3 4K, or OSMO:</p>\n<p><strong>1</strong>. First, turn on your remote controller or OSMO.</p>\n<p><strong>2</strong>. Then, turn on the power of the DJI aircraft. (If you are using Phantom 3 Standard or Phantom 3 4K)</p>\n<p><strong>3</strong>. Search for the WiFi of the aircraft&#39;s remote controller or OSMO and connect your android device to it.</p>\n<p><strong>4</strong>. Run the application and wait for a few seconds, you will be able to view the live video stream from your aircraft or OSMO&#39;s camera based on what we&#39;ve finished of the application so far!</p>\n</li>\n</ul>\n<h2 id=\"enjoying-the-first-person-view\">Enjoying the First Person View</h2>\n<p>If you can see the live video stream in the application, congratulations! Let&#39;s move forward.</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/FPVDemo/fpv.png\" alt=\"fpv\"></p>\n<h2 id=\"implementing-the-capture-function\">Implementing the Capture function</h2>\n<p>Now, let&#39;s override the <code>onClick()</code> method to implement the capture button click action:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onClick(View v) {\n\n    switch (v.getId()) {\n        case R.id.btn_capture:{\n            captureAction();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<p>Then implement the <code>captureAction()</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">// Method for taking photo\nprivate void captureAction(){\n\n    CameraMode cameraMode = CameraMode.ShootPhoto;\n\n    final DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null) {\n\n        CameraShootPhotoMode photoMode = CameraShootPhotoMode.Single; // Set the camera capture mode as Single mode\n        camera.startShootPhoto(photoMode, new DJICompletionCallback() {\n\n            @Override\n            public void onResult(DJIError error) {\n                if (error == null) {\n                    showToast(&quot;take photo: success&quot;);\n                } else {\n                    showToast(error.getDescription());\n                }\n            }\n\n        }); // Execute the startShootPhoto API\n    }\n}</code></pre>\n<p>In the code above, we firstly create a &quot;CameraMode&quot; variable and assign <code>CameraMode.ShootPhoto</code> to it. Next, create a &quot;CameraShootPhotoMode&quot; variable and assign &quot;CameraShootPhotoMode.Single&quot; to it. The camera work mode for ShootPhoto has several modes within its definition. You can use &quot;AEBCapture&quot;, &quot;Burst&quot;, &quot;HDR&quot;, etc for &quot;CameraShootPhotoMode&quot;, for more details, please check <strong>DJICameraSettingsDef.CameraShootPhotoMode</strong>.</p>\n<p>Next, implement the <code>startShootPhoto()</code> method of DJICamera to control the camera to shoot photo. We override its <code>onResult()</code> method to get the result and show related text to users.</p>\n<p>  Build and run your project and then try the shoot photo function. If the screen flash after your press the <strong>Capture</strong> button, your capture fuction should work now.</p>\n<h2 id=\"implementing-the-record-function\">Implementing the Record function</h2>\n<h3 id=\"switching-camera-mode\">Switching Camera Mode</h3>\n<p>Before we go ahead to implement the record action method, let&#39;s implement the switch Camera Mode feature. Improve the <code>onClick()</code> method by adding button click actions for <code>mShootPhotoModeBtn</code> and <code>mRecordVideoModeBtn</code> as follows:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onClick(View v) {\n\n    switch (v.getId()) {\n        case R.id.btn_capture:{\n            captureAction();\n            break;\n        }\n        case R.id.btn_shoot_photo_mode:{\n            switchCameraMode(CameraMode.ShootPhoto);\n            break;\n        }\n        case R.id.btn_record_video_mode:{\n            switchCameraMode(CameraMode.RecordVideo);\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<p>Next, implement the <code>switchCameraMode()</code> method:</p>\n<pre><code class=\"lang-java\">private void switchCameraMode(CameraMode cameraMode){\n\n    DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null) {\n        camera.setCameraMode(cameraMode, new DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n\n                if (error == null) {\n                    showToast(&quot;Switch Camera Mode Succeeded&quot;);\n                } else {\n                    showToast(error.getDescription());\n                }\n            }\n        });\n        }\n\n}</code></pre>\n<p>In the code above, we invoke the <code>setCameraMode()</code> method of DJICamera and assign the <code>CameraMode</code> parameter to it. Then override the <code>onResult()</code> method to show the change camera mode result to the users.</p>\n<h3 id=\"working-on-the-record-action\">Working on the Record Action</h3>\n<p>Once we finish the switch camera mode feature, we can now implement the record feature. Let&#39;s improve the <code>initUI()</code> method by add the following code at the bottom of it:</p>\n<pre><code class=\"lang-java\">mRecordBtn.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n    @Override\n    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n        if (isChecked) {\n            recordingTime.setVisibility(View.VISIBLE);\n            startRecord();\n\n        } else {\n            recordingTime.setVisibility(View.INVISIBLE);\n            stopRecord();\n        }\n    }\n});</code></pre>\n<p>Here, we implement the <code>setOnCheckedChangeListener()</code> method of ToggleButton <code>mRecordBtn</code> and override its <code>onCheckedChanged()</code> method to check the <code>isChecked</code> variable value, which means the toggle state of the button, and invoke the <code>startRecord()</code> and <code>stopRecord()</code> methods relatively.</p>\n<p>Next, implement the <code>startRecord()</code> and <code>stopRecord()</code> methods as shown below:</p>\n<pre><code class=\"lang-java\">// Method for starting recording\nprivate void startRecord(){\n\n    CameraMode cameraMode = CameraMode.RecordVideo;\n    final DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null) {\n        camera.startRecordVideo(new DJICompletionCallback(){\n            @Override\n            public void onResult(DJIError error)\n            {\n                if (error == null) {\n                    showToast(&quot;Record video: success&quot;);\n                }else {\n                    showToast(error.getDescription());\n                }\n            }\n        }); // Execute the startRecordVideo API\n    }\n}\n\n// Method for stopping recording\nprivate void stopRecord(){\n\n    DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null) {\n        camera.stopRecordVideo(new DJICompletionCallback(){\n\n            @Override\n            public void onResult(DJIError error)\n            {\n                if(error == null) {\n                    showToast(&quot;Stop recording: success&quot;);\n                }else {\n                    showToast(error.getDescription());\n                }\n            }\n        }); // Execute the stopRecordVideo API\n    }\n\n}</code></pre>\n<p>In the code above, we invoke the <code>startRecordVideo()</code> and <code>stopRecordVideo()</code> methods of DJICamera to implement the start record and stop record features. And show the result messages to our user by override the <code>onResult()</code> methods.</p>\n<p>Lastly, when the video start recording, we should show the recording time info to our users. So let&#39;s add the following code to the bottom of <code>onCreate()</code> method as follows:</p>\n<pre><code class=\"lang-java\">DJICamera camera = FPVDemoApplication.getCameraInstance();\n\n    if (camera != null) {\n        camera.setDJICameraUpdatedSystemStateCallback(new DJICamera.CameraUpdatedSystemStateCallback() {\n            @Override\n            public void onResult(DJICamera.CameraSystemState cameraSystemState) {\n                if (null != cameraSystemState) {\n\n                    int recordTime = cameraSystemState.getCurrentVideoRecordingTimeInSeconds();\n                    int minutes = (recordTime % 3600) / 60;\n                    int seconds = recordTime % 60;\n\n                    final String timeString = String.format(&quot;%02d:%02d&quot;, minutes, seconds);\n                    final boolean isVideoRecording = cameraSystemState.isRecording();\n\n                    MainActivity.this.runOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            recordingTime.setText(timeString);\n                             /*\n                              * Update recordingTime TextView visibility and mRecordBtn&#39;s check state\n                              */\n                                if (isVideoRecording){\n                                    recordingTime.setVisibility(View.VISIBLE);\n                                }else\n                                {\n                                    recordingTime.setVisibility(View.INVISIBLE);\n                                }\n                        }\n                    });\n                }\n            }\n        });\n    }</code></pre>\n<p>Here, we implement the <code>setDJICameraUpdatedSystemStateCallback()</code> of DJICamera and override the <code>onResult()</code> method to get the current camera system state, we can call the <code>getCurrentVideoRecordingTimeInSeconds()</code> method of &quot;DJICamera.CameraSystemState&quot; to get the record time info. Before we show the record time info to our users, we should convert it from seconds to &quot;00:00&quot; format including minutes and seconds. Lastly, we update the TextView <code>recordingTime</code> variable&#39;s text value with the latest record time info and update the visibility of <code>recordingTime</code> TextView in UI Thread.</p>\n<p>For more details, please check the Github source code of this tutorial.</p>\n<p>Now, let&#39;s build and run the project and check the functions. You can try to play with the <strong>Capture</strong>, <strong>Record</strong> and <strong>Switch Camera WorkMode</strong> functions, here is a gif animation to demo these three functions:</p>\n<p>  <img src=\"../images/tutorials-and-samples/Android/FPVDemo/demoAni.gif\" alt=\"demoAni\"></p>\n<p>  Congratulations! Your Aerial FPV android app is complete, you can now use this app to control the camera of your Phantom 3 Professional. </p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you’ve learned how to use DJI Mobile SDK to show the FPV View from the aircraft&#39;s camera and control the camera of DJI&#39;s Aircraft to shoot photo and record video. These are the most basic and common features in a typical drone mobile app: <strong>Capture</strong> and <strong>Record</strong>. However, if you want to create a drone app which is more fancy, you still have a long way to go. More advanced features should be implemented, including previewing the photo and video in the SD Card, showing the OSD data of the aircraft and so on. Hope you enjoy this tutorial, and stay tuned for our next one!</p>","meta":{"title":"Creating a Camera Application","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-FPVDemo"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to implement the DJIWaypoint Mission feature and get familiar with the usages of DJIMissionManager. \nAlso you will know how to setup the DJI PC Simulator, upgrade your Inspire 1, Phantom 3 Professional and Phantom 3 Advanced&#39;s firmware to the lastest version, and how to test the Waypoint Mission API with DJI PC Simulator too. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<blockquote>\n<p>Note: In this tutorial, we will use Inspire 1 for testing, use Android Studio 2.1.1 for developing the demo application, and use the <a href=\"http://lbs.amap.com\" target=\"_blank\">Gaode Map API</a> for navigating.</p>\n</blockquote>\n<h2 id=\"preparation\">Preparation</h2>\n<h3 id=\"download-the-sdk\">Download the SDK</h3>\n<p>You can download the latest Android SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads\">https://developer.dji.com/mobile-sdk/downloads</a></a>.</p>\n<h3 id=\"setup-android-development-environment\">Setup Android Development Environment</h3>\n<p>  Throughout this tutorial we will be using Android Studio 2.1, which you can download from here: <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\"><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></a>.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>We can use the map view to display waypoints and show the flight route of the aircraft when waypoint mission is being executed. Here, we take Gaode Map for an example.</p>\n<h3 id=\"configurating-amap-api-key\">Configurating AMAP API Key</h3>\n<h4 id=\"1-create-the-project\">1. Create the project</h4>\n<p> Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &quot;GSDemo&quot;. Enter the company domain and package name (Here we use &quot;com.dji.GSDemo.GaodeMap&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<h4 id=\"2-generating-sha-1-key\">2. Generating SHA-1 Key</h4>\n<p>We can use Android Studio to generate a SHA-1 Key easily. Click on the <strong>Gradle</strong> tap on the right side of Android Studio. Select the project and navigate to <strong>Tasks -&gt; android -&gt; signingReport</strong>. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/signingReport.png\" alt=\"signingReport\"></p>\n<p>Then double click the <strong>signingReport</strong> and check the Console area of Android Studio, you can find the SHA-1 key easily:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/SHA-1Key.png\" alt=\"SHA1\"></p>\n<h4 id=\"3-applying-for-an-amap-key\">3. Applying for an AMAP Key</h4>\n<p>Now, let&#39;s go to <a href=\"http://lbs.amap.com\" target=\"_blank\">AMAP Developer Platform</a> to apply for an AMAP Key. If it&#39;s your first time go to this website, please register first. Then login with your amap account and press the &quot;+创建新应用&quot; button on the upper right corner. Enter your application&#39;s name and press &quot;创建&quot; to continue. You will see the following screenshot here:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/createApplication.png\" alt=\"createApplication\"></p>\n<p>Next, click the &quot;添加新Key&quot; button on the upper right corner of &quot;GSDemo&quot; Application. Enter the info as you want, for the &quot;发布版安全码：SHA1&quot; and &quot;调试版安全码SHA1&quot; fields, please enter the SHA-1 key we just generate in the above steps. </p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/createAMAPKey.png\" alt=\"createAMAPKey\"></p>\n<blockquote>\n<p>Note: The &quot;Package&quot; should be the same to your Android project&#39;s Package name.</p>\n</blockquote>\n<p> Moreover, press &quot;提交&quot; and you can get your AMAP Key like this:</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/amapKey.png\" alt=\"AMAPKey\"></p>\n<h4 id=\"4-adding-amap-key\">4. Adding AMAP Key</h4>\n<p>Open the AndroidManifest.xml file, add the following elements as childs of <strong><application></strong> element and substitute your AMAP Key for &quot;YOUR _ AMAP_KEY&quot; in the <strong>value</strong> attribute as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!-- 启用高德地图服务 --&gt;\n&lt;meta-data\n    android:name=&quot;com.amap.api.v2.apikey&quot;\n    android:value=&quot;YOUR_AMAP_KEY&quot; /&gt;</code></pre>\n<p>This will set the key &quot;com.amap.api.v2.apikey&quot; to the value of your AMAP key. </p>\n<p>Next, specify the permissions of your application needs, by adding <strong>\\<uses-permission></strong> elements as children of the <strong>\\<manifest></strong> element in the &quot;AndroidManifest.xml&quot; file. </p>\n<pre><code class=\"lang-xml\">   &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_CONFIGURATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_LOCATION_EXTRA_COMMANDS&quot; /&gt;</code></pre>\n<p>For more details of description on the permissions, please refer to <a href=\"http://lbs.amap.com/api/android-sdk/guide/project/\" target=\"_blank\"><a href=\"http://lbs.amap.com/api/android-sdk/guide/project/\">http://lbs.amap.com/api/android-sdk/guide/project/</a></a>.</p>\n<h3 id=\"importing-the-amap-jar-packages\">Importing the AMAP JAR Packages</h3>\n<p>Let&#39;s go to <a href=\"http://lbs.amap.com/api/android-sdk/down/\" target=\"_blank\"><a href=\"http://lbs.amap.com/api/android-sdk/down/\">http://lbs.amap.com/api/android-sdk/down/</a></a> to download the latest version of AMAP Android&#39;s 2D Map SDK and search service SDK as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/amapSDK.png\" alt=\"amapSDK\"></p>\n<p>Once you finish the download, copy the two SDK jar files to the <strong>libs</strong> folder of your Android Studio project: <strong>app-&gt;libs</strong>.</p>\n<p>Then right click on the <strong>app</strong> folder in the project navigator and select &quot;Open Module Settings&quot; to open the &quot;Project Structure&quot; window.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/openModuleSettings.png\" alt=\"openModuleSettings\"></p>\n<p>Next, press the &quot;+&quot; button on the upper left corner of the window and select &quot;Import .JAR/.ARR Package&quot;, and press &quot;Next&quot; button. Moreover, select the amap packages in the &quot;File name&quot; field of the &quot;Create New Module&quot; window as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/selectLibsPackage.png\" alt=\"selectLibsPackage\"></p>\n<p>Then press &quot;Finish&quot; button to import the AMap_2DMap JAR package:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/createNewModule.png\" alt=\"createNewModule\"></p>\n<p>Repeart this process again to import the AMap_Search JAR package. Wait until the Sync Gradle Files finish. If everything goes well, when you open the &quot;build.gradle(Module: app)&quot; file, you should see the two AMap JAR packages included in the &quot;dependencies&quot; part:</p>\n<pre><code class=\"lang-xml\">dependencies {\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:AMap_2DMap_V2.8.1_20160202&#39;)\n    compile project(&#39;:AMap_Search_V3.2.1_20160308&#39;)\n}</code></pre>\n<h3 id=\"importing-the-sdk\">Importing the SDK</h3>\n<p>Unzip the Android SDK package downloaded from <a href=\"http://developer.dji.com/mobile-sdk/downloads/\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/importsSDK.png\" alt=\"importSDK\"></p>\n<p>Next, double click on the &quot;build.gradle(Module: app)&quot; file to open it and add the <code>compile project(&#39;:dJISDKLIB&#39;)</code> at the bottom of <strong>dependencies</strong> part:</p>\n<pre><code class=\"lang-xml\">android {\n    compileSdkVersion 23\n    buildToolsVersion &quot;23.0.2&quot;\n\n    defaultConfig {\n        ...\n        minSdkVersion 19\n        targetSdkVersion 23\n        ...\n\n    }\n    ...\n}\n\ndependencies {\n    ...\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<p>Here we also declare the &quot;compileSdkVersion&quot;, &quot;buildToolsVersion&quot;, &quot;minSdkVersion&quot; and &quot;targetSdkVersion&quot;. </p>\n<p>Now let&#39;s select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p>Now, let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/dependencies.png\" alt=\"dependencies\"></p>\n<h3 id=\"building-the-layouts-of-mainactivity\">Building the Layouts of MainActivity</h3>\n<h4 id=\"1-creating-djidemoapplication-class\">1. Creating DJIDemoApplication Class</h4>\n<p>   Right-click on the package <code>com.dji.GSDemo.GaodeMap</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;DJIDemoApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>   Next, Replace the code of the &quot;DJIDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.GSDemo.GaodeMap;\nimport android.app.Application;\n\npublic class DJIDemoApplication extends Application{\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n}</code></pre>\n<p>   Here, we override the onCreate() method. We can do some settings when the application is created here.</p>\n<h4 id=\"2-creating-the-mainactivity\">2. Creating the MainActivity</h4>\n<h5 id=\"implementing-the-mainactivity-layout\">Implementing the MainActivity Layout</h5>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;\n    android:background=&quot;#FFFFFF&quot;\n    tools:context=&quot;com.dji.GSDemo.GaodeMap.MainActivity&quot;&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;GSDemo&quot;\n            android:gravity=&quot;center&quot;\n            android:textColor=&quot;#000000&quot;\n            android:textSize=&quot;21sp&quot;\n            /&gt;\n    &lt;/LinearLayout&gt;\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/locate&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Locate&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/add&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Add&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/clear&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Clear&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/config&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Config&quot;\n            android:layout_weight=&quot;0.9&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/prepare&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Prepare&quot;\n            android:layout_weight=&quot;0.9&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/start&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Start&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/stop&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Stop&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;com.amap.api.maps2d.MapView\n            android:id=&quot;@+id/map&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;match_parent&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<p>  In the xml file, we implement the following UIs:</p>\n<ol>\n<li><p>Create a LinearLayout to show a TextView with &quot;GSDemo&quot; title and put it on the top.</p>\n</li>\n<li><p>Create two lines of Buttons: &quot;LOCATE&quot;, &quot;ADD&quot;, &quot;CLEAR&quot;, &quot;CONFIG&quot;, &quot;PREPARE&quot;, &quot;START&quot; and &quot;STOP&quot;, place them horizontally.</p>\n</li>\n<li><p>Lastly, we create a map view fragment and place it at the bottom.</p>\n</li>\n</ol>\n<p>Next, copy the &quot;aircraft.png&quot; and &quot;ic_launcher.png&quot; image files from this Github sample project to the <strong>drawable</strong> folders inside the <strong>res</strong> folder.</p>\n<p>Furthermore, open the AndroidManifest.xml file and update the &quot;.MainActivity&quot; activity element with several attributes as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;activity\n            android:name=&quot;.MainActivity&quot;\n            android:configChanges=&quot;orientation|screenSize&quot;\n            android:label=&quot;@string/title_activity_mainactivity&quot;\n            android:screenOrientation=&quot;landscape&quot;\n            android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n&lt;/activity&gt;</code></pre>\n<p>  Now, if you check the &quot;activity_main.xml&quot; file, you should see the preview screenshot of MainActivity as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/mainActivity.png\" alt=\"MainActivity\"></p>\n<p>  Lastly, let&#39;s create a new xml file named &quot;dialog_waypointsetting.xml&quot; in the layout folder by right-clicking on the &quot;layout&quot; folder and select <strong>New-&gt;XML-&gt;Layout XML File</strong>. Then replace the code with the same file in Github Sample Project, since the content is too much, we don&#39;t show them all here.</p>\n<p>This xml file will help to setup a textView to enter &quot;Altitude&quot; and create three RadioButton Groups for selecting <strong>Speed</strong>, <strong>Action After Finished</strong> and <strong>Heading</strong>.</p>\n<p>  Now, if you check the dialog_waypointsetting.xml file, you can see the preview screenshot of Waypoint Configuration Dialog as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/waypointConfig.png\" alt=\"MainActivity\"></p>\n<h5 id=\"working-on-the-mainactivity-class\">Working on the MainActivity Class</h5>\n<p>Let&#39;s come back to the MainActivity.java class, and replace the code with the following, remember to import the related classes as Android Studio suggested:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends FragmentActivity implements View.OnClickListener, OnMapClickListener {\n\n    protected static final String TAG = &quot;MainActivity&quot;;\n\n    private MapView mapView;\n    private AMap aMap;\n\n    private Button locate, add, clear;\n    private Button config, prepare, start, stop;\n\n    @Override\n    protected void onResume(){\n        super.onResume();\n    }\n\n    @Override\n    protected void onPause(){\n        super.onPause();\n    }\n\n    @Override\n    protected void onDestroy(){\n        super.onDestroy();\n    }\n\n    /**\n     * @Description : RETURN BTN RESPONSE FUNCTION\n     */\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    private void initUI() {\n        locate = (Button) findViewById(R.id.locate);\n        add = (Button) findViewById(R.id.add);\n        clear = (Button) findViewById(R.id.clear);\n        config = (Button) findViewById(R.id.config);\n        prepare = (Button) findViewById(R.id.prepare);\n        start = (Button) findViewById(R.id.start);\n        stop = (Button) findViewById(R.id.stop);\n\n        locate.setOnClickListener(this);\n        add.setOnClickListener(this);\n        clear.setOnClickListener(this);\n        config.setOnClickListener(this);\n        prepare.setOnClickListener(this);\n        start.setOnClickListener(this);\n        stop.setOnClickListener(this);\n    }\n\n    private void initMapView() {\n\n        if (aMap == null) {\n            aMap = mapView.getMap();\n            aMap.setOnMapClickListener(this);// add the listener for click for amap object\n        }\n\n        LatLng shenzhen = new LatLng(22.5362, 113.9454);\n        aMap.addMarker(new MarkerOptions().position(shenzhen).title(&quot;Marker in Shenzhen&quot;));\n        aMap.moveCamera(CameraUpdateFactory.newLatLng(shenzhen));\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the\n        // following permissions at runtime to ensure the\n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n\n        mapView = (MapView) findViewById(R.id.map);\n        mapView.onCreate(savedInstanceState);\n\n        initMapView();\n        initUI();\n\n    }\n\n    private void showSettingDialog(){\n        LinearLayout wayPointSettings = (LinearLayout)getLayoutInflater().inflate(R.layout.dialog_waypointsetting, null);\n\n        final TextView wpAltitude_TV = (TextView) wayPointSettings.findViewById(R.id.altitude);\n        RadioGroup speed_RG = (RadioGroup) wayPointSettings.findViewById(R.id.speed);\n        RadioGroup actionAfterFinished_RG = (RadioGroup) wayPointSettings.findViewById(R.id.actionAfterFinished);\n        RadioGroup heading_RG = (RadioGroup) wayPointSettings.findViewById(R.id.heading);\n\n        speed_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){\n\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select Speed finish&quot;);\n            }\n        });\n\n        actionAfterFinished_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select action action&quot;);\n            }\n        });\n\n        heading_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select heading finish&quot;);\n            }\n        });\n\n        new AlertDialog.Builder(this)\n                .setTitle(&quot;&quot;)\n                .setView(wayPointSettings)\n                .setPositiveButton(&quot;Finish&quot;,new DialogInterface.OnClickListener(){\n                    public void onClick(DialogInterface dialog, int id) {\n                    }\n                })\n                .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int id) {\n                        dialog.cancel();\n                    }\n                })\n                .create()\n                .show();\n    }\n\n    @Override\n    public void onClick(View v) {\n        // TODO Auto-generated method stub\n        switch (v.getId()) {\n            case R.id.config:{\n                showSettingDialog();\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n    @Override\n    public void onMapClick(LatLng point) {\n    }\n}</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create MapView and AMap variables and 7 Button member variables for the UI. Then create the <code>initUI()</code> method to init the 7 Button variables and implement their <code>setOnClickListener</code> method and pass &quot;this&quot; as parameter.</p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</p>\n<p><strong>3.</strong> Then invoke the <code>initUI()</code> method to initialize the UI. Then invoke the <code>initMapView()</code> method to create the MapView and add a marker of Shenzhen, China here. So when the Gaode map is loaded, you will see a blue pin tag on Shenzhen, China.</p>\n<p><strong>3.</strong> Implement the <code>showSettingDialog</code> method to show the <strong>Waypoint Configuration</strong> alert dialog and override the <code>onClick()</code> method to show the configuration dialog when press the <strong>Config</strong> button.</p>\n<p>We have gone through a long process to setup the UI of the application. Now, let&#39;s build and run the project and install it in your Android device to test it. Here we use Nexus 5 for testing. If everything goes well, you should see the following gif animation of the application:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/GSDemoAni.gif\" alt=\"p4MissionsUIDemo\"></p>\n<h3 id=\"registering-your-application\">Registering your Application</h3>\n<h4 id=\"1-modifying-androidmanifest-file\">1. Modifying AndroidManifest file</h4>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>1.</strong> Let&#39;s open the AndroidManifest.xml file and add the following elements to it:</p>\n<pre><code class=\"lang-xml\">&lt;uses-feature\n    android:name=&quot;android.hardware.usb.host&quot;\n    android:required=&quot;false&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.accessory&quot;\n    android:required=&quot;true&quot; /&gt;</code></pre>\n<p>Here, because not all Android-powered devices are guaranteed to support the USB accessory and host APIs, include two <uses-feature> elements that declares that your application uses the &quot;android.hardware.usb.accessory&quot; and &quot;android.hardware.usb.host&quot; feature.</p>\n<p>Then add the following elements above the <strong>MainActivity</strong> activity element:</p>\n<pre><code class=\"lang-xml\">    &lt;!-- DJI SDK --&gt;\n\n    &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n    &lt;meta-data\n        android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;Please enter your App Key here.&quot; /&gt;\n\n    &lt;!-- 启用高德地图服务 --&gt;\n    &lt;meta-data\n    android:name=&quot;com.amap.api.v2.apikey&quot;\n    android:value=&quot;YOUR_AMAP_KEY&quot; /&gt;\n\n    &lt;activity\n        android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n        android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n        &lt;/intent-filter&gt;\n\n        &lt;meta-data\n          android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n            android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n    &lt;/activity&gt;\n    &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n    &lt;/service&gt;\n\n    &lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, we enter the <strong>App Key</strong> of the application in the value part of <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute. For more details of the AndroidManifest.xml file, please check the Github source code of the demo project.</p>\n<h4 id=\"2-implementing-djidemoapplication-class\">2. Implementing DJIDemoApplication Class</h4>\n<p>After you finish the steps above, open the DJIDemoApplication.java file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onCreate() {\n    super.onCreate();\n    mHandler = new Handler(Looper.getMainLooper());\n    DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n    @Override\n    public void onGetRegisteredResult(DJIError error) {\n        Log.d(TAG, error == null ? &quot;Success&quot; : error.getDescription());\n        if(error == DJISDKError.REGISTRATION_SUCCESS) {\n            DJISDKManager.getInstance().startConnectionToProduct();\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        } else {\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;register sdk fails, check network is available&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n        Log.e(&quot;TAG&quot;, error.toString());\n    }\n\n    @Override\n    public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n        mProduct = newProduct;\n        if(mProduct != null) {\n            mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n        }\n        notifyStatusChange();\n    }\n};</code></pre>\n<p>Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of DJISDKManagerCallback. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<h2 id=\"implementing-the-waypoint-mission\">Implementing the Waypoint Mission</h2>\n<h3 id=\"locating-aircraft-on-gaode-map\">Locating Aircraft on Gaode Map</h3>\n<p>Before we implementing the waypoint mission feature, we should show the aircraft&#39;s location on Gaode Map and try to zoom in automatically to view the surrounding area of the aircraft.</p>\n<p>Let&#39;s open MainActivity.java file and declare the following variables first:</p>\n<pre><code class=\"lang-java\">private double droneLocationLat = 181, droneLocationLng = 181;\nprivate Marker droneMarker = null;\nprivate DJIFlightController mFlightController;</code></pre>\n<p>Then, since we need to detect the product connection status, we should register a BroadcastReceiver in the <code>onCreate()</code> method and override the <code>onReceive()</code> method of it as shown below:</p>\n<pre><code class=\"lang-java\">\n@Override\nprotected void onDestroy(){\n    super.onDestroy();\n    unregisterReceiver(mReceiver);\n}\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    IntentFilter filter = new IntentFilter();\n    filter.addAction(DJIDemoApplication.FLAG_CONNECTION_CHANGE);\n    registerReceiver(mReceiver, filter);\n\n    mapView = (MapView) findViewById(R.id.map);\n    mapView.onCreate(savedInstanceState);\n\n    initMapView();\n    initUI();\n}\n\nprotected BroadcastReceiver mReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            onProductConnectionChange();\n        }\n    };</code></pre>\n<p>The <code>onReceive()</code> method will be invoked when the DJI Product connection status change, we can us it to update our aircraft&#39;s location.</p>\n<p>Next, let&#39;s implement the <code>initFlightController()</code> method and invoke it inside the <code>onProductConnectionChange()</code> method:</p>\n<pre><code class=\"lang-java\">private void onProductConnectionChange()\n{\n    initFlightController();\n}\n\n private void initFlightController() {\n\n        DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n        if (product != null &amp;&amp; product.isConnected()) {\n            if (product instanceof DJIAircraft) {\n                mFlightController = ((DJIAircraft) product).getFlightController();\n            }\n        }\n\n        if (mFlightController != null) {\n            mFlightController.setUpdateSystemStateCallback(new DJIFlightControllerDelegate.FlightControllerUpdateSystemStateCallback() {\n\n                @Override\n                public void onResult(DJIFlightControllerDataType.DJIFlightControllerCurrentState state) {\n                    droneLocationLat = state.getAircraftLocation().getLatitude();\n                    droneLocationLng = state.getAircraftLocation().getLongitude();\n                    updateDroneLocation();\n\n                }\n            });\n        }\n    }</code></pre>\n<p>In the code above, we firstly check the product connection status with the help of <code>isConnected()</code> method of DJIBaseProduct. Then initialize <code>mFlightController</code> variable and override the <code>onResult()</code> method to invoke <code>updateDroneLocation</code> method. By using the <code>onResult()</code> method, you can get the flight controller current state from the parameter.</p>\n<p>Furthermore, let&#39;s implement the <code>updateDroneLocation()</code> method and invoke it in <code>onClick()</code> method&#39;s locate button click action:</p>\n<pre><code class=\"lang-java\">public static boolean checkGpsCoordinates(double latitude, double longitude) {\n    return (latitude &gt; -90 &amp;&amp; latitude &lt; 90 &amp;&amp; longitude &gt; -180 &amp;&amp; longitude &lt; 180) &amp;&amp; (latitude != 0f &amp;&amp; longitude != 0f);\n}\n\nprivate void updateDroneLocation(){\n\n    LatLng pos = new LatLng(droneLocationLat, droneLocationLng);\n    //Create MarkerOptions object\n    final MarkerOptions markerOptions = new MarkerOptions();\n    markerOptions.position(pos);\n    markerOptions.icon(BitmapDescriptorFactory.fromResource(R.drawable.aircraft));\n\n    runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            if (droneMarker != null) {\n                droneMarker.remove();\n            }\n\n            if (checkGpsCoordinates(droneLocationLat, droneLocationLng)) {\n                droneMarker = aMap.addMarker(markerOptions);\n            }\n        }\n    });\n}\n\n@Override\npublic void onClick(View v) {\n    // TODO Auto-generated method stub\n    switch (v.getId()) {\n        case R.id.locate:{\n            updateDroneLocation();\n            cameraUpdate();\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<p>In the <code>updateDroneLocation()</code> method, we add the drone location marker on Gaode map.</p>\n<p>Finally, let&#39;s implement the <code>camearUpdate()</code> method to move camera and zoom in Gaode Map to the drone&#39;s location:</p>\n<pre><code class=\"lang-java\">private void cameraUpdate(){\n    LatLng pos = new LatLng(droneLocationLat, droneLocationLng);\n    float zoomlevel = (float) 18.0;\n    CameraUpdate cu = CameraUpdateFactory.newLatLngZoom(pos, zoomlevel);\n    aMap.moveCamera(cu);\n}</code></pre>\n<p>Before going forward, you can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-PC-Simulator\">Using DJI PC Simulator</a> for DJI PC Simulator&#39;s basic usage.</p>\n<p>Now, let&#39;s connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable, and then power on the aircraft and the remote controller. Click Display Simulator. You can type in your current location&#39;s latitude and longitude data in the Simulator Config, if you would like. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Next, build and run the project and install it in your Android device and connect it to the remote controller using USB cable.</p>\n<p>Open the DJI PC Simulator on your PC and press the Start Simulation button. If you check the application now, a tiny red aircraft will be shown on the map. If you cannot find the aircraft, press the &quot;LOCATE&quot; button to zoom in to the center of the aircraft on the Map. Here is a gif animation for you to check:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/locateAircraft.gif\" alt=\"locateAircraft\"></p>\n<h3 id=\"adding-waypoint-markers\">Adding Waypoint Markers</h3>\n<p>Since you can see the aircraft clearly on the Gaode map now, you can add <code>Marker</code> on the map to show the waypoints of the Waypoint Mission. Let&#39;s continue to declare the <code>mMarkers</code> variable first:</p>\n<pre><code class=\"lang-java\">private boolean isAdd = false;\nprivate final Map&lt;Integer, Marker&gt; mMarkers = new ConcurrentHashMap&lt;Integer, Marker&gt;();</code></pre>\n<p>Then, implement the <code>onMapClick()</code> and <code>markWaypoint()</code> methods as shown below:</p>\n<pre><code class=\"lang-java\">private void setResultToToast(final String string){\n    MainActivity.this.runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            Toast.makeText(MainActivity.this, string, Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n\n@Override\npublic void onMapClick(LatLng point) {\n    if (isAdd == true){\n        markWaypoint(point);       \n    }else{\n        setResultToToast(&quot;Cannot add waypoint&quot;);\n    }\n}\n\nprivate void markWaypoint(LatLng point){\n    //Create MarkerOptions object\n    MarkerOptions markerOptions = new MarkerOptions();\n    markerOptions.position(point);\n    markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));\n    Marker marker = aMap.addMarker(markerOptions);\n    mMarkers.put(mMarkers.size(), marker);\n}</code></pre>\n<p>Here, the <code>onMapClick()</code> method will be invoked when user tap on the Map View. When user tap on different position of the Map View, we will create a <code>MarkerOptions</code> object and assign the &quot;LatLng&quot; object to it, then invoke &quot;aMap&quot;&#39;s <code>addMarker()</code> method by passing the markerOptions parameter to add the waypoint markers on the Gaode map.</p>\n<p>Finally, let&#39;s implement the <code>onClick()</code> and <code>enableDisableAdd()</code> methods to implement the <strong>ADD</strong> and <strong>CLEAR</strong> actions as shown below:</p>\n<pre><code class=\"lang-java\"> @Override\n public void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.add:{\n            enableDisableAdd();\n            break;\n        }\n        case R.id.clear:{\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    aMap.clear();\n                }\n            });\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        default:\n            break;\n    }\n}\n\nprivate void enableDisableAdd(){\n   if (isAdd == false) {\n      isAdd = true;\n      add.setText(&quot;Exit&quot;);\n   }else{\n      isAdd = false;\n      add.setText(&quot;Add&quot;);\n   }\n }</code></pre>\n<p>Now, let&#39;s try to build and run your application on an Android device and try to add waypoints on the Gaode map. If everything goes well, you should see the following gif animation:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/addWaypointsAni.gif\" alt=\"addWaypointsAni\"></p>\n<h3 id=\"implementing-waypoint-missions\">Implementing Waypoint Missions</h3>\n<h4 id=\"configurating-waypoint-mission\">Configurating Waypoint Mission</h4>\n<p>Before we prepare a Waypoint Mission, we should provide a way for user to configure it, like setting the flying altitude, speed, heading, etc. So let&#39;s declare several variables as shown below firstly:</p>\n<pre><code class=\"lang-java\">private float altitude = 100.0f;\nprivate float mSpeed = 10.0f;\nprivate DJIWaypointMission.DJIWaypointMissionFinishedAction mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.NoAction;\nprivate DJIWaypointMission.DJIWaypointMissionHeadingMode mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.Auto;\n\nprivate DJIWaypointMission mWaypointMission;\nprivate DJIMissionManager mMissionManager;</code></pre>\n<p>Here we declare the <code>altitude</code>, <code>mSpeed</code>, <code>mFinishedAction</code> and <code>mHeadingMode</code> variable and intialize them with default value. Also, we declare the DJIWaypointMission and DJIMissionManager objects for setting up missions.</p>\n<p>Next, replace the code of <code>showSettingDialog()</code> method with the followings:</p>\n<pre><code class=\"lang-java\">private void showSettingDialog(){\n    LinearLayout wayPointSettings = (LinearLayout)getLayoutInflater().inflate(R.layout.dialog_waypointsetting, null);\n\n    final TextView wpAltitude_TV = (TextView) wayPointSettings.findViewById(R.id.altitude);\n    RadioGroup speed_RG = (RadioGroup) wayPointSettings.findViewById(R.id.speed);\n    RadioGroup actionAfterFinished_RG = (RadioGroup) wayPointSettings.findViewById(R.id.actionAfterFinished);\n    RadioGroup heading_RG = (RadioGroup) wayPointSettings.findViewById(R.id.heading);\n\n    speed_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            // TODO Auto-generated method stub\n            if (checkedId == R.id.lowSpeed){\n                mSpeed = 3.0f;\n            } else if (checkedId == R.id.MidSpeed){\n                mSpeed = 5.0f;\n            } else if (checkedId == R.id.HighSpeed){\n                mSpeed = 10.0f;\n            }\n        }\n    });\n\n    actionAfterFinished_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            // TODO Auto-generated method stub\n            Log.d(TAG, &quot;Select finish action&quot;);\n            if (checkedId == R.id.finishNone){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.NoAction;\n            } else if (checkedId == R.id.finishGoHome){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.GoHome;\n            } else if (checkedId == R.id.finishAutoLanding){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.AutoLand;\n            } else if (checkedId == R.id.finishToFirst){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.GoFirstWaypoint;\n            }\n        }\n    });\n\n    heading_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            Log.d(TAG, &quot;Select heading&quot;);\n            if (checkedId == R.id.headingNext) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.Auto;\n            } else if (checkedId == R.id.headingInitDirec) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.UsingInitialDirection;\n            } else if (checkedId == R.id.headingRC) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.ControlByRemoteController;\n            } else if (checkedId == R.id.headingWP) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.UsingWaypointHeading;\n            }\n        }\n    });\n\n    new AlertDialog.Builder(this)\n            .setTitle(&quot;&quot;)\n            .setView(wayPointSettings)\n            .setPositiveButton(&quot;Finish&quot;,new DialogInterface.OnClickListener(){\n                public void onClick(DialogInterface dialog, int id) {\n                    String altitudeString = wpAltitude_TV.getText().toString();\n                    altitude = Integer.parseInt(nulltoIntegerDefault(altitudeString));\n                    Log.e(TAG,&quot;altitude &quot;+altitude);\n                    Log.e(TAG,&quot;speed &quot;+mSpeed);\n                    Log.e(TAG, &quot;mFinishedAction &quot;+mFinishedAction);\n                    Log.e(TAG, &quot;mHeadingMode &quot;+mHeadingMode);\n                    configWayPointMission();\n                }\n\n            })\n            .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                    dialog.cancel();\n                }\n\n            })\n            .create()\n            .show();\n}\n\nString nulltoIntegerDefault(String value){\n    if(!isIntValue(value)) value=&quot;0&quot;;\n    return value;\n}\n\nboolean isIntValue(String val)\n{\n    try {\n        val=val.replace(&quot; &quot;,&quot;&quot;);\n        Integer.parseInt(val);\n    } catch (Exception e) {return false;}\n    return true;\n}</code></pre>\n<p>Here, we implement the <code>setOnCheckedChangeListener()</code> method of &quot;RadioGroup&quot; class and pass different values to the <code>mSpeed</code>, <code>mFinishedAction</code> and <code>mHeadingMode</code> variables based on the item user select. </p>\n<p>For the finished action of DJIWaypointMission, we provide several enum values here:</p>\n<ul>\n<li><p><strong>AutoLand</strong></p>\n<p> The aircraft will land automatically at the last waypoint. </p>\n</li>\n<li><p><strong>ContinuewUntilEnd</strong></p>\n<p>If the user attempts to pull the aircraft back along the flight path as the mission is being executed, the aircarft will move towards the previous waypoint and will continue to do so until there are no more waypoint to move back to or the user has stopped attempting to move the aircraft back. </p>\n</li>\n<li><p><strong>GoFirstWaypoint</strong></p>\n<p>The aircraft will go back to its first waypoint and hover in position. </p>\n</li>\n<li><p><strong>GoHome</strong></p>\n<p>The aicraft will go home when the mission is complete. </p>\n</li>\n<li><p><strong>NoAction</strong></p>\n<p>No further action will be taken on completion of mission. </p>\n</li>\n</ul>\n<p>For the heading mode of DJIWaypointMission, we provide these enum values here:</p>\n<ul>\n<li><p><strong>Auto</strong></p>\n<p>Aircraft&#39;s heading will always be in the direction of flight. </p>\n</li>\n<li><p><strong>ControlByRemoteController</strong></p>\n<p>Aircraft&#39;s heading will be controlled by the remote controller. </p>\n</li>\n<li><p><strong>TowardPointOfInterest</strong></p>\n<p>Aircraft&#39;s heading will always toward point of interest. </p>\n</li>\n<li><p><strong>UsingInitialDirection</strong></p>\n<p>Aircraft&#39;s heading will be set to the initial take-off heading. </p>\n</li>\n<li><p><strong>UsingWaypointHeading</strong></p>\n</li>\n</ul>\n<p>Aircraft&#39;s heading will be set to the previous waypoint&#39;s heading while travelling between waypoints. </p>\n<p>Now, let&#39;s continue to implement the <code>configWayPointMission()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">private void configWayPointMission(){\n\n    if (mWaypointMission != null){\n        mWaypointMission.finishedAction = mFinishedAction;\n        mWaypointMission.headingMode = mHeadingMode;\n        mWaypointMission.autoFlightSpeed = mSpeed;\n\n        if (mWaypointMission.waypointsList.size() &gt; 0){\n            for (int i=0; i&lt; mWaypointMission.waypointsList.size(); i++){\n                mWaypointMission.getWaypointAtIndex(i).altitude = altitude;\n            }\n            setResultToToast(&quot;Set Waypoint altitude success&quot;);\n        }\n   }\n}</code></pre>\n<p>  In the code above, we check if <code>mWaypointMission</code> is null and set its <code>finishedAction</code>, <code>headingMode</code> and <code>autoFlightSpeed</code> variables of DJIWaypointMission.   Then we use a for loop to set the DJIWaypoint&#39;s altitude of DJIWaypointMission&#39;s waypointsList. </p>\n<h4 id=\"prepare-waypoint-mission\">Prepare Waypoint Mission</h4>\n<p>  Now, let&#39;s initialize the <code>mMissionManager</code> and <code>mWaypointMission</code> variables by implementing the <code>initMissionManager()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">private void initMissionManager() {\n    DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n\n    if (product == null || !product.isConnected()) {\n        setResultToToast(&quot;Product Not Connected&quot;);\n        mMissionManager = null;\n        return;\n    } else {\n\n        setResultToToast(&quot;Product Connected&quot;);\n        mMissionManager = product.getMissionManager();\n        mMissionManager.setMissionProgressStatusCallback(this);\n        mMissionManager.setMissionExecutionFinishedCallback(this);\n    }\n\n    mWaypointMission = new DJIWaypointMission();\n}\n\n@Override\npublic void missionProgressStatus(DJIMission.DJIMissionProgressStatus progressStatus) {\n\n}\n\n@Override\npublic void onResult(DJIError error) {\n    setResultToToast(&quot;Execution finished: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n\n}</code></pre>\n<p>Here, we check the product connection status first and invoke DJIBaseProduct&#39;s <code>getMissionManager()</code> method to initialize <code>mMissionmanager</code> variable. Next, invoke the <code>setMissionProgressStatusCallback()</code> and <code>setMissionExecutionFinishedCallback()</code> methods of DJIMissionManager and implement the two callback methods of DJIMissionManager. We should also implement the <code>DJIMissionManager.MissionProgressStatusCallback</code> and <code>DJIBaseComponent.DJICompletionCallback</code> interfaces for the MainActivity class on top.</p>\n<p>We can get the mission execution status from the <code>missionProgressStatus()</code> callback, and check the mission execution result from the <code>onResult()</code> callback method.</p>\n<p>Moreover, we should invoke the <code>initMissionManager()</code> method in the following two methods:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onResume(){\n    super.onResume();\n    initFlightController();\n    initMissionManager();\n}\n\nprivate void onProductConnectionChange()\n{\n    initFlightController();\n    initMissionManager();\n}</code></pre>\n<p>When user resume the application and the product connection change, we should both call the <code>iniMissionManager()</code> to do initialization work.</p>\n<p>Furthermore, let&#39;s implement the prepare mission action and addWaypoint action of DJIWaypointMission as shown below:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onMapClick(LatLng point) {\n    if (isAdd){\n        markWaypoint(point);\n        DJIWaypoint mWaypoint = new DJIWaypoint(point.latitude, point.longitude, altitude);\n        //Add waypoints to Waypoint arraylist;\n        if (mWaypointMission != null) {\n            mWaypointMission.addWaypoint(mWaypoint);\n            setResultToToast(&quot;AddWaypoint&quot;);\n        }\n    }else{\n        setResultToToast(&quot;Cannot add waypoint&quot;);\n    }\n}\n\nprivate void prepareWayPointMission(){\n\n    if (mMissionManager != null &amp;&amp; mWaypointMission != null) {\n\n        DJIMission.DJIMissionProgressHandler progressHandler = new DJIMission.DJIMissionProgressHandler() {\n            @Override\n            public void onProgress(DJIMission.DJIProgressType type, float progress) {\n            }\n        };\n\n        mMissionManager.prepareMission(mWaypointMission, progressHandler, new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(error == null ? &quot;Success&quot; : error.getDescription());\n            }\n        });\n    }\n}</code></pre>\n<p>Actually, we can get the mission preparation progress by overriding the <code>onProgress()</code> method of DJIMissionProgressHandler. Lastly, let&#39;s add the <code>R.id.prepare</code> case checking in the <code>onClick()</code> method:</p>\n<pre><code class=\"lang-java\">case R.id.prepare:{\n    prepareWayPointMission();\n    break;\n}</code></pre>\n<h4 id=\"start-and-stop-mission\">Start and Stop Mission</h4>\n<p>Once the mission finish preparation, we can invoke the <code>startMissionExecution()</code> and <code>stopMissionExecution()</code> methods of DJIMissionManager to implement the start and stop mission feature as shown below:</p>\n<pre><code class=\"lang-java\">private void startWaypointMission(){\n\n    if (mMissionManager != null) {\n        mMissionManager.startMissionExecution(new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(&quot;Start: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n            }\n        });\n    }\n}\n\nprivate void stopWaypointMission(){\n\n    if (mMissionManager != null) {\n        mMissionManager.stopMissionExecution(new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(&quot;Stop: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n            }\n        });\n\n        if (mWaypointMission != null){\n            mWaypointMission.removeAllWaypoints();\n        }\n    }\n}</code></pre>\n<p>Lastly, let&#39;s improve the <code>onClick()</code> method to improve the <strong>clear</strong> button action and implement the <strong>start</strong> and <strong>stop</strong> button actions:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.locate:{\n            updateDroneLocation();\n            cameraUpdate(); // Locate the drone&#39;s place\n            break;\n        }\n        case R.id.add:{\n            enableDisableAdd();\n            break;\n        }\n        case R.id.clear:{\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    aMap.clear();\n                }\n            });\n            if (mWaypointMission != null){\n                mWaypointMission.removeAllWaypoints(); // Remove all the waypoints added to the task\n            }\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        case R.id.prepare:{\n            prepareWayPointMission();\n            break;\n        }\n        case R.id.start:{\n            startWaypointMission();\n            break;\n        }\n        case R.id.stop:{\n            stopWaypointMission();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<h2 id=\"test-waypoint-mission-with-dji-pc-simulator\">Test Waypoint Mission with DJI PC Simulator</h2>\n<p>You&#39;ve come a long way in this tutorial, and it&#39;s time to test the whole application.</p>\n<p><strong>Important</strong>: Make sure the battery level of your aircraft is more than 10%, otherwise the waypoint mission may fail!</p>\n<p>Build and run the project to install the application into your android device. After that, please connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable. Then, power on the remote controller and the aircraft, in that order.</p>\n<p>Next, press the <strong>Display Simulator</strong> button in the DJI PC Simulator and feel free to type in your current location&#39;s latitude and longitude data into the simulator.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Then connect your android device to the remote controller using USB cable and run the application. Go back to the DJI PC Simulator on your PC and press the <strong>Start Simulation</strong> button. A tiny red aircraft will appear on the map in your application,  if you press the <strong>LOCATE</strong> button, the map view will zoom in to the region you are in and will center the aircraft:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/locateAircraft.gif\" alt=\"locateAircraft\"></p>\n<p>Next, press the <strong>Add</strong> button and tap on the Map where you want to add waypoints, as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/addWaypointsAni.gif\" alt=\"addWaypointsAni\"></p>\n<p>Once you press the <strong>CONFIG</strong> button, the <strong>Waypoint Configuration</strong> dialog will appear. Modify the settings as you want and press <strong>Finish</strong> button. Then press the <strong>PREPARE</strong> button to prepare the mission.</p>\n<p>If prepare mission failed, you may see the following screenshot:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/prepareMissionFail.png\" alt=\"prepareMissionFail\"></p>\n<p><strong>Important</strong>: To fix this problem, please switch the Remote Controller&#39;s mode selection to the <strong>F</strong> position and press <strong>PREPARE</strong> button to try again. If the mode selection bar is in the F position when the autopilot is powered on, the user must toggle back and forth between <strong>F</strong> and another position and then try again.</p>\n<p>You are required to be in the <strong>F</strong> position when using the DJIWaypoint Mission of DJI Mobile SDK.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/switchFlightModes.png\" alt=\"switchFlightMode\"></p>\n<p>If prepare mission success, press the <strong>START</strong> button to start the waypoint mission execution.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/prepareMission.gif\" alt=\"prepareMission\">  </p>\n<p>Now you will should see the aircraft move towards the waypoints you set previously on the map view, as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/startMission.gif\" alt=\"startMission\"></p>\n<p>At the same time, you are able to see the Inspire 1 take off and start to fly in the DJI PC Simulator.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/takeOff.gif\" alt=\"flyingInSimulator\"></p>\n<p>When the waypoint mission finishes, an &quot;Execution finished: Success!&quot; message will appear and the Inspire 1 will start to go home!</p>\n<p>Also, the remote controller will start beeping, and the <strong>Go Home</strong> button on the remote controller will start to flash a white light. Let&#39;s take a look at the DJI PC Simulator now:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/landing.gif\" alt=\"landing\"></p>\n<p>The inspire 1 will eventually go home, land, and the beeping from the remote controller will stop. The application will go back to its normal status. If you press the <strong>CLEAR</strong> button, all the waypoints you previously set will be cleared. During the mission, if you&#39;d ever like to stop the DJIWaypoint mission, you can do so by pressing the <strong>STOP</strong> button.</p>\n<h3 id=\"summary\">Summary</h3>\n<p> In this tutorial, you’ve learned how to setup and use the DJI PC Simulator to test your waypoint mission application, upgrade your aircraft&#39;s firmware to the developer version, use the DJI Mobile SDK to create a simple map view, modify annotations of the map view, show the aircraft on the map view by using GPS data from the DJI PC Simulator. Next, you learned how to configure <strong>DJIWaypoint</strong> parameters, how to add waypoints to <strong>DJIWaypointMission</strong>. Moreover, you learned how to use DJIMissionManager to <strong>prepare</strong>, <strong>start</strong> and <strong>stop</strong> missions. </p>\n<p>   Congratulations! Now that you&#39;ve finished the demo project, you can build on what you&#39;ve learned and start to build your own waypoint mission application. You can improve the method which waypoints are added(such as drawing a line on the map and generating waypoints automatically), play around with the properties of a waypoint (such as heading, etc.), and adding more functionality. In order to make a cool waypoint mission application, you still have a long way to go. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a MapView and Waypoint Application","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-GSDemo-Gaode-Map"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to implement the DJIWaypoint Mission feature and get familiar with the usages of DJIMissionManager. </p>\n<p>Also you will know how to setup the DJI PC Simulator, upgrade your Inspire 1, Phantom 3 Professional and Phantom 3 Advanced&#39;s firmware to the lastest version, and how to test the Waypoint Mission API with DJI PC Simulator too. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<blockquote>\n<p>Note: In this tutorial, we will use Inspire 1 for testing, use Android Studio 2.1.1 for developing the demo application, and use the <a href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Map API</a> for navigating.</p>\n</blockquote>\n<h2 id=\"preparation\">Preparation</h2>\n<h3 id=\"download-the-sdk\">Download the SDK</h3>\n<p>You can download the latest Android SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads\">https://developer.dji.com/mobile-sdk/downloads</a></a>.</p>\n<h3 id=\"setup-android-development-environment\">Setup Android Development Environment</h3>\n<p>  Throughout this tutorial we will be using Android Studio 2.1, which you can download from here: <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\"><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></a>.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>We can use the map view to display waypoints and show the flight route of the aircraft when waypoint mission is being executed. Here, we take Google Map for an example.</p>\n<h3 id=\"configurating-android-api-key\">Configurating Android API Key</h3>\n<h4 id=\"1-create-the-project\">1. Create the project</h4>\n<p> Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &quot;GSDemo&quot;. Enter the company domain and package name (Here we use &quot;com.dji.GSDemo.GoogleMap&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<h4 id=\"2-setting-up-google-play-services\">2. Setting Up Google Play Services</h4>\n<p>You can learn to install and set up the Google Play services SDK by referring to the setup guide presented in: <a href=\"https://developers.google.com/android/guides/setup\" target=\"_blank\"><a href=\"https://developers.google.com/android/guides/setup\">https://developers.google.com/android/guides/setup</a></a>.</p>\n<p>The <strong>Google Maps Android API</strong> is included in the Google Play Services Package. You can install the Google Play services SDK by using <strong>Android SDK Manager</strong> as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/installGooglePlayServices.png\" alt=\"installGooglePlayService\"></p>\n<p>After Google Play Services Package is installed. Open <strong>AndroidManifest.xml</strong> file of your app and add the following element as a child of the <strong>\\<application></strong> element:</p>\n<pre><code class=\"lang-xml\">    &lt;meta-data android:name=&quot;com.google.android.gms.version&quot;\n        android:value=&quot;@integer/google_play_services_version&quot; /&gt;</code></pre>\n<p>You can now start using the Google Maps Android APIs to develop your app.</p>\n<h4 id=\"3-generating-sha-1-key\">3. Generating SHA-1 Key</h4>\n<p>We can use Android Studio to generate a SHA-1 Key easily. Click on the <strong>Gradle</strong> tap on the right side of Android Studio. Select the project and navigate to <strong>Tasks -&gt; android -&gt; signingReport</strong>. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/signingReport.png\" alt=\"signingReport\"></p>\n<p>Then double click the <strong>signingReport</strong> and check the Console area of Android Studio, you can find the SHA-1 key easily:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/SHA-1Key.png\" alt=\"SHA1\"></p>\n<h4 id=\"4-applying-for-an-android-api-key\">4. Applying for an Android API Key</h4>\n<p>Now, let&#39;s go to <a href=\"https://console.developers.google.com/apis\" target=\"_blank\">Google Developer Console</a> to apply for an Android API Key. Login with your Google account and select the <strong>Credentials</strong> tap on the left side of <strong>API Manager</strong>. You will see the following screenshot here:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/createCredentials.png\" alt=\"CreateCredentials\"></p>\n<p> Press the <strong>Create credentials</strong> button and select <strong>API Key -&gt; Android Key</strong> to create an Android Key. Follow the screenshot below to fill in the content with your generated &quot;SHA-1 Key&quot; in the above steps:</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/createAndroidAPIKeys.png\" alt=\"AndroidKey\"></p>\n<blockquote>\n<p>Note: The &quot;Package name&quot; should be the same to your Android project&#39;s Package name.</p>\n</blockquote>\n<p> Then press &quot;create&quot; and you can get your Android API Key like this:</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/androidAPIKeys.png\" alt=\"AndroidAPIKey\"></p>\n<p> Finally, we should enable the <strong>Google Maps Android API</strong> as a service for your project too. Please tap on the <strong>Overview</strong> tab on the left side and select the &quot;Google Maps Android API&quot; item. Then press &quot;Enable&quot; button to enable the API as you seen below:</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/enableMapsAPI.png\" alt=\"EnableMapsAPI\"></p>\n<h4 id=\"5-adding-android-api-key\">5. Adding Android API Key</h4>\n<p>Open the AndroidManifest.xml file, add the following elements as childs of <strong><application></strong> element and substitute your Android API Key for &quot;YOUR _ API_KEY&quot; in the <strong>value</strong> attribute as shown below:</p>\n<pre><code class=\"lang-xml\">    &lt;meta-data\n        android:name=&quot;com.google.android.geo.API_KEY&quot;\n        android:value=&quot;YOUR_API_KEY&quot; /&gt;\n    &lt;meta-data\n       android:name=&quot;com.google.android.gms.version&quot;\n       android:value=&quot;@integer/google_play_services_version&quot; /&gt;</code></pre>\n<p>The first element sets the key &quot;com.google.android.geo.API_KEY&quot; to the value of your API key. The second one set the google play services version number.</p>\n<p>Moreover, specify the permissions of your application needs, by adding <strong>\\<uses-permission></strong> elements as children of the <strong>\\<manifest></strong> element in the &quot;AndroidManifest.xml&quot; file. </p>\n<pre><code class=\"lang-xml\"> &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_CONFIGURATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;</code></pre>\n<p>Finally, we need to specify requirement for OpenGL ES version 2 by adding the following element inside the &quot;manifest&quot; element:</p>\n<pre><code class=\"lang-xml\">   &lt;uses-feature\n        android:glEsVersion=&quot;0x00020000&quot;\n        android:required=&quot;true&quot; /&gt;</code></pre>\n<p>For more details of description on the permissions, refer to <a href=\"https://developers.google.com/maps/documentation/android/config\" target=\"_blank\"><a href=\"https://developers.google.com/maps/documentation/android/config\">https://developers.google.com/maps/documentation/android/config</a></a>.</p>\n<h4 id=\"6-adding-multidex-support-with-gradle\">6. Adding Multidex Support with Gradle</h4>\n<p>In order to use Google Play Service in our project, we need to add Multidex support to avoid the the 64K limit with Gradle.</p>\n<p>Modify the module-level <code>build.gradle</code> file configuration to include the support library and enable multidex output in both <strong>defaultConfig</strong> and <strong>dependencies</strong> parts, as shown in the following code snippet:</p>\n<pre><code class=\"lang-xml\">android {\n    compileSdkVersion 23\n    buildToolsVersion &quot;23.0.2&quot;\n\n    defaultConfig {\n        ...\n        minSdkVersion 19\n        targetSdkVersion 23\n        ...\n\n        // Enabling multidex support.\n        multiDexEnabled true\n    }\n    ...\n}\n\ndependencies {\n  ...\n  compile &#39;com.google.android.gms:play-services:8.4.0&#39;\n  compile &#39;com.android.support:multidex:1.0.1&#39;\n}</code></pre>\n<p>In the code above, we declare the &quot;compileSdkVersion&quot;, &quot;buildToolsVersion&quot;, &quot;minSdkVersion&quot; and &quot;targetSdkVersion&quot;. Furthermore, we add the <code>compile &#39;com.google.android.gms:play-services:8.4.0&#39;</code> to the &quot;dependencies&quot; to support google play service.</p>\n<p>Then select <strong>Tools-&gt;Android-&gt;Sync Project with Gradle Files</strong> to sync the gradle files.</p>\n<p>For more details about configuring your App for Multidex with Gradle, please check this link: <a href=\"http://developer.android.com/tools/building/multidex.html\" target=\"_blank\"><a href=\"http://developer.android.com/tools/building/multidex.html\">http://developer.android.com/tools/building/multidex.html</a></a>.</p>\n<h3 id=\"importing-the-sdk\">Importing the SDK</h3>\n<p>Unzip the Android SDK package downloaded from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/importsSDK.png\" alt=\"importSDK\"></p>\n<p>Next, double click on the &quot;build.gradle(Module: app)&quot; file to open it and add the <code>compile project(&#39;:dJISDKLIB&#39;)</code> at the bottom of <strong>dependencies</strong> part:</p>\n<pre><code class=\"lang-xml\">dependencies {\n    ...\n    compile &#39;com.google.android.gms:play-services:8.4.0&#39;\n    compile &#39;com.android.support:multidex:1.0.1&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<p>Like we do before, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p>Now, let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/dependencies.png\" alt=\"dependencies\"></p>\n<h3 id=\"building-the-layouts-of-mainactivity\">Building the Layouts of MainActivity</h3>\n<h4 id=\"1-creating-djidemoapplication-class\">1. Creating DJIDemoApplication Class</h4>\n<p>   Right-click on the package <code>com.dji.GSDemo.GoogleMap</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;DJIDemoApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>   Next, Replace the code of the &quot;DJIDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.GSDemo.GoogleMap;\nimport android.app.Application;\n\npublic class DJIDemoApplication extends Application{\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n\n    protected void attachBaseContext(Context base){\n        super.attachBaseContext(base);\n        MultiDex.install(this);\n    }\n}</code></pre>\n<p>   Here, we override the <code>onCreate()</code> method. and implement the <code>attachBaseContext()</code> method to install the multiDex. We can do some settings when the application is created here.</p>\n<h4 id=\"2-creating-the-mainactivity\">2. Creating the MainActivity</h4>\n<h5 id=\"implementing-the-mainactivity-layout\">Implementing the MainActivity Layout</h5>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;\n    android:background=&quot;#FFFFFF&quot;\n    tools:context=&quot;com.dji.GSDemo.GoogleMap.MainActivity&quot;&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;GSDemo&quot;\n            android:gravity=&quot;center&quot;\n            android:textColor=&quot;#000000&quot;\n            android:textSize=&quot;21sp&quot;\n            /&gt;\n    &lt;/LinearLayout&gt;\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/locate&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Locate&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/add&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Add&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/clear&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Clear&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/config&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Config&quot;\n            android:layout_weight=&quot;0.9&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/prepare&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Prepare&quot;\n            android:layout_weight=&quot;0.9&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/start&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Start&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/stop&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Stop&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;fragment\n        android:id=&quot;@+id/map&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;\n        class=&quot;com.google.android.gms.maps.SupportMapFragment&quot; /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<p>  In the xml file, we implement the following UIs:</p>\n<ol>\n<li><p>Create a LinearLayout to show a TextView with &quot;GSDemo&quot; title and put it on the top.</p>\n</li>\n<li><p>Create two lines of Buttons: &quot;LOCATE&quot;, &quot;ADD&quot;, &quot;CLEAR&quot;, &quot;CONFIG&quot;, &quot;PREPARE&quot;, &quot;START&quot; and &quot;STOP&quot;, place them horizontally.</p>\n</li>\n<li><p>Lastly, we create a map view fragment and place it at the bottom.</p>\n</li>\n</ol>\n<p>Next, copy the &quot;aircraft.png&quot; and &quot;ic_launcher.png&quot; image files from this Github sample project to the <strong>drawable</strong> folders inside the <strong>res</strong> folder.</p>\n<p>Furthermore, open the AndroidManifest.xml file and update the &quot;.MainActivity&quot; activity element with several attributes as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;activity\n            android:name=&quot;.MainActivity&quot;\n            android:configChanges=&quot;orientation|screenSize&quot;\n            android:label=&quot;@string/title_activity_mainactivity&quot;\n            android:screenOrientation=&quot;landscape&quot;\n            android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n&lt;/activity&gt;</code></pre>\n<p>  Moreover, open the &quot;strings.xml&quot; file in <strong>values</strong> folder and add the following string content:</p>\n<pre><code class=\"lang-xml\">    &lt;string name=&quot;title_activity_demo&quot;&gt;GSDemoActivity&lt;/string&gt;\n    &lt;string name=&quot;google_app_id&quot;&gt;Google_App_ID_String&lt;/string&gt;</code></pre>\n<p>  Please enter your &quot;Google APP ID&quot; in the &quot;Google<em> App</em> ID_String&quot; value part.</p>\n<p>  Now, if you check the &quot;activity_main.xml&quot; file, you should see the preview screenshot of MainActivity as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/mainActivity.png\" alt=\"MainActivity\"></p>\n<p>  Lastly, let&#39;s create a new xml file named &quot;dialog_waypointsetting.xml&quot; in the layout folder by right-clicking on the &quot;layout&quot; folder and select <strong>New-&gt;XML-&gt;Layout XML File</strong>. Then replace the code with the same file in Github Sample Project, since the content is too much, we don&#39;t show them all here.</p>\n<p>This xml file will help to setup a textView to enter &quot;Altitude&quot; and create three RadioButton Groups for selecting <strong>Speed</strong>, <strong>Action After Finished</strong> and <strong>Heading</strong>.</p>\n<p>  Now, if you check the dialog_waypointsetting.xml file, you can see the preview screenshot of Waypoint Configuration Dialog as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/waypointConfig.png\" alt=\"MainActivity\"></p>\n<h5 id=\"working-on-the-mainactivity-class\">Working on the MainActivity Class</h5>\n<p>Let&#39;s come back to the MainActivity.java class, and replace the code with the following, remember to import the related classes as Android Studio suggested:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends FragmentActivity implements View.OnClickListener, GoogleMap.OnMapClickListener, OnMapReadyCallback {\n\n    protected static final String TAG = &quot;MainActivity&quot;;\n    private GoogleMap gMap;\n    private Button locate, add, clear;\n    private Button config, prepare, start, stop;\n\n    @Override\n    protected void onResume(){\n        super.onResume();\n    }\n\n    @Override\n    protected void onPause(){\n        super.onPause();\n    }\n\n    @Override\n    protected void onDestroy(){\n        super.onDestroy();\n    }\n\n    /**\n     * @Description : RETURN BTN RESPONSE FUNCTION\n     */\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    private void initUI() {\n        locate = (Button) findViewById(R.id.locate);\n        add = (Button) findViewById(R.id.add);\n        clear = (Button) findViewById(R.id.clear);\n        config = (Button) findViewById(R.id.config);\n        prepare = (Button) findViewById(R.id.prepare);\n        start = (Button) findViewById(R.id.start);\n        stop = (Button) findViewById(R.id.stop);\n\n        locate.setOnClickListener(this);\n        add.setOnClickListener(this);\n        clear.setOnClickListener(this);\n        config.setOnClickListener(this);\n        prepare.setOnClickListener(this);\n        start.setOnClickListener(this);\n        stop.setOnClickListener(this);\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the\n        // following permissions at runtime to ensure the\n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n        initUI();\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                .findFragmentById(R.id.map);\n        mapFragment.getMapAsync(this);\n\n    }\n\n    private void showSettingDialog(){\n        LinearLayout wayPointSettings = (LinearLayout)getLayoutInflater().inflate(R.layout.dialog_waypointsetting, null);\n\n        final TextView wpAltitude_TV = (TextView) wayPointSettings.findViewById(R.id.altitude);\n        RadioGroup speed_RG = (RadioGroup) wayPointSettings.findViewById(R.id.speed);\n        RadioGroup actionAfterFinished_RG = (RadioGroup) wayPointSettings.findViewById(R.id.actionAfterFinished);\n        RadioGroup heading_RG = (RadioGroup) wayPointSettings.findViewById(R.id.heading);\n\n        speed_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){\n\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select Speed finish&quot;);\n            }\n        });\n\n        actionAfterFinished_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select action action&quot;);\n            }\n        });\n\n        heading_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select heading finish&quot;);\n            }\n        });\n\n        new AlertDialog.Builder(this)\n                .setTitle(&quot;&quot;)\n                .setView(wayPointSettings)\n                .setPositiveButton(&quot;Finish&quot;,new DialogInterface.OnClickListener(){\n                    public void onClick(DialogInterface dialog, int id) {\n                    }\n                })\n                .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int id) {\n                        dialog.cancel();\n                    }\n                })\n                .create()\n                .show();\n    }\n\n    @Override\n    public void onClick(View v) {\n        // TODO Auto-generated method stub\n        switch (v.getId()) {\n            case R.id.config:{\n                showSettingDialog();\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n    @Override\n    public void onMapReady(GoogleMap googleMap) {\n        // TODO Auto-generated method stub\n        // Initializing Amap object\n        if (gMap == null) {\n            gMap = googleMap;\n            setUpMap();\n        }\n\n        LatLng Shenzhen = new LatLng(22.5500, 114.1000);\n        gMap.addMarker(new MarkerOptions().position(Shenzhen).title(&quot;Marker in Shenzhen&quot;));\n        gMap.moveCamera(CameraUpdateFactory.newLatLng(Shenzhen));\n    }\n\n    private void setUpMap() {\n        gMap.setOnMapClickListener(this);// add the listener for click for amap object\n    }\n\n    @Override\n    public void onMapClick(LatLng point) {\n    }\n}</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create a GoogleMap variable and 7 Button member variables for the UI. Then create the <code>initUI()</code> method to init the 7 Button variables and implement their <code>setOnClickListener</code> method and pass &quot;this&quot; as parameter.</p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</p>\n<p><strong>3.</strong> Then invoke <code>initUI()</code> method and create &quot;SupportMapFragment&quot; variable to call the <code>OnMapReady()</code> method asynchronously.</p>\n<p><strong>4.</strong> Implement the <code>showSettingDialog</code> method to show the <strong>Waypoint Configuration</strong> alert dialog and override the <code>onClick()</code> method to show the configuration dialog when press the <strong>Config</strong> button.</p>\n<p><strong>5.</strong> Lastly, we override the <code>onMapReady()</code> method to initialize the <code>gMap</code> and invoke <code>setUpMap()</code> method to implement the <code>setOnMapClickListener()</code> method of <code>gMap</code> variable. Then add a marker of Shenzhen, China here for example. So when the Google map is loaded, you will see a red pin tag on Shenzhen, China.</p>\n<p>For more details, please check the Github Sample Project. If you are not familiar with adding a Google map to your application, please follow this <a href=\"https://developers.google.com/maps/documentation/android-api/utility/setup#library-dependency\" target=\"_blank\">guide</a>. </p>\n<p>We have gone through a long process to setup the UI of the application. Now, let&#39;s build and run the project and install it in your Android device to test it. Here we use Nexus 5 for testing. If everything goes well, you should see the following gif animation of the application:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/GSDemoAni.gif\" alt=\"p4MissionsUIDemo\"></p>\n<h3 id=\"registering-your-application\">Registering your Application</h3>\n<h4 id=\"1-modifying-androidmanifest-file\">1. Modifying AndroidManifest file</h4>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>1.</strong> Let&#39;s open the AndroidManifest.xml file and add the following elements to it:</p>\n<pre><code class=\"lang-xml\">&lt;uses-feature\n    android:name=&quot;android.hardware.usb.host&quot;\n    android:required=&quot;false&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.accessory&quot;\n    android:required=&quot;true&quot; /&gt;</code></pre>\n<p>Here, because not all Android-powered devices are guaranteed to support the USB accessory and host APIs, include two <uses-feature> elements that declares that your application uses the &quot;android.hardware.usb.accessory&quot; and &quot;android.hardware.usb.host&quot; feature.</p>\n<p>Then add the following elements above the <strong>MainActivity</strong> activity element:</p>\n<pre><code class=\"lang-xml\">    &lt;!-- DJI SDK --&gt;\n\n    &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n    &lt;meta-data\n        android:name=&quot;com.dji.sdk.API_KEY&quot;\n        android:value=&quot;Please enter your App Key here.&quot; /&gt;\n    &lt;meta-data\n        android:name=&quot;com.google.android.geo.API_KEY&quot;\n        android:value=&quot;YOUR_API_KEY&quot; /&gt;\n     &lt;meta-data\n     android:name=&quot;com.google.android.gms.version&quot;\n     android:value=&quot;@integer/google_play_services_version&quot; /&gt;\n\n    &lt;activity\n        android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n        android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n        &lt;/intent-filter&gt;\n\n        &lt;meta-data\n          android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n            android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n    &lt;/activity&gt;\n    &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n    &lt;/service&gt;\n\n    &lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, we enter the <strong>App Key</strong> of the application in the value part of <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute. For more details of the AndroidManifest.xml file, please check the Github source code of the demo project.</p>\n<h4 id=\"2-implementing-djidemoapplication-class\">2. Implementing DJIDemoApplication Class</h4>\n<p>After you finish the steps above, open the DJIDemoApplication.java file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onCreate() {\n    super.onCreate();\n    mHandler = new Handler(Looper.getMainLooper());\n    DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n    @Override\n    public void onGetRegisteredResult(DJIError error) {\n        Log.d(TAG, error == null ? &quot;Success&quot; : error.getDescription());\n        if(error == DJISDKError.REGISTRATION_SUCCESS) {\n            DJISDKManager.getInstance().startConnectionToProduct();\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        } else {\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;register sdk fails, check network is available&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n        Log.e(&quot;TAG&quot;, error.toString());\n    }\n\n    @Override\n    public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n        mProduct = newProduct;\n        if(mProduct != null) {\n            mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n        }\n        notifyStatusChange();\n    }\n};</code></pre>\n<p>  Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of DJISDKManagerCallback. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<h2 id=\"implementing-the-waypoint-mission\">Implementing the Waypoint Mission</h2>\n<h3 id=\"locating-aircraft-on-google-map\">Locating Aircraft on Google Map</h3>\n<p>Before we implementing the waypoint mission feature, we should show the aircraft&#39;s location on Google Map and try to zoom in automatically to view the surrounding area of the aircraft.</p>\n<p>Let&#39;s open MainActivity.java file and declare the following variables first:</p>\n<pre><code class=\"lang-java\">private double droneLocationLat = 181, droneLocationLng = 181;\nprivate Marker droneMarker = null;\nprivate DJIFlightController mFlightController;</code></pre>\n<p>Then, since we need to detect the product connection status, we should register a BroadcastReceiver in the <code>onCreate()</code> method and override the <code>onReceive()</code> method of it as shown below:</p>\n<pre><code class=\"lang-java\">\n@Override\nprotected void onDestroy(){\n    super.onDestroy();\n    unregisterReceiver(mReceiver);\n}\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //Register BroadcastReceiver\n        IntentFilter filter = new IntentFilter();\n        filter.addAction(DJIDemoApplication.FLAG_CONNECTION_CHANGE);\n        registerReceiver(mReceiver, filter);\n\n        initUI();\n\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                .findFragmentById(R.id.map);\n\n        mapFragment.getMapAsync(this);\n    }\n\nprotected BroadcastReceiver mReceiver = new BroadcastReceiver() {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            onProductConnectionChange();\n        }\n    };</code></pre>\n<p>The <code>onReceive()</code> method will be invoked when the DJI Product connection status change, we can us it to update our aircraft&#39;s location.</p>\n<p>Next, let&#39;s implement the <code>initFlightController()</code> method and invoke it inside the <code>onProductConnectionChange()</code> method:</p>\n<pre><code class=\"lang-java\">private void onProductConnectionChange()\n{\n    initFlightController();\n}\n\n private void initFlightController() {\n\n        DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n        if (product != null &amp;&amp; product.isConnected()) {\n            if (product instanceof DJIAircraft) {\n                mFlightController = ((DJIAircraft) product).getFlightController();\n            }\n        }\n\n        if (mFlightController != null) {\n            mFlightController.setUpdateSystemStateCallback(new DJIFlightControllerDelegate.FlightControllerUpdateSystemStateCallback() {\n\n                @Override\n                public void onResult(DJIFlightControllerDataType.DJIFlightControllerCurrentState state) {\n                    droneLocationLat = state.getAircraftLocation().getLatitude();\n                    droneLocationLng = state.getAircraftLocation().getLongitude();\n                    updateDroneLocation();\n\n                }\n            });\n        }\n    }</code></pre>\n<p>In the code above, we firstly check the product connection status with the help of <code>isConnected()</code> method of DJIBaseProduct. Then initialize <code>mFlightController</code> variable and override the <code>onResult()</code> method to invoke <code>updateDroneLocation</code> method. By using the <code>onResult()</code> method, you can get the flight controller current state from the parameter.</p>\n<p>Furthermore, let&#39;s implement the <code>updateDroneLocation()</code> method and invoke it in <code>onClick()</code> method&#39;s locate button click action:</p>\n<pre><code class=\"lang-java\">public static boolean checkGpsCoordinates(double latitude, double longitude) {\n    return (latitude &gt; -90 &amp;&amp; latitude &lt; 90 &amp;&amp; longitude &gt; -180 &amp;&amp; longitude &lt; 180) &amp;&amp; (latitude != 0f &amp;&amp; longitude != 0f);\n}\n\nprivate void updateDroneLocation(){\n\n    LatLng pos = new LatLng(droneLocationLat, droneLocationLng);\n    //Create MarkerOptions object\n    final MarkerOptions markerOptions = new MarkerOptions();\n    markerOptions.position(pos);\n    markerOptions.icon(BitmapDescriptorFactory.fromResource(R.drawable.aircraft));\n\n    runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            if (droneMarker != null) {\n                droneMarker.remove();\n            }\n\n            if (checkGpsCoordinates(droneLocationLat, droneLocationLng)) {\n                droneMarker = gMap.addMarker(markerOptions);\n            }\n        }\n    });\n}\n\n@Override\npublic void onClick(View v) {\n    // TODO Auto-generated method stub\n    switch (v.getId()) {\n        case R.id.locate:{\n            updateDroneLocation();\n            cameraUpdate();\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<p>In the <code>updateDroneLocation()</code> method, we add the drone location marker on Google map.</p>\n<p>Finally, let&#39;s implement the <code>camearUpdate()</code> method to move camera and zoom in Google Map to the drone&#39;s location:</p>\n<pre><code class=\"lang-java\">private void cameraUpdate(){\n    LatLng pos = new LatLng(droneLocationLat, droneLocationLng);\n    float zoomlevel = (float) 18.0;\n    CameraUpdate cu = CameraUpdateFactory.newLatLngZoom(pos, zoomlevel);\n    gMap.moveCamera(cu);\n}</code></pre>\n<p>Before going forward, you can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-PC-Simulator\">Using DJI PC Simulator</a> for DJI PC Simulator&#39;s basic usage.</p>\n<p>Now, let&#39;s connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable, and then power on the aircraft and the remote controller. Click Display Simulator. You can type in your current location&#39;s latitude and longitude data in the Simulator Config, if you would like. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Next, build and run the project and install it in your Android device and connect it to the remote controller using USB cable. Go to the DJI PC Simulator on your PC and press the Start Simulation button. If you check the application now, a tiny red aircraft will be shown on the map. If you cannot find the aircraft, press the &quot;LOCATE&quot; button to zoom in to the center of the aircraft on the Map. Here is a gif animation for you to check:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/locateAircraft.gif\" alt=\"locateAircraft\"></p>\n<h3 id=\"adding-waypoint-markers\">Adding Waypoint Markers</h3>\n<p>Since you can see the aircraft clearly on the Google map now, you can add <code>Marker</code> on the map to show the waypoints of the Waypoint Mission. Let&#39;s continue to declare the <code>mMarkers</code> variable first:</p>\n<pre><code class=\"lang-java\">private boolean isAdd = false;\nprivate final Map&lt;Integer, Marker&gt; mMarkers = new ConcurrentHashMap&lt;Integer, Marker&gt;();</code></pre>\n<p>Then, implement the <code>onMapClick()</code> and <code>markWaypoint()</code> methods as shown below:</p>\n<pre><code class=\"lang-java\">private void setResultToToast(final String string){\n    MainActivity.this.runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            Toast.makeText(MainActivity.this, string, Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n\n@Override\npublic void onMapClick(LatLng point) {\n    if (isAdd == true){\n        markWaypoint(point);       \n    }else{\n        setResultToToast(&quot;Cannot add waypoint&quot;);\n    }\n}\n\nprivate void markWaypoint(LatLng point){\n    //Create MarkerOptions object\n    MarkerOptions markerOptions = new MarkerOptions();\n    markerOptions.position(point);\n    markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));\n    Marker marker = gMap.addMarker(markerOptions);\n    mMarkers.put(mMarkers.size(), marker);\n}</code></pre>\n<p>Here, the <code>onMapClick()</code> method will be invoked when user tap on the Map View. When user tap on different position of the Map View, we will create a <code>MarkerOptions</code> object and assign the &quot;LatLng&quot; object to it, then invoke &quot;gMap&quot;&#39;s <code>addMarker()</code> method by passing the markerOptions parameter to add the waypoint markers on the Google map.</p>\n<p>Finally, let&#39;s implement the <code>onClick()</code> and <code>enableDisableAdd()</code> methods to implement the <strong>ADD</strong> and <strong>CLEAR</strong> actions as shown below:</p>\n<pre><code class=\"lang-java\"> @Override\n public void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.add:{\n            enableDisableAdd();\n            break;\n        }\n        case R.id.clear:{\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    gMap.clear();\n                }\n            });\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        default:\n            break;\n    }\n}\n\nprivate void enableDisableAdd(){\n   if (isAdd == false) {\n      isAdd = true;\n      add.setText(&quot;Exit&quot;);\n   }else{\n      isAdd = false;\n      add.setText(&quot;Add&quot;);\n   }\n }</code></pre>\n<p>Now, let&#39;s try to build and run your application on an Android device and try to add waypoints on the Google map. If everything goes well, you should see the following gif animation:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/addWaypoints.gif\" alt=\"addWaypointsAni\"></p>\n<h3 id=\"implementing-waypoint-missions\">Implementing Waypoint Missions</h3>\n<h4 id=\"configurating-waypoint-mission\">Configurating Waypoint Mission</h4>\n<p>Before we prepare a Waypoint Mission, we should provide a way for user to configure it, like setting the flying altitude, speed, heading, etc. So let&#39;s declare several variables as shown below firstly:</p>\n<pre><code class=\"lang-java\">private float altitude = 100.0f;\nprivate float mSpeed = 10.0f;\nprivate DJIWaypointMission.DJIWaypointMissionFinishedAction mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.NoAction;\nprivate DJIWaypointMission.DJIWaypointMissionHeadingMode mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.Auto;\n\nprivate DJIWaypointMission mWaypointMission;\nprivate DJIMissionManager mMissionManager;</code></pre>\n<p>Here we declare the <code>altitude</code>, <code>mSpeed</code>, <code>mFinishedAction</code> and <code>mHeadingMode</code> variable and intialize them with default value. Also, we declare the DJIWaypointMission and DJIMissionManager objects for setting up missions.</p>\n<p>Next, replace the code of <code>showSettingDialog()</code> method with the followings:</p>\n<pre><code class=\"lang-java\">private void showSettingDialog(){\n    LinearLayout wayPointSettings = (LinearLayout)getLayoutInflater().inflate(R.layout.dialog_waypointsetting, null);\n\n    final TextView wpAltitude_TV = (TextView) wayPointSettings.findViewById(R.id.altitude);\n    RadioGroup speed_RG = (RadioGroup) wayPointSettings.findViewById(R.id.speed);\n    RadioGroup actionAfterFinished_RG = (RadioGroup) wayPointSettings.findViewById(R.id.actionAfterFinished);\n    RadioGroup heading_RG = (RadioGroup) wayPointSettings.findViewById(R.id.heading);\n\n    speed_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            // TODO Auto-generated method stub\n            if (checkedId == R.id.lowSpeed){\n                mSpeed = 3.0f;\n            } else if (checkedId == R.id.MidSpeed){\n                mSpeed = 5.0f;\n            } else if (checkedId == R.id.HighSpeed){\n                mSpeed = 10.0f;\n            }\n        }\n    });\n\n    actionAfterFinished_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            // TODO Auto-generated method stub\n            Log.d(TAG, &quot;Select finish action&quot;);\n            if (checkedId == R.id.finishNone){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.NoAction;\n            } else if (checkedId == R.id.finishGoHome){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.GoHome;\n            } else if (checkedId == R.id.finishAutoLanding){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.AutoLand;\n            } else if (checkedId == R.id.finishToFirst){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.GoFirstWaypoint;\n            }\n        }\n    });\n\n    heading_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            Log.d(TAG, &quot;Select heading&quot;);\n            if (checkedId == R.id.headingNext) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.Auto;\n            } else if (checkedId == R.id.headingInitDirec) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.UsingInitialDirection;\n            } else if (checkedId == R.id.headingRC) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.ControlByRemoteController;\n            } else if (checkedId == R.id.headingWP) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.UsingWaypointHeading;\n            }\n        }\n    });\n\n    new AlertDialog.Builder(this)\n            .setTitle(&quot;&quot;)\n            .setView(wayPointSettings)\n            .setPositiveButton(&quot;Finish&quot;,new DialogInterface.OnClickListener(){\n                public void onClick(DialogInterface dialog, int id) {\n                    String altitudeString = wpAltitude_TV.getText().toString();\n                    altitude = Integer.parseInt(nulltoIntegerDefault(altitudeString));\n                    Log.e(TAG,&quot;altitude &quot;+altitude);\n                    Log.e(TAG,&quot;speed &quot;+mSpeed);\n                    Log.e(TAG, &quot;mFinishedAction &quot;+mFinishedAction);\n                    Log.e(TAG, &quot;mHeadingMode &quot;+mHeadingMode);\n                    configWayPointMission();\n                }\n\n            })\n            .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                    dialog.cancel();\n                }\n\n            })\n            .create()\n            .show();\n}\n\nString nulltoIntegerDefault(String value){\n    if(!isIntValue(value)) value=&quot;0&quot;;\n    return value;\n}\n\nboolean isIntValue(String val)\n{\n    try {\n        val=val.replace(&quot; &quot;,&quot;&quot;);\n        Integer.parseInt(val);\n    } catch (Exception e) {return false;}\n    return true;\n}</code></pre>\n<p>Here, we implement the <code>setOnCheckedChangeListener()</code> method of &quot;RadioGroup&quot; class and pass different values to the <code>mSpeed</code>, <code>mFinishedAction</code> and <code>mHeadingMode</code> variables based on the item user select. </p>\n<p>For the finished action of DJIWaypointMission, we provide several enum values here:</p>\n<ul>\n<li><p><strong>AutoLand</strong></p>\n<p> The aircraft will land automatically at the last waypoint. </p>\n</li>\n<li><p><strong>ContinuewUntilEnd</strong></p>\n<p>If the user attempts to pull the aircraft back along the flight path as the mission is being executed, the aircarft will move towards the previous waypoint and will continue to do so until there are no more waypoint to move back to or the user has stopped attempting to move the aircraft back. </p>\n</li>\n<li><p><strong>GoFirstWaypoint</strong></p>\n<p>The aircraft will go back to its first waypoint and hover in position. </p>\n</li>\n<li><p><strong>GoHome</strong></p>\n<p>The aicraft will go home when the mission is complete. </p>\n</li>\n<li><p><strong>NoAction</strong></p>\n<p>No further action will be taken on completion of mission. </p>\n</li>\n</ul>\n<p>For the heading mode of DJIWaypointMission, we provide these enum values here:</p>\n<ul>\n<li><p><strong>Auto</strong></p>\n<p>Aircraft&#39;s heading will always be in the direction of flight. </p>\n</li>\n<li><p><strong>ControlByRemoteController</strong></p>\n<p>Aircraft&#39;s heading will be controlled by the remote controller. </p>\n</li>\n<li><p><strong>TowardPointOfInterest</strong></p>\n<p>Aircraft&#39;s heading will always toward point of interest. </p>\n</li>\n<li><p><strong>UsingInitialDirection</strong></p>\n<p>Aircraft&#39;s heading will be set to the initial take-off heading. </p>\n</li>\n<li><p><strong>UsingWaypointHeading</strong></p>\n</li>\n</ul>\n<p>Aircraft&#39;s heading will be set to the previous waypoint&#39;s heading while travelling between waypoints. </p>\n<p>Now, let&#39;s continue to implement the <code>configWayPointMission()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">private void configWayPointMission(){\n\n    if (mWaypointMission != null){\n        mWaypointMission.finishedAction = mFinishedAction;\n        mWaypointMission.headingMode = mHeadingMode;\n        mWaypointMission.autoFlightSpeed = mSpeed;\n\n        if (mWaypointMission.waypointsList.size() &gt; 0){\n            for (int i=0; i&lt; mWaypointMission.waypointsList.size(); i++){\n                mWaypointMission.getWaypointAtIndex(i).altitude = altitude;\n            }\n            setResultToToast(&quot;Set Waypoint altitude success&quot;);\n        }\n   }\n}</code></pre>\n<p>  In the code above, we check if <code>mWaypointMission</code> is null and set its <code>finishedAction</code>, <code>headingMode</code> and <code>autoFlightSpeed</code> variables of DJIWaypointMission.   Then we use a for loop to set the DJIWaypoint&#39;s altitude of DJIWaypointMission&#39;s waypointsList. </p>\n<h4 id=\"prepare-waypoint-mission\">Prepare Waypoint Mission</h4>\n<p>  Now, let&#39;s initialize the <code>mMissionManager</code> and <code>mWaypointMission</code> variables by implementing the <code>initMissionManager()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">private void initMissionManager() {\n    DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n\n    if (product == null || !product.isConnected()) {\n        setResultToToast(&quot;Product Not Connected&quot;);\n        mMissionManager = null;\n        return;\n    } else {\n\n        setResultToToast(&quot;Product Connected&quot;);\n        mMissionManager = product.getMissionManager();\n        mMissionManager.setMissionProgressStatusCallback(this);\n        mMissionManager.setMissionExecutionFinishedCallback(this);\n    }\n\n    mWaypointMission = new DJIWaypointMission();\n}\n\n@Override\npublic void missionProgressStatus(DJIMission.DJIMissionProgressStatus progressStatus) {\n\n}\n\n@Override\npublic void onResult(DJIError error) {\n    setResultToToast(&quot;Execution finished: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n\n}</code></pre>\n<p>Here, we check the product connection status first and invoke DJIBaseProduct&#39;s <code>getMissionManager()</code> method to initialize <code>mMissionmanager</code> variable. Next, invoke the <code>setMissionProgressStatusCallback()</code> and <code>setMissionExecutionFinishedCallback()</code> methods of DJIMissionManager and implement the two callback methods of DJIMissionManager. We should also implement the <code>DJIMissionManager.MissionProgressStatusCallback</code> and <code>DJIBaseComponent.DJICompletionCallback</code> interfaces for the MainActivity class on top.</p>\n<p>We can get the mission execution status from the <code>missionProgressStatus()</code> callback, and check the mission execution result from the <code>onResult()</code> callback method.</p>\n<p>Moreover, we should invoke the <code>initMissionManager()</code> method in the following two methods:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onResume(){\n    super.onResume();\n    initFlightController();\n    initMissionManager();\n}\n\nprivate void onProductConnectionChange()\n{\n    initFlightController();\n    initMissionManager();\n}</code></pre>\n<p>When user resume the application and the product connection change, we should both call the <code>iniMissionManager()</code> to do initialization work.</p>\n<p>Furthermore, let&#39;s implement the prepare mission action and addWaypoint action of DJIWaypointMission as shown below:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onMapClick(LatLng point) {\n    if (isAdd){\n        markWaypoint(point);\n        DJIWaypoint mWaypoint = new DJIWaypoint(point.latitude, point.longitude, altitude);\n        //Add waypoints to Waypoint arraylist;\n        if (mWaypointMission != null) {\n            mWaypointMission.addWaypoint(mWaypoint);\n            setResultToToast(&quot;AddWaypoint&quot;);\n        }\n    }else{\n        setResultToToast(&quot;Cannot add waypoint&quot;);\n    }\n}\n\nprivate void prepareWayPointMission(){\n\n    if (mMissionManager != null &amp;&amp; mWaypointMission != null) {\n\n        DJIMission.DJIMissionProgressHandler progressHandler = new DJIMission.DJIMissionProgressHandler() {\n            @Override\n            public void onProgress(DJIMission.DJIProgressType type, float progress) {\n            }\n        };\n\n        mMissionManager.prepareMission(mWaypointMission, progressHandler, new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(error == null ? &quot;Success&quot; : error.getDescription());\n            }\n        });\n    }\n}</code></pre>\n<p>Actually, we can get the mission preparation progress by overriding the <code>onProgress()</code> method of DJIMissionProgressHandler. Lastly, let&#39;s add the <code>R.id.prepare</code> case checking in the <code>onClick()</code> method:</p>\n<pre><code class=\"lang-java\">case R.id.prepare:{\n    prepareWayPointMission();\n    break;\n}</code></pre>\n<h4 id=\"start-and-stop-mission\">Start and Stop Mission</h4>\n<p>Once the mission finish preparation, we can invoke the <code>startMissionExecution()</code> and <code>stopMissionExecution()</code> methods of DJIMissionManager to implement the start and stop mission feature as shown below:</p>\n<pre><code class=\"lang-java\">private void startWaypointMission(){\n\n    if (mMissionManager != null) {\n        mMissionManager.startMissionExecution(new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(&quot;Start: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n            }\n        });\n    }\n}\n\nprivate void stopWaypointMission(){\n\n    if (mMissionManager != null) {\n        mMissionManager.stopMissionExecution(new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(&quot;Stop: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n            }\n        });\n\n        if (mWaypointMission != null){\n            mWaypointMission.removeAllWaypoints();\n        }\n    }\n}</code></pre>\n<p>Lastly, let&#39;s improve the <code>onClick()</code> method to improve the <strong>clear</strong> button action and implement the <strong>start</strong> and <strong>stop</strong> button actions:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.locate:{\n            updateDroneLocation();\n            cameraUpdate(); // Locate the drone&#39;s place\n            break;\n        }\n        case R.id.add:{\n            enableDisableAdd();\n            break;\n        }\n        case R.id.clear:{\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    gMap.clear();\n                }\n            });\n            if (mWaypointMission != null){\n                mWaypointMission.removeAllWaypoints(); // Remove all the waypoints added to the task\n            }\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        case R.id.prepare:{\n            prepareWayPointMission();\n            break;\n        }\n        case R.id.start:{\n            startWaypointMission();\n            break;\n        }\n        case R.id.stop:{\n            stopWaypointMission();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<h2 id=\"test-waypoint-mission-with-dji-simulator\">Test Waypoint Mission with DJI Simulator</h2>\n<p>You&#39;ve come a long way in this tutorial, and it&#39;s time to test the whole application.</p>\n<p><strong>Important</strong>: Make sure the battery level of your aircraft is more than 10%, otherwise the waypoint mission may fail!</p>\n<p>Build and run the project to install the application into your android device. After that, please connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable. Then, power on the remote controller and the aircraft, in that order.</p>\n<p>Next, press the <strong>Display Simulator</strong> button in the DJI PC Simulator and feel free to type in your current location&#39;s latitude and longitude data into the simulator.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Then connect your android device to the remote controller using USB cable and run the application. Go back to the DJI PC Simulator on your PC and press the <strong>Start Simulation</strong> button. A tiny red aircraft will appear on the map in your application,  if you press the <strong>LOCATE</strong> button, the map view will zoom in to the region you are in and will center the aircraft:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/locateAircraft.gif\" alt=\"locateAircraft\"></p>\n<p>Next, press the <strong>Add</strong> button and tap on the Map where you want to add waypoints, as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/addWaypointsAni.gif\" alt=\"addWaypointsAni\"></p>\n<p>Once you press the <strong>CONFIG</strong> button, the <strong>Waypoint Configuration</strong> dialog will appear. Modify the settings as you want and press <strong>Finish</strong> button. Then press the <strong>PREPARE</strong> button to prepare the mission.</p>\n<p>If prepare mission failed, you may see the following screenshot:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/prepareMissionFail.png\" alt=\"prepareMissionFail\"></p>\n<p><strong>Important</strong>: To fix this problem, please switch the Remote Controller&#39;s mode selection to the <strong>F</strong> position and press <strong>PREPARE</strong> button to try again. If the mode selection bar is in the F position when the autopilot is powered on, the user must toggle back and forth between <strong>F</strong> and another position and then try again.</p>\n<p>You are required to be in the <strong>F</strong> position when using the DJIWaypoint Mission of DJI Mobile SDK.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/switchFlightModes.png\" alt=\"switchFlightMode\"></p>\n<p>If prepare mission success, press the <strong>START</strong> button to start the waypoint mission execution.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/prepareMission.gif\" alt=\"prepareMission\">  </p>\n<p>Now you will should see the aircraft move towards the waypoints you set previously on the map view, as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/startMission.gif\" alt=\"startMission\"></p>\n<p>At the same time, you are able to see the Inspire 1 take off and start to fly in the DJI PC Simulator.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/takeOff.gif\" alt=\"flyingInSimulator\"></p>\n<p>When the waypoint mission finishes, an &quot;Execution finished: Success!&quot; message will appear and the Inspire 1 will start to go home!</p>\n<p>Also, the remote controller will start beeping, and the <strong>Go Home</strong> button on the remote controller will start to flash a white light. Let&#39;s take a look at the DJI PC Simulator now:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/GSDemo-Google-Map/landing.gif\" alt=\"landing\"></p>\n<p>The inspire 1 will eventually go home, land, and the beeping from the remote controller will stop. The application will go back to its normal status. If you press the <strong>CLEAR</strong> button, all the waypoints you previously set will be cleared. During the mission, if you&#39;d ever like to stop the DJIWaypoint mission, you can do so by pressing the <strong>STOP</strong> button.</p>\n<h3 id=\"summary\">Summary</h3>\n<p> In this tutorial, you’ve learned how to setup and use the DJI PC Simulator to test your waypoint mission application, upgrade your aircraft&#39;s firmware to the developer version, use the DJI Mobile SDK to create a simple map view, modify annotations of the map view, show the aircraft on the map view by using GPS data from the DJI PC Simulator. Next, you learned how to configure <strong>DJIWaypoint</strong> parameters, how to add waypoints to <strong>DJIWaypointMission</strong>. Moreover, you learned how to use DJIMissionManager to <strong>prepare</strong>, <strong>start</strong> and <strong>stop</strong> missions. </p>\n<p>   Congratulations! Now that you&#39;ve finished the demo project, you can build on what you&#39;ve learned and start to build your own waypoint mission application. You can improve the method which waypoints are added(such as drawing a line on the map and generating waypoints automatically), play around with the properties of a waypoint (such as heading, etc.), and adding more functionality. In order to make a cool waypoint mission application, you still have a long way to go. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a MapView and Waypoint Application","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-GSDemo-GoogleMap"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, we will use the Android Studio&#39;s HelloWorld template project to show you how to import DJI Android SDK and register the application.   Throughout this tutorial we will be using Android Studio 2.1.1, which you can download from here: <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\"><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></a>.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"creating-an-android-studio-project\">Creating an Android Studio Project</h2>\n<p> Open Android Studio and select <strong>Start a new Android Studio project</strong> to create a new project.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/createProject.png\" alt=\"createProject\">   </p>\n<p> Then enter the <strong>Application name</strong> as &quot;ImportSDKDemo&quot;. Next enter the <strong>Company Domain</strong> and <strong>Package Name</strong> you want and select the <strong>Project location</strong> path to store the project.</p>\n<p>  Here we use &quot;com.dji.importSDKDemo&quot; for both Company Domain and Package name.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/enterProjectName.png\" alt=\"enterProjectName\"></p>\n<blockquote>\n<p><strong>Important:</strong> The <strong>Package Name</strong> you enter here should be the same as the &quot;Package Name&quot; of the App Information you apply in DJI Developer Website. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/appKey.png\" alt=\"appKey\"></p>\n<p>For more details of applying for an DJI App, please check <a href=\"../quick-start/index.html\">Get Started</a> for details.</p>\n</blockquote>\n<p>  Press &quot;Next&quot; button to continue and set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/minimumSDK.png\" alt=\"minimumSDK\"></p>\n<p>  Then select &quot;Basic Activity&quot; and press Next. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/basicActivity.png\" alt=\"basicAcitivity\"></p>\n<p>  Lastly, leave the <strong>Activity Name</strong> as &quot;MainActivity&quot;, the <strong>Layout Name</strong> as &quot;activity_main&quot;, the <strong>Title</strong> as &quot;MainActivity&quot;, and the <strong>Menu Resource Name</strong> as &quot;menu_main&quot;. Press &quot;Finish&quot; to create the project.</p>\n<h2 id=\"downloading-and-importing-module-to-the-project\">Downloading and Importing Module to the Project</h2>\n<p>  You can download DJI Android SDK from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>. </p>\n<p>  Unzip the Android SDK package, go to <strong>File -&gt; New -&gt; Import Module</strong> on the top bar of Android Studio. Then enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the <strong>Source directory</strong> field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and finish button to finish the settings.</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/importsSDK.png\" alt=\"importSDK\"></p>\n<h2 id=\"configurating-the-gradle-file\">Configurating the Gradle File</h2>\n<p>Double click on the &quot;build.gradle(Module: app)&quot; in the project navigator to open it:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/gradle.png\" alt=\"gradle\"></p>\n<p>Then replace the content with the following:</p>\n<pre><code class=\"lang-xml\">apply plugin: &#39;com.android.application&#39;\n\nandroid {\n\n    defaultConfig {\n        applicationId &quot;com.dji.importSDKDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)  // &lt;------------\n}</code></pre>\n<p> Here we add <code>compile project(&#39;:dJISDKLIB&#39;)</code> at the end of &quot;dependencies&quot; part. This is where we configure the Android Studio Project dependencies.</p>\n<p>Then, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar of Android Studio and wait for Gradle project sync finish.</p>\n<p>Lastly, right click on the &quot;app&quot; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/openModulesSettings.png\" alt=\"openModulesSettings\"></p>\n<p>Select &quot;app&quot; Modules and navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/dependencies.png\" alt=\"dependencies\"></p>\n<h2 id=\"trying-to-use-android-sdk-in-the-project\">Trying to use Android SDK in the Project</h2>\n<p>Now, let&#39;s double click to open the MainActivity.java file in the <code>com.dji.importSDKDemo</code> package from the project navigator area.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/mainActivity.png\" alt=\"mainActivity\"></p>\n<p>Then add <code>import dji.sdk.SDKManager.DJISDKManager;</code> at the bottom of the import classes section as shown below:</p>\n<pre><code class=\"lang-java\">package com.dji.importSDKDemo;\n\nimport android.os.Bundle;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.View;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport dji.sdk.SDKManager.DJISDKManager;</code></pre>\n<p>  Wait for a few seconds and check if the <code>import dji.sdk.SDKManager.DJISDKManager;</code> line turn red, if it remains gray color, it means that you import DJI Android SDK to your Android Studio project successfully. Here is the status you should see if everything goes well:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/checkSDK.png\" alt=\"checkSDK\"></p>\n<p>  Congratulations, now you should be able to use DJI Android SDK in your Android Studio Project!</p>\n<h3 id=\"registering-the-application\">Registering the Application</h3>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<h4 id=\"configurating-the-androidmanifest-xml\">Configurating the AndroidManifest.xml</h4>\n<p>Let&#39;s double click the AndroidManifest.xml file in the project navigator to open it:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/androidManifest.png\" alt=\"androidManifest\"></p>\n<p>Then add the following elements code on top of the &quot;application&quot; element:</p>\n<pre><code class=\"lang-xml\">&lt;!-- Permissions and features --&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.host&quot;\n        android:required=&quot;false&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.accessory&quot;\n        android:required=&quot;true&quot; /&gt;\n&lt;!-- Permissions and features --&gt;</code></pre>\n<p>Here, we request permissions that the application must be granted in order for it to register DJI SDK correctly. Also we declare the camera and usb hardwares which is used by the application.</p>\n<p>Moreover, let&#39;s add the following elements as childs of <strong><application></strong> element as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n        &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n        &lt;meta-data\n            android:name=&quot;com.dji.sdk.API_KEY&quot;\n            android:value=&quot;Please enter your App Key here.&quot; /&gt;\n        &lt;activity\n            android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n            android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n            &lt;/intent-filter&gt;\n            &lt;meta-data\n                android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n                android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n        &lt;/activity&gt;\n        &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n        &lt;/service&gt;\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, you should substitude your <strong>App Key</strong> of the application for &quot;Please enter your App Key here.&quot; in the <strong>value</strong> attribute under the <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute. </p>\n<p>Finally, once you finish all the configurations for AndroidManifest.xml file, you should see the following content:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    package=&quot;com.dji.importSDKDemo&quot;&gt;\n\n    &lt;!-- Permissions and features --&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.host&quot;\n        android:required=&quot;false&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.accessory&quot;\n        android:required=&quot;true&quot; /&gt;\n\n    &lt;!-- Permissions and features --&gt;\n\n    &lt;application\n        android:allowBackup=&quot;true&quot;\n        android:icon=&quot;@mipmap/ic_launcher&quot;\n        android:label=&quot;@string/app_name&quot;\n        android:supportsRtl=&quot;true&quot;\n        android:theme=&quot;@style/AppTheme&quot;&gt;\n\n        &lt;!-- DJI SDK --&gt;\n        &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n        &lt;meta-data\n            android:name=&quot;com.dji.sdk.API_KEY&quot;\n            android:value=&quot;Please enter your App Key here.&quot; /&gt;\n        &lt;activity\n            android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n            android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n            &lt;/intent-filter&gt;\n            &lt;meta-data\n                android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n                android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n        &lt;/activity&gt;\n        &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n        &lt;/service&gt;\n        &lt;!-- DJI SDK --&gt;\n\n        &lt;activity\n            android:name=&quot;.MainActivity&quot;\n            android:label=&quot;@string/app_name&quot;\n            android:theme=&quot;@style/AppTheme.NoActionBar&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<h4 id=\"implementing-application-registration\">Implementing Application Registration</h4>\n<p>After you finish the steps above, open the <strong>MainActivity.java</strong> file and replace the code with the following content:</p>\n<pre><code class=\"lang-java\">package com.dji.importSDKDemo;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.widget.Toast;\n\nimport dji.sdk.SDKManager.DJISDKManager;\nimport dji.sdk.base.DJIBaseComponent;\nimport dji.sdk.base.DJIBaseProduct;\nimport dji.sdk.base.DJIError;\nimport dji.sdk.base.DJISDKError;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = MainActivity.class.getName();\n\n    public static final String FLAG_CONNECTION_CHANGE = &quot;dji_sdk_connection_change&quot;;\n\n    private static DJIBaseProduct mProduct;\n\n    private Handler mHandler;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the following permission at runtime to ensure the SDK works correctly.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, &quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG)\n                        .setAction(&quot;Action&quot;, null).show();\n            }\n        });\n\n        //Initialize DJI SDK Manager\n        mHandler = new Handler(Looper.getMainLooper());\n        DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n    }\n\n    /*\n     *  Implement DJISDKManager Callback methods\n     */\n    private DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n\n        @Override\n        public void onGetRegisteredResult(DJIError error) {\n            Log.d(TAG, error == null ? &quot;success&quot; : error.getDescription());\n            if(error == DJISDKError.REGISTRATION_SUCCESS) {\n                DJISDKManager.getInstance().startConnectionToProduct();\n                Handler handler = new Handler(Looper.getMainLooper());\n                handler.post(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n                    }\n                });\n            } else {\n                Handler handler = new Handler(Looper.getMainLooper());\n                handler.post(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        Toast.makeText(getApplicationContext(), &quot;register sdk fails, check if network is available&quot;, Toast.LENGTH_LONG).show();\n                    }\n                });\n\n            }\n            Log.e(&quot;TAG&quot;, error.toString());\n        }\n\n        @Override\n        public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n\n            mProduct = newProduct;\n            if(mProduct != null) {\n                mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n            }\n\n            notifyStatusChange();\n        }\n    };\n\n    /*\n     *  Implement DJIBaseProductListener methods\n     */\n    private DJIBaseProduct.DJIBaseProductListener mDJIBaseProductListener = new DJIBaseProduct.DJIBaseProductListener() {\n\n        @Override\n        public void onComponentChange(DJIBaseProduct.DJIComponentKey key, DJIBaseComponent oldComponent, DJIBaseComponent newComponent) {\n            if(newComponent != null) {\n                newComponent.setDJIComponentListener(mDJIComponentListener);\n            }\n            notifyStatusChange();\n        }\n\n        @Override\n        public void onProductConnectivityChanged(boolean isConnected) {\n            notifyStatusChange();\n        }\n\n    };\n\n    private DJIBaseComponent.DJIComponentListener mDJIComponentListener = new DJIBaseComponent.DJIComponentListener() {\n\n        @Override\n        public void onComponentConnectivityChanged(boolean isConnected) {\n            notifyStatusChange();\n        }\n\n    };\n\n    private void notifyStatusChange() {\n        mHandler.removeCallbacks(updateRunnable);\n        mHandler.postDelayed(updateRunnable, 500);\n    }\n\n    private Runnable updateRunnable = new Runnable() {\n\n        @Override\n        public void run() {\n            Intent intent = new Intent(FLAG_CONNECTION_CHANGE);\n            sendBroadcast(intent);\n        }\n    };\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n}</code></pre>\n<p>  Here, we implement several features:</p>\n<ol>\n<li>In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</li>\n<li>Next we initialize the DJISDKManager and Handler in the <code>onCreate()</code> method.</li>\n<li>Implement the two interface methods of DJISDKManagerCallback. We can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n<li>Implement the two interface methods of DJIBaseProductListener. We can use the <code>onComponentChange()</code> method to check if a component object changes. Using the <code>onProductConnectivityChanged()</code> method to check the connectivity status changes for the base product.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<h2 id=\"where-to-go-from-here-\">Where to go from here?</h2>\n<p>  If you want to learn how to use DJI Android SDK to create a simple app, please check this tutorial: <a href=\"./FPVDemo.html\">Creating a Camera Application</a>. It’s our introductory tutorial, which guides you through connecting to your aircraft&#39;s camera to displaying a live video feed in your app, through which you can take photos and videos.</p>","meta":{"title":"Importing and Activating DJI SDK in Android Studio Project","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-ImportAndActivateSDKInAndroidStudio"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to run the DJI Android SDK Sample Code using Android Studio. We use Android Studio 2.1 for demonstration here. </p>\n<p>You can download the DJI Android SDK Sample Code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial. </p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li>Android Studio 1.5 or higher</li>\n<li>Android API Level 22 or higher</li>\n</ul>\n<h2 id=\"registering-an-app-key\">Registering an App Key</h2>\n<p>Please go to your DJI Account&#39;s <a href=\"http://developer.dji.com/en/user/apps/\" target=\"_blank\">User Center</a>, select the &quot;Apps&quot; tab on the left:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/pressCreateApp.png\" alt=\"pressCreateApp\"></p>\n<p>Press the &quot;Create App&quot; button and select &quot;Android&quot; as your operating system. Then type in the info in the pop up dialog as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/fillInInfo.png\" alt=\"fillInInfo\"></p>\n<blockquote>\n<p><strong>Important</strong>: Please type in &quot;com.dji.sdk.sample&quot; in the <code>Package Name</code> field, because the Android Package Name in the DJI SDK Sample project is &quot;com.dji.sdk.sample&quot;. We should make sure they are the same.</p>\n</blockquote>\n<p>Once you complete it, press &quot;Create&quot; button to finish. Then you will see the following status:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/email.png\" alt=\"email\"></p>\n<p>After a few seconds, you will receive an email from DJI Developer to ask you to activate your app:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/activateEmail.png\" alt=\"activateEmail\"></p>\n<p>Click the link in the email to open the website and press the app you just created in User Center:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/appActivated.png\" alt=\"appActivated\"></p>\n<p>You may be able to get your App Key in the <strong>App Information</strong>:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/createAppSuccessful_android_en.png\" alt=\"sdkDemoApp_Key\"></p>\n<h2 id=\"running-dji-sdk-sample-code\">Running DJI SDK Sample Code</h2>\n<p>Please download or clone the Github Project repository to your computer and navigate to the <strong>Sample Code</strong> folder:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/sampleCode_folder.png\" alt=\"sampleCode_folder\"></p>\n<p>Open Android Studio, select &quot;Open an existing Android Studio project&quot; in the Android Studio Setup Wizard, then select the <strong>Sample Code</strong> folder to open the project:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/openSampleCode.png\" alt=\"openSampleCode\"></p>\n<h3 id=\"entering-app-key\">Entering App Key</h3>\n<p>Find and double click the &quot;AndroidManifest.xml&quot; file in left project navigator to open it.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/enterAppKey.png\" alt=\"enterAppKey\"></p>\n<p>Please substitude your App Key of the application we just created in the value attribute under the android:name=&quot;com.dji.sdk.API_KEY&quot; attribute as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!--\n    ADD API_KEY HERE and make sure you\n    are connected to the Internet before\n    the app is launched\n--&gt;\n&lt;meta-data\n    android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;&quot; /&gt; //Enter your App Key here.</code></pre>\n<h3 id=\"checking-remote-controller-aoa-support\">Checking Remote Controller AOA Support</h3>\n<p>Please make sure your DJI Remote Controller supports <a href=\"https://source.android.com/devices/accessories/protocol.html\" target=\"_blank\"> AOA </a> before you test the Sample app. You can upgrade your DJI Remote Controller to the latest firmware and check if there is a dialog pops up when you connect the app to it like this:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/dialog.png\" alt=\"dialog\"></p>\n<blockquote>\n<p>Note: To upgrade your DJI Remote Controller&#39;s firmware, you can download the <strong>DJI Go</strong> app from Google Play Store: <a href=\"https://play.google.com/store/apps/details?id=dji.pilot\" target=\"_blank\"> <a href=\"https://play.google.com/store/apps/details?id=dji.pilot\">https://play.google.com/store/apps/details?id=dji.pilot</a> </a> and open it. Connect the DJI Go app to your remote controller and upgrade its firmware.</p>\n</blockquote>\n<p>Once you finish it, build and run the project on your Android Device. Then connect the Android device to the Remote Controller, turn on the Remote Controller and the aircraft or handheld device. You can start to try different features in the sample project now! </p>\n<p>Here are the screenshots when you run the Sample app on Phantom 3 Professional successfully:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/sampleCodeScreenshot1.png\" alt=\"sampleCodeScreenshot1\">\n<img src=\"../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/sampleCodeScreenshot2.png\" alt=\"sampleCodeScreenshot1\"></p>","meta":{"title":"Running DJI SDK Sample Code in Android Studio","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/dji-sdk/Mobile-SDK-Android"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI Forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use the TapFly and ActiveTrack Missions of DJI Android SDK to create a cool application for Phantom 4. Also you will get familiar with DJIMissionManager and using the Simulator of DJI Assistant 2 for testing, which is convenient for you to test the missions indoor. We will use Android Studio 2.1.1 version for demo here. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"phantom-4-new-missions\">Phantom 4 New Missions</h2>\n<p>  The Phantom 4 supports the two new TapFly and ActiveTrack missions, which brings you a more autonomous flying experience.</p>\n<h3 id=\"tapfly-mission\">TapFly Mission</h3>\n<p>TapFly Mission is only supported on Phantom 4. Given a coordinate in the live video stream (which can come from a user tap), the aircraft will calculate and fly towards the coordinate&#39;s direction in the real wold. During flight, the aircraft will automatically detect and avoid obstacles.</p>\n<p>During the mission, you can use the remote controller&#39;s yaw stick to adjust the heading of the aircraft, which also adjusts the direction of flight to the new yaw. Using any other stick controls will cancel the mission.</p>\n<p>Here is a <a href=\"https://dn-djidl2.qbox.me/cloud/6949e90958a3e0dbf1175cd9bb1f851a/720.mp4\" target=\"_blank\"> video </a> for you to get the first impression of the TapFly Mission.</p>\n<h3 id=\"activetrack-mission\">ActiveTrack Mission</h3>\n<p>ActiveTrack Mission is only supported on Phantom 4. It allows an aircraft to track a moving subject using the vision system and without a GPS tracker on the subject.</p>\n<p>The main camera is used to track the target, so the gimbal cannot be adjusted during an ActiveTrack mission. During the mission the aircraft can be manually flown with pitch, roll and throttle to move around the subject being tracked.</p>\n<p>Here is a <a href=\"https://dn-djidl2.qbox.me/cloud/4ebc02c536baf850f5a568d8c27743fc/720.mp4\" target=\"_blank\"> video </a> for you to get the first impression of the ActiveTrack Mission.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>Now that you know the details of the two new missions of Phantom 4, we can start working on the application. In our previous tutorial <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a>, you have learned how to import the DJI Android SDK into your Android Studio project and activate your application. If you haven&#39;t read that previously, please take a look at it. Once you&#39;ve done that, let&#39;s create the project.</p>\n<h3 id=\"importing-the-framework-and-libraries\">Importing the Framework and Libraries</h3>\n<p> <strong>1</strong>. Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &#39;P4MissionsDemo&#39;. Enter the company domain and package name(Here we use &quot;com.dji.P4MissionsDemo&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<p> <strong>2</strong>. Unzip the Android SDK package downloaded from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/importsSDK.png\" alt=\"importSDK\"></p>\n<p> <strong>3</strong>. Next, double click on the &quot;build.gradle(Module: app)&quot; in the project navigator to open it and replace the content with the following:</p>\n<pre><code class=\"lang-java\">apply plugin: &#39;com.android.application&#39;\nandroid {\n    compileSdkVersion 19\n    buildToolsVersion &quot;23.0.2&quot;\n\n    defaultConfig {\n        applicationId &quot;com.dji.P4MissionsDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\ndependencies {\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<p> In the code above, we modify its dependencies by adding <code>compile project(&#39;:dJISDKLIB&#39;)</code> at the bottom, and change the compileSdkVersion, buildToolsVersion number, etc. </p>\n<p> <img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/buildGradle.png\" alt=\"configureAndroidSDK\"></p>\n<p> Then, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p> <strong>4</strong>. Let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/dependencies.png\" alt=\"dependencies\"></p>\n<p> <strong>5</strong>. Now, open the MainActivity.java file in <code>com.dji.p4MissionsDemo</code> package and add <code>import dji.sdk.SDKManager.DJISDKManager;</code> at the bottom of the import classes section as shown below:</p>\n<pre><code class=\"lang-java\">package com.dji.p4MissionsDemo;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport dji.sdk.SDKManager.DJISDKManager;</code></pre>\n<p>  Wait for a few seconds and check if the words turn red, if they remain gray color, it means you can use DJI Android SDK in your project successfully now.</p>\n<h3 id=\"building-the-layouts-of-activities\">Building the Layouts of Activities</h3>\n<h4 id=\"1-creating-djidemoapplication-class\">1. Creating DJIDemoApplication Class</h4>\n<p>   Right-click on the package <code>com.dji.p4MissionsDemo</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;DJIDemoApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>   Next, Replace the code of the &quot;DJIDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.p4MissionsDemo;\nimport android.app.Application;\n\npublic class DJIDemoApplication extends Application{\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n}</code></pre>\n<p>   Here, we override the onCreate() method. We can do some settings when the application is created here.</p>\n<h4 id=\"2-implementing-demobaseactivity-class\">2. Implementing DemoBaseActivity Class</h4>\n<p>Similiarly, create a new Empty Activity class with the name of &quot;DemoBaseActivity&quot; in the <code>com.dji.p4MissionsDemo</code> package. Remember to deselect the &quot;Generate Layout File&quot;. Replace the code with the following, remember to import the related classes as Android Studio suggested:</p>\n<pre><code class=\"lang-java\">public class DemoBaseActivity extends FragmentActivity implements TextureView.SurfaceTextureListener {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n    }\n\n    @Override\n    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {\n    }\n\n    @Override\n    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n        return false;\n    }\n\n    @Override\n    public void onSurfaceTextureUpdated(SurfaceTexture surface) {\n    }\n\n}</code></pre>\n<p>  We will use this activity class as our base class later. More details of the implementation will be done later.</p>\n<h4 id=\"3-creating-the-mainactivity\">3. Creating the MainActivity</h4>\n<h5 id=\"working-on-the-mainactivity-class\">Working on the MainActivity Class</h5>\n<p>Let&#39;s come back to the MainActivity.java class, and replace the code with the following, remember to import the related classes as Android Studio suggested:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends DemoBaseActivity implements View.OnClickListener {\n\n    public static final String TAG = MainActivity.class.getName();\n    private ArrayList&lt;DemoInfo&gt; demos = new ArrayList&lt;DemoInfo&gt;();\n    private ListView mListView;\n    private DemoListAdapter mDemoListAdapter = new DemoListAdapter();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the \n        // following permissions at runtime to ensure the \n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[] { Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n\n        mListView = (ListView)findViewById(R.id.listView);\n        mListView.setAdapter(mDemoListAdapter);\n\n        loadDemoList();\n        mDemoListAdapter.notifyDataSetChanged();\n\n    }\n\n    private static class DemoInfo{\n        private final int title;\n        private final int desc;\n        private final Class&lt;? extends android.app.Activity&gt; demoClass;\n\n        public DemoInfo(int title , int desc,Class&lt;? extends android.app.Activity&gt; demoClass) {\n            this.title = title;\n            this.desc  = desc;\n            this.demoClass = demoClass;\n        }\n    }\n\n    private void loadDemoList() {\n        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            public void onItemClick(AdapterView&lt;?&gt; arg0, View v, int index, long arg3) {\n                onListItemClick(index);\n            }\n        });\n        demos.clear();\n        demos.add(new DemoInfo(R.string.title_activity_tracking_test, R.string.demo_desc_tracking, TrackingTestActivity.class));\n        demos.add(new DemoInfo(R.string.title_activity_pointing_test, R.string.demo_desc_pointing, PointingTestActivity.class));\n    }\n\n    private void onListItemClick(int index) {\n        Intent intent = null;\n        intent = new Intent(MainActivity.this, demos.get(index).demoClass);\n        this.startActivity(intent);\n    }\n\n    @SuppressLint(&quot;ViewHolder&quot;)\n    private class DemoListAdapter extends BaseAdapter {\n        public DemoListAdapter() {\n            super();\n        }\n\n        @Override\n        public View getView(int index, View convertView, ViewGroup parent) {\n            convertView = View.inflate(MainActivity.this, R.layout.demo_info_item, null);\n            TextView title = (TextView)convertView.findViewById(R.id.title);\n            TextView desc = (TextView)convertView.findViewById(R.id.desc);\n\n            title.setText(demos.get(index).title);\n            desc.setText(demos.get(index).desc);\n            return convertView;\n        }\n        @Override\n        public int getCount() {\n            return demos.size();\n        }\n        @Override\n        public Object getItem(int index) {\n            return  demos.get(index);\n        }\n\n        @Override\n        public long getItemId(int id) {\n            return id;\n        }\n    }\n\n    @Override\n    public void onClick(View v) {\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n    }\n\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n}</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create a ListView to show the &quot;TapFly&quot; and &quot;ActiveTrack&quot; activities&#39; layouts.</p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</p>\n<p><strong>3.</strong> Then create the <code>mListView</code> and invoke the <code>loadDemoList()</code> method to refresh the listView.</p>\n<p><strong>4.</strong> Create a DemoInfo class to includes title, desc and demoClass content. Implement the <code>loadDemoList()</code> method to add listView data source and implement the <code>mListView</code>&#39;s <code>setOnItemClickListener()</code> method. Then implement the <code>onListItemClick()</code> method by creating an Intent to launch the &quot;TapFly&quot; and &quot;ActiveTrack&quot; Activities from MainActivity.</p>\n<p><strong>5.</strong> Create the DemoListAdapter class, which extends from the BaseAdapter class, override the <code>getView()</code> method to update the <code>title</code> and <code>desc</code> variables&#39; text content. Also, override the <code>getCount()</code>, <code>getItem()</code> and <code>getitemId()</code> interface methods.</p>\n<h5 id=\"implementing-the-mainactivity-layout\">Implementing the MainActivity Layout</h5>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;fill_parent&quot;\n    android:layout_height=&quot;fill_parent&quot;\n    android:keepScreenOn=&quot;true&quot;\n    android:orientation=&quot;vertical&quot; &gt;\n\n    &lt;RelativeLayout\n        android:id=&quot;@+id/main_title_rl&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;40dp&quot;\n        android:background=&quot;@android:color/black&quot; &gt;\n\n        &lt;ImageButton\n            android:id=&quot;@+id/ReturnBtnMain&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;35dp&quot;\n            android:layout_alignParentLeft=&quot;true&quot;\n            android:layout_centerVertical=&quot;true&quot;\n            android:layout_marginLeft=&quot;20dp&quot;\n            android:adjustViewBounds=&quot;true&quot;\n            android:background=&quot;@android:color/transparent&quot;\n            android:onClick=&quot;onReturn&quot;\n            android:scaleType=&quot;centerInside&quot;\n            android:src=&quot;@drawable/selector_back_button&quot; /&gt;\n\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_centerInParent=&quot;true&quot;\n            android:text=&quot;@string/title_activity_mainactivity&quot;\n            android:textColor=&quot;@android:color/white&quot;\n            android:textSize=&quot;21sp&quot; /&gt;\n    &lt;/RelativeLayout&gt;\n    &lt;TextView android:id=&quot;@+id/version_tv&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Firmware version: N/A&quot;/&gt;\n    &lt;ListView\n        android:id=&quot;@+id/listView&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot; /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<p>  In the xml file, firstly, we implement the RelativeLayout element. We declare an ImageButton(id: ReturnBtnMain) element to exit the application, and a TextView(id: ConnectStatusTextView) element to show the connection status text. Next, create a TextView(id:version_tv) element to show the firmware version and a ListView(id:listView) element to show the list items.</p>\n<p>  Next, copy all the image files from this Github sample project to the <strong>drawable</strong> folders inside the <strong>res</strong> folder.</p>\n<p>  <img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/imageFiles.png\" alt=\"imageFiles\"></p>\n<p>  Moreover, open the AndroidManifest.xml file and update the &quot;.MainActivity&quot; activity element with several attributes as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;activity\n            android:name=&quot;.MainActivity&quot;\n            android:configChanges=&quot;orientation|screenSize&quot;\n            android:label=&quot;@string/title_activity_mainactivity&quot;\n            android:screenOrientation=&quot;landscape&quot;\n            android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n&lt;/activity&gt;</code></pre>\n<p>  Furthermore, open the &quot;strings.xml&quot; file in <strong>values</strong> folder and add the following string content:</p>\n<pre><code class=\"lang-xml\"> &lt;string name=&quot;title_activity_mainactivity&quot;&gt;P4MissionsDemo&lt;/string&gt;</code></pre>\n<p>   Lastly, let&#39;s create a new xml file named &quot;demo_ info_item.xml&quot; in the layout folder by right-clicking on the &quot;layout&quot; folder and select <strong>New-&gt;XML-&gt;Layout XML File</strong>. Then replace the code of the file with the following:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot; &gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/title&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:textSize=&quot;22sp&quot;\n        android:layout_marginTop=&quot;6dp&quot;\n        android:layout_marginBottom=&quot;3dp&quot;\n        android:layout_marginLeft=&quot;10dp&quot;\n        android:text=&quot;demo title&quot; /&gt;\n\n     &lt;TextView \n        android:id=&quot;@+id/desc&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:textSize=&quot;14sp&quot;\n        android:layout_marginBottom=&quot;6dp&quot;\n        android:layout_marginLeft=&quot;10dp&quot;\n        android:text=&quot;demo desc&quot;\n        android:textColor=&quot;@color/white&quot;/&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<p>This xml file will help to setup the two TextViews with &quot;title&quot; and &quot;desc&quot; ids for the convertView of DemoListAdapter.</p>\n<p>Now, if you check the activity_main.xml file, you can see the preview screenshot of MainActivity as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/mainActivityImage.png\" alt=\"MainActivity\"></p>\n<h4 id=\"4-creating-the-pointingtestactivity\">4. Creating the PointingTestActivity</h4>\n<h5 id=\"implementing-the-pointingtestactivity-class\">Implementing the PointingTestActivity Class</h5>\n<p>   Let&#39;s create a new Empty Activity class with the name of &quot;PointingTestActivity&quot; in the <code>com.dji.p4MissionsDemo</code> package. Replace the code with the following, remember to import the related classes as Android Studio suggested: </p>\n<pre><code class=\"lang-java\">public class PointingTestActivity extends DemoBaseActivity implements TextureView.SurfaceTextureListener, View.OnClickListener {\n\n    private static final String TAG = &quot;PointingTestActivity&quot;;\n    private ImageButton mPushDrawerIb;\n    private SlidingDrawer mPushDrawerSd;\n    private Button mStartBtn;\n    private ImageButton mStopBtn;\n    private TextView mPushTv;\n    private RelativeLayout mBgLayout;\n    private ImageView mRstPointIv;\n    private TextView mAssisTv;\n    private Switch mAssisSw;\n    private TextView mSpeedTv;\n    private SeekBar mSpeedSb;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_pointing_test);\n        initUI();\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n    }\n\n    private void initUI() {\n        mPushDrawerIb = (ImageButton)findViewById(R.id.pointing_drawer_control_ib);\n        mPushDrawerSd = (SlidingDrawer)findViewById(R.id.pointing_drawer_sd);\n        mStartBtn = (Button)findViewById(R.id.pointing_start_btn);\n        mStopBtn = (ImageButton)findViewById(R.id.pointing_stop_btn);\n        mPushTv = (TextView)findViewById(R.id.pointing_push_tv);\n        mBgLayout = (RelativeLayout)findViewById(R.id.pointing_bg_layout);\n        mRstPointIv = (ImageView)findViewById(R.id.pointing_rst_point_iv);\n        mAssisTv = (TextView)findViewById(R.id.pointing_assistant_tv);\n        mAssisSw = (Switch)findViewById(R.id.pointing_assistant_sw);\n        mSpeedTv = (TextView)findViewById(R.id.pointing_speed_tv);\n        mSpeedSb = (SeekBar)findViewById(R.id.pointing_speed_sb);\n\n        mPushDrawerIb.setOnClickListener(this);\n        mStartBtn.setOnClickListener(this);\n        mStopBtn.setOnClickListener(this);\n        mSpeedSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n                mSpeedTv.setText(progress + 1 + &quot;&quot;);\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {\n            }\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {\n            }\n        });\n    }\n\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    @Override\n    public void onClick(View v) {\n\n        if (v.getId() == R.id.pointing_drawer_control_ib) {\n            if (mPushDrawerSd.isOpened()) {\n                mPushDrawerSd.animateClose();\n            } else {\n                mPushDrawerSd.animateOpen();\n            }\n            return;\n        }\n    }\n}</code></pre>\n<p> Here, we implement several features: </p>\n<p><strong>1.</strong> Declare the UI member variables like ImageButton, TextView, SeekBar, etc. Then override the <code>onCreate()</code> method to invoke the <code>initUI()</code> method to initialize the UI elements of the Activity.</p>\n<p><strong>2.</strong> In the <code>initUI()</code> method, we create the member variables by invoking the <code>fineViewById()</code> method and passing the related id value declared in the associated layout xml file. Then call the <code>setOnClickListener()</code> method by assigning &quot;this&quot; to it for all the Button member variables. Next implement the SeekBar&#39;s <code>setOnSeekBarChangeListener()</code> method and override the three interface methods of OnSeekBarChangeListener. Here we update the text value of SeekBar in the <code>onProgresshanged()</code> method. </p>\n<p><strong>3.</strong> Lastly, we override the <code>onClick()</code> method to implement the click action of the <code>mPushDrawerIb</code> ImageButton. When you press the <code>mPushDrawerIb</code>, it will add animations when open and close the <code>mPushDrawerSd</code>, which is a <strong>SlidingDrawer</strong>.</p>\n<h5 id=\"working-on-pointingtestactivity-layout\">Working on PointingTestActivity Layout</h5>\n<p>  Open the colors.xml file in the <strong>values</strong> folder and replace the content with the following:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n    &lt;color name=&quot;button_normal&quot;&gt;#50808080&lt;/color&gt;\n    &lt;color name=&quot;button_press&quot;&gt;#5086BFFF&lt;/color&gt;\n    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;\n    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;\n&lt;/resources&gt;</code></pre>\n<p>  Here, we add button press and normal colors, white and black colors.</p>\n<p>  Moreover, add the two new string elements to the strings.xml file:</p>\n<pre><code class=\"lang-xml\">&lt;string name=&quot;push_info&quot;&gt;Push Info&lt;/string&gt;\n&lt;string name=&quot;title_activity_pointing_test&quot;&gt;TapFly Sample&lt;/string&gt;</code></pre>\n<p>  Then, update the styles.xml with the following code:</p>\n<pre><code class=\"lang-xml\">&lt;resources&gt;\n    &lt;!--\n        Base application theme, dependent on API level. This theme is replaced\n        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.\n    --&gt;\n    &lt;style name=&quot;AppBaseTheme&quot; parent=&quot;android:Theme.Light&quot;&gt;\n        &lt;!--\n            Theme customizations available in newer API levels can go in\n            res/values-vXX/styles.xml, while customizations related to\n            backward-compatibility can go here.\n        --&gt;\n    &lt;/style&gt;\n\n    &lt;!-- Application theme. --&gt;\n    &lt;style name=&quot;AppTheme&quot; parent=&quot;AppBaseTheme&quot;&gt;\n        &lt;!-- All customizations that are NOT specific to a particular API-level can go here. --&gt;\n    &lt;/style&gt;\n    &lt;style name=&quot;test_text&quot;&gt;\n        &lt;item name=&quot;android:shadowColor&quot;&gt;@color/black&lt;/item&gt;\n        &lt;item name=&quot;android:shadowDx&quot;&gt;2&lt;/item&gt;\n        &lt;item name=&quot;android:shadowDy&quot;&gt;1&lt;/item&gt;\n        &lt;item name=&quot;android:shadowRadius&quot;&gt;6&lt;/item&gt;\n        &lt;item name=&quot;android:textSize&quot;&gt;@dimen/test_log_textsize&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;\n    &lt;/style&gt;\n\n&lt;/resources&gt;</code></pre>\n<p>   Lastly, jump over to your associated layout in layout/activity_ pointing_test.xml and replace everything with the same xml file from the Github Sample Project, since the xml file&#39;s content is too much, we don&#39;t show them here. </p>\n<p>   For the UI, we declare a main title, a return button, a connect status text view, a pointing button, etc. Here is a screenshot of the preview of PointingTestActivity:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/tapFlyActivityUI.png\" alt=\"PointingTestActivity\"></p>\n<h4 id=\"5-creating-the-trackingtestactivity\">5. Creating the TrackingTestActivity</h4>\n<h5 id=\"working-on-trackingtestactivity-class\">Working on TrackingTestActivity Class</h5>\n<p>  Once you finish the steps above, let&#39;s create a new Empty Activity class with the name of &quot;TrackingTestActivity&quot; in the <code>com.dji.p4MissionsDemo</code> package. Replace the code with the following: </p>\n<pre><code class=\"lang-java\">public class TrackingTestActivity extends DemoBaseActivity implements TextureView.SurfaceTextureListener, View.OnClickListener {\n\n    private static final String TAG = &quot;TrackingTestActivity&quot;;\n    private ImageButton mPushDrawerIb;\n    private SlidingDrawer mPushInfoSd;\n    private ImageButton mStopBtn;\n    private Button mConfirmBtn;\n    private RelativeLayout mBgLayout;\n    private TextView mPushInfoTv;\n    private TextView mPushBackTv;\n    private Switch mPushBackSw;\n    private ImageView mSendRectIV;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_tracking_test);\n        initUI();\n    }\n\n    private void initUI() {\n        mPushDrawerIb = (ImageButton)findViewById(R.id.tracking_drawer_control_ib);\n        mPushInfoSd = (SlidingDrawer)findViewById(R.id.tracking_drawer_sd);\n        mStopBtn = (ImageButton)findViewById(R.id.tracking_stop_btn);\n        mConfirmBtn = (Button)findViewById(R.id.tracking_confirm_btn);\n        mBgLayout = (RelativeLayout)findViewById(R.id.tracking_bg_layout);\n        mPushInfoTv = (TextView)findViewById(R.id.tracking_push_tv);\n        mSendRectIV = (ImageView)findViewById(R.id.tracking_send_rect_iv);\n        mPushBackSw = (Switch)findViewById(R.id.tracking_pull_back_sw);\n        mPushBackTv = (TextView)findViewById(R.id.tracking_backward_tv);\n        mStopBtn.setOnClickListener(this);\n        mConfirmBtn.setOnClickListener(this);\n        mPushDrawerIb.setOnClickListener(this);\n    }\n\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.tracking_stop_btn:\n\n                break;\n            case R.id.tracking_confirm_btn:\n\n                break;\n            case R.id.tracking_drawer_control_ib:\n                if (mPushInfoSd.isOpened()) {\n                    mPushInfoSd.animateClose();\n                } else {\n                    mPushInfoSd.animateOpen();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}</code></pre>\n<p>Here, we implement several features: </p>\n<p><strong>1.</strong> Declare the UI member variables like ImageButton, SlidingDrawer, SeekBar, etc. Then override the <code>onCreate()</code> method to invoke the <code>initUI()</code> method to initialize the UI elements of the Activity.</p>\n<p><strong>2.</strong> In the <code>initUI()</code> method, we create the member variables by invoking the <code>fineViewById()</code> method and passing the related id value declared in the associated layout xml file. Then call the <code>setOnClickListener()</code> method by assigning &quot;this&quot; to it for all the Button member variables.</p>\n<p><strong>3.</strong> Lastly, we override the <code>onClick()</code> method to implement the click action of the <code>mStopBtn</code>, <code>mConfirmBtn</code> and <code>mPushDrawerIb</code> member variables. When you press the <code>mPushDrawerIb</code> ImageButton, it will add animation to open and close the <code>mPushInfoSd</code>.</p>\n<p>Next, open the strings.xml file and add the following code:</p>\n<pre><code class=\"lang-xml\">    &lt;string name=&quot;title_activity_tracking_test&quot;&gt;ActiveTrack Sample&lt;/string&gt;\n    &lt;string name=&quot;demo_desc_tracking&quot;&gt;ActiveTrack Mission&lt;/string&gt;\n    &lt;string name=&quot;demo_desc_pointing&quot;&gt;TapFly Mission&lt;/string&gt;</code></pre>\n<p>Finally, jump over to your associated layout in layout/activity_ tracking_test.xml and replace everything with the same xml file from the Github Sample Project, since the xml file&#39;s content is a lot, we don&#39;t show them here. For more details, please check the related xml file from the Github Sample Project of the demo project.</p>\n<p>For the UI, we declare a main title, a return button, a connect status text view, a TextureView to show live video stream, an ImageView to show the tracking rectangle, etc. Here is a screenshot of the preview of TrackingTestActivity:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/activeTrackActivityUI.png\" alt=\"PointingTestActivity\"></p>\n<h4 id=\"6-preview-the-ui-of-the-application\">6. Preview the UI of the Application</h4>\n<p>Now, let&#39;s open the dimens.xml file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n    &lt;!-- left button list --&gt;\n    &lt;dimen name=&quot;left_button_list_button_width&quot;&gt;150dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_height&quot;&gt;45dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_padding_left&quot;&gt;5dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_padding_right&quot;&gt;5dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_margin_left&quot;&gt;10dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_margin_top&quot;&gt;10dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_text_size&quot;&gt;14sp&lt;/dimen&gt;\n\n    &lt;dimen name=&quot;test_log_textsize&quot;&gt;17sp&lt;/dimen&gt;\n&lt;/resources&gt;</code></pre>\n<p>Next, open the AndroidManifest.xml file and modify the <strong>.PointingTestActivity</strong> and <strong>.TrackingTestActivity</strong> elements as shown below:</p>\n<pre><code class=\"lang-xml\">    &lt;activity\n        android:name=&quot;.TrackingTestActivity&quot;\n        android:label=&quot;@string/title_activity_tracking_test&quot;\n        android:launchMode=&quot;singleInstance&quot;\n        android:screenOrientation=&quot;landscape&quot;\n        android:theme=&quot;@android:style/Theme.Holo.NoActionBar.Fullscreen&quot; &gt;\n    &lt;/activity&gt;\n    &lt;activity\n        android:name=&quot;.PointingTestActivity&quot;\n        android:label=&quot;@string/title_activity_pointing_test&quot;\n        android:launchMode=&quot;singleInstance&quot;\n        android:screenOrientation=&quot;landscape&quot;\n        android:theme=&quot;@android:style/Theme.Holo.NoActionBar.Fullscreen&quot; &gt;\n    &lt;/activity&gt;</code></pre>\n<p>In the code above, we modify the label, launchMode, screenOrientation and theme attributes for the two Activities.</p>\n<p>We have gone through a long process to setup the UI of the application. Now, let&#39;s build and run the project and install it in your Android device to test it. Here we use Nexus 5 for testing. If everything goes well, you should see the following gif animation of the application:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/p4MissionsUIDemo.gif\" alt=\"p4MissionsUIDemo\"></p>\n<h3 id=\"registering-the-application\">Registering the Application</h3>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>1.</strong> Let&#39;s open the AndroidManifest.xml file and add the following elements to it:</p>\n<pre><code class=\"lang-xml\">\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.host&quot;\n        android:required=&quot;false&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.accessory&quot;\n        android:required=&quot;true&quot; /&gt;</code></pre>\n<p>Here, we add uses permissions and uses features for the app. They are required for registeration.</p>\n<p>Then add the following elements above the <strong>MainActivity</strong> activity element:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n        &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n        &lt;meta-data\n            android:name=&quot;com.dji.sdk.API_KEY&quot;\n            android:value=&quot;Please enter your App Key here.&quot; /&gt;\n        &lt;activity\n            android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n            android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n            &lt;/intent-filter&gt;\n            &lt;meta-data\n                android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n                android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n        &lt;/activity&gt;\n        &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n        &lt;/service&gt;\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, we enter the <strong>App Key</strong> of the application under the <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute. For more details of the AndroidManifest.xml file, please check the Github source code of the demo project.</p>\n<p><strong>2.</strong> After you finish the steps above, open the DJIDemoApplication.java file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onCreate() {\n    super.onCreate();\n    mHandler = new Handler(Looper.getMainLooper());\n    DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n    @Override\n    public void onGetRegisteredResult(DJIError error) {\n        Log.d(TAG, error == null ? &quot;Success&quot; : error.getDescription());\n        if(error == DJISDKError.REGISTRATION_SUCCESS) {\n            DJISDKManager.getInstance().startConnectionToProduct();\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        } else {\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;register sdk fails, check network is available&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n        Log.e(&quot;TAG&quot;, error.toString());\n    }\n\n    @Override\n    public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n        mProduct = newProduct;\n        if(mProduct != null) {\n            mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n        }\n        notifyStatusChange();\n    }\n};</code></pre>\n<p>  Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of DJISDKManagerCallback. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<h2 id=\"coordinate-transformations-for-missions\">Coordinate Transformations for Missions</h2>\n<p>Before we dive into the implementation of two missions, let&#39;s learn something about the special coordinate transformations of them.</p>\n<h3 id=\"tapfly-mission-coordinate-transformation\">TapFly Mission Coordinate Transformation</h3>\n<p>If we check the <strong>DJITapFlyMission.DJITapFlyMissionProgressStatus</strong> class, you can see the following two public methods:</p>\n<pre><code class=\"lang-java\">\npublic DJIVector getDirection ()\npublic PointF getImageLocation ()</code></pre>\n<p><strong>1.</strong> The <code>getDirection ()</code> method returns a DJIVector object, which represents a cartesian vector in 3D space. You can get the actual flying direction of the aircraft using the N-E-D(North-East-Down) coordinate system when the aircraft is executing a TapFly mission.</p>\n<p><strong>2.</strong> The <code>getImageLocation ()</code> method returns a PointF object, which represents the image point from the live video stream where the vision system should calculate the flight direction from. The image point is normalized to [0,1] where (0,0) is the top left corner and (1,1) is the bottom right.</p>\n<p>Here is a diagram to show the coordinate transformation of the mission:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/android_tapFlyMissionCoordinate.png\" alt=\"tapFlyMissionCoordinate\"></p>\n<p>As the diagram shown above, you can see the process of transformation.</p>\n<ul>\n<li><p>The <code>imageLocationToCalculateDirection</code> object shown above is transformed from TouchPoint (PointF) to a Video Stream Coordinate System PointF.</p>\n</li>\n<li><p>The <code>getDirection()</code> method shown above belongs to the <strong>N-E-D (North-East-Down) Coordinate System</strong> and you can invoke this method to get the field value from the SDK.</p>\n</li>\n<li><p>The <code>imageLocation()</code> method shown above belongs to the <strong>Video Stream Coordinate System</strong> and you can invoke this method to get the field value from the SDK.</p>\n</li>\n</ul>\n<p>So in our demo application, in order to implement the TapFly mission, we should transform the user&#39;s touch location (A PointF object) of Android View Coordinate System into the image location (A PointF object) of Video Stream Coordination System and pass it to the following <code>imageLocationToCalculateDirection</code> object of DJITapFlyMission:</p>\n<pre><code class=\"lang-java\">/**\n *  The image point from the video feed where the vision system should calculate the flight direction from. The image point is normalized to [0,1] where (0,0) is the top left corner and (1,1) is the bottom right.\n */\npublic PointF imageLocationToCalculateDirection</code></pre>\n<h3 id=\"activetrack-mission-coordinate-transformation\">ActiveTrack Mission Coordinate Transformation</h3>\n<p>Next, let&#39;s check the <strong>DJIActiveTrackMission.DJIActiveTrackMissionProgressStatus</strong> class, you may see the following public getter method:</p>\n<pre><code class=\"lang-java\">public RectF getTrackingRect()</code></pre>\n<p>Check the <strong>DJIActiveTrackMission</strong> class, you can also see this object:</p>\n<pre><code class=\"lang-java\">public RectF rect</code></pre>\n<p><strong>1.</strong> You can invoke the <code>trackingRect ()</code> method to get a RectF object which is a rectangle in the live video stream view image that represents the target being tracked. The rectangle is normalized to [0,1] where (0,0) is the top left of the video preview and (1,1) is the bottom right.</p>\n<p><strong>2.</strong> The <code>rect</code> object is a RectF class object, it represents a bounding box for the target. The rectangle is normalized to [0,1] where (0,0) is the top left of the video preview and (1,1) is the bottom right.</p>\n<p>   If the mission is initialized with a PointF object, the vision system will try to recognize object around the point and return the representative rect in the MissionProgressStatusCallback.</p>\n<p>   Here is a diagram to show the coordinate transformation of the ActiveTrack mission:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/android_ActiveTrackMissionCoordinateSystem.png\" alt=\"ActiveTrackMissionCoordinate\"></p>\n<p>As the diagram shown above, you can see the process of transformation. </p>\n<ul>\n<li>The <code>getTrackingRect()</code> method and <code>rect</code> object shown above belongs to the <strong>Video Stream Coordinate System</strong>.</li>\n</ul>\n<p>So in order to implement the ActiveTrack Mission, we should transform the user&#39;s touch rect (A RectF object) of Android View Coordinate System into the tracking rect (A RectF object) of Video Stream Coordination System and pass it to the <code>rect</code> object of DJIActiveTrackMission. You can get the tracking rect object by invoking the <code>getTrackingRect()</code> method of SDK. And you can use it to update the rectangle on your screen.</p>\n<h2 id=\"implementing-the-tapfly-mission\">Implementing the TapFly Mission</h2>\n<h3 id=\"updating-the-demobaseactivity\">Updating the DemoBaseActivity</h3>\n<p>Before we implement the TapFly Mission, we should update the DemoBaseActivity.java class to configure the live video streaming feature. Let&#39;s open the file and add the following codes to it:</p>\n<pre><code class=\"lang-java\">\nprotected TextureView mVideoSurface = null;\nprotected CameraReceivedVideoDataCallback mReceivedVideoDataCallBack = null;\nprotected DJIOnReceivedVideoCallback mOnReceivedVideoCallback = null;\nprotected DJICodecManager mCodecManager = null;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    IntentFilter filter = new IntentFilter();  \n    filter.addAction(DJIDemoApplication.FLAG_CONNECTION_CHANGE);\n    registerReceiver(mReceiver, filter);\n\n    mVideoSurface = (TextureView) findViewById(R.id.video_previewer_surface);\n\n    if (null != mVideoSurface) {\n        mVideoSurface.setSurfaceTextureListener(this);\n\n        mConnectStatusTextView = (TextView) findViewById(R.id.ConnectStatusTextView);\n\n        mReceivedVideoDataCallBack = new CameraReceivedVideoDataCallback() {\n\n            @Override\n            public void onResult(byte[] videoBuffer, int size) {\n                if(mCodecManager != null){\n                    mCodecManager.sendDataToDecoder(videoBuffer, size);\n                }\n            }\n        };\n    }\n    initPreviewer();\n}</code></pre>\n<p> Here we declare a TextureView(<code>mVideoSurface</code> object) to show the live video stream data. We use the <code>video_previewer_surface</code> id from its layout xml file to create the object. This id should be the same as PointingTestActivity and TrackingTestActivity&#39;s layout settings. Then create the callback variable <code>mReceivedVideoDataCallBack</code> to implement the DJICamera&#39;s interface methods for receiving video data.</p>\n<p> Moreover, we implement the <code>initPreviewer()</code> method as shown below to check product connection status and set the DJICameraReceivedVideoDataCallback method to DJICamera  object:</p>\n<pre><code class=\"lang-java\"> private void initPreviewer() {\n        try {\n            mProduct = DJIDemoApplication.getProductInstance();\n        } catch (Exception exception) {\n            mProduct = null;\n        }\n\n        if (null == mProduct || !mProduct.isConnected()) {\n            mCamera = null;\n            showToast(&quot;Disconnect&quot;);\n        } else {\n            if (!mProduct.getModel().equals(Model.UnknownAircraft)) {\n                mCamera = mProduct.getCamera();\n                if (mCamera != null){\n                    mCamera.setDJICameraReceivedVideoDataCallback(mReceivedVideoDataCallBack);\n                }\n            }\n        }\n    }</code></pre>\n<h3 id=\"working-on-the-pointingtestactivity\">Working on the PointingTestActivity</h3>\n<h4 id=\"showing-the-live-video-stream\">Showing the Live Video Stream</h4>\n<p>  Now let&#39;s come back to the PointingTestActivity.java class and override the <code>onCreate()</code> method firstly:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\n    setContentView(R.layout.activity_pointing_test);\n    super.onCreate(savedInstanceState);\n    initUI();\n}</code></pre>\n<p>  In the method shown above, we invoke the <code>setContentView()</code> method firstly to show the PointingTestActivity view. Then invoke the DemoBaseActivity class&#39;s <code>onCreate()</code> method to implement the live video stream showing methods. Lastly, invoke the <code>initUI()</code> to initialize all the UI elements.</p>\n<h4 id=\"working-on-the-tapfly-mission\">Working on the TapFly Mission</h4>\n<p>Before we start to create the DJITapFlyMission object, let&#39;s check the three member variables we can set for each DJITapFlyMission:</p>\n<p><strong>1.</strong> AutoFlightSpeed</p>\n<p>You can set the aircraft&#39;s auto flight speed during the mission by setting this member variable for DJITapFlyMission. The range for it is [1, 10] m/s.</p>\n<p><strong>2.</strong> IsHorizontalObstacleAvoidanceEnabled</p>\n<p>If you want to allow the aircraft to bypass or move around an obstacle by going to the left or right of the obstacle when executing TapFly mission, you can set this member variable to YES. Otherwise, the aircraft will only go over an obstacle to avoid it.</p>\n<p><strong>3.</strong> ImageLocationToCalculateDirection</p>\n<p>This is where we should pass the coordinate transformation PointF object to, we can use the <code>getTapFlyPoint()</code> method to do the coordinate transformation and return the PointF object. It&#39;s the image point from the video feed where the vision system should calculate the flight direction from.</p>\n<h5 id=\"prepare-mission\">Prepare Mission</h5>\n<p><strong>1.</strong> Firslty, let&#39;s implement the <code>initMissionManager()</code> method to initialize the <code>mMissionManager</code> and <code>mTapFlyMission</code> variables. Also, we set MissionProgressStatusCallback and MissionExecutionFinishedCallback of DJIMissionManager to <code>this</code>:</p>\n<pre><code class=\"lang-java\">private void initMissionManager() {\n    DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n\n    if (product == null || !product.isConnected()) {\n        setResultToToast(&quot;Disconnected&quot;);\n        mMissionManager = null;\n    } else {\n        mMissionManager = product.getMissionManager();\n        mMissionManager.setMissionProgressStatusCallback(this);\n        mMissionManager.setMissionExecutionFinishedCallback(this);\n    }\n    mTapFlyMission = new DJITapFlyMission();\n}</code></pre>\n<p><strong>2.</strong> Next, implement the following two methods to manage the mission coordinate transformations:</p>\n<pre><code class=\"lang-java\">private PointF getTapFlyPoint(View iv) {\n    if (iv == null) return null;\n    View parent = (View)iv.getParent();\n    float centerX = iv.getLeft() + iv.getX()  + ((float)iv.getWidth()) / 2;\n    float centerY = iv.getTop() + iv.getY() + ((float)iv.getHeight()) / 2;\n    centerX = centerX &lt; 0 ? 0 : centerX;\n    centerX = centerX &gt; parent.getWidth() ? parent.getWidth() : centerX;\n    centerY = centerY &lt; 0 ? 0 : centerY;\n    centerY = centerY &gt; parent.getHeight() ? parent.getHeight() : centerY;\n\n    return new PointF(centerX / parent.getWidth(), centerY / parent.getHeight());\n}\n\nprivate void showPointByTapFlyPoint(final PointF point, final ImageView iv) {\n    if (point == null || iv == null) {\n        return;\n    }\n    final View parent = (View)iv.getParent();\n     PointingTestActivity.this.runOnUiThread(new Runnable() {\n\n         @Override\n         public void run() {\n             iv.setX(point.x * parent.getWidth() - iv.getWidth() / 2);\n             iv.setY(point.y * parent.getHeight() - iv.getHeight() / 2);\n             iv.setVisibility(View.VISIBLE);\n             iv.requestLayout();\n         }\n     });\n}</code></pre>\n<p>   We can use the <code>getTapFlyPoint()</code> method to transform the tap point position of Android View coordinate system to the video stream coordinate system. In contrast, we use the <code>showPointByTapFlyPoint()</code> method to transform the tap point position(We use <code>mRstPointIv</code> to represent it) from video stream coordinate system back to the Android View coordinate system and show it on screen.</p>\n<p><strong>3.</strong> Moreover, let&#39;s override the <code>onTouch()</code> method to track the ACTION_UP gesture of MotionEvent:</p>\n<pre><code class=\"lang-java\">\n@Override\npublic boolean onTouch(View v, MotionEvent event) {\n    if (v.getId() == R.id.pointing_bg_layout) {\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_UP:\n            if (mMissionManager != null) {\n                mStartBtn.setVisibility(View.VISIBLE);\n                mStartBtn.setX(event.getX() - mStartBtn.getWidth() / 2);\n                mStartBtn.setY(event.getY() - mStartBtn.getHeight() / 2);\n                mStartBtn.requestLayout();\n                mTapFlyMission.imageLocationToCalculateDirection = getTapFlyPoint(mStartBtn);\n                mMissionManager.prepareMission(mTapFlyMission, null, new DJICompletionCallback() {\n\n                    @Override\n                    public void onResult(DJIError error) {\n                        if (error == null) {\n                            setVisible(mStartBtn, true);\n                        } else {\n                            setVisible(mStartBtn, false);\n                        }\n                        setResultToToast(error == null ? &quot;Success&quot; : error.getDescription());\n                    }\n                });\n            } else {\n                setResultToToast(&quot;Mission manager is null&quot;);\n            }\n            break;\n\n        default:\n            break;\n        }\n    }\n    return true;\n}</code></pre>\n<p>Here, we update the <code>mStartBtn</code>&#39;s position to the position user press. Then we invoke the <code>getTapFlyPoint()</code> method to do the coordinate transformation and pass it to DJITapFlyMission&#39;s <code>imageLocationToCalculateDirection</code> member variable. Lastly, invoke the <code>prepareMission()</code> method of DJIMissionManager to prepare the DJITapFlyMission.</p>\n<h5 id=\"start-and-stop-mission\">Start and Stop Mission</h5>\n<p>Next, let&#39;s override the <code>onClick()</code> method to implement the click action of <code>mStartBtn</code> and <code>mStopBtn</code> buttons to start and stop the DJITapFlyMission:</p>\n<pre><code class=\"lang-java\">    @Override\n    public void onClick(View v) {\n        if (v.getId() == R.id.pointing_drawer_control_ib) {\n            if (mPushDrawerSd.isOpened()) {\n                mPushDrawerSd.animateClose();\n            } else {\n                mPushDrawerSd.animateOpen();\n            }\n            return;\n        }\n        if (mMissionManager != null) {\n            switch (v.getId()) { \n            case R.id.pointing_start_btn:\n                mTapFlyMission.autoFlightSpeed = getSpeed();\n                mTapFlyMission.isHorizontalObstacleAvoidanceEnabled = mAssisSw.isChecked();\n                mMissionManager.startMissionExecution(new DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError error) {\n                        if (error == null) {\n                            setVisible(mStartBtn, false);\n                            setVisible(mStopBtn, true);\n                            setVisible(mAssisTv, false);\n                            setVisible(mAssisSw, false);\n                        } else {\n                            setVisible(mStartBtn, true);\n                            setVisible(mStopBtn, false);\n                            setVisible(mAssisTv, true);\n                            setVisible(mAssisSw, true);\n                        }\n                        setResultToToast(&quot;Start: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n                    }\n                });\n                break;\n            case R.id.pointing_stop_btn:\n                mMissionManager.stopMissionExecution(new DJICompletionCallback() {\n\n                    @Override\n                    public void onResult(DJIError error) {\n                        setResultToToast(&quot;Stop: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n                    } \n                });\n                break; \n\n            default:\n                break;\n            }\n        } else {\n            setResultToToast(&quot;Mission manager is null&quot;);\n        }\n    }</code></pre>\n<p>In the code above, we use a switch statement to identify the <code>mStartBtn</code> and <code>mStopBtn</code> buttons&#39; click action. In the &#39;mStartBtn&#39; click action case, firstly set the <code>autoFlightSpeed</code> and <code>isHorizontalObstacleAvoidanceEnabled</code> member variables of DJITapFlyMission. Then we invoke the <code>startMissionExecution()</code> method of DJIMissionManager to start the mission and update the visibilities of buttons. </p>\n<p>In the <code>mStopBtn</code> click action case, we invoke the <code>stopMissionExecution()</code> method of DJIMissionManager to stop the DJITapFlyMission.</p>\n<h5 id=\"missionmanager-callback\">MissionManager Callback</h5>\n<p>Finally, let&#39;s override the two Mission Manager&#39;s callback methods:</p>\n<pre><code class=\"lang-java\">    /**\n     * @Description : MissionExecutionFinishedCallback Method\n     */\n    @Override\n    public void onResult(DJIError error) {\n        setResultToText(&quot;Execution finished: &quot; + (error == null ? &quot;Success!&quot; : error.getDescription()));\n        setResultToToast(&quot;Execution finished: &quot; + (error == null ? &quot;Success!&quot; : error.getDescription()));\n        setVisible(mRstPointIv, false);\n        setVisible(mStopBtn, false);\n        setVisible(mAssisTv, true);\n        setVisible(mAssisSw, true);\n    }\n\n    /**\n     * @Description MissionProgressStatusCallback Method\n     */\n    @Override\n    public void missionProgressStatus(DJIMissionProgressStatus progressStatus) {\n        if (progressStatus instanceof DJITapFlyMissionProgressStatus) {\n            DJITapFlyMissionProgressStatus pointingStatus = (DJITapFlyMissionProgressStatus)progressStatus;\n            StringBuffer sb = new StringBuffer();\n            Utils.addLineToSB(sb, &quot;Flight state&quot;, pointingStatus.getExecutionState().name());\n            Utils.addLineToSB(sb, &quot;pointing direction X&quot;, pointingStatus.getDirection().x);\n            Utils.addLineToSB(sb, &quot;pointing direction Y&quot;, pointingStatus.getDirection().y);\n            Utils.addLineToSB(sb, &quot;pointing direction Z&quot;, pointingStatus.getDirection().z);\n            Utils.addLineToSB(sb, &quot;point x&quot;, pointingStatus.getImageLocation().x);\n            Utils.addLineToSB(sb, &quot;point y&quot;, pointingStatus.getImageLocation().y);\n            Utils.addLineToSB(sb, &quot;Bypass state&quot;, pointingStatus.getBypassDirection().name());\n            Utils.addLineToSB(sb, &quot;Error&quot;, pointingStatus.getError());\n            setResultToText(sb.toString());\n            showPointByTapFlyPoint(pointingStatus.getImageLocation(), mRstPointIv);\n        }\n    }</code></pre>\n<p>  When the mission finish executing, the <code>onResult()</code> callback method will be called, and we can update the UI and show result here. Moreover, we can use the <code>missionProgressStatus()</code> callback method to update the mission progress status by showing logs on <code>mPushTv</code> TextView and update the <code>mRstPointIv</code> location on screen.</p>\n<p>  BTW, you may notice the <code>addLineToSB()</code> method of Tools class here, we should then create a new Java class, named &quot;Utils.java&quot; and replace the code of the file with the same file in Github Source code of this demo project.</p>\n<p>  For more implementation details of the PointingTestActivity.java file, please check the Github source code. </p>\n<p>Now let&#39;s build and run the project to install the app to your Android device, if everything goes well, you should be able to use the TapFly mission of Phantom 4 now.</p>\n<blockquote>\n<p><strong>Important</strong>: Remember to switch the remote controller to <strong>P</strong> mode before you test the TapFly mission.</p>\n</blockquote>\n<p>   Here are two gif animations for you to get a better understanding of using the TapFly mission, especially the <strong>Horizontal Obstacle Avoidance</strong> feature:</p>\n<ul>\n<li>Enable Horizontal Obstacle Avoidance</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/tapFlyLeftRightAnimate.gif\" alt=\"tapFlyMissionHoriGif\"></p>\n<p>   In the animation, you can see there are two flat surface obstacles stand towards the Phantom 4. We tap on the right obstacle and ask the Phantom 4 to fly towards it. With the help of the front obstacle sensors, Phantom 4 won&#39;t hit the obstacle and crash. You may notice that we switch on the &quot;Horizontal Obstacle Avoidance Enable&quot; before the TapFly mission start. </p>\n<p>   Press the <strong>GO</strong> button, Phantom 4 will start to fly towards it. When flying close to the obstacle, the Obstacle Sensing System will help to adjust the aircraft&#39;s attitude and fly towards the left side of it. </p>\n<ul>\n<li>Disable Horizontal Obstacle Avoidance</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/tapFlyAnimate.gif\" alt=\"tapFlyMissionHoriGif\"></p>\n<p>   If we switch off the &quot;Horizontal Obstacle Avoidance Enable&quot;, when the Phantom 4 fly close to the obstacle, it will rise to avoid the obstacle and continue to fly towards the origin direction. When you want to stop the mission, just press the <strong>X</strong> button, Phantom 4 will stop immediately and hover there.</p>\n<h2 id=\"implementing-activetrack-mission\">Implementing ActiveTrack Mission</h2>\n<h3 id=\"working-on-the-trackingtestactivity\">Working on the TrackingTestActivity</h3>\n<h4 id=\"showing-the-live-video-stream\">Showing the Live Video Stream</h4>\n<p>  Now let&#39;s go to TrackingTestActivity.java class and override the <code>onCreate()</code> method firstly:</p>\n<pre><code class=\"lang-java\">    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        setContentView(R.layout.activity_tracking_test);\n        super.onCreate(savedInstanceState);\n        initUI();\n    }</code></pre>\n<p>  In the method shown above, we invoke the <code>setContentView()</code> method firstly to show the TrackingTestActivity view. Then invoke the DemoBaseActivity class&#39;s <code>onCreate()</code> method to implement the live video stream showing methods. Lastly, invoke the <code>initUI()</code> to initialize all the UI elements.</p>\n<h4 id=\"working-on-the-activetrack-mission\">Working on the ActiveTrack Mission</h4>\n<h5 id=\"prepare-and-start-mission\">Prepare and Start Mission</h5>\n<p><strong>1.</strong> Now, let&#39;s implement the <code>initMissionManager()</code> method to initialize the <code>mMissionManager</code> variable. Also, we set MissionProgressStatusCallback and MissionExecutionFinishedCallback of DJIMissionManager to <code>this</code>:</p>\n<pre><code class=\"lang-java\">    private void initMissionManager() {\n        DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n\n        if (product == null || !product.isConnected()) {\n            setResultToToast(&quot;Disconnected&quot;);\n            mMissionManager = null;\n        } else {\n            mMissionManager = product.getMissionManager();\n            mMissionManager.setMissionProgressStatusCallback(this);\n            mMissionManager.setMissionExecutionFinishedCallback(this);\n        }\n    }</code></pre>\n<p><strong>2.</strong> Next, implement the following two methods to manage the mission coordinate transformations:</p>\n<p>   We can use the <code>getActiveTrackRect()</code> method to transform the tracking rectangle of Android View coordinate system to the video stream coordinate system. In contrast, we use the <code>updateActiveTrackRect()</code> method to transform the tracking rectangle (We use <code>mConfirmBtn</code> to represent it) from video stream coordinate system back to the Android View coordinate system and show it on screen.</p>\n<pre><code class=\"lang-java\">private RectF getActiveTrackRect(View iv) {\n        View parent = (View)iv.getParent();\n        return new RectF(\n                ((float)iv.getLeft() + iv.getX()) / (float)parent.getWidth(),\n                ((float)iv.getTop() + iv.getY()) / (float)parent.getHeight(),\n                ((float)iv.getRight() + iv.getX()) / (float)parent.getWidth(),\n                ((float)iv.getBottom() + iv.getY()) / (float)parent.getHeight()\n        );\n    }\n\n    private void updateActiveTrackRect(final TextView iv, final DJIActiveTrackMissionProgressStatus progressStatus) {\n        if (iv == null || progressStatus == null) return;\n        View parent = (View)iv.getParent();\n        RectF trackingRect = progressStatus.getTrackingRect();\n\n        final int l = (int)((trackingRect.centerX() - trackingRect.width() / 2) * parent.getWidth());\n        final int t = (int)((trackingRect.centerY() - trackingRect.height() / 2) * parent.getHeight());\n        final int r = (int)((trackingRect.centerX() + trackingRect.width() / 2) * parent.getWidth());\n        final int b = (int)((trackingRect.centerY() + trackingRect.height() / 2) * parent.getHeight());\n\n        TrackingTestActivity.this.runOnUiThread(new Runnable() {\n\n            @Override\n            public void run() {\n                if (progressStatus.getExecutionState() == DJIActiveTrackMissionExecutionState.TrackingWithLowConfidence ||\n                        progressStatus.getExecutionState() == DJIActiveTrackMissionExecutionState.CannotContinue) {\n                    iv.setBackgroundColor(0x55ff0000);\n                    iv.setClickable(false);\n                    iv.setText(&quot;&quot;);\n                } else if (progressStatus.getExecutionState() == DJIActiveTrackMissionExecutionState.WaitingForConfirmation) {\n                    iv.setBackgroundColor(0x5500ff00);\n                    iv.setClickable(true);\n                    iv.setText(&quot;OK&quot;);\n                } else {\n                    iv.setBackgroundResource(R.drawable.visual_track_now);\n                    iv.setClickable(false);\n                    iv.setText(&quot;&quot;);\n                }\n                if (progressStatus.getExecutionState() == DJIActiveTrackMissionExecutionState.TargetLost) {\n                    iv.setVisibility(View.INVISIBLE);\n                } else {\n                    iv.setVisibility(View.VISIBLE);\n                }\n                iv.setX(l);\n                iv.setY(t);\n                iv.getLayoutParams().width = r - l;\n                iv.getLayoutParams().height = b - t;\n                iv.requestLayout();\n            }\n        });\n\n    }</code></pre>\n<p>  In the implementation of <code>updateActiveTrackRect()</code> method, we can use the <code>getExecutionState()</code> method of DJIActiveTrackMissionProgressStatus to get the mission execution state and update the UI and tracking rectangle&#39;s location. Here is the details of the state:</p>\n<ul>\n<li><p><strong>CannotContinue</strong> :  Used when tracking cannot continue for reasons other than low confidence. </p>\n</li>\n<li><p><strong>TargetLost</strong> :  The tracking target is lost. </p>\n</li>\n<li><p><strong>Tracking</strong> :  The ActiveTrack Mission is tracking a target.</p>\n</li>\n<li><p><strong>TrackingWithLowConfidence</strong> :  The ActiveTrack Mission is tracking a target with low confidence. </p>\n</li>\n<li><p><strong>Unknown</strong> :  Unknown state. </p>\n</li>\n<li><p><strong>WaitingForConfirmation</strong> :  At the start of a mission, when a mission is resumed or anytime the aircraft looses sufficient confidence the target it is tracking, the aircraft will ask for confirmation that it is tracking the correct object. </p>\n</li>\n</ul>\n<p><strong>3.</strong> The Phantom 4&#39;s ActiveTrack Mission can track both moving subjects and humans.</p>\n<ul>\n<li><p>Track Moving Subjects</p>\n<p>For moving subjests, you need to provide a RectF object of tracking rectangle to the DJIActiveTrackMission method&#39;s <code>RectF</code> parameter.</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">  DJIActiveTrackMission activeTrackMission = new DJIActiveTrackMission(getActiveTrackRect(mSendRectIV));</code></pre>\n<ul>\n<li><p>Track Humans</p>\n<p>For humans, you can provide a PointF object of tracking point to the DJIActiveTrackMission method&#39;s <code>PointF</code> parameter. Like you can tap on the human on your Android&#39;s screen.</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">  DJIActiveTrackMission activeTrackMission = new DJIActiveTrackMission(new PointF(downX / mBgLayout.getWidth(), downY / mBgLayout.getHeight());</code></pre>\n<p>Moreover, let&#39;s override the <code>onTouch()</code> method to track the ACTION_DOWN, ACTION_MOVE and ACTION_UP gestures of MotionEvent:</p>\n<pre><code class=\"lang-java\">@Override\n    public boolean onTouch(View v, MotionEvent event) {\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                isDrawingRect = false;\n                downX = event.getX();\n                downY = event.getY();\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (calcManhattanDistance(downX, downY, event.getX(), event.getY()) &lt; 20 &amp;&amp; !isDrawingRect) {\n                    return true;\n                }\n                isDrawingRect = true;\n                mSendRectIV.setVisibility(View.VISIBLE);\n                int l = (int)(downX &lt; event.getX() ? downX : event.getX());\n                int t = (int)(downY &lt; event.getY() ? downY : event.getY());\n                int r = (int)(downX &gt;= event.getX() ? downX : event.getX());\n                int b = (int)(downY &gt;= event.getY() ? downY : event.getY());\n                mSendRectIV.setX(l);\n                mSendRectIV.setY(t);\n                mSendRectIV.getLayoutParams().width = r - l;\n                mSendRectIV.getLayoutParams().height = b - t;\n                mSendRectIV.requestLayout();\n                break;\n\n            case MotionEvent.ACTION_UP:\n                if (mMissionManager != null) {\n                    DJIActiveTrackMission activeTrackMission = isDrawingRect ? new DJIActiveTrackMission(getActiveTrackRect(mSendRectIV)) : new DJIActiveTrackMission(new PointF(downX / mBgLayout.getWidth(), downY / mBgLayout.getHeight()));\n                    activeTrackMission.isRetreatEnabled = mPushBackSw.isChecked();\n                    mMissionManager.prepareMission(activeTrackMission, null, new DJICompletionCallback() {\n                        @Override\n                        public void onResult(DJIError error) {\n                            if (error == null) {\n                                mMissionManager.startMissionExecution(new DJICompletionCallback() {\n                                    @Override\n                                    public void onResult(final DJIError error) {\n                                        TrackingTestActivity.this.runOnUiThread(new Runnable() {\n                                            @Override\n                                            public void run() {\n                                                if (error == null) {\n                                                    mStopBtn.setVisibility(View.VISIBLE);\n                                                    mPushBackSw.setVisibility(View.INVISIBLE);\n                                                    mPushBackTv.setVisibility(View.INVISIBLE);\n                                                }\n                                            }\n                                        });\n                                        setResultToToast(&quot;Start: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n                                    }\n                                });\n                            } else {\n                                setResultToToast(&quot;Prepare: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n                            }\n                        }\n                    });\n                } else {\n                    setResultToToast(&quot;No mission manager!!!&quot;);\n                }\n                mSendRectIV.setVisibility(View.INVISIBLE);\n                break;\n            default:\n                break;\n        }\n\n        return true;\n    }</code></pre>\n<p>Here, we update the <code>mSendRectIV</code>&#39;s size and position according to the user&#39;s drawing position on the screen. Then when the user trigger the ACTION_UP gesture, we create the DJIActiveTrackMission object based on the <code>isDrawingRect</code> bool variable.</p>\n<p>We invoke the <code>getActiveTrackRect()</code> method to do the coordinate transformation and pass the RectF to <code>DJIActiveTrackMission()</code> method. Also, we pass the <code>mPushBackSw</code>&#39;s isChecked() value to the <code>isRetreatEnabled</code> member variable of DJIActiveTrackMission to control the retreat feature.</p>\n<p>Lastly, invoke the <code>prepareMission()</code> method of DJIMissionManager to prepare the DJIActiveTrackMission.</p>\n<h5 id=\"stop-mission\">Stop Mission</h5>\n<p>Next, let&#39;s override the <code>onClick()</code> method to implement the click action features of <code>mPushDrawerIb</code>, <code>mStopBtn</code> and <code>mConfirmBtn</code> buttons.</p>\n<pre><code class=\"lang-java\">    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.tracking_stop_btn:\n                mMissionManager.stopMissionExecution(new DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError error) {\n                        setResultToToast(error == null ? &quot;Success!&quot; : error.getDescription());\n                    }\n                });\n                break;\n            case R.id.tracking_confirm_btn:\n                DJIActiveTrackMission.acceptConfirmation(new DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError error) {\n                        setResultToToast(error == null ? &quot;Success!&quot; : error.getDescription());\n                    }\n                });\n                break;\n            case R.id.tracking_drawer_control_ib:\n                if (mPushInfoSd.isOpened()) {\n                    mPushInfoSd.animateClose();\n                } else {\n                    mPushInfoSd.animateOpen();\n                }\n                break;\n            default:\n                break;\n        }\n    }</code></pre>\n<p>In the code above, we use a switch statement to identify the <code>mPushDrawerIb</code>, <code>mStopBtn</code> and <code>mConfirmBtn</code> buttons&#39; click action. In the <code>mStopBtn</code> click action case, we invoke the <code>stopMissionExecution()</code> method of DJIMissionManager to stop the mission and show result. </p>\n<p>In the <code>mConfirmBtn</code> click action case, we invoke the <code>acceptConfirmation()</code> method of DJIMissionManager to accept the confirmation of the tracking rectangle.</p>\n<h5 id=\"missionmanager-callback\">MissionManager Callback</h5>\n<p>Finally, let&#39;s override the two Mission Manager&#39;s callback methods:</p>\n<pre><code class=\"lang-java\">    /**\n     * @Description : MissionExecutionFinishedCallback Method\n     */\n    @Override\n    public void onResult(DJIError error) {\n        setResultToText(&quot;Execution finished: &quot; + (error == null ? &quot;Success!&quot; : error.getDescription()));\n        setResultToToast(&quot;Execution finished: &quot; + (error == null ? &quot;Success!&quot; : error.getDescription()));\n        TrackingTestActivity.this.runOnUiThread(new Runnable() {\n\n            @Override\n            public void run() {\n                mConfirmBtn.setVisibility(View.INVISIBLE);\n                mStopBtn.setVisibility(View.INVISIBLE);\n                mStopBtn.setClickable(false);\n                mPushBackTv.setVisibility(View.VISIBLE);\n                mPushBackSw.setVisibility(View.VISIBLE);\n            }\n        });\n    }\n\n    /**\n     * @Description MissionProgressStatusCallback Method\n     */\n    @Override\n    public void missionProgressStatus(DJIMissionProgressStatus progressStatus) {\n        if (progressStatus instanceof DJIActiveTrackMissionProgressStatus) {\n            DJIActiveTrackMissionProgressStatus trackingStatus = (DJIActiveTrackMissionProgressStatus)progressStatus;\n            StringBuffer sb = new StringBuffer();\n            Utils.addLineToSB(sb, &quot;center x&quot;, trackingStatus.getTrackingRect().centerX());\n            Utils.addLineToSB(sb, &quot;center y&quot;, trackingStatus.getTrackingRect().centerY());\n            Utils.addLineToSB(sb, &quot;width&quot;, trackingStatus.getTrackingRect().width());\n            Utils.addLineToSB(sb, &quot;height&quot;, trackingStatus.getTrackingRect().height());\n            Utils.addLineToSB(sb, &quot;Executing State&quot;, trackingStatus.getExecutionState().name());\n            Utils.addLineToSB(sb, &quot;is human&quot;, trackingStatus.isHuman());\n            Utils.addLineToSB(sb, &quot;Error&quot;, trackingStatus.getError() == null ? &quot;Null&quot; : trackingStatus.getError().getDescription());\n            setResultToText(sb.toString());\n            updateActiveTrackRect(mConfirmBtn, trackingStatus);\n        }\n    }</code></pre>\n<p>  When the mission finish executing, the <code>onResult()</code> callback method will be called, and we can update the UI and show result here. Moreover, we can use the <code>missionProgressStatus()</code> callback method to update the mission progress status by showing logs on <code>mPushInfoTv</code> TextView and update the <code>mConfirmBtn</code> location on screen.</p>\n<p>  For more implementation details of the TrackingTestActivity.java file, please check the Github source code. </p>\n<p>Now let&#39;s build and run the project, if everything goes well, you should be able to use the ActiveTrack mission of Phantom 4 now. </p>\n<blockquote>\n<p><strong>Important</strong>: Remember to switch the remote controller to <strong>P</strong> mode before you test the ActiveTrack mission.</p>\n</blockquote>\n<p>Here is a gif animation for you to get a better understanding of using the ActiveTrack mission:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/Phantom4Missions/activeTrackAnimate.gif\" alt=\"ActiveTrackMissionGif\"></p>\n<p>   In the animation, you can see there is a person standing there, you can touch the screen to draw a green rectangle on him. Then the &quot;OK&quot; text will appear on the green rectangle to ask you for confirmation. You can tap on the rectangle to confirm it.</p>\n<p>   After the confirmation, the ActiveTrack mission starts. The person walks around and the green rectangle will follow it to track its movement. This means that Phantom 4 is now tracking you automatically!</p>\n<p>   Press the <strong>X</strong> button if you want to stop the ActiveTrack mission. By the way, you can try to switch on the &quot;RetreatEnabled&quot; switcher on the top left corner of the screen to enable the <strong>Retreat</strong> feature. Once you go towards the Phantom 4, it will fly backwards.</p>\n<h3 id=\"using-the-dji-assistant-2-for-mission-testing\">Using the DJI Assistant 2 for Mission Testing</h3>\n<p>Since most of our developers don&#39;t have a perfect testing environment, like a big indoor space, wide backyard, etc. If we need to go outdoors and bring our latop to debug and test our application everytime, it&#39;s time consuming and not efficient. </p>\n<p>Luckily, we have a new DJI Assistant 2 (Includes the 3D Simulator) for you to test the mission easily on your Mac. The simulator creates a virtual 3D environment from flight data transmitted to the Mac.</p>\n<p>You can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-Assistant-2-Simulator\">Using DJI Assistant 2 Simulator</a> for its basic usage.</p>\n<p>Now you can connect your Android which is running the demo application to the remote controller, and start to test the <strong>TapFly</strong> and <strong>ActiveTrack</strong> missions on the simulator of DJI Assistant 2.  </p>\n<p>By the way, you can use Wireless Android Debug Bridge (adb) to debug the app using Android Studio when your android device is connecting to the remote controller. If you are not familiar with Android Debug Bridge, please check this <a href=\"http://developer.android.com/tools/help/adb.html\" target=\"_blank\"> link </a> for details.</p>\n<h3 id=\"summary\">Summary</h3>\n<p>  Congratulations! You&#39;ve finished the demo project and implement the two cool <strong>TapFly</strong> and <strong>ActiveTrack</strong> missions using DJI Mobile SDK. It&#39;s easy and straightforward. You&#39;ve learned how to use the DJITapFlyMission, DJIActiveTrackMission and DJIMissionManager to implement the features.</p>\n<p>  But, In order to make a cool <strong>TapFly</strong> and <strong>ActiveTrack</strong> mission application, you still have a long way to go. You can add more necessary features like showing the battery percentage, GPS signal quality, add a checklist like DJI Go app to check the aircraft status before flying, etc. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a TapFly and ActiveTrack Missions Application","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-Phantom4Missions"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI Forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use the DJISimulator in your Android Studio project using DJI Mobile SDK. With the help of Virtual Stick control, you can input Virtual Stick flight control data and check the changes of simulator state in real time.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<p>We use Phantom 4 as an example to make this demo.</p>\n<p>Let&#39;s get started!</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>DJISimulator is used to control the aircraft in a simulated environment based on the virtual stick input. The simulated aircraft state information will also be displayed on the screen.</p>\n<p>You can use the <code>DJISimulator</code> class in <code>DJIFlightController</code> to control the simulation. It allows both manual and automated flights to be simulated without actually flying the aircraft.</p>\n<p>Additionally, simulator initialization, monitoring and termination can be controlled directly through the SDK allowing for application development in continuous integration environments.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>In the <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a> tutorial, you have learned how to import the DJI Android SDK into your Android Studio project and activate your application. If you haven&#39;t read that previously, please take a look at it. Once you&#39;ve done that, let&#39;s continue to create the project.</p>\n<h3 id=\"importing-sdk-library\">Importing SDK Library</h3>\n<p><strong>1</strong>. Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &#39;DJISimulatorDemo&#39;. Enter the company domain and package name (Here we use &quot;com.dji.simulatorDemo&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<p> <strong>2</strong>. Unzip the Android SDK package downloaded from <a href=\"http://developer.dji.com/mobile-sdk/downloads/\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/importsSDK.png\" alt=\"importSDK\"></p>\n<p> <strong>3</strong>. Next, double click on the &quot;build.gradle(Module: app)&quot; in the project navigator to open it and replace the content with the followings:</p>\n<pre><code class=\"lang-java\">apply plugin: &#39;com.android.application&#39;\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion &quot;23.0.3&quot;\n\n    defaultConfig {\n        applicationId &quot;com.dji.simulatorDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n\n}</code></pre>\n<p>  Here, we modify its dependencies by adding <code>compile project(&#39;:dJISDKLIB&#39;)</code> in the &quot;dependencies&quot; part at the bottom, and change the <strong>compileSdkVersion</strong>, <strong>buildToolsVersion</strong> number, etc. </p>\n<p> <img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/buildGradle.png\" alt=\"configureAndroidSDK\"></p>\n<p> Then, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p> <strong>4</strong>. Let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/dependencies.png\" alt=\"dependencies\"></p>\n<p> <strong>5</strong>. Now, open the MainActivity.java file in <code>com.dji.simulatorDemo</code> package and add <code>import dji.sdk.SDKManager.DJISDKManager;</code> at the bottom of the import classes section as shown below:</p>\n<pre><code class=\"lang-java\">package com.dji.simulatorDemo;\n\nimport dji.sdk.SDKManager.DJISDKManager;</code></pre>\n<p>  Wait for a few seconds and check if the words turn red, if they remain gray color, it means you can use DJI Android SDK in your project successfully now.</p>\n<h3 id=\"buidling-the-layouts-of-activity\">Buidling the Layouts of Activity</h3>\n<h4 id=\"1-creating-djisimulatorapplication-class\">1. Creating DJISimulatorApplication Class</h4>\n<p>Right-click on the package <code>com.dji.simulatorDemo</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;DJISimulatorApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>Next, Replace the code of the &quot;FPVDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.simulatorDemo;\nimport android.app.Application;\n\npublic class DJISimulatorApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n}</code></pre>\n<p>Here, we override the onCreate() method. We can do some settings when the application is created here.</p>\n<h4 id=\"2-implementing-the-joystick-control\">2. Implementing the Joystick Control</h4>\n<p>In order to input some simulated data, like <code>pitch</code>, <code>roll</code>, <code>yaw</code> and <code>verticalThrottle</code>, you may need a joystick control. Let&#39;s work on the implementation of it.</p>\n<p>We implement the joystick control base on an open source Github project <a href=\"https://github.com/Ville-/OnScreenJoystick/tree/master/OnScreenJoystick/src/com/salamientertainment/view/onscreenjoystick\" target=\"_blank\"> OnScreenJoystick </a>. You can download the Github project to get the <strong>OnScreenJoystick.java</strong> and <strong>OnScreenJoystickListener.java</strong> files or get them from this tutorial&#39;s Github Sample project. Now, copy and paste these two java files to the folder of &quot;com.dji.simulatorDemo&quot; on the left navigator as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/onScreenJoystick.png\" alt=\"onScreenJoystick\"></p>\n<p>When you touch on the <strong>OnScreenJoystick</strong> view, the <code>onTouch</code> method in OnScreenJoystickListener will be called and you can get the &quot;OnScreenJoystick&quot; joystick object, and the x and y coordinate of the knob parameters from this method as shown below:</p>\n<pre><code class=\"lang-java\">/** Called when the joystick is touched.\n * @param joystick The joystick which has been touched.\n * @param pX The x coordinate of the knob. Values are between -1 (left) and 1 (right).\n * @param pY The y coordinate of the knob. Values are between -1 (down) and 1 (up).\n */\npublic void onTouch(final OnScreenJoystick joystick, final float pX, final float pY);</code></pre>\n<blockquote>\n<p>Note: The values for x coordinate of the knob are between -1 (left) and 1 (right), the values for y coordinate of the knob are between -1 (down) and 1 (up).</p>\n</blockquote>\n<p>Next, copy and paste the <strong>joystick.png</strong> and <strong>joystick_bg.png</strong> files from this tutorial&#39;s Github sample project to the <strong>mipmap</strong> folder on the left navigator as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/joystickImages.png\" alt=\"joystickImages\"></p>\n<h4 id=\"3-implementing-ui-elements-in-mainactivity-class\">3. Implementing UI Elements in MainActivity Class</h4>\n<p>Now, let&#39;s open the MainActivity.java file and replace the code with the followings:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends Activity implements View.OnClickListener {\n\n    private static final String TAG = MainActivity.class.getName();\n    protected TextView mConnectStatusTextView;\n    private Button mBtnEnableVirtualStick;\n    private Button mBtnDisableVirtualStick;\n    private ToggleButton mBtnSimulator;\n    private Button mBtnTakeOff;\n    private Button mBtnLand;\n    private TextView mTextView;\n\n    private OnScreenJoystick mScreenJoystickRight;\n    private OnScreenJoystick mScreenJoystickLeft;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the\n        // following permissions at runtime to ensure the\n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n        initUI();\n    }\n\n    @Override\n    public void onResume() {\n        Log.e(TAG, &quot;onResume&quot;);\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        Log.e(TAG, &quot;onPause&quot;);\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        Log.e(TAG, &quot;onStop&quot;);\n        super.onStop();\n    }\n\n    public void onReturn(View view){\n        Log.e(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    @Override\n    protected void onDestroy() {\n        Log.e(TAG, &quot;onDestroy&quot;);\n        super.onDestroy();\n    }\n\n    private void initUI() {\n\n        mBtnEnableVirtualStick = (Button) findViewById(R.id.btn_enable_virtual_stick);\n        mBtnDisableVirtualStick = (Button) findViewById(R.id.btn_disable_virtual_stick);\n        mBtnTakeOff = (Button) findViewById(R.id.btn_take_off);\n        mBtnLand = (Button) findViewById(R.id.btn_land);\n        mBtnSimulator = (ToggleButton) findViewById(R.id.btn_start_simulator);\n        mTextView = (TextView) findViewById(R.id.textview_simulator);\n        mConnectStatusTextView = (TextView) findViewById(R.id.ConnectStatusTextView);\n        mScreenJoystickRight = (OnScreenJoystick)findViewById(R.id.directionJoystickRight);\n        mScreenJoystickLeft = (OnScreenJoystick)findViewById(R.id.directionJoystickLeft);\n\n        mBtnEnableVirtualStick.setOnClickListener(this);\n        mBtnDisableVirtualStick.setOnClickListener(this);\n        mBtnTakeOff.setOnClickListener(this);\n        mBtnLand.setOnClickListener(this);\n\n        mBtnSimulator.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            }\n        });\n\n        mScreenJoystickLeft.setJoystickListener(new OnScreenJoystickListener(){\n\n            @Override\n            public void onTouch(OnScreenJoystick joystick, float pX, float pY) {\n          }\n        });\n\n        mScreenJoystickRight.setJoystickListener(new OnScreenJoystickListener() {\n\n            @Override\n            public void onTouch(OnScreenJoystick joystick, float pX, float pY) {\n            }\n        });\n    }\n\n    @Override\n    public void onClick(View v) {\n\n        switch (v.getId()) {\n            case R.id.btn_enable_virtual_stick:\n                break;\n            case R.id.btn_disable_virtual_stick:\n                break;\n            case R.id.btn_take_off:\n                break;\n            case R.id.btn_land:\n                break;\n            default:\n                break;\n        }\n    }\n}</code></pre>\n<p>In the code above, we implement the following features:</p>\n<p><strong>1.</strong> Create the layout UI elements variables, including two TextView <code>mConnectStatusTextView</code>, <code>mTextView</code>, four buttons <code>mBtnEnableVirtualStick</code>, <code>mBtnDisableVirtualStick</code>, <code>mBtnTakeOff</code>, <code>mBtnLand</code>, one Toggle Button <code>mBtnSimulator</code> and two OnScreenJoystick control <code>mScreenJoystickRight</code> and <code>mScreenJoystickLeft</code>. </p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23). Then invoke the <code>initUI()</code> method to initialize UI variables and their listeners.</p>\n<p><strong>3.</strong> In the <code>initUI()</code> method, we first initialize the UI elements variables, then set the click listener of the four buttons to &quot;this&quot;. Moreover, implement the <code>onCheckedChanged()</code> method of toggle button <code>mBtnSimulator</code>&#39;s &quot;setOnCheckedChangeListener&quot;. Finally, implement the <code>onTouch()</code> method of the two <code>OnScreenJoystick</code> objects&#39; &quot;setJoystickListener&quot;.</p>\n<p><strong>4.</strong> Override the <code>onClick()</code> method to implement the four buttons&#39; click actions.</p>\n<h4 id=\"4-implementing-the-mainactivity-layout\">4. Implementing the MainActivity Layout</h4>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;RelativeLayout\n        android:id=&quot;@+id/main_title_rl&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;40dp&quot;\n        android:background=&quot;@color/black_overlay&quot; &gt;\n\n        &lt;ImageButton\n            android:id=&quot;@+id/ReturnBtn&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;35dp&quot;\n            android:layout_alignParentLeft=&quot;true&quot;\n            android:layout_centerVertical=&quot;true&quot;\n            android:layout_marginLeft=&quot;5dp&quot;\n            android:adjustViewBounds=&quot;true&quot;\n            android:background=&quot;@android:color/transparent&quot;\n            android:onClick=&quot;onReturn&quot;\n            android:scaleType=&quot;centerInside&quot;\n            android:src=&quot;@drawable/selector_back_button&quot; /&gt;\n\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_centerInParent=&quot;true&quot;\n            android:text=&quot;SimulatorDemo&quot;\n            android:textColor=&quot;@android:color/white&quot;\n            android:textSize=&quot;19sp&quot; /&gt;\n    &lt;/RelativeLayout&gt;\n\n    &lt;TextView\n        android:layout_marginTop=&quot;70dp&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_centerHorizontal=&quot;true&quot;\n        android:text=&quot;Simulator is off.&quot;\n        android:id=&quot;@+id/textview_simulator&quot;/&gt;\n\n    &lt;Button\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Enable Virtual Stick&quot;\n        style=&quot;@style/common_button&quot;\n        android:id=&quot;@+id/btn_enable_virtual_stick&quot;\n        android:layout_marginLeft=&quot;5dp&quot;\n        android:layout_alignTop=&quot;@+id/btn_start_simulator&quot;\n        android:layout_alignStart=&quot;@+id/directionJoystickRight&quot;\n        android:layout_marginTop=&quot;0dp&quot; /&gt;\n\n    &lt;Button\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Disable Virtual Stick&quot;\n        style=&quot;@style/common_button&quot;\n        android:id=&quot;@+id/btn_disable_virtual_stick&quot;\n        android:layout_below=&quot;@+id/btn_enable_virtual_stick&quot;\n        android:layout_alignStart=&quot;@+id/btn_enable_virtual_stick&quot;\n        android:layout_marginLeft=&quot;0dp&quot;\n        android:layout_alignEnd=&quot;@+id/btn_enable_virtual_stick&quot; /&gt;\n\n    &lt;Button\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Take Off&quot;\n        style=&quot;@style/common_button&quot;\n        android:id=&quot;@+id/btn_take_off&quot;\n        android:layout_alignTop=&quot;@+id/btn_disable_virtual_stick&quot;\n        android:layout_alignStart=&quot;@+id/btn_start_simulator&quot;\n        android:layout_marginTop=&quot;0dp&quot;\n        android:layout_alignEnd=&quot;@+id/btn_start_simulator&quot; /&gt;\n\n    &lt;ToggleButton\n        android:id=&quot;@+id/btn_start_simulator&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Start Simulator&quot;\n        android:textOff=&quot;Start Simulator&quot;\n        android:textOn=&quot;Stop Simulator&quot;\n        style=&quot;@style/common_button&quot;\n        android:layout_below=&quot;@+id/textview_simulator&quot;\n        android:layout_toEndOf=&quot;@+id/btn_enable_virtual_stick&quot;\n        android:layout_marginTop=&quot;107dp&quot;\n        android:layout_marginLeft=&quot;10dp&quot; /&gt;\n\n    &lt;Button\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Land&quot;\n        style=&quot;@style/common_button&quot;\n        android:id=&quot;@+id/btn_land&quot;\n        android:layout_alignTop=&quot;@+id/btn_take_off&quot;\n        android:layout_marginTop=&quot;0dp&quot;\n        android:layout_alignEnd=&quot;@+id/directionJoystickLeft&quot;\n        android:layout_toEndOf=&quot;@+id/btn_take_off&quot;\n        android:layout_marginLeft=&quot;10dp&quot; /&gt;\n\n    &lt;com.dji.simulatorDemo.OnScreenJoystick\n        android:id=&quot;@+id/directionJoystickRight&quot;\n        android:layout_width=&quot;130dp&quot;\n        android:layout_height=&quot;130dp&quot;\n        android:layout_alignParentLeft=&quot;true&quot;\n        android:layout_alignParentBottom=&quot;true&quot;\n        android:layout_marginBottom=&quot;10dp&quot;\n        android:layout_marginLeft=&quot;10dp&quot;\n        android:background=&quot;@mipmap/joystick_bg&quot;/&gt;\n\n    &lt;com.dji.simulatorDemo.OnScreenJoystick\n        android:id=&quot;@+id/directionJoystickLeft&quot;\n        android:layout_width=&quot;130dp&quot;\n        android:layout_height=&quot;130dp&quot;\n        android:layout_alignParentRight=&quot;true&quot;\n        android:layout_alignParentBottom=&quot;true&quot;\n        android:layout_marginBottom=&quot;10dp&quot;\n        android:layout_marginRight=&quot;10dp&quot;\n        android:background=&quot;@mipmap/joystick_bg&quot;/&gt;\n\n&lt;/RelativeLayout&gt;</code></pre>\n<p> In the xml file, first, we implement the RelativeLayout element. We declare an ImageButton(id: ReturnBtnCamera) element to exit the application, and a TextView(id: ConnectStatusTextView) element to show the connection status text. </p>\n<p>  Next, create a TextureView(id: textview_simulator) element to show the simulator state infos. Moreover, create the &quot;Enable Virtual Stick&quot; button(id: btn_enable_virtual_stick), &quot;Disable Virtual Stick&quot; button(id: btn_disable_virtual_stick), &quot;Take Off&quot; button(id: btn_take_off), &quot;Land&quot; button(id: btn_land). Moreover, create the &quot;Start Simulator&quot; toggle button(id: btn_start_simulator) and set its <strong>textOn</strong> and <strong>textOff</strong> params to &quot;Start Simulator&quot; and &quot;Stop Simulator&quot;.</p>\n<p>  Lastly, we create two OnScreenJoystick elements (id: directionJoystickRight) and (id:directionJoystickLeft) for joystick control.</p>\n<h4 id=\"5-configuring-the-resources\">5. Configuring the Resources</h4>\n<p>  Once you finish the above steps, let&#39;s add some resources files to the <strong>res</strong> folder on the left navigator of Android Studio.</p>\n<p>  Copy the following image and xml files from the tutorial Github Sample project&#39;s <strong>drawable</strong> folder to your project, they are used for the button&#39;s UI:</p>\n<p>  <img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/drawable.png\" alt=\"drawable\"></p>\n<p>  Next, open the &quot;colors.xml&quot; file and add the following code at the bottom to declare the black overlay color:</p>\n<pre><code class=\"lang-xml\">&lt;color name=&quot;black_overlay&quot;&gt;#66000000&lt;/color&gt;</code></pre>\n<p> Moreover, open the &quot;strings.xml&quot; file and add the &quot;success&quot; string:</p>\n<pre><code class=\"lang-xml\">&lt;string name=&quot;success&quot;&gt;Success&lt;/string&gt;</code></pre>\n<p> Lastly, open the &quot;styles.xml&quot; file and add the following code to declare the &quot;common_button&quot; style:</p>\n<pre><code class=\"lang-xml\">&lt;!-- Common button style --&gt;\n&lt;style name=&quot;common_button&quot;&gt;\n    &lt;item name=&quot;android:layout_width&quot;&gt;100dp&lt;/item&gt;\n    &lt;item name=&quot;android:layout_height&quot;&gt;45dp&lt;/item&gt;\n    &lt;item name=&quot;android:layout_marginTop&quot;&gt;10dp&lt;/item&gt;\n    &lt;item name=&quot;android:background&quot;&gt;@drawable/round_btn&lt;/item&gt;\n    &lt;item name=&quot;android:paddingLeft&quot;&gt;5dp&lt;/item&gt;\n    &lt;item name=&quot;android:paddingRight&quot;&gt;5dp&lt;/item&gt;\n    &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;\n    &lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt;\n    &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;\n&lt;/style&gt;</code></pre>\n<h3 id=\"registering-the-application\">Registering the Application</h3>\n<p>  Once you finish the above steps, let&#39;s register the application on DJI Developer Website and get the <strong>App Key</strong>. If you are not familiar with the App Key, please check <a href=\"../quick-start/index.html#generate-an-app-key\">Generate an App Key</a> for details.</p>\n<p><strong>1.</strong> Open the AndroidManifest.xml file and add the following elements on top of the <strong>application</strong> element: </p>\n<pre><code class=\"lang-xml\">&lt;!-- SDK permission requirement --&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.host&quot;\n        android:required=&quot;false&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.accessory&quot;\n        android:required=&quot;true&quot; /&gt;\n\n&lt;!-- SDK requirement permission end --&gt;</code></pre>\n<p>Here, we request permissions that the application must be granted in order for it to register DJI SDK correctly. Also we declare the camera and usb hardwares which is used by the application.</p>\n<p>Moreover, let&#39;s add the following elements as childs of element on top of the &quot;MainActivity&quot; activity element as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n&lt;meta-data\n    android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;Please enter your APP Key here.&quot; /&gt;\n\n&lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n&lt;/service&gt;\n\n&lt;activity\n    android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n    android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n    &lt;/intent-filter&gt;\n\n    &lt;meta-data\n     android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n        android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n&lt;/activity&gt;\n\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, you should substitude your <strong>App Key</strong> of the application for &quot;Please enter your App Key here.&quot; in the <strong>value</strong> attribute under the <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute.</p>\n<p><strong>2.</strong> After you finish the steps above, open the &quot;DJISimulatorApplication.java&quot; file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">\n@Override\npublic void onCreate() {\nsuper.onCreate();\n\nmHandler = new Handler(Looper.getMainLooper());\n\n/**\n * handles SDK Registration using the API_KEY\n */\nDJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n\n@Override\npublic void onGetRegisteredResult(DJIError error) {\n    if(error == DJISDKError.REGISTRATION_SUCCESS) {\n        DJISDKManager.getInstance().startConnectionToProduct();\n    } else {\n        Handler handler = new Handler(Looper.getMainLooper());\n        handler.post(new Runnable() {\n\n            @Override\n            public void run() {\n                Toast.makeText(getApplicationContext(),\n                        R.string.sdk_registration_message,\n                        Toast.LENGTH_LONG).show();\n            }\n        });\n\n    }\n    Log.v(TAG, error.getDescription());\n}\n\n@Override\npublic void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n\n    Log.v(TAG, String.format(&quot;onProductChanged oldProduct:%s, newProduct:%s&quot;, oldProduct, newProduct));\n    mProduct = newProduct;\n    if(mProduct != null) {\n        mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n    }\n\n    notifyStatusChange();\n}\n\nprivate DJIBaseProduct.DJIBaseProductListener mDJIBaseProductListener = new DJIBaseProduct.DJIBaseProductListener() {\n\n    @Override\n    public void onComponentChange(DJIBaseProduct.DJIComponentKey key, DJIBaseComponent oldComponent, DJIBaseComponent newComponent) {\n\n        if(newComponent != null) {\n            newComponent.setDJIComponentListener(mDJIComponentListener);\n        }\n        Log.v(TAG, String.format(&quot;onComponentChange key:%s, oldComponent:%s, newComponent:%s&quot;, key, oldComponent, newComponent));\n\n        notifyStatusChange();\n    }\n\n    @Override\n    public void onProductConnectivityChanged(boolean isConnected) {\n\n        Log.v(TAG, &quot;onProductConnectivityChanged: &quot; + isConnected);\n\n        notifyStatusChange();\n    }\n\n};</code></pre>\n<p>Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of <code>DJISDKManagerCallback</code>. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n<li>Implement the two interface methods of <code>DJIBaseProductListener</code>. You can use the <code>onComponentChange()</code> method to check the product component change status and invoke the <code>notifyStatusChange()</code> method to notify status changes. Also, you can use the <code>onProductConnectivityChanged()</code> method to notify the product connectivity changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<p>For more details of integrating and activating the SDK in Android Studio, please check: <a href=\"../application-development-workflow/workflow-integrate.html#android-studio-project-integration\">Android Studio Project Integration</a>.</p>\n<h2 id=\"working-on-mainactivity-class\">Working on MainActivity class</h2>\n<h3 id=\"update-product-connection-status\">Update Product Connection Status</h3>\n<p>Now, let&#39;s update the product connection status. Open the &quot;MainActivity.java&quot; file and add the following code at the bottom of <code>onCreate()</code> method:</p>\n<pre><code class=\"lang-java\">    IntentFilter filter = new IntentFilter();\n    filter.addAction(DJISimulatorApplication.FLAG_CONNECTION_CHANGE);\n    registerReceiver(mReceiver, filter);</code></pre>\n<p>The code above register the broadcast receiver for receiving the device connection&#39;s changes.</p>\n<p>Next, add the following four methods below <code>onCreate()</code> and override the <code>onResume()</code> and <code>onDestroy()</code> methods as shown below:</p>\n<pre><code class=\"lang-java\">protected BroadcastReceiver mReceiver = new BroadcastReceiver() {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            updateTitleBar();\n        }\n    };\n\npublic void showToast(final String msg) {\n    runOnUiThread(new Runnable() {\n        public void run() {\n            Toast.makeText(MainActivity.this, msg, Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n\nprivate void updateTitleBar() {\n    if(mConnectStatusTextView == null) return;\n    boolean ret = false;\n    DJIBaseProduct product = DJISimulatorApplication.getProductInstance();\n    if (product != null) {\n        if(product.isConnected()) {\n            //The product is connected\n            mConnectStatusTextView.setText(DJISimulatorApplication.getProductInstance().getModel() + &quot; Connected&quot;);\n            ret = true;\n        } else {\n            if(product instanceof DJIAircraft) {\n                DJIAircraft aircraft = (DJIAircraft)product;\n                if(aircraft.getRemoteController() != null &amp;&amp; aircraft.getRemoteController().isConnected()) {\n                    // The product is not connected, but the remote controller is connected\n                    mConnectStatusTextView.setText(&quot;only RC Connected&quot;);\n                    ret = true;\n                }\n            }\n        }\n    }\n\n    if(!ret) {\n        // The product or the remote controller are not connected.\n        mConnectStatusTextView.setText(&quot;Disconnected&quot;);\n    }\n}\n\n@Override\npublic void onResume() {\n    Log.e(TAG, &quot;onResume&quot;);\n    super.onResume();\n    updateTitleBar();\n}\n\n@Override\nprotected void onDestroy() {\n    Log.e(TAG, &quot;onDestroy&quot;);\n    unregisterReceiver(mReceiver);\n\n    super.onDestroy();\n}</code></pre>\n<p>As the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create a BroadcastReceiver object <code>mReceiver</code>, override its <code>onReceive()</code> method and invoke the <code>updateTitleBar()</code> method to update the <code>mConnectStatusTextView</code>&#39;s content.</p>\n<p><strong>2.</strong> Create the <code>showToast()</code> method to display the toast notification message to users.</p>\n<p><strong>3.</strong> In the <code>updateTitleBar()</code> method, we first check if mConnectStatusTextView is null, then create a DJIBaseProduct object by invoking the <code>getProductInstance()</code> method of DJISimulatorApplication. </p>\n<p>Moreover, invoke the <code>isConnected()</code> method of DJIBaseProduct to check if the product is connected, then invoke the <code>getModel()</code> method of DJIBaseProduct to get the model name and show it in <code>mConnectStatusTextView</code>. If the product is not connected, cast the <code>product</code> object as DJIAircraft object, and check if the remoteController is not null and if it&#39;s connected, then update the <code>mConnectStatusTextView</code>&#39;s text content. </p>\n<p>Lastly, if the product or remote controller are not connected, then update the <code>mConnectStatusTextView</code>&#39;s text with &quot;Disconnected&quot;.</p>\n<p><strong>4.</strong> We override the <code>onResume()</code> method to invoke the <code>updateTitleBar()</code> method to update <code>mConnectStatusTextView</code> when the activity start interacting with the user. Then override the <code>onDestroy()</code> method to unregister the BroadcastReceiver object.</p>\n<p>Now let&#39;s build and run the project and install it to your Android device. Then connect the demo application to your Phantom 4 (Please check <a href=\"../application-development-workflow/workflow-run.html\">Run Application</a> for more details), if everything goes well, you should see the title textView content updates to &quot;Phantom_4 Connected&quot; as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/updateTitleBar.png\" alt=\"registerSuccess\"></p>\n<h3 id=\"implementing-virtual-stick-control\">Implementing Virtual Stick Control</h3>\n<p> Since we have implemented the Joystick control, now let&#39;s continue to work on sending virtual stick flight control data to the aircraft. First, we create a DJIFlightController variable <code>mFlightController</code>, a Timer variable <code>mSendVirtualStickDataTimer</code>, a SendVirtualStickDataTask(extends from TimerTask class) variable <code>mSendVirtualStickDataTask</code> and four float variables on top of <code>onCreate()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">    private DJIFlightController mFlightController;\n    private Timer mSendVirtualStickDataTimer;\n    private SendVirtualStickDataTask mSendVirtualStickDataTask;\n\n    private float mPitch;\n    private float mRoll;\n    private float mYaw;\n    private float mThrottle;</code></pre>\n<p> We may use the <code>mPitch</code>, <code>mRoll</code>, <code>mYaw</code> and <code>mThrottle</code> variables to store the <strong>pitch</strong>, <strong>roll</strong>, <strong>yaw</strong> and <strong>vertical throttle</strong> virtual stick flight control data.</p>\n<p> Next, create the <code>initFlightController()</code> method, invoke it in the <code>onResume()</code> method and implement the SendVirtualStickDataTask class as shown below:</p>\n<pre><code class=\"lang-java\">private void initFlightController() {\n\n    DJIAircraft aircraft = DJISimulatorApplication.getAircraftInstance();\n    if (aircraft == null || !aircraft.isConnected()) {\n        showToast(&quot;Disconnected&quot;);\n        mFlightController = null;\n        return;\n    } else {\n        mFlightController = aircraft.getFlightController();\n    }\n}\n\n@Override\npublic void onResume() {\n    Log.e(TAG, &quot;onResume&quot;);\n    super.onResume();\n    updateTitleBar();\n    initFlightController();\n}\n\nclass SendVirtualStickDataTask extends TimerTask {\n\n    @Override\n    public void run() {\n\n        if (mFlightController != null) {\n            mFlightController.sendVirtualStickFlightControlData(\n                    new DJIFlightControllerDataType.DJIVirtualStickFlightControlData(\n                            mPitch, mRoll, mYaw, mThrottle\n                    ), new DJIBaseComponent.DJICompletionCallback() {\n                        @Override\n                        public void onResult(DJIError djiError) {\n\n                        }\n                    }\n            );\n        }\n    }\n}</code></pre>\n<p>In the code above, we implement the following features:</p>\n<p><strong>1.</strong> In the <code>initFlightController()</code> method, we first check if the aircraft is not null and is connected, then invoke the <code>getFlightController()</code> method of DJIAircraft to get the <code>mFlightController</code> variable.</p>\n<p><strong>2.</strong> Next, extends from TimerTask class to create the <strong>SendVirtualStickDataTask</strong> class. Inside the class, override the <code>run()</code> method to invoke the <code>sendVirtualStickFlightControlData()</code> method of DJIFlightController to send virtual stick flight control data. Here, we create the <strong>DJIVirtualStickFlightControlData</strong> object from the four float variables declared before: <code>mPitch</code>, <code>mRoll</code>, <code>mYaw</code> and <code>mThrottle</code>.</p>\n<p>Once you finish the above steps, let&#39;s implement the <code>setJoystickListener()</code> methods of <code>mScreenJoystickLeft</code> and <code>mScreenJoystickRight</code> variables at the bottom of <code>initUI()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">    mScreenJoystickLeft.setJoystickListener(new OnScreenJoystickListener(){\n\n        @Override\n        public void onTouch(OnScreenJoystick joystick, float pX, float pY) {\n            if(Math.abs(pX) &lt; 0.02 ){\n                pX = 0;\n            }\n\n            if(Math.abs(pY) &lt; 0.02 ){\n                pY = 0;\n            }\n            float pitchJoyControlMaxSpeed = DJIFlightControllerDataType.DJIVirtualStickRollPitchControlMaxVelocity;\n            float rollJoyControlMaxSpeed = DJIFlightControllerDataType.DJIVirtualStickRollPitchControlMaxVelocity;\n\n            mPitch = (float)(pitchJoyControlMaxSpeed * pY);\n\n            mRoll = (float)(rollJoyControlMaxSpeed * pX);\n\n            if (null == mSendVirtualStickDataTimer) {\n                mSendVirtualStickDataTask = new SendVirtualStickDataTask();\n                mSendVirtualStickDataTimer = new Timer();\n                mSendVirtualStickDataTimer.schedule(mSendVirtualStickDataTask, 0, 200);\n            }\n\n        }\n\n    });\n\n    mScreenJoystickRight.setJoystickListener(new OnScreenJoystickListener() {\n\n        @Override\n        public void onTouch(OnScreenJoystick joystick, float pX, float pY) {\n            if(Math.abs(pX) &lt; 0.02 ){\n                pX = 0;\n            }\n\n            if(Math.abs(pY) &lt; 0.02 ){\n                pY = 0;\n            }\n                 float verticalJoyStickControlMaxSpeed = DJIFlightControllerDataType.DJIVirtualStickVerticalControlMaxVelocity;\n                float yawJoyStickControlMaxSpeed = DJIFlightControllerDataType.DJIVirtualStickYawControlMaxAngularVelocity;\n\n                mYaw = (float)(yawJoyStickControlMaxSpeed * pX);\n                mThrottle = (float)(yawJoyStickControlMaxSpeed * pY);\n\n            if (null == mSendVirtualStickDataTimer) {\n                mSendVirtualStickDataTask = new SendVirtualStickDataTask();\n                mSendVirtualStickDataTimer = new Timer();\n                mSendVirtualStickDataTimer.schedule(mSendVirtualStickDataTask, 0, 200);\n            }\n\n        }\n    });</code></pre>\n<p>Here, we implement the following features:</p>\n<p><strong>1.</strong> Override the <code>onTouch()</code> method of <strong>setJoystickListener</strong> and filter the <code>pX</code> and <code>pY</code> variables&#39; value by checking if they are less than 0.02. We should not send the virtual stick data to flight controller too frequently if the value is too small.</p>\n<p><strong>2.</strong> Get the maximum velocity of vertical control and maximum angle velocity of Virtual Stick, then store them to <code>verticalJoyControlMaxSpeed</code> and <code>yawJoyControlMaxSpeed</code> variables. Since the value of <code>pX</code> is between -1 (left) and 1 (right), the value of <code>pY</code> is between -1 (down) and 1 (up), we multiply by using the <code>verticalJoyControlMaxSpeed</code> and <code>yawJoyControlMaxSpeed</code> valures to update the <code>mYaw</code> and <code>mThrottle</code> data. Here we take Mode 2(American mode) of remote controller as example.</p>\n<p><strong>3.</strong> Lastly, we check if <code>mSendVirtualStickDataTimer</code> is null, and create it by invoking the <code>SendVirtualStickDataTask()</code> method. Then, create the <code>mSendVirtualStickDataTimer</code> and invoke its <code>schedule()</code> method to trigger the timer by passing <code>mSendVirtualStickDataTask</code> variable, 0 milliseconds of delay and 200 milliseconds between subsequent executions.</p>\n<p><strong>4.</strong> Similarly, implement the <code>setJoystickListener()</code> method of <code>mScreenJoystickRight</code> variable to update the <code>mYaw</code> and <code>mThrottle</code> values and trigger the timer to send virtual stick data to the aircraft&#39;s flight controller.</p>\n<p>Now, when you control the left and right joysticks, they will send the simulated virtual stick data (Including <strong>Yaw</strong>, <strong>Pitch</strong>, <strong>Roll</strong> and <strong>Vertical Throttle</strong>) to the flight controller of aircraft.</p>\n<p>Lastly, override the <code>onClick()</code> method to implement the enable and disable virtual stick control buttons click actions as shown below:</p>\n<pre><code class=\"lang-java\">@Override\n  public void onClick(View v) {\n\n    switch (v.getId()) {\n        case R.id.btn_enable_virtual_stick:\n            if (mFlightController != null){\n                mFlightController.enableVirtualStickControlMode(\n                        new DJIBaseComponent.DJICompletionCallback() {\n                            @Override\n                            public void onResult(DJIError djiError) {\n                                if (djiError != null){\n                                    showToast(djiError.getDescription());\n                                }else\n                                {\n                                    showToast(&quot;Enable Virtual Stick Success&quot;);\n                                }\n                            }\n                        }\n                );\n            }\n        break;\n\n        case R.id.btn_disable_virtual_stick:\n            if (mFlightController != null){\n                mFlightController.disableVirtualStickControlMode(\n                        new DJIBaseComponent.DJICompletionCallback() {\n                            @Override\n                            public void onResult(DJIError djiError) {\n                                if (djiError != null) {\n                                    showToast(djiError.getDescription());\n                                } else {\n                                    showToast(&quot;Disable Virtual Stick Success&quot;);\n                                }\n                            }\n                        }\n                );\n            }\n         break;\n        }\n    }</code></pre>\n<p>This invoke the <code>enableVirtualStickControlMode()</code> and <code>disableVirtualStickControlMode()</code> methods of DJIFlightController to enable and disable the virtual stick control mode.</p>\n<h3 id=\"implementing-djisimulator\">Implementing DJISimulator</h3>\n<p>Let&#39;s implement the DJISimulator feature now. In order to update the simulator state data in <code>mTextView</code>, we may need to implement the <code>setUpdatedSimulatorStateDataCallback()</code> method of DJISimulator in the <code>initFlightController()</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">   private void initFlightController() {\n\n        DJIAircraft aircraft = DJISimulatorApplication.getAircraftInstance();\n        if (aircraft == null || !aircraft.isConnected()) {\n            showToast(&quot;Disconnected&quot;);\n            mFlightController = null;\n            return;\n        } else {\n            mFlightController = aircraft.getFlightController();\n            mFlightController.getSimulator().setUpdatedSimulatorStateDataCallback(new DJISimulator.UpdatedSimulatorStateDataCallback() {\n                @Override\n                public void onSimulatorDataUpdated(final DJISimulator.DJISimulatorStateData djiSimulatorStateData) {\n                    new Handler(Looper.getMainLooper()).post(new Runnable() {\n                        @Override\n                        public void run() {\n\n                            String yaw = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getYaw());\n                            String pitch = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getPitch());\n                            String roll = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getRoll());\n                            String positionX = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getPositionX());\n                            String positionY = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getPositionY());\n                            String positionZ = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getPositionZ());\n\n                            mTextView.setText(&quot;Yaw : &quot; + yaw + &quot;, Pitch : &quot; + pitch + &quot;, Roll : &quot; + roll + &quot;\\n&quot; + &quot;, PosX : &quot; + positionX +\n                                                &quot;, PosY : &quot; + positionY +\n                                                &quot;, PosZ : &quot; + positionZ);\n                        }\n                    });\n                }\n            });\n        }\n    }</code></pre>\n<p>In the code above, we override the <code>onSimulatorDataUpdated()</code> method to get the lastest simulator state data, then invoke the <code>getYaw()</code>, <code>getPitch()</code>, <code>getRoll()</code>, <code>getPositionX()</code>, <code>getPositionY()</code> and <code>getPositionZ()</code> methods of <code>DJISimulatorStateData</code> to get the updated yaw, pitch, roll, positionX, positionY and positionZ values and show them in <code>mTextView</code>.</p>\n<p>Next, override the <code>onCheckedChanged()</code> method of <code>mBtnSimulator</code> toggleButton&#39;s  <code>setOnCheckedChangeListener()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">    mBtnSimulator.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            if (isChecked) {\n\n                mTextView.setVisibility(View.VISIBLE);\n\n                if (mFlightController != null) {\n                    mFlightController.getSimulator()\n                            .startSimulator(new DJISimulator.DJISimulatorInitializationData(\n                                    23, 113, 10, 10\n                            )\n                                    , new DJIBaseComponent.DJICompletionCallback() {\n                                @Override\n                                public void onResult(DJIError djiError) {\n                                    if (djiError != null) {\n                                        showToast(djiError.getDescription());\n                                    }else\n                                    {\n                                        showToast(&quot;Start Simulator Success&quot;);\n                                    }\n                                }\n                            });\n                }\n\n            } else {\n\n                mTextView.setVisibility(View.INVISIBLE);\n\n                if (mFlightController != null) {\n                    mFlightController.getSimulator()\n                            .stopSimulator(\n                                    new DJIBaseComponent.DJICompletionCallback() {\n                                        @Override\n                                        public void onResult(DJIError djiError) {\n                                            if (djiError != null) {\n                                                showToast(djiError.getDescription());\n                                            }else\n                                            {\n                                                showToast(&quot;Stop Simulator Success&quot;);\n                                            }\n                                        }\n                                    }\n                            );\n                }\n            }\n        }\n    });</code></pre>\n<p>In the code above, we implement the following features:</p>\n<p><strong>1.</strong> If the <code>mBtnSimulator</code> toggle button is checked, then show the <code>mTextView</code>. Next, if the <code>mFlightController</code> is not null, we invoke the <code>startSimulator()</code> method of DJISimulator by passing  a DJISimulatorInitializationData with lattitude 23, longitude 113, simulationStateUpdateFrequency 10 and numOfSatellites 10 parameters to it. For more details of DJISimulator.DJISimulatorInitializationData, please check the <a href=\"https://developer.dji.com/iframe/mobile-sdk-doc/android/reference/dji/sdk/FlightController/DJISimulator.DJISimulatorInitializationData.html\">Android API Reference</a>.</p>\n<p><strong>2.</strong> Next, overide the <code>onResult()</code> method of <code>startSimulator()</code>, invoke <code>showToast()</code> method to show the start simulator result to the user.</p>\n<p><strong>3.</strong> Similarly, if the <code>mBtnSimulator</code> toggle button is not checked, then invoke the <code>stopSimulator()</code> method of DJISimulator to stop the simulator. Furthermore, override the <code>onResult()</code> method and invoke the <code>showToast()</code> method to show the stop simulator result to the user.</p>\n<h3 id=\"working-on-takeoff-and-autolanding-features\">Working on Takeoff and AutoLanding features</h3>\n<p>Finally, let&#39;s add the following code at the bottom of <code>onClick()</code> method to implement the <strong>Take off</strong> and <strong>Land</strong> buttons&#39; click actions as shown below:</p>\n<pre><code class=\"lang-java\">case R.id.btn_take_off:\n    if (mFlightController != null){\n        mFlightController.takeOff(\n                new DJIBaseComponent.DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError djiError) {\n                        if (djiError != null) {\n                            showToast(djiError.getDescription());\n                        } else {\n                            showToast(&quot;Take off Success&quot;);\n                        }\n                    }\n                }\n        );\n    }\n    break;\n\ncase R.id.btn_land:\n    if (mFlightController != null){\n        mFlightController.autoLanding(\n                new DJIBaseComponent.DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError djiError) {\n                        if (djiError != null) {\n                            showToast(djiError.getDescription());\n                        } else {\n                            showToast(&quot;AutoLand Started&quot;);\n                        }\n                    }\n                }\n        );\n    }\n    break;</code></pre>\n<p>For the case of &quot;R.id.btn_take_off&quot;, we invoke the <code>takeOff()</code> method of DJIFlightController to send the take off command to the aircraft. Similiarly, for the case of &quot;R.id.btn_land&quot;, we invoke the <code>autoLanding()</code> method to send the auto landing command. It&#39;s just that simple and easy.</p>\n<p>We have gone through a long way in this tutorial, now let&#39;s build and run the project, connect the demo application to  your Phantom 4 (Please check <a href=\"../application-development-workflow/workflow-run.html\">Run Application</a> for more details) and check all the features we have implemented so far. </p>\n<p>If everything goes well, you should see something similiar to the following gif animations like this:</p>\n <html><center><img src=\"../images/tutorials-and-samples/Android/SimulatorDemo/simulatorAnimation.gif\"></center></html>\n\n<ul>\n<li><p>If the demo application is connected with Phantom 4 successfully, you should see the title textView content updates to &quot;Phantom_4 Connected&quot;.</p>\n</li>\n<li><p>Press <strong>Enable Virtual Stick</strong> button to enable virtual stick control, then press <strong>Start Simulator</strong> to start the simulator.</p>\n</li>\n<li><p>Moreover, press the <strong>Take Off</strong> button to send take off command to the aircraft, if the command executes successfully, you should see the <strong>PosZ</strong> value start to change, means that the aircraft is rising.</p>\n</li>\n<li><p>Now you can drag the left and right virtual stick controls to simulate the flight behavious.</p>\n</li>\n<li><p>Lastly, press the <strong>Land</strong> button to make the aircraft start auto landing, once it finish, you may notice the <strong>PosZ</strong> value becomes &quot;0.00&quot;. Press the <strong>Stop Simulator</strong> button to stop the simulator and then press <strong>Disable Virtual Stick</strong> to disable the virtual stick control.</p>\n</li>\n</ul>\n<h3 id=\"summary\">Summary</h3>\n<p>In this tutorial, you&#39;ve learned how to use the DJISimulator feature to simulate aircraft&#39;s flight behaviour in a simulated environment based on the virtual stick control input and show the changes of simulator state(Yaw,Pitch,Roll,PosX,PosY and PosZ) in real time. Also you&#39;ve learned how to use Virtual Stick control to send virtual stick flight control data to the aircraft.</p>\n<p>This demo is a simple demonstration of using DJISimulator, to have a better user experience, you can create a 3D simulated environment using 3D game engine like <a href=\"https://unity3d.com\" target=\"_blank\"> Unity3D </a> to show the simulated data and aircraft flight behavious inside your mobile application (Like the Flight Simulator in DJI Go app)!  </p>\n<p>Furthermore, the DJISimulator allows for automated testing in continous integration environment(Like <a href=\"https://jenkins.io\" target=\"_blank\">Jenkins</a>), it would help your DJI-SDK based application testing process. Good luck, and hope you enjoyed this tutorial!</p>","meta":{"title":"DJI Simulator Tutorial","version":"v3.2.1","date":"2016-07-13T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-SimulatorDemo"},"locale":"en"}{"content":"<p>Deploying an Android application using the DJI Mobile SDK does not require any additional steps outside of the typical process.</p>\n<p>iOS applications however require proper Xcode configuration as well as MFI accessory authorization.</p>\n<h2 id=\"xcode-configuration\">Xcode Configuration</h2>\n<p>A workaround for an App Store submission bug when archiving universal binaries is required:</p>\n<ul>\n<li>Create a new &quot;Run Script Phase&quot; in the application target&#39;s &quot;Build Phases&quot;</li>\n<li><p>Paste the following in the script text field: <code>bash &quot;${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/DJISDK.framework/strip-frameworks.sh&quot;</code></p>\n<p><img src=\"../images/application-development-workflow/runShellScript.png\" alt=\"runScript\"> </p>\n</li>\n</ul>\n<h2 id=\"mfi-authorization\">MFI Authorization</h2>\n<p>DJI&#39;s products that require an Apple Lightning connection to an iOS mobile device are MFi accessories. Applications that use MFi accessories need authorization from Apple to do so.</p>\n<p>Therefore, an application needs to go through the MFi Program Application process before being released on the App Store. This process requires communication between the developer, DJI and Apple and can take several weeks to complete if no challenges come up.</p>\n<h4 id=\"how-to-apply-for-the-mfi-program\">How to Apply for the MFi Program</h4>\n<p><img src=\"../images/application-development-workflow/MFiProcess.png\" alt=\"graph\"> </p>\n<p>The picture above shows the six steps for applying for the MFi Program.</p>\n<h5 id=\"1-developer-submits-the-mfi-program-application-form-to-dji\">1. Developer Submits the MFi Program Application Form to DJI</h5>\n<p>Login into the <strong>User Center</strong> at <a href=\"http://developer.dji.com\" target=\"_blank\"> <a href=\"http://developer.dji.com\">http://developer.dji.com</a> </a> and complete the MFi Program Application Form for the specific application to be released.</p>\n<p><img src=\"../images/application-development-workflow/MFiApplicationForm.png\" alt=\"graph\"></p>\n<h5 id=\"2-dji-submits-app-information-to-apple-for-review\">2. DJI Submits App Information to Apple for Review</h5>\n<p>After receiving the application form, DJI will record the application information and send to Apple for review.</p>\n<p><img src=\"../images/application-development-workflow/mfiReviewing.png\" alt=\"mfiReviewing\"></p>\n<h5 id=\"3-apple-approves-rejects-the-mfi-application\">3. Apple Approves/Rejects the MFi Application</h5>\n<p>Typically it takes up to ten business days for Apple to finish the review process. Once approved, a MFi PPID (Product Plan Identification) will be provided by Apple. </p>\n<h5 id=\"4-dji-provides-ppid-to-developer\">4. DJI Provides PPID to Developer</h5>\n<p>The PPID will appear in the status bar of the DJI developer User Center. </p>\n<p><img src=\"../images/application-development-workflow/mfiApprove.png\" alt=\"mfiApprove\"></p>\n<h5 id=\"5-developer-submits-the-app-to-apple-for-final-review\">5. Developer Submits the App to Apple for Final Review</h5>\n<p>During the application submission process, enter the PPID in the <strong>Notes</strong> section of the App Review Information webpage:</p>\n<p><img src=\"../images/application-development-workflow/reviewNotes.png\" alt=\"graph\"></p>\n<h5 id=\"6-apple-reviews-the-app-to-determine-whether-it-can-be-published-on-the-app-store\">6. Apple reviews the App to determine whether it can be published on the App Store</h5>\n<p>The normal Apple review process proceeds.</p>","meta":{"title":"Deploy","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>The examples below import the DJI SDK into a new iOS and Android project. The same steps can be used for integration into an existing application.</p>\n<h2 id=\"xcode-project-integration\">Xcode Project Integration</h2>\n<p>Screenshots in this section are generated using Xcode 7.3.</p>\n<h3 id=\"create-a-new-application\">Create a New Application</h3>\n<ul>\n<li>Open Xcode.</li>\n<li>Select <strong>File-&gt;New-&gt;Project</strong>.</li>\n<li>Choose <strong>Single View Application</strong> template.</li>\n<li>Press <strong>Next</strong>.\n <img src=\"../images/quick-start/iOSCreateProject.png\" alt=\"createProject\">  </li>\n<li>&quot;ImportSDKDemo&quot; will be used as the <strong>Product Name</strong>.</li>\n<li>Other settings can remain as default.\n <img src=\"../images/quick-start/iOSEnterProjectInfo.png\" alt=\"enterProjectInfo\"></li>\n</ul>\n<h3 id=\"import-framework\">Import Framework</h3>\n<ul>\n<li>In Finder, navigate to the newly created <strong>ImportSDKDemo</strong> folder, and create <strong>Frameworks</strong> folder.</li>\n<li>In Finder, copy <strong>DJISDK.framework</strong> from the downloaded SDK <strong>Sample Code</strong> folder  to <strong>ImportSDKDemo/Frameworks/</strong>.\n<img src=\"../images/quick-start/iOSCopyFrameworkToProject.png\" alt=\"copyFrameworks\"></li>\n<li>In Xcode right click on the project and select <strong>Add Files to...</strong>\n<img src=\"../images/quick-start/iOSRightClickToAddFiles.png\" alt=\"importFramework\"></li>\n<li>Select the <strong>Framework</strong> folder (ensure <em>Create groups</em> is selected in <em>Options</em>)\n<img src=\"../images/quick-start/iOSImportFramework2.png\" alt=\"importFramework2\"></li>\n<li>The DJI SDK framework should now be listed under the &quot;ImportSDKDemo&quot; Project tree.</li>\n<li>Select &quot;ImportSDKDemo&quot; target, open the <strong>General</strong> tab and click on the <strong>+</strong> in <strong>Embedded Binaries</strong>.\n<img src=\"../images/quick-start/iOSImportFrameworkEmbedBinaries.png\" alt=\"importFrameworkEmbeddedBinaries\"></li>\n<li>Add the DJI SDK framework.</li>\n</ul>\n<h3 id=\"configure-build-settings\">Configure Build Settings</h3>\n<ul>\n<li>For DJI products that connect to the mobile device through USB, add the &quot;Supported external accessory protocols&quot; key to the <strong>info.plist</strong> file, and add the strings &quot;com.dji.video&quot;, &quot;com.dji.protocol&quot; and &quot;com.dji.common&quot; to the key.\n<img src=\"../images/quick-start/iOSSupportedExternalAccessories.png\" alt=\"supportedExternalAccessoryProtocols\"></li>\n<li>Since iOS 9, App Transport Security has blocked cleartext HTTP (http://) resource loading. The &quot;App Transport Security Settings&quot; key must be added and &quot;Allow Arbitrary Loads&quot; must be set to &quot;YES&quot;.\n<img src=\"../images/quick-start/iOSAllowArbitraryLoads.png\" alt=\"allowArbitraryLoads\"></li>\n<li>Currently the DJI iOS SDK doesn&#39;t support <strong>Bitcode</strong> for iOS device, please modify the Build Settings to disable it.\n<img src=\"../images/quick-start/disableBitcode.png\" alt=\"disableBitcode\"></li>\n</ul>\n<h3 id=\"register-application\">Register Application</h3>\n<ul>\n<li>Import the DJI SDK header file into <code>ViewController.m</code>.</li>\n<li>Give the view controller the <code>DJISDKManagerDelegate</code> protocol to follow.</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &quot;ViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\n@interface ViewController ()&lt;DJISDKManagerDelegate&gt;\n@end</code></pre>\n<ul>\n<li>Create a new method <code>registerApp</code>.</li>\n<li>Use the application&#39;s Bundle Identifier to <a href=\"../quick-start/index.html#Generate-an-App-Key\">generate an App Key</a>.</li>\n<li>Set the <code>appKey</code> string in <code>registerApp</code> to the generated App Key.</li>\n<li>Invoke <code>registerApp</code> in <code>viewDidAppear</code> as shown below:</li>\n</ul>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [self registerApp];\n}\n\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<ul>\n<li>The <code>DJISDKManagerDelegate</code> protocol requires the<code>sdkManagerDidRegisterAppWithError</code> method to be implemented.</li>\n<li>Additionally implement <code>showAlertViewWithTitle</code> to give the registration result in a simple view.</li>\n</ul>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successful!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n       [DJISDKManager startConnectionToProduct];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}\n\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n}</code></pre>\n<h3 id=\"run-import-sdk-demo\">Run Import SDK Demo</h3>\n<p>The <strong>ImportSDKDemo</strong> project can now be run. You can download the sample code of this project from <a href=\"https://github.com/DJI-Mobile-SDK/iOS-ImportAndActivateSDKInXcode\" target=\"_blank\">Github</a>.</p>\n<p>As this application is only checking for registration and not interacting directly with a product, no product needs to be connected to the application for this to run. Therefore, the application can either be run on a mobile device (with or without a DJI product connected) or in the iOS simulator. The application will need internet connectivity to perform registration successfully.</p>\n<p>If the App Key was generated correctly and the iOS simulator or mobile device has internet connectivity, then the following should be seen:</p>\n<p>   <img src=\"../images/quick-start/iOSAppRegistrationSuccessful.png\" alt=\"iOSAppRegistrationSuccessful\"></p>\n<h2 id=\"android-studio-project-integration\">Android Studio Project Integration</h2>\n<p>Screenshots in this section are generated using Android Studio 2.1.</p>\n<h3 id=\"create-a-new-application\">Create a New Application</h3>\n<p>A new application can be used to show how to integrate the DJI SDK into an Android Studio project.</p>\n<ul>\n<li><p>Open Android Studio and at the initial screen select <strong>Start a new Android Studio project</strong>\n<img src=\"../images/quick-start/AndroidNewProjectSplashScreen.png\" alt=\"AndroidNewProjectSplashScreen\"></p>\n</li>\n<li><p>In the <strong>New Project</strong> screen:</p>\n<ul>\n<li>Set the <strong>Application name</strong> to &quot;ImportSDKDemo&quot;.</li>\n<li>Set the <strong>Company Domain</strong> and <strong>Package name</strong> to &quot;com.dji.ImportSDKDemo&quot;.\n<img src=\"../images/quick-start/AndroidConfigureNewProject.png\" alt=\"AndroidConfigureNewProject\"></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> <strong>Package name</strong> is the identifying string required to <a href=\"../quick-start/index.html#Generate-an-App-Key\">generate an App Key</a>.\nThe activity java, manifest xml and Gradle script code below assumes <strong>Package name</strong> is &quot;com.dji.ImportSDKDemo&quot;</p>\n</blockquote>\n<ul>\n<li><p>In the <strong>Target Android Devices</strong> screen:</p>\n<ul>\n<li>Select <strong>Phone and Tablet</strong> form factor.</li>\n<li>Choose <strong>API 19: Android 4.4 (KitKat)</strong>.\n<img src=\"../images/quick-start/AndroidSelectFormFactor.png\" alt=\"AndroidSelectFormFactor\"></li>\n</ul>\n</li>\n<li><p>In the <strong>Add an Activity to Mobile</strong> screen choose <strong>Empty Activity</strong>.\n<img src=\"../images/quick-start/AndroidAddAnActivityToMobile.png\" alt=\"AndroidAddAnActivityToMobile\"></p>\n</li>\n<li><p>In the <strong>Customize the Activity</strong> screen:</p>\n<ul>\n<li>Set <strong>Activity Name:</strong> to &quot;MainActivity&quot;.</li>\n<li>Ensure <strong>Generate Layout File</strong> is checked.</li>\n<li>Set <strong>Layout Name:</strong> to &quot;activity_main&quot;.</li>\n<li>Click <strong>Finish</strong> when done.\n<img src=\"../images/quick-start/AndroidCustomizeTheActivity.png\" alt=\"AndroidCustomizeTheActivity\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"import-module\">Import Module</h3>\n<p>After unzipping the downloaded Android SDK package:</p>\n<ul>\n<li>In the Android Studio menu bar select <strong>File-&gt;New-&gt;Import Module</strong>\n<img src=\"../images/quick-start/AndroidNewModuleImport.png\" alt=\"AndroidNewModuleImport\"></li>\n<li>Move to the next screen, and finish import.\n<img src=\"../images/quick-start/AndroidImportNewModuleDependencies.png\" alt=\"AndroidImportNewModuleDependencies\"></li>\n</ul>\n<h3 id=\"configure-gradle-script\">Configure Gradle Script</h3>\n<ul>\n<li>In <strong>Gradle Scripts</strong> double click on <strong>build.gradle (Module: app)</strong>\n<img src=\"../images/quick-start/AndroidConfigureGradleInitial.png\" alt=\"AndroidConfigureGradleInitial\"></li>\n<li>Replace the script with:</li>\n</ul>\n<pre><code class=\"lang-java\">apply plugin: &#39;com.android.application&#39;\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion &quot;23.0.3&quot;\n\n    defaultConfig {\n        applicationId &quot;com.dji.ImportSDKDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<ul>\n<li>The main changes should be:<ul>\n<li>Add <code>compile project(&#39;:dJISDKLIB&#39;)</code> to the <strong>dependencies</strong>.\n<img src=\"../images/quick-start/AndroidConfigureGradleAfterChange.png\" alt=\"AndroidConfigureGradleAfterChange\"></li>\n<li>Select <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> and wait for Gradle project sync to finish.</li>\n<li>Right click on <strong>app</strong> module in the project navigator and go to <strong>Open Module Settings</strong>.\n<img src=\"../images/quick-start/AndroidOpenModuleSettings.png\" alt=\"AndroidOpenModuleSettings\"></li>\n<li>Select <strong>app</strong> module on the left, and <strong>Dependencies</strong> on the top tab to confirm &quot;djiSDKLIB&quot; appears in the list.\n<img src=\"../images/quick-start/AndroidConfirmAppDependencies.png\" alt=\"AndroidConfirmAppDependencies\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"implement-app-registration-and-sdk-callbacks\">Implement App Registration and SDK Callbacks</h3>\n<p>Double click on <strong>MainActivity.java</strong> in the <strong>app</strong> module.\n   <img src=\"../images/quick-start/AndroidImplementationMainActivity.png\" alt=\"AndroidImplementationMainActivity\">\nTo import additional Android and DJI SDK classes that will be needed for the registration demonstration, add the following after <code>import android.os.Bundle;</code>:</p>\n<pre><code class=\"lang-java\">import android.content.Intent;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport dji.sdk.SDKManager.DJISDKManager;\nimport dji.sdk.base.DJIBaseComponent;\nimport dji.sdk.base.DJIBaseProduct;\nimport dji.sdk.base.DJIError;\nimport dji.sdk.base.DJISDKError;</code></pre>\n<p>The MainActivity class needs to register the application to get authorization to use the DJI Mobile SDK. It also needs to implement callback methods expected by the SDK.</p>\n<p>The MainActivity class will first be modified to include four class variables including <code>mProduct</code> which is the object that represents the DJI product connected to the mobile device. Additionally the <code>onCreate</code> method will be modified to instantiate the DJISDKManager.</p>\n<p>Replace the MainActivity class with:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = MainActivity.class.getName();\n    public static final String FLAG_CONNECTION_CHANGE = &quot;dji_sdk_connection_change&quot;;\n    private static DJIBaseProduct mProduct;\n    private Handler mHandler;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //Initialize DJI SDK Manager\n        mHandler = new Handler(Looper.getMainLooper());\n        DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n    }\n}</code></pre>\n<p> DJISDKManager has a callback that needs to process two methods for processing the application registration result, and for when the product connected to the mobile device is changed.</p>\n<p>Add the DJISDKManager callback and implementations of <code>onGetRegisteredResult</code> and <code>onProductChanged</code>.</p>\n<pre><code class=\"lang-java\"> private DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n\n        @Override\n        public void onGetRegisteredResult(DJIError error) {\n            Log.d(TAG, error == null ? &quot;success&quot; : error.getDescription());\n            if(error == DJISDKError.REGISTRATION_SUCCESS) {\n                DJISDKManager.getInstance().startConnectionToProduct();\n                Handler handler = new Handler(Looper.getMainLooper());\n                handler.post(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        Toast.makeText(getApplicationContext(), &quot;Register App Successful&quot;, Toast.LENGTH_LONG).show();\n                    }\n                });\n            } else {\n                Handler handler = new Handler(Looper.getMainLooper());\n                handler.post(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        Toast.makeText(getApplicationContext(), &quot;Register App Failed! Please enter your App Key and check the network.&quot;, Toast.LENGTH_LONG).show();\n                    }\n                });\n\n            }\n            Log.e(&quot;TAG&quot;, error.toString());\n        }\n\n        @Override\n        public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n\n            mProduct = newProduct;\n            if(mProduct != null) {\n                mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n            }\n\n            notifyStatusChange();\n        }\n    };</code></pre>\n<p>Finally methods for <code>DJIBaseProductListener</code>, <code>DJIComponentListener</code>, <code>notifyStatusChange</code> and <code>Runnable</code> need to be implemented :</p>\n<pre><code class=\"lang-java\">private DJIBaseProduct.DJIBaseProductListener mDJIBaseProductListener = new DJIBaseProduct.DJIBaseProductListener() {\n\n        @Override\n        public void onComponentChange(DJIBaseProduct.DJIComponentKey key, DJIBaseComponent oldComponent, DJIBaseComponent newComponent) {\n            if(newComponent != null) {\n                newComponent.setDJIComponentListener(mDJIComponentListener);\n            }\n            notifyStatusChange();\n        }\n\n        @Override\n        public void onProductConnectivityChanged(boolean isConnected) {\n            notifyStatusChange();\n        }\n\n    };\n\n    private DJIBaseComponent.DJIComponentListener mDJIComponentListener = new DJIBaseComponent.DJIComponentListener() {\n\n        @Override\n        public void onComponentConnectivityChanged(boolean isConnected) {\n            notifyStatusChange();\n        }\n\n    };\n\n    private void notifyStatusChange() {\n        mHandler.removeCallbacks(updateRunnable);\n        mHandler.postDelayed(updateRunnable, 500);\n    }\n\n    private Runnable updateRunnable = new Runnable() {\n\n        @Override\n        public void run() {\n            Intent intent = new Intent(FLAG_CONNECTION_CHANGE);\n            sendBroadcast(intent);\n        }\n    };</code></pre>\n<p>The application must be granted permissions to in order for the DJI SDK to operate.</p>\n<ul>\n<li>Double click on <strong>AndroidManifest.xml</strong> in the <strong>app</strong> module.\n<img src=\"../images/quick-start/AndroidManifest.png\" alt=\"AndroidManifest\"></li>\n<li>After <code>package=com.dji.ImportSDKDemo</code> and before <code>&lt;application</code> insert:</li>\n</ul>\n<pre><code class=\"lang-objc\">&lt;!-- Permissions and features --&gt;\n&lt;uses-sdk /&gt;\n\n&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n&lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.host&quot;\n    android:required=&quot;false&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.accessory&quot;\n    android:required=&quot;true&quot; /&gt;\n&lt;!-- Permissions and features --&gt;</code></pre>\n<p>Insert the following after <code>android:theme=&quot;@style/AppTheme&quot;&gt;</code> and before <code>&lt;activity android:name=&quot;.MainActivity&quot;&gt;</code>:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n    &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n    &lt;meta-data\n        android:name=&quot;com.dji.sdk.API_KEY&quot;\n        android:value=&quot;Please enter your App Key here.&quot; /&gt;\n    &lt;activity\n        android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n        android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n        &lt;/intent-filter&gt;\n        &lt;meta-data\n            android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n            android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n    &lt;/activity&gt;\n    &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n    &lt;/service&gt;\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p><a href=\"../quick-start/index.html#Generate-an-App-Key\">Generate an App Key</a>, and replace &quot;Please enter your App Key here.&quot; with the App Key string.</p>\n<h3 id=\"run-import-sdk-demo\">Run Import SDK Demo</h3>\n<p>The <strong>ImportSDKDemo</strong> project can now be run. You can download the sample code of this project from <a href=\"https://github.com/DJI-Mobile-SDK/Android-ImportAndActivateSDKInAndroidStudio\" target=\"_blank\">Github</a>.</p>\n<p>As this application is only checking for registration and not interacting directly with a product, no product needs to be connected to the application for this to run. Therefore, the application can either be run on a mobile device (with or without a DJI product connected) or in the Android simulator. The application will need internet connectivity to perform registration successfully.</p>\n<p>If the App Key was generated correctly and the Android simulator or mobile device has internet connectivity, then the following should be seen:</p>\n<p> <img src=\"../images/quick-start/AndroidRunSuccess.png\" alt=\"AndroidRunSuccess\"></p>","meta":{"title":"Integrate SDK into Application","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>Several general and platform specific prerequisites are required to develop an application with the DJI Mobile SDK.</p>\n<h3 id=\"general\">General</h3>\n<ul>\n<li>An understanding of how to develop applications for either iOS or Android.</li>\n<li>A DJI product that is compatible with the DJI Mobile SDK. A list of compatible products is <a href=\"../introduction/product_introduction.html#Supported-Products\">here</a>.</li>\n<li>A credit card or phone number for DJI developer registration verification (no charges will be made).</li>\n<li>At least one compatible iOS or Android mobile device.</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong>\nFor iOS, two mobile devices can be used for easier debugging and profiling.</p>\n</blockquote>\n<h3 id=\"ios\">iOS</h3>\n<ul>\n<li>Xcode 7.0+ or higher</li>\n<li>Deployment target of iOS 8.1 or higher</li>\n<li>iOS Developer account</li>\n<li>Device support<ul>\n<li>iPhone 5s or later</li>\n<li>iPad Pro, iPad Air 2, iPad Mini 2 or later</li>\n<li>iPod Touch 5 or later</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"android\">Android</h3>\n<ul>\n<li>Android API Level 22 or higher</li>\n<li>Android Studio 1.5 or higher</li>\n<li>Device support: Samsung tabs 705c, Samsung S6, Samsung S5, Samsung NOTE4, Samsung NOTE3, Google Nexus 9, Google Nexus 7 II, Ascend Mate7, Huawei Mate 8, Nubia Z7 mini, SONY Xperia Z3, MI 3, MI PAD</li>\n</ul>\n<blockquote>\n<p>Note: Support for additional Android devices available as testing and development continues.</p>\n</blockquote>","meta":{"title":"Prerequisites","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>Register for a DJI Developer account here: <a href=\"http://developer.dji.com/register/\" target=\"_blank\"><a href=\"http://developer.dji.com/register/\">http://developer.dji.com/register/</a></a>. </p>\n<p>During the registration process, email information and a credit card or phone number will need to be supplied to verify registration. Any credit card information given will only be used for verification and will not be charged. </p>\n<p>Download the DJI Mobile SDK for iOS or Android from here: <a href=\"http://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"http://developer.dji.com/mobile-sdk/downloads\">http://developer.dji.com/mobile-sdk/downloads</a></a>.</p>","meta":{"title":"Register as a DJI Developer & Download SDK","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"prepare-product\">Prepare Product</h2>\n<p>The user manual for each product should be reviewed to understand the full product setup (visit <a href=\"http://www.dji.com\" target=\"_blank\"><a href=\"http://www.dji.com\">http://www.dji.com</a></a> and navigate to the downloads page for each product). This section details some of the key points to remember. </p>\n<h3 id=\"charge-batteries\">Charge Batteries</h3>\n<p>Generally, all batteries of a product should be charged before running an application for best experience. This can include aircraft batteries, remote controller batteries, handheld gimbal batteries, and aircraft mounted gimbal batteries (for the Ronin MX). When a battery is too low, an aircraft may return home or land early in the application, or might not take off at all.</p>\n<h3 id=\"activate-product\">Activate Product</h3>\n<p>Any new product will need to be activated through <strong>DJI GO</strong> before being used for the first time. <strong>DJI GO</strong> is available on the <a href=\"https://itunes.apple.com/en/app/dji-pilot/id943780750?mt=8\" target=\"_blank\">iOS App Store</a> and <a href=\"https://play.google.com/store/apps/details?id=dji.pilot&hl=en\" target=\"_blank\"> Google Store</a> and can be used to activate a product.</p>\n<h3 id=\"upgrade-product-firmware\">Upgrade Product Firmware</h3>\n<p>Aircraft, remote controller and/or handheld controller firmware should be updated to the most recent release before beginning application testing and debugging. Different products sometimes have different processes for checking firmware version and upgrading firmware. Each product&#39;s page at <a href=\"http://www.dji.com\">http://www.dji.com</a> has instructions in the <strong>Downloads</strong> section for upgrading firmware.</p>\n<h3 id=\"remote-controller-flight-mode-switch\">Remote Controller Flight Mode Switch</h3>\n<p>For aircraft, the remote controller FAP or ASP flight mode switch needs to be in a specific position to accept SDK commands that change flight orientation and automate flight. Remote controllers and aircraft can sometimes be interchanged making the FAP/ASP switch configuration have several options.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Aircraft</th>\n<th style=\"text-align:center\">Remote Controller</th>\n<th style=\"text-align:center\">Switch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">P3, Inspire (all models)</td>\n<td style=\"text-align:center\">P3, Inspire (all models)</td>\n<td style=\"text-align:center\">F</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P3, Inspire (all models)</td>\n<td style=\"text-align:center\">P4</td>\n<td style=\"text-align:center\">A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P4</td>\n<td style=\"text-align:center\">P3, Inspire (all models)</td>\n<td style=\"text-align:center\">P</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P4</td>\n<td style=\"text-align:center\">P4</td>\n<td style=\"text-align:center\">P</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"internet-connectivity\">Internet Connectivity</h2>\n<p>Any SDK application will need internet connectivity the first time it runs to register with DJI and get authorization to use the SDK. After the first successful registration, the authorization will be stored locally, and internet connectivity will not be required for registration.</p>\n<h2 id=\"connect-mobile-device-and-run-application\">Connect Mobile Device and Run Application</h2>\n<p>There are several connection configurations between mobile device and product:</p>\n<ul>\n<li>Mobile device -&gt; USB -&gt; Remote Controller -&gt; Lightbridge -&gt; Aircraft</li>\n<li>Mobile device -&gt; WiFi -&gt; Remote Controller -&gt; WiFi -&gt; Aircraft</li>\n<li>Mobile device -&gt; WiFi -&gt; Handheld Gimbal</li>\n</ul>\n<p>There are several ways to initialize all products and run an application. An example for USB and WiFi connection scenarios is given below.</p>\n<h3 id=\"usb-connection-procedure\">USB Connection Procedure</h3>\n<p><em>Phantom 4, Phantom 3 Professional, Phantom 3 Advanced, Inspire series, Matrice Series:</em></p>\n<ol>\n<li>Turn on the Remote Controller. </li>\n<li>Turn on the Aircraft and wait until the Remote Controller has connected with the Aircraft.</li>\n<li>Connect iOS/Android Mobile Device to the Remote Controller using a <strong>Lightning</strong> (iOS) or <strong>USB</strong> (Android) cable.</li>\n<li>Run Application on the Mobile Device.</li>\n</ol>\n<blockquote>\n<p><strong>Note:</strong> </p>\n<p>If using an Android device, the DJI Remote Controller needs to support <a href=\"https://source.android.com/devices/accessories/protocol.html\" target=\"_blank\"> AOA </a>. All recent versions of the firmware support AOA. AOA is supported if when the Sample Application connects with the Android device, a dialog similar to that below appears:</p>\n<p> <img src=\"../images/application-development-workflow/android_dialog.png\" alt=\"dialog\"></p>\n<p>To learn how to change the default app for USB accessory, please check these two FAQs: <a href=\"../faq/index.html#How-do-I-reset-the-default-app-behavior-for-a-USB-Accessory-DJI-Product-on-Android-devices\">Android Device</a>, <a href=\"../faq/index.html#How-do-I-reset-the-default-app-behavior-for-a-USB-Accessory-DJI-Product-on-Samsung-devices\">Samsung Device</a>.</p>\n</blockquote>\n<h3 id=\"wifi-connection-procedure\">WiFi Connection Procedure</h3>\n<p><em>Phantom 3 Standard, Phantom 3 4K:</em></p>\n<ol>\n<li>Turn on the Remote Controller.  </li>\n<li>Connect Mobile Device to the WiFi network created by the Remote Controller.</li>\n<li>Turn on the Aircraft and wait until the Remote Controller has connected with the Aircraft.</li>\n<li>Run Application on the Mobile Device.</li>\n</ol>\n<p><em>Osmo:</em></p>\n<ol>\n<li>Turn on the Osmo.  </li>\n<li>Connect Mobile Device to the WiFi network created by the Osmo.</li>\n<li>Run Application on Mobile Device.</li>\n</ol>","meta":{"title":"Run Application","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>Application development requires extensive testing, profiling and debugging. DJI provides tools including an aircraft simulator, a wireless bridge application and remote logging functionality to make development faster and more convenient.</p>\n<h2 id=\"aircraft-simulator\">Aircraft Simulator</h2>\n<p>DJI aircraft products include a simulator that resides in the aircraft Flight Controller that can: </p>\n<ul>\n<li>Take aircraft control input from the remote controller (manual flight) or application (SDK commands)</li>\n<li>Simulate aircraft behavior in a simulated environment based on the input</li>\n<li>Output aircraft state information based on the simulated behavior</li>\n</ul>\n<p>This allows both manual and automated flights to be simulated without actually flying the aircraft.</p>\n<p>DJI provides tools for Windows and Mac which can be used to initialize the simulator, and visualize the aircraft behavior based on the state information provided by the simulator:</p>\n<ul>\n<li><strong>DJI PC Simulator</strong> ( <a href=\"https://dev.dji.com/downloads/dev/0d63fc06-30a9-4818-9b27-66265f777cdd\" target=\"_blank\"> Windows </a> only) is used for Phantom 3, Inspire and Matrice series of aircraft.</li>\n<li><strong>DJI Assistant 2</strong> (<a href=\"https://dl.djicdn.com/downloads/phantom_4/DJI_Assistant2_Installer_v1.0.2.zip\" target=\"_blank\"> Windows </a> or <a href=\"https://dl.djicdn.com/downloads/phantom_4/DJI_Assistant_Installer_mac_v1.0.2.dmg\" target=\"_blank\"> Mac </a>) is used for Phantom 4.</li>\n</ul>\n<p>Additionally, simulator initialization, monitoring and termination can be controlled directly through the SDK allowing for application development in continuous integration environments.</p>\n<h3 id=\"dji-pc-simulator\">DJI PC Simulator</h3>\n<p>The DJI PC Simulator tool is built specifically for SDK developers and can initialize, terminate and provide visualization of the aircraft simulator running in the Flight Controller of the DJI aircraft. The DJI PC Simulator tool connects to the aircraft through USB.</p>\n<ul>\n<li>Supported DJI Products: Matrice series, Phantom 3 series, Inspire series.</li>\n<li>Supported Operating Systems: Windows 7, Windows 8, Windows 8.1</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Windows 10 is not officially supported, but generally does work.</p>\n</blockquote>\n<h5 id=\"installation-and-setup\">Installation and Setup</h5>\n<ul>\n<li><p>Download the <a href=\"https://dev.dji.com/downloads/dev/0d63fc06-30a9-4818-9b27-66265f777cdd\" target=\"_blank\"> DJI PC Simulator Installer and User Manual </a> and <a href=\"https://dev.dji.com/downloads/dev/1f3df392-3026-44ed-a9a8-20caa020f6c7\" target=\"_blank\"> WIN Driver Installer </a>.</p>\n</li>\n<li><p>Run the <strong>Win Driver Installer</strong></p>\n<ul>\n<li>For earlier product compatibility, a dialog box with the message <em>Please power on MC and connect it to PC via USB!</em> will be shown.</li>\n<li>No action is required now, so press <strong>Yes</strong> to continue.</li>\n<li>Follow the remaining installation steps.</li>\n</ul>\n</li>\n<li><p>Run the <strong>DJI PC Simulator Installer</strong> </p>\n<ul>\n<li>Follow the installation steps to complete installation.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"using-the-dji-pc-simulator\">Using the DJI PC Simulator</h5>\n<p>The <strong>DJI PC Simulator</strong> can either be run on a Windows PC or on a virtual machine (like Parallels or VMWare) on a Mac.</p>\n<p>First connect the Windows PC to the aircraft using USB and turn on the aircraft.</p>\n<p>Start <strong>DJI PC Simulator</strong> to configure and initialize the aircraft simulator. Set latitude and longitude for simulation. \n <img src=\"../images/application-development-workflow/simulator_config.png\" alt=\"Config\"></p>\n<blockquote>\n<p><strong>Note:</strong> The aircraft will not take off if the latitude and longitude is too close to or inside a <a href=\"http://flysafe.dji.com/no-fly\" target=\"_blank\"> No Fly Zone </a>.</p>\n</blockquote>\n<p>If the aircraft is on and connected to the PC, then the serial number should be displayed in the <strong>SN:</strong> text view.</p>\n<p>Select <strong>show log window</strong> under the <strong>Log Settings</strong> tab to display the log window.\n <img src=\"../images/application-development-workflow/showLog.png\" alt=\"showLog\"></p>\n<p>Back in the <strong>Simulator Control</strong> tab, press <strong>Start Simulation</strong> to start the aircraft simulator. At this point the aircraft will simulate flight without actually starting the motors.</p>\n<p>Press <strong>Display Simulation</strong> to start the visualization.</p>\n<p>Take-off and fly with the remote controller to experiment with the simulator.</p>\n<p>The visualization will show the connected product (in this case an Inspire 1), as well as some of the position and speed state information.</p>\n<p> <img src=\"../images/application-development-workflow/display.png\" alt=\"display\"></p>\n<blockquote>\n<p><strong>Note:</strong> Positive World X, Y and Z are North, East and Up directions respectively.</p>\n</blockquote>\n<p>The view angle can be changed by left-clicking and dragging in the visualization window. Scrolling within the window will zoom in and out.</p>\n<p> <img src=\"../images/application-development-workflow/zoomIn.png\" alt=\"zoomIn\"></p>\n<p>While flying, the flight path can be traced by right clicking on the visualization and selecting <strong>Setup</strong>.</p>\n<p> <img src=\"../images/application-development-workflow/simulatorSetup.png\" alt=\"simulatorSetup\"></p>\n<p>Then select <strong>show trace</strong> under the simulator UI Config tab to display the flight trace, as shown below:</p>\n<p> <img src=\"../images/application-development-workflow/showTrace.png\" alt=\"showTrace\"></p>\n<p>The flight path trace will then be added to the visualization.</p>\n<p> <img src=\"../images/application-development-workflow/flightTrace.png\" alt=\"flightTrace\"></p>\n<p>In the <strong>Simulator Config</strong> window, <strong>Stop Simulation</strong> can be pressed to stop the simulation. </p>\n<blockquote>\n<p><strong>Important:</strong> To stop midway through a Waypoint Mission, stop the mission from the application, then stop the simulator. Otherwise the simulator may run the previous waypoint mission when restarted.</p>\n</blockquote>\n<p>For more info about <strong>DJI PC Simulator</strong>, check the User Manual pdf file included in the download of <strong>DJI PC Simulator.</strong></p>\n<h3 id=\"dji-assistant-2-simulator\">DJI Assistant 2 Simulator</h3>\n<p>The DJI Assistant 2 tool is built specifically for SDK developers and can initialize, terminate and provide visualization of the aircraft simulator running in the Flight Controller of the DJI aircraft. DJI Assistant 2 connects to the aircraft through USB.</p>\n<ul>\n<li>Supported DJI Products: Phantom 4.</li>\n<li>Supported Operating Systems: Mac OS X 10, Windows 7, Windows 8, and Windows 8.1</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Windows 10 is not officially supported, but generally does work.</p>\n</blockquote>\n<h4 id=\"installation-and-setup\">Installation and Setup</h4>\n<h5 id=\"mac\">Mac</h5>\n<ul>\n<li>Download <a href=\"https://dl.djicdn.com/downloads/phantom_4/DJI_Assistant_Installer_mac_v1.0.2.dmg\" target=\"_blank\"> DJI Assistant 2 </a> for Mac.</li>\n<li>Install the driver by double clicking on it and following the instructions.</li>\n<li>Open the downloaded <strong>DMG</strong> file.</li>\n<li>Drag <strong>Assistant.app</strong> into the systems <strong>Applications</strong> folder.</li>\n</ul>\n<h5 id=\"windows\">Windows</h5>\n<ul>\n<li>Download <a href=\"https://dl.djicdn.com/downloads/phantom_4/DJI_Assistant2_Installer_v1.0.2.zip\" target=\"_blank\"> DJI Assistant 2 </a> for Windows.</li>\n<li>Run the installer executable.</li>\n<li>Follow the installation instructions.</li>\n<li>During installation, confirm the request to install the driver.</li>\n</ul>\n<h4 id=\"using-dji-assistant-2\">Using DJI Assistant 2</h4>\n<p>On launch, a window asking for connection of DJI Assistant 2 to the Aircraft will appear.</p>\n<p><img src=\"../images/application-development-workflow/assistantLaunch.png\" alt=\"assistantLaunch\"></p>\n<p>Connect the aircraft to the Mac or PC with a <strong>USB cable</strong>.</p>\n<p>Turn on the remote controller and then turn on the aircraft. After a few seconds, the application will detect the aircraft.</p>\n<p>Select &quot;Phantom 4&quot; in the connected devices page, and select the <strong>Simulator</strong> tab on the left side. The following screen should be seen:</p>\n<p> <img src=\"../images/application-development-workflow/P4Connected.png\" alt=\"P4Connected\"></p>\n<p>Press the <strong>Open</strong> button and enter the desired starting latitude and longitude and wind speed desired.</p>\n<p>Press the <strong>Start Emulating</strong> button. The connected product will be shown, as well as some of the position and speed state information.</p>\n<p> <img src=\"../images/application-development-workflow/startEmulating.png\" alt=\"simulatorOld\"></p>\n<blockquote>\n<p><strong>Note:</strong> Positive World X, Y and Z are North, East and Up directions respectively.</p>\n</blockquote>\n<p>Take-off and fly with the remote controller to experiment with the simulator.</p>\n<p>The view angle can be changed by left-clicking and dragging in the visualization window. Scrolling within the window will zoom in and out.</p>\n<p>While flying, the flight path can be traced by right clicking on the visualization and selecting <strong>Setup</strong>.</p>\n<p> <img src=\"../images/application-development-workflow/setupButton.png\" alt=\"setupButton\"></p>\n<p>Then select <strong>show trace</strong> under the simulator UI Config tab to display the flight trace, as shown below:</p>\n<p> <img src=\"../images/application-development-workflow/showTraces.png\" alt=\"showTrace\"></p>\n<p>The flight path trace will then be added to the visualization.</p>\n<p> <img src=\"../images/application-development-workflow/simulator.png\" alt=\"simulator\"></p>\n<h3 id=\"continuous-integration-simulation\">Continuous Integration Simulation</h3>\n<p><strong>DJI PC Assistant</strong> and <strong>DJI Assistant 2</strong> both provide visualization of the aircraft simulator which requires a PC or Mac to be connected to the aircraft.</p>\n<p>If visualization is not required, the DJI SDK can be used to start and stop the simulator. This means simulation can be performed without aircraft connection to a Mac or PC, allowing for automated testing in continuous integration environments.</p>\n<p>The <code>DJISimulator</code> class in <code>DJIFlightController</code> is used to control the simulation. The class provides the ability to:</p>\n<ul>\n<li>Start and stop simulation</li>\n<li>Seed the simulation with a GPS location</li>\n<li>Retrieve state information about the aircraft relative to the world.</li>\n</ul>\n<p>Sample code is provided on using the simulator in a project here: <a href=\"../ios-tutorials/SimulatorDemo.html\">iOS</a> | <a href=\"../android-tutorials/SimulatorDemo.html\">Android</a>.</p>\n<h2 id=\"wireless-bridge-app\">Wireless Bridge App</h2>\n<p>For both Android and iOS, application development is most efficient when the mobile device is connected directly to Android Studio or Xcode through a USB cable.</p>\n<p>However, some DJI aircraft require direct connection between the aircraft&#39;s remote controller and mobile device. This means the application cannot be connected to the development environment directly through USB.</p>\n<p> <img src=\"../images/application-development-workflow/BridgeAppNeeded.png\" alt=\"BridgeAppNeeded\"></p>\n<p>For Android, ADB over WiFi can be used to enable real time development, however there is no such option for iOS.</p>\n<p>Therefore, DJI provides a Wireless Bridge Application, or <strong>Bridge App</strong>. </p>\n<ul>\n<li>The Bridge App connects directly to the remote controller. </li>\n<li>The mobile device running the developer&#39;s application is connected to the Mac. </li>\n<li><p>The SDK reroutes all aircraft traffic from USB to a WiFi connection with the Bridge App device.</p>\n<p><img src=\"../images/application-development-workflow/BridgeApp.png\" alt=\"BridgeApp\"></p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> If only one mobile device is available, the Bridge App can also be run with the iOS simulator. In this case the mobile device would host the bridge app, while the developer application runs on the iOS simulator.</p>\n</blockquote>\n<p>The Bridge App is provided by DJI under the MIT license from Github <a href=\"https://github.com/dji-sdk/DJI-Bridge-App\" target=\"_blank\"> here </a>.</p>\n<p>A tutorial describing how to use the DJI Bridge App is <a href=\"../ios-tutorials/BridgeAppDemo.html\">here</a>.</p>\n<h2 id=\"remote-logging\">Remote Logging</h2>\n<p>When testing an application in the field some form of logging is often required to understand behavior.</p>\n<p>For iOS, the DJI Mobile SDK can be setup to allow remote logging. If the mobile device has an internet connection, messages can be logged to a remote server as they are generated during flight.</p>\n<p>A tutorial describing how to use Remote Logging is <a href=\"../ios-tutorials/RemoteLoggerDemo.html\">here</a>.</p>","meta":{"title":"Testing, Profiling & Debugging","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue or a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>This tutorial is designed for you to gain a basic understanding of the DJI Mobile SDK. It will implement the FPV view and two basic camera functionalities: <strong>Take Photo</strong> and <strong>Record video</strong>.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"preparation\">Preparation</h2>\n<h3 id=\"download-the-sdk\">Download the SDK</h3>\n<p>You can download the latest Android SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads\">https://developer.dji.com/mobile-sdk/downloads</a></a>.</p>\n<h3 id=\"setup-android-development-environment\">Setup Android Development Environment</h3>\n<p>  Throughout this tutorial we will be using Android Studio 2.1, which you can download from here: <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\"><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></a>.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>In our previous tutorial <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a>, you have learned how to import the DJI Android SDK into your Android Studio project and activate your application. If you haven&#39;t read that previously, please take a look at it. Once you&#39;ve done that, let&#39;s continue to create the project.</p>\n<h3 id=\"importing-the-framework-and-libraries\">Importing the Framework and Libraries</h3>\n<p> <strong>1</strong>. Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &#39;FPVDemo&#39;. Enter the company domain and package name (Here we use &quot;com.dji.FPVDemo&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<p> <strong>2</strong>. Unzip the Android SDK package downloaded from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/FPVDemo/importsSDK.png\" alt=\"importSDK\"></p>\n<p> <strong>3</strong>. Next, double click on the &quot;build.gradle(Module: app)&quot; in the project navigator to open it and replace the content with the following:</p>\n<pre><code class=\"lang-java\">apply plugin: &#39;com.android.application&#39;\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion &#39;23.0.2&#39;\n\n    defaultConfig {\n        applicationId &quot;com.dji.FPVDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile &#39;com.android.support:design:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<p> In the code above, we modify its dependencies by adding <code>compile project(&#39;:dJISDKLIB&#39;)</code> in the &quot;dependencies&quot; part at the bottom, and change the compileSdkVersion, buildToolsVersion number, etc. </p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/FPVDemo/buildGradle.png\" alt=\"configureAndroidSDK\"></p>\n<p> Then, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p> <strong>4</strong>. Let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/FPVDemo/dependencies.png\" alt=\"dependencies\"></p>\n<p> <strong>5</strong>. Now, open the MainActivity.java file in <code>com.dji.FPVDemo</code> package and add <code>import dji.sdk.SDKManager.DJISDKManager;</code> at the bottom of the import classes section as shown below:</p>\n<pre><code class=\"lang-java\">package com.dji.FPVDemo;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport dji.sdk.SDKManager.DJISDKManager;</code></pre>\n<p>  Wait for a few seconds and check if the words turn red, if they remain gray color, it means you can use DJI Android SDK in your project successfully now.</p>\n<h3 id=\"building-the-layouts-of-activity\">Building the Layouts of Activity</h3>\n<h4 id=\"1-creating-fpvdemoapplication-class\">1. Creating FPVDemoApplication Class</h4>\n<p>Right-click on the package <code>com.dji.FPVDemo</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;FPVDemoApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>Next, Replace the code of the &quot;FPVDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.FPVDemo;\nimport android.app.Application;\n\npublic class FPVDemoApplication extends Application{\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n}</code></pre>\n<p>Here, we override the onCreate() method. We can do some settings when the application is created here.</p>\n<h4 id=\"2-implementing-mainactivity-class\">2. Implementing MainActivity Class</h4>\n<p>The MainActivity.java file is created by Android Studio by default. Let&#39;s replace the code of it with the following:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends Activity implements TextureView.SurfaceTextureListener, View.OnClickListener {\n\n    protected TextView mConnectStatusTextView;\n\n    protected TextureView mVideoSurface = null;\n    private Button mCaptureBtn, mShootPhotoModeBtn, mRecordVideoModeBtn;\n    private ToggleButton mRecordBtn;\n    private TextView recordingTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the\n        // following permissions at runtime to ensure the\n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n        initUI();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    public void onReturn(View view){\n        this.finish();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n    }\n\n    @Override\n    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {\n    }\n\n    @Override\n    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n        return false;\n    }\n\n    @Override\n    public void onSurfaceTextureUpdated(SurfaceTexture surface) {\n    }\n\n    private void initUI() {\n        mConnectStatusTextView = (TextView) findViewById(R.id.ConnectStatusTextView);\n        // init mVideoSurface\n        mVideoSurface = (TextureView)findViewById(R.id.video_previewer_surface);\n\n        recordingTime = (TextView) findViewById(R.id.timer);\n        mCaptureBtn = (Button) findViewById(R.id.btn_capture);\n        mRecordBtn = (ToggleButton) findViewById(R.id.btn_record);\n        mShootPhotoModeBtn = (Button) findViewById(R.id.btn_shoot_photo_mode);\n        mRecordVideoModeBtn = (Button) findViewById(R.id.btn_record_video_mode);\n\n        if (null != mVideoSurface) {\n            mVideoSurface.setSurfaceTextureListener(this);\n        }\n\n        mCaptureBtn.setOnClickListener(this);\n        mRecordBtn.setOnClickListener(this);\n        mShootPhotoModeBtn.setOnClickListener(this);\n        mRecordVideoModeBtn.setOnClickListener(this);\n\n        recordingTime.setVisibility(View.INVISIBLE);\n\n        mRecordBtn.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n\n           }\n        });\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.btn_capture:{\n                break;\n            }\n            case R.id.btn_shoot_photo_mode:{\n                break;\n            }\n            case R.id.btn_record_video_mode:{\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n}</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create the layout UI elements variables, including a TextureView <code>mVideoSurface</code>, three Buttons <code>mCaptureBtn</code>, <code>mShootPhotoModeBtn</code>, <code>mRecordVideoModeBtn</code>, one Toggle Button <code>mRecordBtn</code> and a TextView <code>recordingTime</code>.</p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</p>\n<p><strong>3.</strong> Then invoke the <code>initUI()</code> method to initialize UI variables. And implement the <code>setOnClickListener()</code> method of Button for all the Buttons. Also implement the <code>setOnCheckedChangeListener()</code> method for Toggle Button.</p>\n<p><strong>4.</strong> Override the <code>onClick()</code> method to implement the three Buttons&#39; click actions.</p>\n<h4 id=\"3-implementing-the-mainactivity-layout\">3. Implementing the MainActivity Layout</h4>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;RelativeLayout\n        android:id=&quot;@+id/main_title_rl&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;40dp&quot;\n        android:background=&quot;@color/black_overlay&quot; &gt;\n\n        &lt;ImageButton\n            android:id=&quot;@+id/ReturnBtnCamera&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;35dp&quot;\n            android:layout_alignParentLeft=&quot;true&quot;\n            android:layout_centerVertical=&quot;true&quot;\n            android:layout_marginLeft=&quot;20dp&quot;\n            android:adjustViewBounds=&quot;true&quot;\n            android:background=&quot;@android:color/transparent&quot;\n            android:onClick=&quot;onReturn&quot;\n            android:scaleType=&quot;centerInside&quot;\n            android:src=&quot;@drawable/selector_back_button&quot; /&gt;\n\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_centerInParent=&quot;true&quot;\n            android:text=&quot;&quot;\n            android:textColor=&quot;@android:color/white&quot;\n            android:textSize=&quot;21sp&quot; /&gt;\n    &lt;/RelativeLayout&gt;\n\n    &lt;TextureView\n        android:id=&quot;@+id/video_previewer_surface&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;\n        android:layout_below=&quot;@id/main_title_rl&quot;\n        android:layout_gravity=&quot;center&quot;\n        android:layout_centerHorizontal=&quot;true&quot;\n        android:layout_above=&quot;@+id/linearLayout&quot; /&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;\n        android:layout_alignParentBottom=&quot;true&quot;\n        android:id=&quot;@+id/linearLayout&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/btn_capture&quot;\n            android:layout_width=&quot;0dp&quot;\n            android:layout_weight=&quot;1&quot;\n            android:layout_gravity=&quot;center_vertical&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Capture&quot;\n            android:textSize=&quot;12sp&quot;/&gt;\n\n        &lt;ToggleButton\n            android:id=&quot;@+id/btn_record&quot;\n            android:layout_width=&quot;0dp&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Start Record&quot;\n            android:textOff=&quot;Start Record&quot;\n            android:textOn=&quot;Stop Record&quot;\n            android:layout_weight=&quot;1&quot;\n            android:layout_gravity=&quot;center_vertical&quot;\n            android:textSize=&quot;12dp&quot;\n            android:checked=&quot;false&quot; /&gt;\n\n        &lt;Button\n            android:id=&quot;@+id/btn_shoot_photo_mode&quot;\n            android:layout_width=&quot;0dp&quot;\n            android:layout_weight=&quot;1&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_gravity=&quot;center_vertical&quot;\n            android:text=&quot;Shoot Photo Mode&quot;\n            android:textSize=&quot;12sp&quot;/&gt;\n\n        &lt;Button\n            android:id=&quot;@+id/btn_record_video_mode&quot;\n            android:layout_width=&quot;0dp&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Record Video Mode&quot;\n            android:layout_weight=&quot;1&quot;\n            android:layout_gravity=&quot;center_vertical&quot; /&gt;\n\n    &lt;/LinearLayout&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/timer&quot;\n        android:layout_width=&quot;150dp&quot;\n        android:layout_weight=&quot;1&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_gravity=&quot;center_vertical&quot;\n        android:layout_marginTop=&quot;23dp&quot;\n        android:gravity=&quot;center&quot;\n        android:textColor=&quot;#ffffff&quot;\n        android:layout_alignTop=&quot;@+id/video_previewer_surface&quot;\n        android:layout_centerHorizontal=&quot;true&quot; /&gt;\n\n&lt;/RelativeLayout&gt;</code></pre>\n<p>  In the xml file, firstly, we implement the RelativeLayout element. We declare an ImageButton(id: ReturnBtnCamera) element to exit the application, and a TextView(id: ConnectStatusTextView) element to show the connection status text. </p>\n<p>  Next, create a TextureView(id: video_previewer_surface) element to show the live video stream from the camera. Moreover, we implement a LinearLayout element to create the &quot;Capture&quot; Button(id: btn_capture), &quot;Record&quot; ToggleButton(id: btn_record), &quot;Shoot Photo Mode&quot; Button(id: btn_shoot_photo_mode) and &quot;Record Video Mode&quot; Button(id: btn_record_video_mode).</p>\n<p>  Lastly, we create a TextView(id: timer) element to show the record video time.</p>\n<h4 id=\"4-configuring-the-resource-xmls\">4. Configuring the Resource XMLs</h4>\n<p>  Once you finish the above steps, let&#39;s copy all the images file from this Github sample project&#39;s <strong>drawable</strong> folder (<strong>app-&gt;src-&gt;main-&gt;res-&gt;drawable</strong>) to the same folder in your project.</p>\n<p>  <img src=\"../../images/tutorials-and-samples/Android/FPVDemo/imageFiles.png\" alt=\"imageFiles\"></p>\n<p>  Moreover, open the colors.xml file and update the content as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n    &lt;color name=&quot;colorPrimary&quot;&gt;#3F51B5&lt;/color&gt;\n    &lt;color name=&quot;colorPrimaryDark&quot;&gt;#303F9F&lt;/color&gt;\n    &lt;color name=&quot;colorAccent&quot;&gt;#FF4081&lt;/color&gt;\n    &lt;color name=&quot;black_overlay&quot;&gt;#66000000&lt;/color&gt;\n&lt;/resources&gt;</code></pre>\n<p>Now, if you open the activity_main.xml file, and click on the <strong>Design</strong> tab on the bottom left, you should see the preview screenshot of MainActivity as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/FPVDemo/mainActivityImage.png\" alt=\"MainActivity\"></p>\n<p>For more details, please check the Github source code of this tutorial.</p>\n<h2 id=\"registering-the-application\">Registering the Application</h2>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>1.</strong> Let&#39;s open the AndroidManifest.xml file and add the following elements on top of the <strong>application</strong> element:</p>\n<pre><code class=\"lang-xml\">&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n&lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.host&quot;\n    android:required=&quot;false&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.accessory&quot;\n    android:required=&quot;true&quot; /&gt;</code></pre>\n<p>Here, we request permissions that the application must be granted in order for it to register DJI SDK correctly. Also we declare the camera and usb hardwares which is used by the application.</p>\n<p>Moreover, let&#39;s add the following elements as childs of element on top of the &quot;MainActivity&quot; activity element as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n&lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n&lt;meta-data\n    android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;Please enter your APP Key here.&quot; /&gt;\n\n&lt;activity\n    android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n    android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n    &lt;/intent-filter&gt;\n\n    &lt;meta-data\n        android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n        android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n&lt;/activity&gt;\n&lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n&lt;/service&gt;\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, you should substitude your <strong>App Key</strong> of the application for &quot;Please enter your App Key here.&quot; in the <strong>value</strong> attribute under the <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute.</p>\n<p><strong>2.</strong> After you finish the steps above, open the &quot;FPVDemoApplication.java&quot; file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onCreate() {\n    super.onCreate();\n    mHandler = new Handler(Looper.getMainLooper());\n    //This is used to start SDK services and initiate SDK.\n    DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\n/**\n * When starting SDK services, an instance of interface DJISDKManager.DJISDKManagerCallback will be used to listen to \n * the SDK Registration result and the product changing.\n */\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n\n    //Listens to the SDK registration result\n    @Override\n    public void onGetRegisteredResult(DJIError error) {\n        if(error == DJISDKError.REGISTRATION_SUCCESS) {\n          DJISDKManager.getInstance().startConnectionToProduct();\n          Handler handler = new Handler(Looper.getMainLooper());\n          handler.post(new Runnable() {\n              @Override\n              public void run() {\n                  Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n              }\n          });\n\n        } else {\n\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;register sdk fails, check network is available&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n        Log.e(&quot;TAG&quot;, error.toString());\n    }\n\n    //Listens to the connected product changing, including two parts, component changing or product connection changing.\n    @Override\n    public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n\n        mProduct = newProduct;\n        if(mProduct != null) {\n            mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n        }\n\n        notifyStatusChange();\n    }\n};\n\nprivate DJIBaseProductListener mDJIBaseProductListener = new DJIBaseProductListener() {\n\n    @Override\n    public void onComponentChange(DJIComponentKey key, DJIBaseComponent oldComponent, DJIBaseComponent newComponent) {\n\n        if(newComponent != null) {\n            newComponent.setDJIComponentListener(mDJIComponentListener);\n        }\n        notifyStatusChange();\n    }\n\n    @Override\n    public void onProductConnectivityChanged(boolean isConnected) {\n\n        notifyStatusChange();\n    }\n};</code></pre>\n<p>Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of <code>DJISDKManagerCallback</code>. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n<li>Implement the two interface methods of <code>DJIBaseProductListener</code>. You can use the <code>onComponentChange()</code> method to check the product component change status and invoke the <code>notifyStatusChange()</code> method to notify status changes. Also, you can use the <code>onProductConnectivityChanged()</code> method to notify the product connectivity changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/FPVDemo/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/FPVDemo/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<p>For more details of registering your application, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a>.</p>\n<h2 id=\"implementing-the-first-person-view\">Implementing the First Person View</h2>\n<p>Now, let&#39;s continue to declare the <code>TAG</code> and <code>mReceivedVideoDataCallBack</code> variables as shown below:</p>\n<pre><code class=\"lang-java\">private static final String TAG = MainActivity.class.getName();\nprotected DJICamera.CameraReceivedVideoDataCallback mReceivedVideoDataCallBack = null;</code></pre>\n<p>Then add the following codes at the bottom of <code>onCreate()</code> method:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    initUI();\n\n    // The callback for receiving the raw H264 video data for camera live view\n    mReceivedVideoDataCallBack = new DJICamera.CameraReceivedVideoDataCallback() {\n\n        @Override\n        public void onResult(byte[] videoBuffer, int size) {\n            if(mCodecManager != null){\n                // Send the raw H264 video data to codec manager for decoding\n                mCodecManager.sendDataToDecoder(videoBuffer, size);\n            }else {\n                Log.e(TAG, &quot;mCodecManager is null&quot;);\n            }\n        }\n    };\n\n    // Register the broadcast receiver for receiving the device connection&#39;s changes.\n    IntentFilter filter = new IntentFilter();\n    filter.addAction(FPVDemoApplication.FLAG_CONNECTION_CHANGE);\n    registerReceiver(mReceiver, filter);\n}</code></pre>\n<p>In the code above, we initialize the <code>mReceivedVideoDataCallBack</code> variable using DJICamera&#39;s <code>CameraReceivedVideoDataCallback()</code>. Inside the callback, we override its <code>onResult()</code> method to get the raw H264 video data and send them to <code>mCodecManager</code> for decoding.  Next, we register the broadcast receiver for receiving the device connection changes status. </p>\n<p>Moreover, let&#39;s create the &quot;BroadcastReceiver&quot; and override its <code>onReceive()</code> method to update the title Bar and invoke the <code>onProductChange()</code> method:</p>\n<pre><code class=\"lang-java\">protected BroadcastReceiver mReceiver = new BroadcastReceiver() {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        updateTitleBar();\n        onProductChange();\n    }\n};</code></pre>\n<p>Next, let&#39;s implement the <code>updateTitleBar()</code> and <code>onProductChange()</code> methods： </p>\n<pre><code class=\"lang-java\">private void updateTitleBar() {\n    if(mConnectStatusTextView == null) return;\n    boolean ret = false;\n    DJIBaseProduct product = FPVDemoApplication.getProductInstance();\n    if (product != null) {\n        if(product.isConnected()) {\n            //The product is connected\n            mConnectStatusTextView.setText(FPVDemoApplication.getProductInstance().getModel() + &quot; Connected&quot;);\n            ret = true;\n        } else {\n            if(product instanceof DJIAircraft) {\n                DJIAircraft aircraft = (DJIAircraft)product;\n                if(aircraft.getRemoteController() != null &amp;&amp; aircraft.getRemoteController().isConnected()) {\n                    // The product is not connected, but the remote controller is connected\n                    mConnectStatusTextView.setText(&quot;only RC Connected&quot;);\n                    ret = true;\n                }\n            }\n        }\n    }\n    if(!ret) {\n        // The product or the remote controller are not connected.\n//            mConnectStatusTextView.setText(&quot;Disconnected&quot;);\n    }\n}\n\nprotected void onProductChange() {\n    initPreviewer();\n}</code></pre>\n<p>In the <code>updateTitleBar()</code> method, we check the product connection status and modify the text on <code>mConnectStatusTextView</code>.</p>\n<p>Furthermore, let&#39;s implement two important methods to show and reset the live video stream on our <code>mVideoSurface</code> TextureView:</p>\n<pre><code class=\"lang-java\">private void initPreviewer() {\n\n    DJIBaseProduct product = FPVDemoApplication.getProductInstance();\n\n    if (product == null || !product.isConnected()) {\n        showToast(getString(R.string.disconnected));\n    } else {\n        if (null != mVideoSurface) {\n            mVideoSurface.setSurfaceTextureListener(this);\n        }\n        if (!product.getModel().equals(DJIBaseProduct.Model.UnknownAircraft))   \n        {\n            DJICamera camera = product.getCamera();\n            if (camera != null){\n                // Set the callback\n                camera.setDJICameraReceivedVideoDataCallback(mReceivedVideoDataCallBack);\n            }\n        }\n    }\n}\n\nprivate void uninitPreviewer() {\n    DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null){\n        // Reset the callback\n        FPVDemoApplication.getCameraInstance().setDJICameraReceivedVideoDataCallback(null);\n    }\n}</code></pre>\n<p>In the <code>initPreviewer()</code> method, firstly, we check the product connection status and invoke the <code>setSurfaceTextureListener()</code> method of TextureView to set texture listener to MainActivity. Then get the DJICamera variable by invoking the <code>getCamera()</code> method of DJIBaseProduct and set <code>mReceivedVideoDataCallBack</code> as its &quot;DJICameraReceivedVideoDataCallback&quot;. So once the camera is connected and receive video data, it will show on the <code>mVideoSurface</code> TextureView.</p>\n<p>Moreover, we implement the <code>uninitPreviewer()</code> method to reset DJICamera&#39;s &quot;DJICameraReceivedVideoDataCallback&quot; to null.</p>\n<p>Now, let&#39;s override the four SurfaceTextureListener interface methods as shown below:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n    Log.e(TAG, &quot;onSurfaceTextureAvailable&quot;);\n    if (mCodecManager == null) {\n        mCodecManager = new DJICodecManager(this, surface, width, height);\n    }\n}\n\n@Override\npublic void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {\n    Log.e(TAG, &quot;onSurfaceTextureSizeChanged&quot;);\n}\n\n@Override\npublic boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n    Log.e(TAG,&quot;onSurfaceTextureDestroyed&quot;);\n    if (mCodecManager != null) {\n        mCodecManager.cleanSurface();\n        mCodecManager = null;\n    }\n\n    return false;\n}\n\n@Override\npublic void onSurfaceTextureUpdated(SurfaceTexture surface) {\n//        Log.e(TAG, &quot;onSurfaceTextureUpdated&quot;);\n}</code></pre>\n<p>We init the <code>mCodecManager</code> variable in the <code>onSurfaceTextureAvailable()</code> method, then reset the <code>mCodecManager</code> and invoke its <code>cleanSurface()</code> method to reset the surface data.</p>\n<p>For more detail implementations, please check the Github source code of this tutorial.</p>\n<h2 id=\"connecting-to-the-aircraft-or-handheld-device\">Connecting to the Aircraft or Handheld Device</h2>\n<p>After you finish the steps above, you can now connect your mobile device to your DJI Aircraft to use the application, like checking the FPV View. Here are the guidelines:</p>\n<ul>\n<li><p>In order to connect to a DJI Phantom 4, Inspire 1, Phantom 3 Professional, etc:</p>\n<p><strong>1</strong>. First, turn on your remote controller.</p>\n<p><strong>2</strong>. Then, turn on the power of the DJI aircraft.</p>\n<p><strong>3</strong>. Connect your Android device to the remote controller using the USB cable.</p>\n<p><strong>4</strong>. Run the application and wait for a few seconds, you will be able to view the live video stream from your aircraft&#39;s camera based on what we&#39;ve finished of the application so far!</p>\n</li>\n<li><p>In order to connect to Phantom 3 Standard, Phantom 3 4K, or OSMO:</p>\n<p><strong>1</strong>. First, turn on your remote controller or OSMO.</p>\n<p><strong>2</strong>. Then, turn on the power of the DJI aircraft. (If you are using Phantom 3 Standard or Phantom 3 4K)</p>\n<p><strong>3</strong>. Search for the WiFi of the aircraft&#39;s remote controller or OSMO and connect your android device to it.</p>\n<p><strong>4</strong>. Run the application and wait for a few seconds, you will be able to view the live video stream from your aircraft or OSMO&#39;s camera based on what we&#39;ve finished of the application so far!</p>\n</li>\n</ul>\n<h2 id=\"enjoying-the-first-person-view\">Enjoying the First Person View</h2>\n<p>If you can see the live video stream in the application, congratulations! Let&#39;s move forward.</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/FPVDemo/fpv.png\" alt=\"fpv\"></p>\n<h2 id=\"implementing-the-capture-function\">Implementing the Capture function</h2>\n<p>Now, let&#39;s override the <code>onClick()</code> method to implement the capture button click action:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onClick(View v) {\n\n    switch (v.getId()) {\n        case R.id.btn_capture:{\n            captureAction();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<p>Then implement the <code>captureAction()</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">// Method for taking photo\nprivate void captureAction(){\n\n    CameraMode cameraMode = CameraMode.ShootPhoto;\n\n    final DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null) {\n\n        CameraShootPhotoMode photoMode = CameraShootPhotoMode.Single; // Set the camera capture mode as Single mode\n        camera.startShootPhoto(photoMode, new DJICompletionCallback() {\n\n            @Override\n            public void onResult(DJIError error) {\n                if (error == null) {\n                    showToast(&quot;take photo: success&quot;);\n                } else {\n                    showToast(error.getDescription());\n                }\n            }\n\n        }); // Execute the startShootPhoto API\n    }\n}</code></pre>\n<p>In the code above, we firstly create a &quot;CameraMode&quot; variable and assign <code>CameraMode.ShootPhoto</code> to it. Next, create a &quot;CameraShootPhotoMode&quot; variable and assign &quot;CameraShootPhotoMode.Single&quot; to it. The camera work mode for ShootPhoto has several modes within its definition. You can use &quot;AEBCapture&quot;, &quot;Burst&quot;, &quot;HDR&quot;, etc for &quot;CameraShootPhotoMode&quot;, for more details, please check <strong>DJICameraSettingsDef.CameraShootPhotoMode</strong>.</p>\n<p>Next, implement the <code>startShootPhoto()</code> method of DJICamera to control the camera to shoot photo. We override its <code>onResult()</code> method to get the result and show related text to users.</p>\n<p>  Build and run your project and then try the shoot photo function. If the screen flash after your press the <strong>Capture</strong> button, your capture fuction should work now.</p>\n<h2 id=\"implementing-the-record-function\">Implementing the Record function</h2>\n<h3 id=\"switching-camera-mode\">Switching Camera Mode</h3>\n<p>Before we go ahead to implement the record action method, let&#39;s implement the switch Camera Mode feature. Improve the <code>onClick()</code> method by adding button click actions for <code>mShootPhotoModeBtn</code> and <code>mRecordVideoModeBtn</code> as follows:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onClick(View v) {\n\n    switch (v.getId()) {\n        case R.id.btn_capture:{\n            captureAction();\n            break;\n        }\n        case R.id.btn_shoot_photo_mode:{\n            switchCameraMode(CameraMode.ShootPhoto);\n            break;\n        }\n        case R.id.btn_record_video_mode:{\n            switchCameraMode(CameraMode.RecordVideo);\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<p>Next, implement the <code>switchCameraMode()</code> method:</p>\n<pre><code class=\"lang-java\">private void switchCameraMode(CameraMode cameraMode){\n\n    DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null) {\n        camera.setCameraMode(cameraMode, new DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n\n                if (error == null) {\n                    showToast(&quot;Switch Camera Mode Succeeded&quot;);\n                } else {\n                    showToast(error.getDescription());\n                }\n            }\n        });\n        }\n\n}</code></pre>\n<p>In the code above, we invoke the <code>setCameraMode()</code> method of DJICamera and assign the <code>CameraMode</code> parameter to it. Then override the <code>onResult()</code> method to show the change camera mode result to the users.</p>\n<h3 id=\"working-on-the-record-action\">Working on the Record Action</h3>\n<p>Once we finish the switch camera mode feature, we can now implement the record feature. Let&#39;s improve the <code>initUI()</code> method by add the following code at the bottom of it:</p>\n<pre><code class=\"lang-java\">mRecordBtn.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n    @Override\n    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n        if (isChecked) {\n            recordingTime.setVisibility(View.VISIBLE);\n            startRecord();\n\n        } else {\n            recordingTime.setVisibility(View.INVISIBLE);\n            stopRecord();\n        }\n    }\n});</code></pre>\n<p>Here, we implement the <code>setOnCheckedChangeListener()</code> method of ToggleButton <code>mRecordBtn</code> and override its <code>onCheckedChanged()</code> method to check the <code>isChecked</code> variable value, which means the toggle state of the button, and invoke the <code>startRecord()</code> and <code>stopRecord()</code> methods relatively.</p>\n<p>Next, implement the <code>startRecord()</code> and <code>stopRecord()</code> methods as shown below:</p>\n<pre><code class=\"lang-java\">// Method for starting recording\nprivate void startRecord(){\n\n    CameraMode cameraMode = CameraMode.RecordVideo;\n    final DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null) {\n        camera.startRecordVideo(new DJICompletionCallback(){\n            @Override\n            public void onResult(DJIError error)\n            {\n                if (error == null) {\n                    showToast(&quot;Record video: success&quot;);\n                }else {\n                    showToast(error.getDescription());\n                }\n            }\n        }); // Execute the startRecordVideo API\n    }\n}\n\n// Method for stopping recording\nprivate void stopRecord(){\n\n    DJICamera camera = FPVDemoApplication.getCameraInstance();\n    if (camera != null) {\n        camera.stopRecordVideo(new DJICompletionCallback(){\n\n            @Override\n            public void onResult(DJIError error)\n            {\n                if(error == null) {\n                    showToast(&quot;Stop recording: success&quot;);\n                }else {\n                    showToast(error.getDescription());\n                }\n            }\n        }); // Execute the stopRecordVideo API\n    }\n\n}</code></pre>\n<p>In the code above, we invoke the <code>startRecordVideo()</code> and <code>stopRecordVideo()</code> methods of DJICamera to implement the start record and stop record features. And show the result messages to our user by override the <code>onResult()</code> methods.</p>\n<p>Lastly, when the video start recording, we should show the recording time info to our users. So let&#39;s add the following code to the bottom of <code>onCreate()</code> method as follows:</p>\n<pre><code class=\"lang-java\">DJICamera camera = FPVDemoApplication.getCameraInstance();\n\n    if (camera != null) {\n        camera.setDJICameraUpdatedSystemStateCallback(new DJICamera.CameraUpdatedSystemStateCallback() {\n            @Override\n            public void onResult(DJICamera.CameraSystemState cameraSystemState) {\n                if (null != cameraSystemState) {\n\n                    int recordTime = cameraSystemState.getCurrentVideoRecordingTimeInSeconds();\n                    int minutes = (recordTime % 3600) / 60;\n                    int seconds = recordTime % 60;\n\n                    final String timeString = String.format(&quot;%02d:%02d&quot;, minutes, seconds);\n                    final boolean isVideoRecording = cameraSystemState.isRecording();\n\n                    MainActivity.this.runOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            recordingTime.setText(timeString);\n                             /*\n                              * Update recordingTime TextView visibility and mRecordBtn&#39;s check state\n                              */\n                                if (isVideoRecording){\n                                    recordingTime.setVisibility(View.VISIBLE);\n                                }else\n                                {\n                                    recordingTime.setVisibility(View.INVISIBLE);\n                                }\n                        }\n                    });\n                }\n            }\n        });\n    }</code></pre>\n<p>Here, we implement the <code>setDJICameraUpdatedSystemStateCallback()</code> of DJICamera and override the <code>onResult()</code> method to get the current camera system state, we can call the <code>getCurrentVideoRecordingTimeInSeconds()</code> method of &quot;DJICamera.CameraSystemState&quot; to get the record time info. Before we show the record time info to our users, we should convert it from seconds to &quot;00:00&quot; format including minutes and seconds. Lastly, we update the TextView <code>recordingTime</code> variable&#39;s text value with the latest record time info and update the visibility of <code>recordingTime</code> TextView in UI Thread.</p>\n<p>For more details, please check the Github source code of this tutorial.</p>\n<p>Now, let&#39;s build and run the project and check the functions. You can try to play with the <strong>Capture</strong>, <strong>Record</strong> and <strong>Switch Camera WorkMode</strong> functions, here is a gif animation to demo these three functions:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/Android/FPVDemo/demoAni.gif\" alt=\"demoAni\"></p>\n<p>  Congratulations! Your Aerial FPV android app is complete, you can now use this app to control the camera of your Phantom 3 Professional. </p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you’ve learned how to use DJI Mobile SDK to show the FPV View from the aircraft&#39;s camera and control the camera of DJI&#39;s Aircraft to shoot photo and record video. These are the most basic and common features in a typical drone mobile app: <strong>Capture</strong> and <strong>Record</strong>. However, if you want to create a drone app which is more fancy, you still have a long way to go. More advanced features should be implemented, including previewing the photo and video in the SD Card, showing the OSD data of the aircraft and so on. Hope you enjoy this tutorial, and stay tuned for our next one!</p>","meta":{"title":"Creating a Camera Application","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-FPVDemo"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to implement the DJIWaypoint Mission feature and get familiar with the usages of DJIMissionManager. \nAlso you will know how to setup the DJI PC Simulator, upgrade your Inspire 1, Phantom 3 Professional and Phantom 3 Advanced&#39;s firmware to the lastest version, and how to test the Waypoint Mission API with DJI PC Simulator too. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<blockquote>\n<p>Note: In this tutorial, we will use Inspire 1 for testing, use Android Studio 2.1.1 for developing the demo application, and use the <a href=\"http://lbs.amap.com\" target=\"_blank\">Gaode Map API</a> for navigating.</p>\n</blockquote>\n<h2 id=\"preparation\">Preparation</h2>\n<h3 id=\"download-the-sdk\">Download the SDK</h3>\n<p>You can download the latest Android SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads\">https://developer.dji.com/mobile-sdk/downloads</a></a>.</p>\n<h3 id=\"setup-android-development-environment\">Setup Android Development Environment</h3>\n<p>  Throughout this tutorial we will be using Android Studio 2.1, which you can download from here: <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\"><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></a>.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>We can use the map view to display waypoints and show the flight route of the aircraft when waypoint mission is being executed. Here, we take Gaode Map for an example.</p>\n<h3 id=\"configurating-amap-api-key\">Configurating AMAP API Key</h3>\n<h4 id=\"1-create-the-project\">1. Create the project</h4>\n<p> Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &quot;GSDemo&quot;. Enter the company domain and package name (Here we use &quot;com.dji.GSDemo.GaodeMap&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<h4 id=\"2-generating-sha-1-key\">2. Generating SHA-1 Key</h4>\n<p>We can use Android Studio to generate a SHA-1 Key easily. Click on the <strong>Gradle</strong> tap on the right side of Android Studio. Select the project and navigate to <strong>Tasks -&gt; android -&gt; signingReport</strong>. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/signingReport.png\" alt=\"signingReport\"></p>\n<p>Then double click the <strong>signingReport</strong> and check the Console area of Android Studio, you can find the SHA-1 key easily:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/SHA-1Key.png\" alt=\"SHA1\"></p>\n<h4 id=\"3-applying-for-an-amap-key\">3. Applying for an AMAP Key</h4>\n<p>Now, let&#39;s go to <a href=\"http://lbs.amap.com\" target=\"_blank\">AMAP Developer Platform</a> to apply for an AMAP Key. If it&#39;s your first time go to this website, please register first. Then login with your amap account and press the &quot;+创建新应用&quot; button on the upper right corner. Enter your application&#39;s name and press &quot;创建&quot; to continue. You will see the following screenshot here:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/createApplication.png\" alt=\"createApplication\"></p>\n<p>Next, click the &quot;添加新Key&quot; button on the upper right corner of &quot;GSDemo&quot; Application. Enter the info as you want, for the &quot;发布版安全码：SHA1&quot; and &quot;调试版安全码SHA1&quot; fields, please enter the SHA-1 key we just generate in the above steps. </p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/createAMAPKey.png\" alt=\"createAMAPKey\"></p>\n<blockquote>\n<p>Note: The &quot;Package&quot; should be the same to your Android project&#39;s Package name.</p>\n</blockquote>\n<p> Moreover, press &quot;提交&quot; and you can get your AMAP Key like this:</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/amapKey.png\" alt=\"AMAPKey\"></p>\n<h4 id=\"4-adding-amap-key\">4. Adding AMAP Key</h4>\n<p>Open the AndroidManifest.xml file, add the following elements as childs of <strong><application></strong> element and substitute your AMAP Key for &quot;YOUR _ AMAP_KEY&quot; in the <strong>value</strong> attribute as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!-- 启用高德地图服务 --&gt;\n&lt;meta-data\n    android:name=&quot;com.amap.api.v2.apikey&quot;\n    android:value=&quot;YOUR_AMAP_KEY&quot; /&gt;</code></pre>\n<p>This will set the key &quot;com.amap.api.v2.apikey&quot; to the value of your AMAP key. </p>\n<p>Next, specify the permissions of your application needs, by adding <strong>\\<uses-permission></strong> elements as children of the <strong>\\<manifest></strong> element in the &quot;AndroidManifest.xml&quot; file. </p>\n<pre><code class=\"lang-xml\">   &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_CONFIGURATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_LOCATION_EXTRA_COMMANDS&quot; /&gt;</code></pre>\n<p>For more details of description on the permissions, please refer to <a href=\"http://lbs.amap.com/api/android-sdk/guide/project/\" target=\"_blank\"><a href=\"http://lbs.amap.com/api/android-sdk/guide/project/\">http://lbs.amap.com/api/android-sdk/guide/project/</a></a>.</p>\n<h3 id=\"importing-the-amap-jar-packages\">Importing the AMAP JAR Packages</h3>\n<p>Let&#39;s go to <a href=\"http://lbs.amap.com/api/android-sdk/down/\" target=\"_blank\"><a href=\"http://lbs.amap.com/api/android-sdk/down/\">http://lbs.amap.com/api/android-sdk/down/</a></a> to download the latest version of AMAP Android&#39;s 2D Map SDK and search service SDK as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/amapSDK.png\" alt=\"amapSDK\"></p>\n<p>Once you finish the download, copy the two SDK jar files to the <strong>libs</strong> folder of your Android Studio project: <strong>app-&gt;libs</strong>.</p>\n<p>Then right click on the <strong>app</strong> folder in the project navigator and select &quot;Open Module Settings&quot; to open the &quot;Project Structure&quot; window.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/openModuleSettings.png\" alt=\"openModuleSettings\"></p>\n<p>Next, press the &quot;+&quot; button on the upper left corner of the window and select &quot;Import .JAR/.ARR Package&quot;, and press &quot;Next&quot; button. Moreover, select the amap packages in the &quot;File name&quot; field of the &quot;Create New Module&quot; window as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/selectLibsPackage.png\" alt=\"selectLibsPackage\"></p>\n<p>Then press &quot;Finish&quot; button to import the AMap_2DMap JAR package:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/createNewModule.png\" alt=\"createNewModule\"></p>\n<p>Repeart this process again to import the AMap_Search JAR package. Wait until the Sync Gradle Files finish. If everything goes well, when you open the &quot;build.gradle(Module: app)&quot; file, you should see the two AMap JAR packages included in the &quot;dependencies&quot; part:</p>\n<pre><code class=\"lang-xml\">dependencies {\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:AMap_2DMap_V2.8.1_20160202&#39;)\n    compile project(&#39;:AMap_Search_V3.2.1_20160308&#39;)\n}</code></pre>\n<h3 id=\"importing-the-sdk\">Importing the SDK</h3>\n<p>Unzip the Android SDK package downloaded from <a href=\"http://developer.dji.com/mobile-sdk/downloads/\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/importsSDK.png\" alt=\"importSDK\"></p>\n<p>Next, double click on the &quot;build.gradle(Module: app)&quot; file to open it and add the <code>compile project(&#39;:dJISDKLIB&#39;)</code> at the bottom of <strong>dependencies</strong> part:</p>\n<pre><code class=\"lang-xml\">android {\n    compileSdkVersion 23\n    buildToolsVersion &quot;23.0.2&quot;\n\n    defaultConfig {\n        ...\n        minSdkVersion 19\n        targetSdkVersion 23\n        ...\n\n    }\n    ...\n}\n\ndependencies {\n    ...\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<p>Here we also declare the &quot;compileSdkVersion&quot;, &quot;buildToolsVersion&quot;, &quot;minSdkVersion&quot; and &quot;targetSdkVersion&quot;. </p>\n<p>Now let&#39;s select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p>Now, let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/dependencies.png\" alt=\"dependencies\"></p>\n<h3 id=\"building-the-layouts-of-mainactivity\">Building the Layouts of MainActivity</h3>\n<h4 id=\"1-creating-djidemoapplication-class\">1. Creating DJIDemoApplication Class</h4>\n<p>   Right-click on the package <code>com.dji.GSDemo.GaodeMap</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;DJIDemoApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>   Next, Replace the code of the &quot;DJIDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.GSDemo.GaodeMap;\nimport android.app.Application;\n\npublic class DJIDemoApplication extends Application{\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n}</code></pre>\n<p>   Here, we override the onCreate() method. We can do some settings when the application is created here.</p>\n<h4 id=\"2-creating-the-mainactivity\">2. Creating the MainActivity</h4>\n<h5 id=\"implementing-the-mainactivity-layout\">Implementing the MainActivity Layout</h5>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;\n    android:background=&quot;#FFFFFF&quot;\n    tools:context=&quot;com.dji.GSDemo.GaodeMap.MainActivity&quot;&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;GSDemo&quot;\n            android:gravity=&quot;center&quot;\n            android:textColor=&quot;#000000&quot;\n            android:textSize=&quot;21sp&quot;\n            /&gt;\n    &lt;/LinearLayout&gt;\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/locate&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Locate&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/add&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Add&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/clear&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Clear&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/config&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Config&quot;\n            android:layout_weight=&quot;0.9&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/prepare&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Prepare&quot;\n            android:layout_weight=&quot;0.9&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/start&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Start&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/stop&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Stop&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;com.amap.api.maps2d.MapView\n            android:id=&quot;@+id/map&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;match_parent&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<p>  In the xml file, we implement the following UIs:</p>\n<ol>\n<li><p>Create a LinearLayout to show a TextView with &quot;GSDemo&quot; title and put it on the top.</p>\n</li>\n<li><p>Create two lines of Buttons: &quot;LOCATE&quot;, &quot;ADD&quot;, &quot;CLEAR&quot;, &quot;CONFIG&quot;, &quot;PREPARE&quot;, &quot;START&quot; and &quot;STOP&quot;, place them horizontally.</p>\n</li>\n<li><p>Lastly, we create a map view fragment and place it at the bottom.</p>\n</li>\n</ol>\n<p>Next, copy the &quot;aircraft.png&quot; and &quot;ic_launcher.png&quot; image files from this Github sample project to the <strong>drawable</strong> folders inside the <strong>res</strong> folder.</p>\n<p>Furthermore, open the AndroidManifest.xml file and update the &quot;.MainActivity&quot; activity element with several attributes as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;activity\n            android:name=&quot;.MainActivity&quot;\n            android:configChanges=&quot;orientation|screenSize&quot;\n            android:label=&quot;@string/title_activity_mainactivity&quot;\n            android:screenOrientation=&quot;landscape&quot;\n            android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n&lt;/activity&gt;</code></pre>\n<p>  Now, if you check the &quot;activity_main.xml&quot; file, you should see the preview screenshot of MainActivity as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/mainActivity.png\" alt=\"MainActivity\"></p>\n<p>  Lastly, let&#39;s create a new xml file named &quot;dialog_waypointsetting.xml&quot; in the layout folder by right-clicking on the &quot;layout&quot; folder and select <strong>New-&gt;XML-&gt;Layout XML File</strong>. Then replace the code with the same file in Github Sample Project, since the content is too much, we don&#39;t show them all here.</p>\n<p>This xml file will help to setup a textView to enter &quot;Altitude&quot; and create three RadioButton Groups for selecting <strong>Speed</strong>, <strong>Action After Finished</strong> and <strong>Heading</strong>.</p>\n<p>  Now, if you check the dialog_waypointsetting.xml file, you can see the preview screenshot of Waypoint Configuration Dialog as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/waypointConfig.png\" alt=\"MainActivity\"></p>\n<h5 id=\"working-on-the-mainactivity-class\">Working on the MainActivity Class</h5>\n<p>Let&#39;s come back to the MainActivity.java class, and replace the code with the following, remember to import the related classes as Android Studio suggested:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends FragmentActivity implements View.OnClickListener, OnMapClickListener {\n\n    protected static final String TAG = &quot;MainActivity&quot;;\n\n    private MapView mapView;\n    private AMap aMap;\n\n    private Button locate, add, clear;\n    private Button config, prepare, start, stop;\n\n    @Override\n    protected void onResume(){\n        super.onResume();\n    }\n\n    @Override\n    protected void onPause(){\n        super.onPause();\n    }\n\n    @Override\n    protected void onDestroy(){\n        super.onDestroy();\n    }\n\n    /**\n     * @Description : RETURN BTN RESPONSE FUNCTION\n     */\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    private void initUI() {\n        locate = (Button) findViewById(R.id.locate);\n        add = (Button) findViewById(R.id.add);\n        clear = (Button) findViewById(R.id.clear);\n        config = (Button) findViewById(R.id.config);\n        prepare = (Button) findViewById(R.id.prepare);\n        start = (Button) findViewById(R.id.start);\n        stop = (Button) findViewById(R.id.stop);\n\n        locate.setOnClickListener(this);\n        add.setOnClickListener(this);\n        clear.setOnClickListener(this);\n        config.setOnClickListener(this);\n        prepare.setOnClickListener(this);\n        start.setOnClickListener(this);\n        stop.setOnClickListener(this);\n    }\n\n    private void initMapView() {\n\n        if (aMap == null) {\n            aMap = mapView.getMap();\n            aMap.setOnMapClickListener(this);// add the listener for click for amap object\n        }\n\n        LatLng shenzhen = new LatLng(22.5362, 113.9454);\n        aMap.addMarker(new MarkerOptions().position(shenzhen).title(&quot;Marker in Shenzhen&quot;));\n        aMap.moveCamera(CameraUpdateFactory.newLatLng(shenzhen));\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the\n        // following permissions at runtime to ensure the\n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n\n        mapView = (MapView) findViewById(R.id.map);\n        mapView.onCreate(savedInstanceState);\n\n        initMapView();\n        initUI();\n\n    }\n\n    private void showSettingDialog(){\n        LinearLayout wayPointSettings = (LinearLayout)getLayoutInflater().inflate(R.layout.dialog_waypointsetting, null);\n\n        final TextView wpAltitude_TV = (TextView) wayPointSettings.findViewById(R.id.altitude);\n        RadioGroup speed_RG = (RadioGroup) wayPointSettings.findViewById(R.id.speed);\n        RadioGroup actionAfterFinished_RG = (RadioGroup) wayPointSettings.findViewById(R.id.actionAfterFinished);\n        RadioGroup heading_RG = (RadioGroup) wayPointSettings.findViewById(R.id.heading);\n\n        speed_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){\n\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select Speed finish&quot;);\n            }\n        });\n\n        actionAfterFinished_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select action action&quot;);\n            }\n        });\n\n        heading_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select heading finish&quot;);\n            }\n        });\n\n        new AlertDialog.Builder(this)\n                .setTitle(&quot;&quot;)\n                .setView(wayPointSettings)\n                .setPositiveButton(&quot;Finish&quot;,new DialogInterface.OnClickListener(){\n                    public void onClick(DialogInterface dialog, int id) {\n                    }\n                })\n                .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int id) {\n                        dialog.cancel();\n                    }\n                })\n                .create()\n                .show();\n    }\n\n    @Override\n    public void onClick(View v) {\n        // TODO Auto-generated method stub\n        switch (v.getId()) {\n            case R.id.config:{\n                showSettingDialog();\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n    @Override\n    public void onMapClick(LatLng point) {\n    }\n}</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create MapView and AMap variables and 7 Button member variables for the UI. Then create the <code>initUI()</code> method to init the 7 Button variables and implement their <code>setOnClickListener</code> method and pass &quot;this&quot; as parameter.</p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</p>\n<p><strong>3.</strong> Then invoke the <code>initUI()</code> method to initialize the UI. Then invoke the <code>initMapView()</code> method to create the MapView and add a marker of Shenzhen, China here. So when the Gaode map is loaded, you will see a blue pin tag on Shenzhen, China.</p>\n<p><strong>3.</strong> Implement the <code>showSettingDialog</code> method to show the <strong>Waypoint Configuration</strong> alert dialog and override the <code>onClick()</code> method to show the configuration dialog when press the <strong>Config</strong> button.</p>\n<p>We have gone through a long process to setup the UI of the application. Now, let&#39;s build and run the project and install it in your Android device to test it. Here we use Nexus 5 for testing. If everything goes well, you should see the following gif animation of the application:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/GSDemoAni.gif\" alt=\"p4MissionsUIDemo\"></p>\n<h3 id=\"registering-your-application\">Registering your Application</h3>\n<h4 id=\"1-modifying-androidmanifest-file\">1. Modifying AndroidManifest file</h4>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>1.</strong> Let&#39;s open the AndroidManifest.xml file and add the following elements to it:</p>\n<pre><code class=\"lang-xml\">&lt;uses-feature\n    android:name=&quot;android.hardware.usb.host&quot;\n    android:required=&quot;false&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.accessory&quot;\n    android:required=&quot;true&quot; /&gt;</code></pre>\n<p>Here, because not all Android-powered devices are guaranteed to support the USB accessory and host APIs, include two <uses-feature> elements that declares that your application uses the &quot;android.hardware.usb.accessory&quot; and &quot;android.hardware.usb.host&quot; feature.</p>\n<p>Then add the following elements above the <strong>MainActivity</strong> activity element:</p>\n<pre><code class=\"lang-xml\">    &lt;!-- DJI SDK --&gt;\n\n    &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n    &lt;meta-data\n        android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;Please enter your App Key here.&quot; /&gt;\n\n    &lt;!-- 启用高德地图服务 --&gt;\n    &lt;meta-data\n    android:name=&quot;com.amap.api.v2.apikey&quot;\n    android:value=&quot;YOUR_AMAP_KEY&quot; /&gt;\n\n    &lt;activity\n        android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n        android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n        &lt;/intent-filter&gt;\n\n        &lt;meta-data\n          android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n            android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n    &lt;/activity&gt;\n    &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n    &lt;/service&gt;\n\n    &lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, we enter the <strong>App Key</strong> of the application in the value part of <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute. For more details of the AndroidManifest.xml file, please check the Github source code of the demo project.</p>\n<h4 id=\"2-implementing-djidemoapplication-class\">2. Implementing DJIDemoApplication Class</h4>\n<p>After you finish the steps above, open the DJIDemoApplication.java file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onCreate() {\n    super.onCreate();\n    mHandler = new Handler(Looper.getMainLooper());\n    DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n    @Override\n    public void onGetRegisteredResult(DJIError error) {\n        Log.d(TAG, error == null ? &quot;Success&quot; : error.getDescription());\n        if(error == DJISDKError.REGISTRATION_SUCCESS) {\n            DJISDKManager.getInstance().startConnectionToProduct();\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        } else {\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;register sdk fails, check network is available&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n        Log.e(&quot;TAG&quot;, error.toString());\n    }\n\n    @Override\n    public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n        mProduct = newProduct;\n        if(mProduct != null) {\n            mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n        }\n        notifyStatusChange();\n    }\n};</code></pre>\n<p>Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of DJISDKManagerCallback. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<h2 id=\"implementing-the-waypoint-mission\">Implementing the Waypoint Mission</h2>\n<h3 id=\"locating-aircraft-on-gaode-map\">Locating Aircraft on Gaode Map</h3>\n<p>Before we implementing the waypoint mission feature, we should show the aircraft&#39;s location on Gaode Map and try to zoom in automatically to view the surrounding area of the aircraft.</p>\n<p>Let&#39;s open MainActivity.java file and declare the following variables first:</p>\n<pre><code class=\"lang-java\">private double droneLocationLat = 181, droneLocationLng = 181;\nprivate Marker droneMarker = null;\nprivate DJIFlightController mFlightController;</code></pre>\n<p>Then, since we need to detect the product connection status, we should register a BroadcastReceiver in the <code>onCreate()</code> method and override the <code>onReceive()</code> method of it as shown below:</p>\n<pre><code class=\"lang-java\">\n@Override\nprotected void onDestroy(){\n    super.onDestroy();\n    unregisterReceiver(mReceiver);\n}\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    IntentFilter filter = new IntentFilter();\n    filter.addAction(DJIDemoApplication.FLAG_CONNECTION_CHANGE);\n    registerReceiver(mReceiver, filter);\n\n    mapView = (MapView) findViewById(R.id.map);\n    mapView.onCreate(savedInstanceState);\n\n    initMapView();\n    initUI();\n}\n\nprotected BroadcastReceiver mReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            onProductConnectionChange();\n        }\n    };</code></pre>\n<p>The <code>onReceive()</code> method will be invoked when the DJI Product connection status change, we can us it to update our aircraft&#39;s location.</p>\n<p>Next, let&#39;s implement the <code>initFlightController()</code> method and invoke it inside the <code>onProductConnectionChange()</code> method:</p>\n<pre><code class=\"lang-java\">private void onProductConnectionChange()\n{\n    initFlightController();\n}\n\n private void initFlightController() {\n\n        DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n        if (product != null &amp;&amp; product.isConnected()) {\n            if (product instanceof DJIAircraft) {\n                mFlightController = ((DJIAircraft) product).getFlightController();\n            }\n        }\n\n        if (mFlightController != null) {\n            mFlightController.setUpdateSystemStateCallback(new DJIFlightControllerDelegate.FlightControllerUpdateSystemStateCallback() {\n\n                @Override\n                public void onResult(DJIFlightControllerDataType.DJIFlightControllerCurrentState state) {\n                    droneLocationLat = state.getAircraftLocation().getLatitude();\n                    droneLocationLng = state.getAircraftLocation().getLongitude();\n                    updateDroneLocation();\n\n                }\n            });\n        }\n    }</code></pre>\n<p>In the code above, we firstly check the product connection status with the help of <code>isConnected()</code> method of DJIBaseProduct. Then initialize <code>mFlightController</code> variable and override the <code>onResult()</code> method to invoke <code>updateDroneLocation</code> method. By using the <code>onResult()</code> method, you can get the flight controller current state from the parameter.</p>\n<p>Furthermore, let&#39;s implement the <code>updateDroneLocation()</code> method and invoke it in <code>onClick()</code> method&#39;s locate button click action:</p>\n<pre><code class=\"lang-java\">public static boolean checkGpsCoordinates(double latitude, double longitude) {\n    return (latitude &gt; -90 &amp;&amp; latitude &lt; 90 &amp;&amp; longitude &gt; -180 &amp;&amp; longitude &lt; 180) &amp;&amp; (latitude != 0f &amp;&amp; longitude != 0f);\n}\n\nprivate void updateDroneLocation(){\n\n    LatLng pos = new LatLng(droneLocationLat, droneLocationLng);\n    //Create MarkerOptions object\n    final MarkerOptions markerOptions = new MarkerOptions();\n    markerOptions.position(pos);\n    markerOptions.icon(BitmapDescriptorFactory.fromResource(R.drawable.aircraft));\n\n    runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            if (droneMarker != null) {\n                droneMarker.remove();\n            }\n\n            if (checkGpsCoordinates(droneLocationLat, droneLocationLng)) {\n                droneMarker = aMap.addMarker(markerOptions);\n            }\n        }\n    });\n}\n\n@Override\npublic void onClick(View v) {\n    // TODO Auto-generated method stub\n    switch (v.getId()) {\n        case R.id.locate:{\n            updateDroneLocation();\n            cameraUpdate();\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<p>In the <code>updateDroneLocation()</code> method, we add the drone location marker on Gaode map.</p>\n<p>Finally, let&#39;s implement the <code>camearUpdate()</code> method to move camera and zoom in Gaode Map to the drone&#39;s location:</p>\n<pre><code class=\"lang-java\">private void cameraUpdate(){\n    LatLng pos = new LatLng(droneLocationLat, droneLocationLng);\n    float zoomlevel = (float) 18.0;\n    CameraUpdate cu = CameraUpdateFactory.newLatLngZoom(pos, zoomlevel);\n    aMap.moveCamera(cu);\n}</code></pre>\n<p>Before going forward, you can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-PC-Simulator\">Using DJI PC Simulator</a> for DJI PC Simulator&#39;s basic usage.</p>\n<p>Now, let&#39;s connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable, and then power on the aircraft and the remote controller. Click Display Simulator. You can type in your current location&#39;s latitude and longitude data in the Simulator Config, if you would like. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Next, build and run the project and install it in your Android device and connect it to the remote controller using USB cable.</p>\n<p>Open the DJI PC Simulator on your PC and press the Start Simulation button. If you check the application now, a tiny red aircraft will be shown on the map. If you cannot find the aircraft, press the &quot;LOCATE&quot; button to zoom in to the center of the aircraft on the Map. Here is a gif animation for you to check:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/locateAircraft.gif\" alt=\"locateAircraft\"></p>\n<h3 id=\"adding-waypoint-markers\">Adding Waypoint Markers</h3>\n<p>Since you can see the aircraft clearly on the Gaode map now, you can add <code>Marker</code> on the map to show the waypoints of the Waypoint Mission. Let&#39;s continue to declare the <code>mMarkers</code> variable first:</p>\n<pre><code class=\"lang-java\">private boolean isAdd = false;\nprivate final Map&lt;Integer, Marker&gt; mMarkers = new ConcurrentHashMap&lt;Integer, Marker&gt;();</code></pre>\n<p>Then, implement the <code>onMapClick()</code> and <code>markWaypoint()</code> methods as shown below:</p>\n<pre><code class=\"lang-java\">private void setResultToToast(final String string){\n    MainActivity.this.runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            Toast.makeText(MainActivity.this, string, Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n\n@Override\npublic void onMapClick(LatLng point) {\n    if (isAdd == true){\n        markWaypoint(point);       \n    }else{\n        setResultToToast(&quot;Cannot add waypoint&quot;);\n    }\n}\n\nprivate void markWaypoint(LatLng point){\n    //Create MarkerOptions object\n    MarkerOptions markerOptions = new MarkerOptions();\n    markerOptions.position(point);\n    markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));\n    Marker marker = aMap.addMarker(markerOptions);\n    mMarkers.put(mMarkers.size(), marker);\n}</code></pre>\n<p>Here, the <code>onMapClick()</code> method will be invoked when user tap on the Map View. When user tap on different position of the Map View, we will create a <code>MarkerOptions</code> object and assign the &quot;LatLng&quot; object to it, then invoke &quot;aMap&quot;&#39;s <code>addMarker()</code> method by passing the markerOptions parameter to add the waypoint markers on the Gaode map.</p>\n<p>Finally, let&#39;s implement the <code>onClick()</code> and <code>enableDisableAdd()</code> methods to implement the <strong>ADD</strong> and <strong>CLEAR</strong> actions as shown below:</p>\n<pre><code class=\"lang-java\"> @Override\n public void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.add:{\n            enableDisableAdd();\n            break;\n        }\n        case R.id.clear:{\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    aMap.clear();\n                }\n            });\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        default:\n            break;\n    }\n}\n\nprivate void enableDisableAdd(){\n   if (isAdd == false) {\n      isAdd = true;\n      add.setText(&quot;Exit&quot;);\n   }else{\n      isAdd = false;\n      add.setText(&quot;Add&quot;);\n   }\n }</code></pre>\n<p>Now, let&#39;s try to build and run your application on an Android device and try to add waypoints on the Gaode map. If everything goes well, you should see the following gif animation:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/addWaypointsAni.gif\" alt=\"addWaypointsAni\"></p>\n<h3 id=\"implementing-waypoint-missions\">Implementing Waypoint Missions</h3>\n<h4 id=\"configurating-waypoint-mission\">Configurating Waypoint Mission</h4>\n<p>Before we prepare a Waypoint Mission, we should provide a way for user to configure it, like setting the flying altitude, speed, heading, etc. So let&#39;s declare several variables as shown below firstly:</p>\n<pre><code class=\"lang-java\">private float altitude = 100.0f;\nprivate float mSpeed = 10.0f;\nprivate DJIWaypointMission.DJIWaypointMissionFinishedAction mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.NoAction;\nprivate DJIWaypointMission.DJIWaypointMissionHeadingMode mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.Auto;\n\nprivate DJIWaypointMission mWaypointMission;\nprivate DJIMissionManager mMissionManager;</code></pre>\n<p>Here we declare the <code>altitude</code>, <code>mSpeed</code>, <code>mFinishedAction</code> and <code>mHeadingMode</code> variable and intialize them with default value. Also, we declare the DJIWaypointMission and DJIMissionManager objects for setting up missions.</p>\n<p>Next, replace the code of <code>showSettingDialog()</code> method with the followings:</p>\n<pre><code class=\"lang-java\">private void showSettingDialog(){\n    LinearLayout wayPointSettings = (LinearLayout)getLayoutInflater().inflate(R.layout.dialog_waypointsetting, null);\n\n    final TextView wpAltitude_TV = (TextView) wayPointSettings.findViewById(R.id.altitude);\n    RadioGroup speed_RG = (RadioGroup) wayPointSettings.findViewById(R.id.speed);\n    RadioGroup actionAfterFinished_RG = (RadioGroup) wayPointSettings.findViewById(R.id.actionAfterFinished);\n    RadioGroup heading_RG = (RadioGroup) wayPointSettings.findViewById(R.id.heading);\n\n    speed_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            // TODO Auto-generated method stub\n            if (checkedId == R.id.lowSpeed){\n                mSpeed = 3.0f;\n            } else if (checkedId == R.id.MidSpeed){\n                mSpeed = 5.0f;\n            } else if (checkedId == R.id.HighSpeed){\n                mSpeed = 10.0f;\n            }\n        }\n    });\n\n    actionAfterFinished_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            // TODO Auto-generated method stub\n            Log.d(TAG, &quot;Select finish action&quot;);\n            if (checkedId == R.id.finishNone){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.NoAction;\n            } else if (checkedId == R.id.finishGoHome){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.GoHome;\n            } else if (checkedId == R.id.finishAutoLanding){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.AutoLand;\n            } else if (checkedId == R.id.finishToFirst){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.GoFirstWaypoint;\n            }\n        }\n    });\n\n    heading_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            Log.d(TAG, &quot;Select heading&quot;);\n            if (checkedId == R.id.headingNext) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.Auto;\n            } else if (checkedId == R.id.headingInitDirec) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.UsingInitialDirection;\n            } else if (checkedId == R.id.headingRC) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.ControlByRemoteController;\n            } else if (checkedId == R.id.headingWP) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.UsingWaypointHeading;\n            }\n        }\n    });\n\n    new AlertDialog.Builder(this)\n            .setTitle(&quot;&quot;)\n            .setView(wayPointSettings)\n            .setPositiveButton(&quot;Finish&quot;,new DialogInterface.OnClickListener(){\n                public void onClick(DialogInterface dialog, int id) {\n                    String altitudeString = wpAltitude_TV.getText().toString();\n                    altitude = Integer.parseInt(nulltoIntegerDefault(altitudeString));\n                    Log.e(TAG,&quot;altitude &quot;+altitude);\n                    Log.e(TAG,&quot;speed &quot;+mSpeed);\n                    Log.e(TAG, &quot;mFinishedAction &quot;+mFinishedAction);\n                    Log.e(TAG, &quot;mHeadingMode &quot;+mHeadingMode);\n                    configWayPointMission();\n                }\n\n            })\n            .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                    dialog.cancel();\n                }\n\n            })\n            .create()\n            .show();\n}\n\nString nulltoIntegerDefault(String value){\n    if(!isIntValue(value)) value=&quot;0&quot;;\n    return value;\n}\n\nboolean isIntValue(String val)\n{\n    try {\n        val=val.replace(&quot; &quot;,&quot;&quot;);\n        Integer.parseInt(val);\n    } catch (Exception e) {return false;}\n    return true;\n}</code></pre>\n<p>Here, we implement the <code>setOnCheckedChangeListener()</code> method of &quot;RadioGroup&quot; class and pass different values to the <code>mSpeed</code>, <code>mFinishedAction</code> and <code>mHeadingMode</code> variables based on the item user select. </p>\n<p>For the finished action of DJIWaypointMission, we provide several enum values here:</p>\n<ul>\n<li><p><strong>AutoLand</strong></p>\n<p> The aircraft will land automatically at the last waypoint. </p>\n</li>\n<li><p><strong>ContinuewUntilEnd</strong></p>\n<p>If the user attempts to pull the aircraft back along the flight path as the mission is being executed, the aircarft will move towards the previous waypoint and will continue to do so until there are no more waypoint to move back to or the user has stopped attempting to move the aircraft back. </p>\n</li>\n<li><p><strong>GoFirstWaypoint</strong></p>\n<p>The aircraft will go back to its first waypoint and hover in position. </p>\n</li>\n<li><p><strong>GoHome</strong></p>\n<p>The aicraft will go home when the mission is complete. </p>\n</li>\n<li><p><strong>NoAction</strong></p>\n<p>No further action will be taken on completion of mission. </p>\n</li>\n</ul>\n<p>For the heading mode of DJIWaypointMission, we provide these enum values here:</p>\n<ul>\n<li><p><strong>Auto</strong></p>\n<p>Aircraft&#39;s heading will always be in the direction of flight. </p>\n</li>\n<li><p><strong>ControlByRemoteController</strong></p>\n<p>Aircraft&#39;s heading will be controlled by the remote controller. </p>\n</li>\n<li><p><strong>TowardPointOfInterest</strong></p>\n<p>Aircraft&#39;s heading will always toward point of interest. </p>\n</li>\n<li><p><strong>UsingInitialDirection</strong></p>\n<p>Aircraft&#39;s heading will be set to the initial take-off heading. </p>\n</li>\n<li><p><strong>UsingWaypointHeading</strong></p>\n</li>\n</ul>\n<p>Aircraft&#39;s heading will be set to the previous waypoint&#39;s heading while travelling between waypoints. </p>\n<p>Now, let&#39;s continue to implement the <code>configWayPointMission()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">private void configWayPointMission(){\n\n    if (mWaypointMission != null){\n        mWaypointMission.finishedAction = mFinishedAction;\n        mWaypointMission.headingMode = mHeadingMode;\n        mWaypointMission.autoFlightSpeed = mSpeed;\n\n        if (mWaypointMission.waypointsList.size() &gt; 0){\n            for (int i=0; i&lt; mWaypointMission.waypointsList.size(); i++){\n                mWaypointMission.getWaypointAtIndex(i).altitude = altitude;\n            }\n            setResultToToast(&quot;Set Waypoint altitude success&quot;);\n        }\n   }\n}</code></pre>\n<p>  In the code above, we check if <code>mWaypointMission</code> is null and set its <code>finishedAction</code>, <code>headingMode</code> and <code>autoFlightSpeed</code> variables of DJIWaypointMission.   Then we use a for loop to set the DJIWaypoint&#39;s altitude of DJIWaypointMission&#39;s waypointsList. </p>\n<h4 id=\"prepare-waypoint-mission\">Prepare Waypoint Mission</h4>\n<p>  Now, let&#39;s initialize the <code>mMissionManager</code> and <code>mWaypointMission</code> variables by implementing the <code>initMissionManager()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">private void initMissionManager() {\n    DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n\n    if (product == null || !product.isConnected()) {\n        setResultToToast(&quot;Product Not Connected&quot;);\n        mMissionManager = null;\n        return;\n    } else {\n\n        setResultToToast(&quot;Product Connected&quot;);\n        mMissionManager = product.getMissionManager();\n        mMissionManager.setMissionProgressStatusCallback(this);\n        mMissionManager.setMissionExecutionFinishedCallback(this);\n    }\n\n    mWaypointMission = new DJIWaypointMission();\n}\n\n@Override\npublic void missionProgressStatus(DJIMission.DJIMissionProgressStatus progressStatus) {\n\n}\n\n@Override\npublic void onResult(DJIError error) {\n    setResultToToast(&quot;Execution finished: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n\n}</code></pre>\n<p>Here, we check the product connection status first and invoke DJIBaseProduct&#39;s <code>getMissionManager()</code> method to initialize <code>mMissionmanager</code> variable. Next, invoke the <code>setMissionProgressStatusCallback()</code> and <code>setMissionExecutionFinishedCallback()</code> methods of DJIMissionManager and implement the two callback methods of DJIMissionManager. We should also implement the <code>DJIMissionManager.MissionProgressStatusCallback</code> and <code>DJIBaseComponent.DJICompletionCallback</code> interfaces for the MainActivity class on top.</p>\n<p>We can get the mission execution status from the <code>missionProgressStatus()</code> callback, and check the mission execution result from the <code>onResult()</code> callback method.</p>\n<p>Moreover, we should invoke the <code>initMissionManager()</code> method in the following two methods:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onResume(){\n    super.onResume();\n    initFlightController();\n    initMissionManager();\n}\n\nprivate void onProductConnectionChange()\n{\n    initFlightController();\n    initMissionManager();\n}</code></pre>\n<p>When user resume the application and the product connection change, we should both call the <code>iniMissionManager()</code> to do initialization work.</p>\n<p>Furthermore, let&#39;s implement the prepare mission action and addWaypoint action of DJIWaypointMission as shown below:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onMapClick(LatLng point) {\n    if (isAdd){\n        markWaypoint(point);\n        DJIWaypoint mWaypoint = new DJIWaypoint(point.latitude, point.longitude, altitude);\n        //Add waypoints to Waypoint arraylist;\n        if (mWaypointMission != null) {\n            mWaypointMission.addWaypoint(mWaypoint);\n            setResultToToast(&quot;AddWaypoint&quot;);\n        }\n    }else{\n        setResultToToast(&quot;Cannot add waypoint&quot;);\n    }\n}\n\nprivate void prepareWayPointMission(){\n\n    if (mMissionManager != null &amp;&amp; mWaypointMission != null) {\n\n        DJIMission.DJIMissionProgressHandler progressHandler = new DJIMission.DJIMissionProgressHandler() {\n            @Override\n            public void onProgress(DJIMission.DJIProgressType type, float progress) {\n            }\n        };\n\n        mMissionManager.prepareMission(mWaypointMission, progressHandler, new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(error == null ? &quot;Success&quot; : error.getDescription());\n            }\n        });\n    }\n}</code></pre>\n<p>Actually, we can get the mission preparation progress by overriding the <code>onProgress()</code> method of DJIMissionProgressHandler. Lastly, let&#39;s add the <code>R.id.prepare</code> case checking in the <code>onClick()</code> method:</p>\n<pre><code class=\"lang-java\">case R.id.prepare:{\n    prepareWayPointMission();\n    break;\n}</code></pre>\n<h4 id=\"start-and-stop-mission\">Start and Stop Mission</h4>\n<p>Once the mission finish preparation, we can invoke the <code>startMissionExecution()</code> and <code>stopMissionExecution()</code> methods of DJIMissionManager to implement the start and stop mission feature as shown below:</p>\n<pre><code class=\"lang-java\">private void startWaypointMission(){\n\n    if (mMissionManager != null) {\n        mMissionManager.startMissionExecution(new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(&quot;Start: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n            }\n        });\n    }\n}\n\nprivate void stopWaypointMission(){\n\n    if (mMissionManager != null) {\n        mMissionManager.stopMissionExecution(new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(&quot;Stop: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n            }\n        });\n\n        if (mWaypointMission != null){\n            mWaypointMission.removeAllWaypoints();\n        }\n    }\n}</code></pre>\n<p>Lastly, let&#39;s improve the <code>onClick()</code> method to improve the <strong>clear</strong> button action and implement the <strong>start</strong> and <strong>stop</strong> button actions:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.locate:{\n            updateDroneLocation();\n            cameraUpdate(); // Locate the drone&#39;s place\n            break;\n        }\n        case R.id.add:{\n            enableDisableAdd();\n            break;\n        }\n        case R.id.clear:{\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    aMap.clear();\n                }\n            });\n            if (mWaypointMission != null){\n                mWaypointMission.removeAllWaypoints(); // Remove all the waypoints added to the task\n            }\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        case R.id.prepare:{\n            prepareWayPointMission();\n            break;\n        }\n        case R.id.start:{\n            startWaypointMission();\n            break;\n        }\n        case R.id.stop:{\n            stopWaypointMission();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<h2 id=\"test-waypoint-mission-with-dji-pc-simulator\">Test Waypoint Mission with DJI PC Simulator</h2>\n<p>You&#39;ve come a long way in this tutorial, and it&#39;s time to test the whole application.</p>\n<p><strong>Important</strong>: Make sure the battery level of your aircraft is more than 10%, otherwise the waypoint mission may fail!</p>\n<p>Build and run the project to install the application into your android device. After that, please connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable. Then, power on the remote controller and the aircraft, in that order.</p>\n<p>Next, press the <strong>Display Simulator</strong> button in the DJI PC Simulator and feel free to type in your current location&#39;s latitude and longitude data into the simulator.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Then connect your android device to the remote controller using USB cable and run the application. Go back to the DJI PC Simulator on your PC and press the <strong>Start Simulation</strong> button. A tiny red aircraft will appear on the map in your application,  if you press the <strong>LOCATE</strong> button, the map view will zoom in to the region you are in and will center the aircraft:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/locateAircraft.gif\" alt=\"locateAircraft\"></p>\n<p>Next, press the <strong>Add</strong> button and tap on the Map where you want to add waypoints, as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/addWaypointsAni.gif\" alt=\"addWaypointsAni\"></p>\n<p>Once you press the <strong>CONFIG</strong> button, the <strong>Waypoint Configuration</strong> dialog will appear. Modify the settings as you want and press <strong>Finish</strong> button. Then press the <strong>PREPARE</strong> button to prepare the mission.</p>\n<p>If prepare mission failed, you may see the following screenshot:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/prepareMissionFail.png\" alt=\"prepareMissionFail\"></p>\n<p><strong>Important</strong>: To fix this problem, please switch the Remote Controller&#39;s mode selection to the <strong>F</strong> position and press <strong>PREPARE</strong> button to try again. If the mode selection bar is in the F position when the autopilot is powered on, the user must toggle back and forth between <strong>F</strong> and another position and then try again.</p>\n<p>You are required to be in the <strong>F</strong> position when using the DJIWaypoint Mission of DJI Mobile SDK.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/switchFlightModes.png\" alt=\"switchFlightMode\"></p>\n<p>If prepare mission success, press the <strong>START</strong> button to start the waypoint mission execution.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/prepareMission.gif\" alt=\"prepareMission\">  </p>\n<p>Now you will should see the aircraft move towards the waypoints you set previously on the map view, as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/startMission.gif\" alt=\"startMission\"></p>\n<p>At the same time, you are able to see the Inspire 1 take off and start to fly in the DJI PC Simulator.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/takeOff.gif\" alt=\"flyingInSimulator\"></p>\n<p>When the waypoint mission finishes, an &quot;Execution finished: Success!&quot; message will appear and the Inspire 1 will start to go home!</p>\n<p>Also, the remote controller will start beeping, and the <strong>Go Home</strong> button on the remote controller will start to flash a white light. Let&#39;s take a look at the DJI PC Simulator now:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Gaode-Map/landing.gif\" alt=\"landing\"></p>\n<p>The inspire 1 will eventually go home, land, and the beeping from the remote controller will stop. The application will go back to its normal status. If you press the <strong>CLEAR</strong> button, all the waypoints you previously set will be cleared. During the mission, if you&#39;d ever like to stop the DJIWaypoint mission, you can do so by pressing the <strong>STOP</strong> button.</p>\n<h3 id=\"summary\">Summary</h3>\n<p> In this tutorial, you’ve learned how to setup and use the DJI PC Simulator to test your waypoint mission application, upgrade your aircraft&#39;s firmware to the developer version, use the DJI Mobile SDK to create a simple map view, modify annotations of the map view, show the aircraft on the map view by using GPS data from the DJI PC Simulator. Next, you learned how to configure <strong>DJIWaypoint</strong> parameters, how to add waypoints to <strong>DJIWaypointMission</strong>. Moreover, you learned how to use DJIMissionManager to <strong>prepare</strong>, <strong>start</strong> and <strong>stop</strong> missions. </p>\n<p>   Congratulations! Now that you&#39;ve finished the demo project, you can build on what you&#39;ve learned and start to build your own waypoint mission application. You can improve the method which waypoints are added(such as drawing a line on the map and generating waypoints automatically), play around with the properties of a waypoint (such as heading, etc.), and adding more functionality. In order to make a cool waypoint mission application, you still have a long way to go. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a MapView and Waypoint Application","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-GSDemo-Gaode-Map"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to implement the DJIWaypoint Mission feature and get familiar with the usages of DJIMissionManager. </p>\n<p>Also you will know how to setup the DJI PC Simulator, upgrade your Inspire 1, Phantom 3 Professional and Phantom 3 Advanced&#39;s firmware to the lastest version, and how to test the Waypoint Mission API with DJI PC Simulator too. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<blockquote>\n<p>Note: In this tutorial, we will use Inspire 1 for testing, use Android Studio 2.1.1 for developing the demo application, and use the <a href=\"https://developers.google.com/maps/\" target=\"_blank\">Google Map API</a> for navigating.</p>\n</blockquote>\n<h2 id=\"preparation\">Preparation</h2>\n<h3 id=\"download-the-sdk\">Download the SDK</h3>\n<p>You can download the latest Android SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads\">https://developer.dji.com/mobile-sdk/downloads</a></a>.</p>\n<h3 id=\"setup-android-development-environment\">Setup Android Development Environment</h3>\n<p>  Throughout this tutorial we will be using Android Studio 2.1, which you can download from here: <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\"><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></a>.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>We can use the map view to display waypoints and show the flight route of the aircraft when waypoint mission is being executed. Here, we take Google Map for an example.</p>\n<h3 id=\"configurating-android-api-key\">Configurating Android API Key</h3>\n<h4 id=\"1-create-the-project\">1. Create the project</h4>\n<p> Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &quot;GSDemo&quot;. Enter the company domain and package name (Here we use &quot;com.dji.GSDemo.GoogleMap&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<h4 id=\"2-setting-up-google-play-services\">2. Setting Up Google Play Services</h4>\n<p>You can learn to install and set up the Google Play services SDK by referring to the setup guide presented in: <a href=\"https://developers.google.com/android/guides/setup\" target=\"_blank\"><a href=\"https://developers.google.com/android/guides/setup\">https://developers.google.com/android/guides/setup</a></a>.</p>\n<p>The <strong>Google Maps Android API</strong> is included in the Google Play Services Package. You can install the Google Play services SDK by using <strong>Android SDK Manager</strong> as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/installGooglePlayServices.png\" alt=\"installGooglePlayService\"></p>\n<p>After Google Play Services Package is installed. Open <strong>AndroidManifest.xml</strong> file of your app and add the following element as a child of the <strong>\\<application></strong> element:</p>\n<pre><code class=\"lang-xml\">    &lt;meta-data android:name=&quot;com.google.android.gms.version&quot;\n        android:value=&quot;@integer/google_play_services_version&quot; /&gt;</code></pre>\n<p>You can now start using the Google Maps Android APIs to develop your app.</p>\n<h4 id=\"3-generating-sha-1-key\">3. Generating SHA-1 Key</h4>\n<p>We can use Android Studio to generate a SHA-1 Key easily. Click on the <strong>Gradle</strong> tap on the right side of Android Studio. Select the project and navigate to <strong>Tasks -&gt; android -&gt; signingReport</strong>. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/signingReport.png\" alt=\"signingReport\"></p>\n<p>Then double click the <strong>signingReport</strong> and check the Console area of Android Studio, you can find the SHA-1 key easily:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/SHA-1Key.png\" alt=\"SHA1\"></p>\n<h4 id=\"4-applying-for-an-android-api-key\">4. Applying for an Android API Key</h4>\n<p>Now, let&#39;s go to <a href=\"https://console.developers.google.com/apis\" target=\"_blank\">Google Developer Console</a> to apply for an Android API Key. Login with your Google account and select the <strong>Credentials</strong> tap on the left side of <strong>API Manager</strong>. You will see the following screenshot here:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/createCredentials.png\" alt=\"CreateCredentials\"></p>\n<p> Press the <strong>Create credentials</strong> button and select <strong>API Key -&gt; Android Key</strong> to create an Android Key. Follow the screenshot below to fill in the content with your generated &quot;SHA-1 Key&quot; in the above steps:</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/createAndroidAPIKeys.png\" alt=\"AndroidKey\"></p>\n<blockquote>\n<p>Note: The &quot;Package name&quot; should be the same to your Android project&#39;s Package name.</p>\n</blockquote>\n<p> Then press &quot;create&quot; and you can get your Android API Key like this:</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/androidAPIKeys.png\" alt=\"AndroidAPIKey\"></p>\n<p> Finally, we should enable the <strong>Google Maps Android API</strong> as a service for your project too. Please tap on the <strong>Overview</strong> tab on the left side and select the &quot;Google Maps Android API&quot; item. Then press &quot;Enable&quot; button to enable the API as you seen below:</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/enableMapsAPI.png\" alt=\"EnableMapsAPI\"></p>\n<h4 id=\"5-adding-android-api-key\">5. Adding Android API Key</h4>\n<p>Open the AndroidManifest.xml file, add the following elements as childs of <strong><application></strong> element and substitute your Android API Key for &quot;YOUR _ API_KEY&quot; in the <strong>value</strong> attribute as shown below:</p>\n<pre><code class=\"lang-xml\">    &lt;meta-data\n        android:name=&quot;com.google.android.geo.API_KEY&quot;\n        android:value=&quot;YOUR_API_KEY&quot; /&gt;\n    &lt;meta-data\n       android:name=&quot;com.google.android.gms.version&quot;\n       android:value=&quot;@integer/google_play_services_version&quot; /&gt;</code></pre>\n<p>The first element sets the key &quot;com.google.android.geo.API_KEY&quot; to the value of your API key. The second one set the google play services version number.</p>\n<p>Moreover, specify the permissions of your application needs, by adding <strong>\\<uses-permission></strong> elements as children of the <strong>\\<manifest></strong> element in the &quot;AndroidManifest.xml&quot; file. </p>\n<pre><code class=\"lang-xml\"> &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_CONFIGURATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;</code></pre>\n<p>Finally, we need to specify requirement for OpenGL ES version 2 by adding the following element inside the &quot;manifest&quot; element:</p>\n<pre><code class=\"lang-xml\">   &lt;uses-feature\n        android:glEsVersion=&quot;0x00020000&quot;\n        android:required=&quot;true&quot; /&gt;</code></pre>\n<p>For more details of description on the permissions, refer to <a href=\"https://developers.google.com/maps/documentation/android/config\" target=\"_blank\"><a href=\"https://developers.google.com/maps/documentation/android/config\">https://developers.google.com/maps/documentation/android/config</a></a>.</p>\n<h4 id=\"6-adding-multidex-support-with-gradle\">6. Adding Multidex Support with Gradle</h4>\n<p>In order to use Google Play Service in our project, we need to add Multidex support to avoid the the 64K limit with Gradle.</p>\n<p>Modify the module-level <code>build.gradle</code> file configuration to include the support library and enable multidex output in both <strong>defaultConfig</strong> and <strong>dependencies</strong> parts, as shown in the following code snippet:</p>\n<pre><code class=\"lang-xml\">android {\n    compileSdkVersion 23\n    buildToolsVersion &quot;23.0.2&quot;\n\n    defaultConfig {\n        ...\n        minSdkVersion 19\n        targetSdkVersion 23\n        ...\n\n        // Enabling multidex support.\n        multiDexEnabled true\n    }\n    ...\n}\n\ndependencies {\n  ...\n  compile &#39;com.google.android.gms:play-services:8.4.0&#39;\n  compile &#39;com.android.support:multidex:1.0.1&#39;\n}</code></pre>\n<p>In the code above, we declare the &quot;compileSdkVersion&quot;, &quot;buildToolsVersion&quot;, &quot;minSdkVersion&quot; and &quot;targetSdkVersion&quot;. Furthermore, we add the <code>compile &#39;com.google.android.gms:play-services:8.4.0&#39;</code> to the &quot;dependencies&quot; to support google play service.</p>\n<p>Then select <strong>Tools-&gt;Android-&gt;Sync Project with Gradle Files</strong> to sync the gradle files.</p>\n<p>For more details about configuring your App for Multidex with Gradle, please check this link: <a href=\"http://developer.android.com/tools/building/multidex.html\" target=\"_blank\"><a href=\"http://developer.android.com/tools/building/multidex.html\">http://developer.android.com/tools/building/multidex.html</a></a>.</p>\n<h3 id=\"importing-the-sdk\">Importing the SDK</h3>\n<p>Unzip the Android SDK package downloaded from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/importsSDK.png\" alt=\"importSDK\"></p>\n<p>Next, double click on the &quot;build.gradle(Module: app)&quot; file to open it and add the <code>compile project(&#39;:dJISDKLIB&#39;)</code> at the bottom of <strong>dependencies</strong> part:</p>\n<pre><code class=\"lang-xml\">dependencies {\n    ...\n    compile &#39;com.google.android.gms:play-services:8.4.0&#39;\n    compile &#39;com.android.support:multidex:1.0.1&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<p>Like we do before, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p>Now, let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/dependencies.png\" alt=\"dependencies\"></p>\n<h3 id=\"building-the-layouts-of-mainactivity\">Building the Layouts of MainActivity</h3>\n<h4 id=\"1-creating-djidemoapplication-class\">1. Creating DJIDemoApplication Class</h4>\n<p>   Right-click on the package <code>com.dji.GSDemo.GoogleMap</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;DJIDemoApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>   Next, Replace the code of the &quot;DJIDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.GSDemo.GoogleMap;\nimport android.app.Application;\n\npublic class DJIDemoApplication extends Application{\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n\n    protected void attachBaseContext(Context base){\n        super.attachBaseContext(base);\n        MultiDex.install(this);\n    }\n}</code></pre>\n<p>   Here, we override the <code>onCreate()</code> method. and implement the <code>attachBaseContext()</code> method to install the multiDex. We can do some settings when the application is created here.</p>\n<h4 id=\"2-creating-the-mainactivity\">2. Creating the MainActivity</h4>\n<h5 id=\"implementing-the-mainactivity-layout\">Implementing the MainActivity Layout</h5>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;\n    android:background=&quot;#FFFFFF&quot;\n    tools:context=&quot;com.dji.GSDemo.GoogleMap.MainActivity&quot;&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;GSDemo&quot;\n            android:gravity=&quot;center&quot;\n            android:textColor=&quot;#000000&quot;\n            android:textSize=&quot;21sp&quot;\n            /&gt;\n    &lt;/LinearLayout&gt;\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/locate&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Locate&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/add&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Add&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/clear&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Clear&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n        &lt;Button\n            android:id=&quot;@+id/config&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Config&quot;\n            android:layout_weight=&quot;0.9&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/prepare&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Prepare&quot;\n            android:layout_weight=&quot;0.9&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/start&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Start&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n        &lt;Button\n            android:id=&quot;@+id/stop&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Stop&quot;\n            android:layout_weight=&quot;1&quot;/&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;fragment\n        android:id=&quot;@+id/map&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;\n        class=&quot;com.google.android.gms.maps.SupportMapFragment&quot; /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<p>  In the xml file, we implement the following UIs:</p>\n<ol>\n<li><p>Create a LinearLayout to show a TextView with &quot;GSDemo&quot; title and put it on the top.</p>\n</li>\n<li><p>Create two lines of Buttons: &quot;LOCATE&quot;, &quot;ADD&quot;, &quot;CLEAR&quot;, &quot;CONFIG&quot;, &quot;PREPARE&quot;, &quot;START&quot; and &quot;STOP&quot;, place them horizontally.</p>\n</li>\n<li><p>Lastly, we create a map view fragment and place it at the bottom.</p>\n</li>\n</ol>\n<p>Next, copy the &quot;aircraft.png&quot; and &quot;ic_launcher.png&quot; image files from this Github sample project to the <strong>drawable</strong> folders inside the <strong>res</strong> folder.</p>\n<p>Furthermore, open the AndroidManifest.xml file and update the &quot;.MainActivity&quot; activity element with several attributes as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;activity\n            android:name=&quot;.MainActivity&quot;\n            android:configChanges=&quot;orientation|screenSize&quot;\n            android:label=&quot;@string/title_activity_mainactivity&quot;\n            android:screenOrientation=&quot;landscape&quot;\n            android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n&lt;/activity&gt;</code></pre>\n<p>  Moreover, open the &quot;strings.xml&quot; file in <strong>values</strong> folder and add the following string content:</p>\n<pre><code class=\"lang-xml\">    &lt;string name=&quot;title_activity_demo&quot;&gt;GSDemoActivity&lt;/string&gt;\n    &lt;string name=&quot;google_app_id&quot;&gt;Google_App_ID_String&lt;/string&gt;</code></pre>\n<p>  Please enter your &quot;Google APP ID&quot; in the &quot;Google<em> App</em> ID_String&quot; value part.</p>\n<p>  Now, if you check the &quot;activity_main.xml&quot; file, you should see the preview screenshot of MainActivity as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/mainActivity.png\" alt=\"MainActivity\"></p>\n<p>  Lastly, let&#39;s create a new xml file named &quot;dialog_waypointsetting.xml&quot; in the layout folder by right-clicking on the &quot;layout&quot; folder and select <strong>New-&gt;XML-&gt;Layout XML File</strong>. Then replace the code with the same file in Github Sample Project, since the content is too much, we don&#39;t show them all here.</p>\n<p>This xml file will help to setup a textView to enter &quot;Altitude&quot; and create three RadioButton Groups for selecting <strong>Speed</strong>, <strong>Action After Finished</strong> and <strong>Heading</strong>.</p>\n<p>  Now, if you check the dialog_waypointsetting.xml file, you can see the preview screenshot of Waypoint Configuration Dialog as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/waypointConfig.png\" alt=\"MainActivity\"></p>\n<h5 id=\"working-on-the-mainactivity-class\">Working on the MainActivity Class</h5>\n<p>Let&#39;s come back to the MainActivity.java class, and replace the code with the following, remember to import the related classes as Android Studio suggested:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends FragmentActivity implements View.OnClickListener, GoogleMap.OnMapClickListener, OnMapReadyCallback {\n\n    protected static final String TAG = &quot;MainActivity&quot;;\n    private GoogleMap gMap;\n    private Button locate, add, clear;\n    private Button config, prepare, start, stop;\n\n    @Override\n    protected void onResume(){\n        super.onResume();\n    }\n\n    @Override\n    protected void onPause(){\n        super.onPause();\n    }\n\n    @Override\n    protected void onDestroy(){\n        super.onDestroy();\n    }\n\n    /**\n     * @Description : RETURN BTN RESPONSE FUNCTION\n     */\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    private void initUI() {\n        locate = (Button) findViewById(R.id.locate);\n        add = (Button) findViewById(R.id.add);\n        clear = (Button) findViewById(R.id.clear);\n        config = (Button) findViewById(R.id.config);\n        prepare = (Button) findViewById(R.id.prepare);\n        start = (Button) findViewById(R.id.start);\n        stop = (Button) findViewById(R.id.stop);\n\n        locate.setOnClickListener(this);\n        add.setOnClickListener(this);\n        clear.setOnClickListener(this);\n        config.setOnClickListener(this);\n        prepare.setOnClickListener(this);\n        start.setOnClickListener(this);\n        stop.setOnClickListener(this);\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the\n        // following permissions at runtime to ensure the\n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n        initUI();\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                .findFragmentById(R.id.map);\n        mapFragment.getMapAsync(this);\n\n    }\n\n    private void showSettingDialog(){\n        LinearLayout wayPointSettings = (LinearLayout)getLayoutInflater().inflate(R.layout.dialog_waypointsetting, null);\n\n        final TextView wpAltitude_TV = (TextView) wayPointSettings.findViewById(R.id.altitude);\n        RadioGroup speed_RG = (RadioGroup) wayPointSettings.findViewById(R.id.speed);\n        RadioGroup actionAfterFinished_RG = (RadioGroup) wayPointSettings.findViewById(R.id.actionAfterFinished);\n        RadioGroup heading_RG = (RadioGroup) wayPointSettings.findViewById(R.id.heading);\n\n        speed_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){\n\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select Speed finish&quot;);\n            }\n        });\n\n        actionAfterFinished_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select action action&quot;);\n            }\n        });\n\n        heading_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n\n            @Override\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                // TODO Auto-generated method stub\n                Log.d(TAG, &quot;Select heading finish&quot;);\n            }\n        });\n\n        new AlertDialog.Builder(this)\n                .setTitle(&quot;&quot;)\n                .setView(wayPointSettings)\n                .setPositiveButton(&quot;Finish&quot;,new DialogInterface.OnClickListener(){\n                    public void onClick(DialogInterface dialog, int id) {\n                    }\n                })\n                .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int id) {\n                        dialog.cancel();\n                    }\n                })\n                .create()\n                .show();\n    }\n\n    @Override\n    public void onClick(View v) {\n        // TODO Auto-generated method stub\n        switch (v.getId()) {\n            case R.id.config:{\n                showSettingDialog();\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n    @Override\n    public void onMapReady(GoogleMap googleMap) {\n        // TODO Auto-generated method stub\n        // Initializing Amap object\n        if (gMap == null) {\n            gMap = googleMap;\n            setUpMap();\n        }\n\n        LatLng Shenzhen = new LatLng(22.5500, 114.1000);\n        gMap.addMarker(new MarkerOptions().position(Shenzhen).title(&quot;Marker in Shenzhen&quot;));\n        gMap.moveCamera(CameraUpdateFactory.newLatLng(Shenzhen));\n    }\n\n    private void setUpMap() {\n        gMap.setOnMapClickListener(this);// add the listener for click for amap object\n    }\n\n    @Override\n    public void onMapClick(LatLng point) {\n    }\n}</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create a GoogleMap variable and 7 Button member variables for the UI. Then create the <code>initUI()</code> method to init the 7 Button variables and implement their <code>setOnClickListener</code> method and pass &quot;this&quot; as parameter.</p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</p>\n<p><strong>3.</strong> Then invoke <code>initUI()</code> method and create &quot;SupportMapFragment&quot; variable to call the <code>OnMapReady()</code> method asynchronously.</p>\n<p><strong>4.</strong> Implement the <code>showSettingDialog</code> method to show the <strong>Waypoint Configuration</strong> alert dialog and override the <code>onClick()</code> method to show the configuration dialog when press the <strong>Config</strong> button.</p>\n<p><strong>5.</strong> Lastly, we override the <code>onMapReady()</code> method to initialize the <code>gMap</code> and invoke <code>setUpMap()</code> method to implement the <code>setOnMapClickListener()</code> method of <code>gMap</code> variable. Then add a marker of Shenzhen, China here for example. So when the Google map is loaded, you will see a red pin tag on Shenzhen, China.</p>\n<p>For more details, please check the Github Sample Project. If you are not familiar with adding a Google map to your application, please follow this <a href=\"https://developers.google.com/maps/documentation/android-api/utility/setup#library-dependency\" target=\"_blank\">guide</a>. </p>\n<p>We have gone through a long process to setup the UI of the application. Now, let&#39;s build and run the project and install it in your Android device to test it. Here we use Nexus 5 for testing. If everything goes well, you should see the following gif animation of the application:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/GSDemoAni.gif\" alt=\"p4MissionsUIDemo\"></p>\n<h3 id=\"registering-your-application\">Registering your Application</h3>\n<h4 id=\"1-modifying-androidmanifest-file\">1. Modifying AndroidManifest file</h4>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>1.</strong> Let&#39;s open the AndroidManifest.xml file and add the following elements to it:</p>\n<pre><code class=\"lang-xml\">&lt;uses-feature\n    android:name=&quot;android.hardware.usb.host&quot;\n    android:required=&quot;false&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.accessory&quot;\n    android:required=&quot;true&quot; /&gt;</code></pre>\n<p>Here, because not all Android-powered devices are guaranteed to support the USB accessory and host APIs, include two <uses-feature> elements that declares that your application uses the &quot;android.hardware.usb.accessory&quot; and &quot;android.hardware.usb.host&quot; feature.</p>\n<p>Then add the following elements above the <strong>MainActivity</strong> activity element:</p>\n<pre><code class=\"lang-xml\">    &lt;!-- DJI SDK --&gt;\n\n    &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n    &lt;meta-data\n        android:name=&quot;com.dji.sdk.API_KEY&quot;\n        android:value=&quot;Please enter your App Key here.&quot; /&gt;\n    &lt;meta-data\n        android:name=&quot;com.google.android.geo.API_KEY&quot;\n        android:value=&quot;YOUR_API_KEY&quot; /&gt;\n     &lt;meta-data\n     android:name=&quot;com.google.android.gms.version&quot;\n     android:value=&quot;@integer/google_play_services_version&quot; /&gt;\n\n    &lt;activity\n        android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n        android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n        &lt;/intent-filter&gt;\n\n        &lt;meta-data\n          android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n            android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n    &lt;/activity&gt;\n    &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n    &lt;/service&gt;\n\n    &lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, we enter the <strong>App Key</strong> of the application in the value part of <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute. For more details of the AndroidManifest.xml file, please check the Github source code of the demo project.</p>\n<h4 id=\"2-implementing-djidemoapplication-class\">2. Implementing DJIDemoApplication Class</h4>\n<p>After you finish the steps above, open the DJIDemoApplication.java file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onCreate() {\n    super.onCreate();\n    mHandler = new Handler(Looper.getMainLooper());\n    DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n    @Override\n    public void onGetRegisteredResult(DJIError error) {\n        Log.d(TAG, error == null ? &quot;Success&quot; : error.getDescription());\n        if(error == DJISDKError.REGISTRATION_SUCCESS) {\n            DJISDKManager.getInstance().startConnectionToProduct();\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        } else {\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;register sdk fails, check network is available&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n        Log.e(&quot;TAG&quot;, error.toString());\n    }\n\n    @Override\n    public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n        mProduct = newProduct;\n        if(mProduct != null) {\n            mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n        }\n        notifyStatusChange();\n    }\n};</code></pre>\n<p>  Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of DJISDKManagerCallback. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<h2 id=\"implementing-the-waypoint-mission\">Implementing the Waypoint Mission</h2>\n<h3 id=\"locating-aircraft-on-google-map\">Locating Aircraft on Google Map</h3>\n<p>Before we implementing the waypoint mission feature, we should show the aircraft&#39;s location on Google Map and try to zoom in automatically to view the surrounding area of the aircraft.</p>\n<p>Let&#39;s open MainActivity.java file and declare the following variables first:</p>\n<pre><code class=\"lang-java\">private double droneLocationLat = 181, droneLocationLng = 181;\nprivate Marker droneMarker = null;\nprivate DJIFlightController mFlightController;</code></pre>\n<p>Then, since we need to detect the product connection status, we should register a BroadcastReceiver in the <code>onCreate()</code> method and override the <code>onReceive()</code> method of it as shown below:</p>\n<pre><code class=\"lang-java\">\n@Override\nprotected void onDestroy(){\n    super.onDestroy();\n    unregisterReceiver(mReceiver);\n}\n\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //Register BroadcastReceiver\n        IntentFilter filter = new IntentFilter();\n        filter.addAction(DJIDemoApplication.FLAG_CONNECTION_CHANGE);\n        registerReceiver(mReceiver, filter);\n\n        initUI();\n\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                .findFragmentById(R.id.map);\n\n        mapFragment.getMapAsync(this);\n    }\n\nprotected BroadcastReceiver mReceiver = new BroadcastReceiver() {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            onProductConnectionChange();\n        }\n    };</code></pre>\n<p>The <code>onReceive()</code> method will be invoked when the DJI Product connection status change, we can us it to update our aircraft&#39;s location.</p>\n<p>Next, let&#39;s implement the <code>initFlightController()</code> method and invoke it inside the <code>onProductConnectionChange()</code> method:</p>\n<pre><code class=\"lang-java\">private void onProductConnectionChange()\n{\n    initFlightController();\n}\n\n private void initFlightController() {\n\n        DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n        if (product != null &amp;&amp; product.isConnected()) {\n            if (product instanceof DJIAircraft) {\n                mFlightController = ((DJIAircraft) product).getFlightController();\n            }\n        }\n\n        if (mFlightController != null) {\n            mFlightController.setUpdateSystemStateCallback(new DJIFlightControllerDelegate.FlightControllerUpdateSystemStateCallback() {\n\n                @Override\n                public void onResult(DJIFlightControllerDataType.DJIFlightControllerCurrentState state) {\n                    droneLocationLat = state.getAircraftLocation().getLatitude();\n                    droneLocationLng = state.getAircraftLocation().getLongitude();\n                    updateDroneLocation();\n\n                }\n            });\n        }\n    }</code></pre>\n<p>In the code above, we firstly check the product connection status with the help of <code>isConnected()</code> method of DJIBaseProduct. Then initialize <code>mFlightController</code> variable and override the <code>onResult()</code> method to invoke <code>updateDroneLocation</code> method. By using the <code>onResult()</code> method, you can get the flight controller current state from the parameter.</p>\n<p>Furthermore, let&#39;s implement the <code>updateDroneLocation()</code> method and invoke it in <code>onClick()</code> method&#39;s locate button click action:</p>\n<pre><code class=\"lang-java\">public static boolean checkGpsCoordinates(double latitude, double longitude) {\n    return (latitude &gt; -90 &amp;&amp; latitude &lt; 90 &amp;&amp; longitude &gt; -180 &amp;&amp; longitude &lt; 180) &amp;&amp; (latitude != 0f &amp;&amp; longitude != 0f);\n}\n\nprivate void updateDroneLocation(){\n\n    LatLng pos = new LatLng(droneLocationLat, droneLocationLng);\n    //Create MarkerOptions object\n    final MarkerOptions markerOptions = new MarkerOptions();\n    markerOptions.position(pos);\n    markerOptions.icon(BitmapDescriptorFactory.fromResource(R.drawable.aircraft));\n\n    runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            if (droneMarker != null) {\n                droneMarker.remove();\n            }\n\n            if (checkGpsCoordinates(droneLocationLat, droneLocationLng)) {\n                droneMarker = gMap.addMarker(markerOptions);\n            }\n        }\n    });\n}\n\n@Override\npublic void onClick(View v) {\n    // TODO Auto-generated method stub\n    switch (v.getId()) {\n        case R.id.locate:{\n            updateDroneLocation();\n            cameraUpdate();\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<p>In the <code>updateDroneLocation()</code> method, we add the drone location marker on Google map.</p>\n<p>Finally, let&#39;s implement the <code>camearUpdate()</code> method to move camera and zoom in Google Map to the drone&#39;s location:</p>\n<pre><code class=\"lang-java\">private void cameraUpdate(){\n    LatLng pos = new LatLng(droneLocationLat, droneLocationLng);\n    float zoomlevel = (float) 18.0;\n    CameraUpdate cu = CameraUpdateFactory.newLatLngZoom(pos, zoomlevel);\n    gMap.moveCamera(cu);\n}</code></pre>\n<p>Before going forward, you can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-PC-Simulator\">Using DJI PC Simulator</a> for DJI PC Simulator&#39;s basic usage.</p>\n<p>Now, let&#39;s connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable, and then power on the aircraft and the remote controller. Click Display Simulator. You can type in your current location&#39;s latitude and longitude data in the Simulator Config, if you would like. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Next, build and run the project and install it in your Android device and connect it to the remote controller using USB cable. Go to the DJI PC Simulator on your PC and press the Start Simulation button. If you check the application now, a tiny red aircraft will be shown on the map. If you cannot find the aircraft, press the &quot;LOCATE&quot; button to zoom in to the center of the aircraft on the Map. Here is a gif animation for you to check:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/locateAircraft.gif\" alt=\"locateAircraft\"></p>\n<h3 id=\"adding-waypoint-markers\">Adding Waypoint Markers</h3>\n<p>Since you can see the aircraft clearly on the Google map now, you can add <code>Marker</code> on the map to show the waypoints of the Waypoint Mission. Let&#39;s continue to declare the <code>mMarkers</code> variable first:</p>\n<pre><code class=\"lang-java\">private boolean isAdd = false;\nprivate final Map&lt;Integer, Marker&gt; mMarkers = new ConcurrentHashMap&lt;Integer, Marker&gt;();</code></pre>\n<p>Then, implement the <code>onMapClick()</code> and <code>markWaypoint()</code> methods as shown below:</p>\n<pre><code class=\"lang-java\">private void setResultToToast(final String string){\n    MainActivity.this.runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            Toast.makeText(MainActivity.this, string, Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n\n@Override\npublic void onMapClick(LatLng point) {\n    if (isAdd == true){\n        markWaypoint(point);       \n    }else{\n        setResultToToast(&quot;Cannot add waypoint&quot;);\n    }\n}\n\nprivate void markWaypoint(LatLng point){\n    //Create MarkerOptions object\n    MarkerOptions markerOptions = new MarkerOptions();\n    markerOptions.position(point);\n    markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));\n    Marker marker = gMap.addMarker(markerOptions);\n    mMarkers.put(mMarkers.size(), marker);\n}</code></pre>\n<p>Here, the <code>onMapClick()</code> method will be invoked when user tap on the Map View. When user tap on different position of the Map View, we will create a <code>MarkerOptions</code> object and assign the &quot;LatLng&quot; object to it, then invoke &quot;gMap&quot;&#39;s <code>addMarker()</code> method by passing the markerOptions parameter to add the waypoint markers on the Google map.</p>\n<p>Finally, let&#39;s implement the <code>onClick()</code> and <code>enableDisableAdd()</code> methods to implement the <strong>ADD</strong> and <strong>CLEAR</strong> actions as shown below:</p>\n<pre><code class=\"lang-java\"> @Override\n public void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.add:{\n            enableDisableAdd();\n            break;\n        }\n        case R.id.clear:{\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    gMap.clear();\n                }\n            });\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        default:\n            break;\n    }\n}\n\nprivate void enableDisableAdd(){\n   if (isAdd == false) {\n      isAdd = true;\n      add.setText(&quot;Exit&quot;);\n   }else{\n      isAdd = false;\n      add.setText(&quot;Add&quot;);\n   }\n }</code></pre>\n<p>Now, let&#39;s try to build and run your application on an Android device and try to add waypoints on the Google map. If everything goes well, you should see the following gif animation:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/addWaypoints.gif\" alt=\"addWaypointsAni\"></p>\n<h3 id=\"implementing-waypoint-missions\">Implementing Waypoint Missions</h3>\n<h4 id=\"configurating-waypoint-mission\">Configurating Waypoint Mission</h4>\n<p>Before we prepare a Waypoint Mission, we should provide a way for user to configure it, like setting the flying altitude, speed, heading, etc. So let&#39;s declare several variables as shown below firstly:</p>\n<pre><code class=\"lang-java\">private float altitude = 100.0f;\nprivate float mSpeed = 10.0f;\nprivate DJIWaypointMission.DJIWaypointMissionFinishedAction mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.NoAction;\nprivate DJIWaypointMission.DJIWaypointMissionHeadingMode mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.Auto;\n\nprivate DJIWaypointMission mWaypointMission;\nprivate DJIMissionManager mMissionManager;</code></pre>\n<p>Here we declare the <code>altitude</code>, <code>mSpeed</code>, <code>mFinishedAction</code> and <code>mHeadingMode</code> variable and intialize them with default value. Also, we declare the DJIWaypointMission and DJIMissionManager objects for setting up missions.</p>\n<p>Next, replace the code of <code>showSettingDialog()</code> method with the followings:</p>\n<pre><code class=\"lang-java\">private void showSettingDialog(){\n    LinearLayout wayPointSettings = (LinearLayout)getLayoutInflater().inflate(R.layout.dialog_waypointsetting, null);\n\n    final TextView wpAltitude_TV = (TextView) wayPointSettings.findViewById(R.id.altitude);\n    RadioGroup speed_RG = (RadioGroup) wayPointSettings.findViewById(R.id.speed);\n    RadioGroup actionAfterFinished_RG = (RadioGroup) wayPointSettings.findViewById(R.id.actionAfterFinished);\n    RadioGroup heading_RG = (RadioGroup) wayPointSettings.findViewById(R.id.heading);\n\n    speed_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            // TODO Auto-generated method stub\n            if (checkedId == R.id.lowSpeed){\n                mSpeed = 3.0f;\n            } else if (checkedId == R.id.MidSpeed){\n                mSpeed = 5.0f;\n            } else if (checkedId == R.id.HighSpeed){\n                mSpeed = 10.0f;\n            }\n        }\n    });\n\n    actionAfterFinished_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            // TODO Auto-generated method stub\n            Log.d(TAG, &quot;Select finish action&quot;);\n            if (checkedId == R.id.finishNone){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.NoAction;\n            } else if (checkedId == R.id.finishGoHome){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.GoHome;\n            } else if (checkedId == R.id.finishAutoLanding){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.AutoLand;\n            } else if (checkedId == R.id.finishToFirst){\n                mFinishedAction = DJIWaypointMission.DJIWaypointMissionFinishedAction.GoFirstWaypoint;\n            }\n        }\n    });\n\n    heading_RG.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(RadioGroup group, int checkedId) {\n            Log.d(TAG, &quot;Select heading&quot;);\n            if (checkedId == R.id.headingNext) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.Auto;\n            } else if (checkedId == R.id.headingInitDirec) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.UsingInitialDirection;\n            } else if (checkedId == R.id.headingRC) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.ControlByRemoteController;\n            } else if (checkedId == R.id.headingWP) {\n                mHeadingMode = DJIWaypointMission.DJIWaypointMissionHeadingMode.UsingWaypointHeading;\n            }\n        }\n    });\n\n    new AlertDialog.Builder(this)\n            .setTitle(&quot;&quot;)\n            .setView(wayPointSettings)\n            .setPositiveButton(&quot;Finish&quot;,new DialogInterface.OnClickListener(){\n                public void onClick(DialogInterface dialog, int id) {\n                    String altitudeString = wpAltitude_TV.getText().toString();\n                    altitude = Integer.parseInt(nulltoIntegerDefault(altitudeString));\n                    Log.e(TAG,&quot;altitude &quot;+altitude);\n                    Log.e(TAG,&quot;speed &quot;+mSpeed);\n                    Log.e(TAG, &quot;mFinishedAction &quot;+mFinishedAction);\n                    Log.e(TAG, &quot;mHeadingMode &quot;+mHeadingMode);\n                    configWayPointMission();\n                }\n\n            })\n            .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                    dialog.cancel();\n                }\n\n            })\n            .create()\n            .show();\n}\n\nString nulltoIntegerDefault(String value){\n    if(!isIntValue(value)) value=&quot;0&quot;;\n    return value;\n}\n\nboolean isIntValue(String val)\n{\n    try {\n        val=val.replace(&quot; &quot;,&quot;&quot;);\n        Integer.parseInt(val);\n    } catch (Exception e) {return false;}\n    return true;\n}</code></pre>\n<p>Here, we implement the <code>setOnCheckedChangeListener()</code> method of &quot;RadioGroup&quot; class and pass different values to the <code>mSpeed</code>, <code>mFinishedAction</code> and <code>mHeadingMode</code> variables based on the item user select. </p>\n<p>For the finished action of DJIWaypointMission, we provide several enum values here:</p>\n<ul>\n<li><p><strong>AutoLand</strong></p>\n<p> The aircraft will land automatically at the last waypoint. </p>\n</li>\n<li><p><strong>ContinuewUntilEnd</strong></p>\n<p>If the user attempts to pull the aircraft back along the flight path as the mission is being executed, the aircarft will move towards the previous waypoint and will continue to do so until there are no more waypoint to move back to or the user has stopped attempting to move the aircraft back. </p>\n</li>\n<li><p><strong>GoFirstWaypoint</strong></p>\n<p>The aircraft will go back to its first waypoint and hover in position. </p>\n</li>\n<li><p><strong>GoHome</strong></p>\n<p>The aicraft will go home when the mission is complete. </p>\n</li>\n<li><p><strong>NoAction</strong></p>\n<p>No further action will be taken on completion of mission. </p>\n</li>\n</ul>\n<p>For the heading mode of DJIWaypointMission, we provide these enum values here:</p>\n<ul>\n<li><p><strong>Auto</strong></p>\n<p>Aircraft&#39;s heading will always be in the direction of flight. </p>\n</li>\n<li><p><strong>ControlByRemoteController</strong></p>\n<p>Aircraft&#39;s heading will be controlled by the remote controller. </p>\n</li>\n<li><p><strong>TowardPointOfInterest</strong></p>\n<p>Aircraft&#39;s heading will always toward point of interest. </p>\n</li>\n<li><p><strong>UsingInitialDirection</strong></p>\n<p>Aircraft&#39;s heading will be set to the initial take-off heading. </p>\n</li>\n<li><p><strong>UsingWaypointHeading</strong></p>\n</li>\n</ul>\n<p>Aircraft&#39;s heading will be set to the previous waypoint&#39;s heading while travelling between waypoints. </p>\n<p>Now, let&#39;s continue to implement the <code>configWayPointMission()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">private void configWayPointMission(){\n\n    if (mWaypointMission != null){\n        mWaypointMission.finishedAction = mFinishedAction;\n        mWaypointMission.headingMode = mHeadingMode;\n        mWaypointMission.autoFlightSpeed = mSpeed;\n\n        if (mWaypointMission.waypointsList.size() &gt; 0){\n            for (int i=0; i&lt; mWaypointMission.waypointsList.size(); i++){\n                mWaypointMission.getWaypointAtIndex(i).altitude = altitude;\n            }\n            setResultToToast(&quot;Set Waypoint altitude success&quot;);\n        }\n   }\n}</code></pre>\n<p>  In the code above, we check if <code>mWaypointMission</code> is null and set its <code>finishedAction</code>, <code>headingMode</code> and <code>autoFlightSpeed</code> variables of DJIWaypointMission.   Then we use a for loop to set the DJIWaypoint&#39;s altitude of DJIWaypointMission&#39;s waypointsList. </p>\n<h4 id=\"prepare-waypoint-mission\">Prepare Waypoint Mission</h4>\n<p>  Now, let&#39;s initialize the <code>mMissionManager</code> and <code>mWaypointMission</code> variables by implementing the <code>initMissionManager()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">private void initMissionManager() {\n    DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n\n    if (product == null || !product.isConnected()) {\n        setResultToToast(&quot;Product Not Connected&quot;);\n        mMissionManager = null;\n        return;\n    } else {\n\n        setResultToToast(&quot;Product Connected&quot;);\n        mMissionManager = product.getMissionManager();\n        mMissionManager.setMissionProgressStatusCallback(this);\n        mMissionManager.setMissionExecutionFinishedCallback(this);\n    }\n\n    mWaypointMission = new DJIWaypointMission();\n}\n\n@Override\npublic void missionProgressStatus(DJIMission.DJIMissionProgressStatus progressStatus) {\n\n}\n\n@Override\npublic void onResult(DJIError error) {\n    setResultToToast(&quot;Execution finished: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n\n}</code></pre>\n<p>Here, we check the product connection status first and invoke DJIBaseProduct&#39;s <code>getMissionManager()</code> method to initialize <code>mMissionmanager</code> variable. Next, invoke the <code>setMissionProgressStatusCallback()</code> and <code>setMissionExecutionFinishedCallback()</code> methods of DJIMissionManager and implement the two callback methods of DJIMissionManager. We should also implement the <code>DJIMissionManager.MissionProgressStatusCallback</code> and <code>DJIBaseComponent.DJICompletionCallback</code> interfaces for the MainActivity class on top.</p>\n<p>We can get the mission execution status from the <code>missionProgressStatus()</code> callback, and check the mission execution result from the <code>onResult()</code> callback method.</p>\n<p>Moreover, we should invoke the <code>initMissionManager()</code> method in the following two methods:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onResume(){\n    super.onResume();\n    initFlightController();\n    initMissionManager();\n}\n\nprivate void onProductConnectionChange()\n{\n    initFlightController();\n    initMissionManager();\n}</code></pre>\n<p>When user resume the application and the product connection change, we should both call the <code>iniMissionManager()</code> to do initialization work.</p>\n<p>Furthermore, let&#39;s implement the prepare mission action and addWaypoint action of DJIWaypointMission as shown below:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onMapClick(LatLng point) {\n    if (isAdd){\n        markWaypoint(point);\n        DJIWaypoint mWaypoint = new DJIWaypoint(point.latitude, point.longitude, altitude);\n        //Add waypoints to Waypoint arraylist;\n        if (mWaypointMission != null) {\n            mWaypointMission.addWaypoint(mWaypoint);\n            setResultToToast(&quot;AddWaypoint&quot;);\n        }\n    }else{\n        setResultToToast(&quot;Cannot add waypoint&quot;);\n    }\n}\n\nprivate void prepareWayPointMission(){\n\n    if (mMissionManager != null &amp;&amp; mWaypointMission != null) {\n\n        DJIMission.DJIMissionProgressHandler progressHandler = new DJIMission.DJIMissionProgressHandler() {\n            @Override\n            public void onProgress(DJIMission.DJIProgressType type, float progress) {\n            }\n        };\n\n        mMissionManager.prepareMission(mWaypointMission, progressHandler, new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(error == null ? &quot;Success&quot; : error.getDescription());\n            }\n        });\n    }\n}</code></pre>\n<p>Actually, we can get the mission preparation progress by overriding the <code>onProgress()</code> method of DJIMissionProgressHandler. Lastly, let&#39;s add the <code>R.id.prepare</code> case checking in the <code>onClick()</code> method:</p>\n<pre><code class=\"lang-java\">case R.id.prepare:{\n    prepareWayPointMission();\n    break;\n}</code></pre>\n<h4 id=\"start-and-stop-mission\">Start and Stop Mission</h4>\n<p>Once the mission finish preparation, we can invoke the <code>startMissionExecution()</code> and <code>stopMissionExecution()</code> methods of DJIMissionManager to implement the start and stop mission feature as shown below:</p>\n<pre><code class=\"lang-java\">private void startWaypointMission(){\n\n    if (mMissionManager != null) {\n        mMissionManager.startMissionExecution(new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(&quot;Start: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n            }\n        });\n    }\n}\n\nprivate void stopWaypointMission(){\n\n    if (mMissionManager != null) {\n        mMissionManager.stopMissionExecution(new DJIBaseComponent.DJICompletionCallback() {\n            @Override\n            public void onResult(DJIError error) {\n                setResultToToast(&quot;Stop: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n            }\n        });\n\n        if (mWaypointMission != null){\n            mWaypointMission.removeAllWaypoints();\n        }\n    }\n}</code></pre>\n<p>Lastly, let&#39;s improve the <code>onClick()</code> method to improve the <strong>clear</strong> button action and implement the <strong>start</strong> and <strong>stop</strong> button actions:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.locate:{\n            updateDroneLocation();\n            cameraUpdate(); // Locate the drone&#39;s place\n            break;\n        }\n        case R.id.add:{\n            enableDisableAdd();\n            break;\n        }\n        case R.id.clear:{\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    gMap.clear();\n                }\n            });\n            if (mWaypointMission != null){\n                mWaypointMission.removeAllWaypoints(); // Remove all the waypoints added to the task\n            }\n            break;\n        }\n        case R.id.config:{\n            showSettingDialog();\n            break;\n        }\n        case R.id.prepare:{\n            prepareWayPointMission();\n            break;\n        }\n        case R.id.start:{\n            startWaypointMission();\n            break;\n        }\n        case R.id.stop:{\n            stopWaypointMission();\n            break;\n        }\n        default:\n            break;\n    }\n}</code></pre>\n<h2 id=\"test-waypoint-mission-with-dji-simulator\">Test Waypoint Mission with DJI Simulator</h2>\n<p>You&#39;ve come a long way in this tutorial, and it&#39;s time to test the whole application.</p>\n<p><strong>Important</strong>: Make sure the battery level of your aircraft is more than 10%, otherwise the waypoint mission may fail!</p>\n<p>Build and run the project to install the application into your android device. After that, please connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable. Then, power on the remote controller and the aircraft, in that order.</p>\n<p>Next, press the <strong>Display Simulator</strong> button in the DJI PC Simulator and feel free to type in your current location&#39;s latitude and longitude data into the simulator.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Then connect your android device to the remote controller using USB cable and run the application. Go back to the DJI PC Simulator on your PC and press the <strong>Start Simulation</strong> button. A tiny red aircraft will appear on the map in your application,  if you press the <strong>LOCATE</strong> button, the map view will zoom in to the region you are in and will center the aircraft:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/locateAircraft.gif\" alt=\"locateAircraft\"></p>\n<p>Next, press the <strong>Add</strong> button and tap on the Map where you want to add waypoints, as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/addWaypointsAni.gif\" alt=\"addWaypointsAni\"></p>\n<p>Once you press the <strong>CONFIG</strong> button, the <strong>Waypoint Configuration</strong> dialog will appear. Modify the settings as you want and press <strong>Finish</strong> button. Then press the <strong>PREPARE</strong> button to prepare the mission.</p>\n<p>If prepare mission failed, you may see the following screenshot:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/prepareMissionFail.png\" alt=\"prepareMissionFail\"></p>\n<p><strong>Important</strong>: To fix this problem, please switch the Remote Controller&#39;s mode selection to the <strong>F</strong> position and press <strong>PREPARE</strong> button to try again. If the mode selection bar is in the F position when the autopilot is powered on, the user must toggle back and forth between <strong>F</strong> and another position and then try again.</p>\n<p>You are required to be in the <strong>F</strong> position when using the DJIWaypoint Mission of DJI Mobile SDK.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/switchFlightModes.png\" alt=\"switchFlightMode\"></p>\n<p>If prepare mission success, press the <strong>START</strong> button to start the waypoint mission execution.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/prepareMission.gif\" alt=\"prepareMission\">  </p>\n<p>Now you will should see the aircraft move towards the waypoints you set previously on the map view, as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/startMission.gif\" alt=\"startMission\"></p>\n<p>At the same time, you are able to see the Inspire 1 take off and start to fly in the DJI PC Simulator.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/takeOff.gif\" alt=\"flyingInSimulator\"></p>\n<p>When the waypoint mission finishes, an &quot;Execution finished: Success!&quot; message will appear and the Inspire 1 will start to go home!</p>\n<p>Also, the remote controller will start beeping, and the <strong>Go Home</strong> button on the remote controller will start to flash a white light. Let&#39;s take a look at the DJI PC Simulator now:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/GSDemo-Google-Map/landing.gif\" alt=\"landing\"></p>\n<p>The inspire 1 will eventually go home, land, and the beeping from the remote controller will stop. The application will go back to its normal status. If you press the <strong>CLEAR</strong> button, all the waypoints you previously set will be cleared. During the mission, if you&#39;d ever like to stop the DJIWaypoint mission, you can do so by pressing the <strong>STOP</strong> button.</p>\n<h3 id=\"summary\">Summary</h3>\n<p> In this tutorial, you’ve learned how to setup and use the DJI PC Simulator to test your waypoint mission application, upgrade your aircraft&#39;s firmware to the developer version, use the DJI Mobile SDK to create a simple map view, modify annotations of the map view, show the aircraft on the map view by using GPS data from the DJI PC Simulator. Next, you learned how to configure <strong>DJIWaypoint</strong> parameters, how to add waypoints to <strong>DJIWaypointMission</strong>. Moreover, you learned how to use DJIMissionManager to <strong>prepare</strong>, <strong>start</strong> and <strong>stop</strong> missions. </p>\n<p>   Congratulations! Now that you&#39;ve finished the demo project, you can build on what you&#39;ve learned and start to build your own waypoint mission application. You can improve the method which waypoints are added(such as drawing a line on the map and generating waypoints automatically), play around with the properties of a waypoint (such as heading, etc.), and adding more functionality. In order to make a cool waypoint mission application, you still have a long way to go. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a MapView and Waypoint Application","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-GSDemo-GoogleMap"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, we will use the Android Studio&#39;s HelloWorld template project to show you how to import DJI Android SDK and register the application. Throughout this tutorial we will be using Android Studio 2.1.1, which you can download from here: <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\"><a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a></a>.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"creating-an-android-studio-project\">Creating an Android Studio Project</h2>\n<p> Open Android Studio and select <strong>Start a new Android Studio project</strong> to create a new project.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/createProject.png\" alt=\"createProject\">   </p>\n<p> Then enter the <strong>Application name</strong> as &quot;ImportSDKDemo&quot;. Next enter the <strong>Company Domain</strong> and <strong>Package Name</strong> you want and select the <strong>Project location</strong> path to store the project.</p>\n<p>  Here we use &quot;com.dji.importSDKDemo&quot; for both Company Domain and Package name.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/enterProjectName.png\" alt=\"enterProjectName\"></p>\n<blockquote>\n<p><strong>Important:</strong> The <strong>Package Name</strong> you enter here should be the same as the &quot;Package Name&quot; of the App Information you apply in DJI Developer Website. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/appKey.png\" alt=\"appKey\"></p>\n<p>For more details of applying for an DJI App, please check <a href=\"../quick-start/index.html\">Get Started</a> for details.</p>\n</blockquote>\n<p>  Press &quot;Next&quot; button to continue and set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/minimumSDK.png\" alt=\"minimumSDK\"></p>\n<p>  Then select &quot;Basic Activity&quot; and press Next. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/basicActivity.png\" alt=\"basicAcitivity\"></p>\n<p>  Lastly, leave the <strong>Activity Name</strong> as &quot;MainActivity&quot;, the <strong>Layout Name</strong> as &quot;activity_main&quot;, the <strong>Title</strong> as &quot;MainActivity&quot;, and the <strong>Menu Resource Name</strong> as &quot;menu_main&quot;. Press &quot;Finish&quot; to create the project.</p>\n<h2 id=\"downloading-and-importing-module-to-the-project\">Downloading and Importing Module to the Project</h2>\n<p>  You can download DJI Android SDK from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>. </p>\n<p>  Unzip the Android SDK package, go to <strong>File -&gt; New -&gt; Import Module</strong> on the top bar of Android Studio. Then enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the <strong>Source directory</strong> field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and finish button to finish the settings.</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/importsSDK.png\" alt=\"importSDK\"></p>\n<h2 id=\"configurating-the-gradle-file\">Configurating the Gradle File</h2>\n<p>Double click on the &quot;build.gradle(Module: app)&quot; in the project navigator to open it:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/gradle.png\" alt=\"gradle\"></p>\n<p>Then replace the content with the following:</p>\n<pre><code class=\"lang-xml\">apply plugin: &#39;com.android.application&#39;\n\nandroid {\n\n    defaultConfig {\n        applicationId &quot;com.dji.importSDKDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)  // &lt;------------\n}</code></pre>\n<p> Here we add <code>compile project(&#39;:dJISDKLIB&#39;)</code> at the end of &quot;dependencies&quot; part. This is where we configure the Android Studio Project dependencies.</p>\n<p>Then, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar of Android Studio and wait for Gradle project sync finish.</p>\n<p>Lastly, right click on the &quot;app&quot; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/openModulesSettings.png\" alt=\"openModulesSettings\"></p>\n<p>Select &quot;app&quot; Modules and navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/dependencies.png\" alt=\"dependencies\"></p>\n<h2 id=\"trying-to-use-android-sdk-in-the-project\">Trying to use Android SDK in the Project</h2>\n<p>Now, let&#39;s double click to open the MainActivity.java file in the <code>com.dji.importSDKDemo</code> package from the project navigator area.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/mainActivity.png\" alt=\"mainActivity\"></p>\n<p>Then add <code>import dji.sdk.SDKManager.DJISDKManager;</code> at the bottom of the import classes section as shown below:</p>\n<pre><code class=\"lang-java\">package com.dji.importSDKDemo;\n\nimport android.os.Bundle;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.View;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport dji.sdk.SDKManager.DJISDKManager;</code></pre>\n<p>  Wait for a few seconds and check if the <code>import dji.sdk.SDKManager.DJISDKManager;</code> line turn red, if it remains gray color, it means that you import DJI Android SDK to your Android Studio project successfully. Here is the status you should see if everything goes well:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/checkSDK.png\" alt=\"checkSDK\"></p>\n<p>  Congratulations, now you should be able to use DJI Android SDK in your Android Studio Project!</p>\n<h3 id=\"registering-the-application\">Registering the Application</h3>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<h4 id=\"configurating-the-androidmanifest-xml\">Configurating the AndroidManifest.xml</h4>\n<p>Let&#39;s double click the AndroidManifest.xml file in the project navigator to open it:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/androidManifest.png\" alt=\"androidManifest\"></p>\n<p>Then add the following elements code on top of the &quot;application&quot; element:</p>\n<pre><code class=\"lang-xml\">&lt;!-- Permissions and features --&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.host&quot;\n        android:required=&quot;false&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.accessory&quot;\n        android:required=&quot;true&quot; /&gt;\n&lt;!-- Permissions and features --&gt;</code></pre>\n<p>Here, we request permissions that the application must be granted in order for it to register DJI SDK correctly. Also we declare the camera and usb hardwares which is used by the application.</p>\n<p>Moreover, let&#39;s add the following elements as childs of <strong><application></strong> element as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n        &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n        &lt;meta-data\n            android:name=&quot;com.dji.sdk.API_KEY&quot;\n            android:value=&quot;Please enter your App Key here.&quot; /&gt;\n        &lt;activity\n            android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n            android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n            &lt;/intent-filter&gt;\n            &lt;meta-data\n                android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n                android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n        &lt;/activity&gt;\n        &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n        &lt;/service&gt;\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, you should substitude your <strong>App Key</strong> of the application for &quot;Please enter your App Key here.&quot; in the <strong>value</strong> attribute under the <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute. </p>\n<p>Finally, once you finish all the configurations for AndroidManifest.xml file, you should see the following content:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    package=&quot;com.dji.importSDKDemo&quot;&gt;\n\n    &lt;!-- Permissions and features --&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.host&quot;\n        android:required=&quot;false&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.accessory&quot;\n        android:required=&quot;true&quot; /&gt;\n\n    &lt;!-- Permissions and features --&gt;\n\n    &lt;application\n        android:allowBackup=&quot;true&quot;\n        android:icon=&quot;@mipmap/ic_launcher&quot;\n        android:label=&quot;@string/app_name&quot;\n        android:supportsRtl=&quot;true&quot;\n        android:theme=&quot;@style/AppTheme&quot;&gt;\n\n        &lt;!-- DJI SDK --&gt;\n        &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n        &lt;meta-data\n            android:name=&quot;com.dji.sdk.API_KEY&quot;\n            android:value=&quot;Please enter your App Key here.&quot; /&gt;\n        &lt;activity\n            android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n            android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n            &lt;/intent-filter&gt;\n            &lt;meta-data\n                android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n                android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n        &lt;/activity&gt;\n        &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n        &lt;/service&gt;\n        &lt;!-- DJI SDK --&gt;\n\n        &lt;activity\n            android:name=&quot;.MainActivity&quot;\n            android:label=&quot;@string/app_name&quot;\n            android:theme=&quot;@style/AppTheme.NoActionBar&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<h4 id=\"implementing-application-registration\">Implementing Application Registration</h4>\n<p>After you finish the steps above, open the <strong>MainActivity.java</strong> file and replace the code with the following content:</p>\n<pre><code class=\"lang-java\">package com.dji.importSDKDemo;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.widget.Toast;\n\nimport dji.sdk.SDKManager.DJISDKManager;\nimport dji.sdk.base.DJIBaseComponent;\nimport dji.sdk.base.DJIBaseProduct;\nimport dji.sdk.base.DJIError;\nimport dji.sdk.base.DJISDKError;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = MainActivity.class.getName();\n\n    public static final String FLAG_CONNECTION_CHANGE = &quot;dji_sdk_connection_change&quot;;\n\n    private static DJIBaseProduct mProduct;\n\n    private Handler mHandler;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the following permission at runtime to ensure the SDK works correctly.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, &quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG)\n                        .setAction(&quot;Action&quot;, null).show();\n            }\n        });\n\n        //Initialize DJI SDK Manager\n        mHandler = new Handler(Looper.getMainLooper());\n        DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n    }\n\n    /*\n     *  Implement DJISDKManager Callback methods\n     */\n    private DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n\n        @Override\n        public void onGetRegisteredResult(DJIError error) {\n            Log.d(TAG, error == null ? &quot;success&quot; : error.getDescription());\n            if(error == DJISDKError.REGISTRATION_SUCCESS) {\n                DJISDKManager.getInstance().startConnectionToProduct();\n                Handler handler = new Handler(Looper.getMainLooper());\n                handler.post(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n                    }\n                });\n            } else {\n                Handler handler = new Handler(Looper.getMainLooper());\n                handler.post(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        Toast.makeText(getApplicationContext(), &quot;register sdk fails, check if network is available&quot;, Toast.LENGTH_LONG).show();\n                    }\n                });\n\n            }\n            Log.e(&quot;TAG&quot;, error.toString());\n        }\n\n        @Override\n        public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n\n            mProduct = newProduct;\n            if(mProduct != null) {\n                mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n            }\n\n            notifyStatusChange();\n        }\n    };\n\n    /*\n     *  Implement DJIBaseProductListener methods\n     */\n    private DJIBaseProduct.DJIBaseProductListener mDJIBaseProductListener = new DJIBaseProduct.DJIBaseProductListener() {\n\n        @Override\n        public void onComponentChange(DJIBaseProduct.DJIComponentKey key, DJIBaseComponent oldComponent, DJIBaseComponent newComponent) {\n            if(newComponent != null) {\n                newComponent.setDJIComponentListener(mDJIComponentListener);\n            }\n            notifyStatusChange();\n        }\n\n        @Override\n        public void onProductConnectivityChanged(boolean isConnected) {\n            notifyStatusChange();\n        }\n\n    };\n\n    private DJIBaseComponent.DJIComponentListener mDJIComponentListener = new DJIBaseComponent.DJIComponentListener() {\n\n        @Override\n        public void onComponentConnectivityChanged(boolean isConnected) {\n            notifyStatusChange();\n        }\n\n    };\n\n    private void notifyStatusChange() {\n        mHandler.removeCallbacks(updateRunnable);\n        mHandler.postDelayed(updateRunnable, 500);\n    }\n\n    private Runnable updateRunnable = new Runnable() {\n\n        @Override\n        public void run() {\n            Intent intent = new Intent(FLAG_CONNECTION_CHANGE);\n            sendBroadcast(intent);\n        }\n    };\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n}</code></pre>\n<p>  Here, we implement several features:</p>\n<ol>\n<li>In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</li>\n<li>Next we initialize the DJISDKManager and Handler in the <code>onCreate()</code> method.</li>\n<li>Implement the two interface methods of DJISDKManagerCallback. We can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n<li>Implement the two interface methods of DJIBaseProductListener. We can use the <code>onComponentChange()</code> method to check if a component object changes. Using the <code>onProductConnectivityChanged()</code> method to check the connectivity status changes for the base product.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/ImportAndActivateSDKInAndroidStudio/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<h2 id=\"where-to-go-from-here-\">Where to go from here?</h2>\n<p>  If you want to learn how to use DJI Android SDK to create a simple app, please check this tutorial: <a href=\"./FPVDemo.html\">Creating a Camera Application</a>. It’s our introductory tutorial, which guides you through connecting to your aircraft&#39;s camera to displaying a live video feed in your app, through which you can take photos and videos.</p>","meta":{"title":"Importing and Activating DJI SDK in Android Studio Project","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-ImportAndActivateSDKInAndroidStudio"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to run the DJI Android SDK Sample Code using Android Studio. We use Android Studio 2.1 for demonstration here. </p>\n<p>You can download the DJI Android SDK Sample Code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li>Android Studio 1.5 or higher</li>\n<li>Android API Level 22 or higher</li>\n</ul>\n<h2 id=\"registering-an-app-key\">Registering an App Key</h2>\n<p>Please go to your DJI Account&#39;s <a href=\"http://developer.dji.com/en/user/apps/\" target=\"_blank\">User Center</a>, select the &quot;Apps&quot; tab on the left:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/pressCreateApp.png\" alt=\"pressCreateApp\"></p>\n<p>Press the &quot;Create App&quot; button and select &quot;Android&quot; as your operating system. Then type in the info in the pop up dialog as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/fillInInfo.png\" alt=\"fillInInfo\"></p>\n<blockquote>\n<p><strong>Important</strong>: Please type in &quot;com.dji.sdk.sample&quot; in the <code>Package Name</code> field, because the Android Package Name in the DJI SDK Sample project is &quot;com.dji.sdk.sample&quot;. We should make sure they are the same.</p>\n</blockquote>\n<p>Once you complete it, press &quot;Create&quot; button to finish. Then you will see the following status:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/email.png\" alt=\"email\"></p>\n<p>After a few seconds, you will receive an email from DJI Developer to ask you to activate your app:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/activateEmail.png\" alt=\"activateEmail\"></p>\n<p>Click the link in the email to open the website and press the app you just created in User Center:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/appActivated.png\" alt=\"appActivated\"></p>\n<p>You may be able to get your App Key in the <strong>App Information</strong>:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/createAppSuccessful_android_en.png\" alt=\"sdkDemoApp_Key\"></p>\n<h2 id=\"running-dji-sdk-sample-code\">Running DJI SDK Sample Code</h2>\n<p>Please download or clone the Github Project repository to your computer and navigate to the <strong>Sample Code</strong> folder:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/sampleCode_folder.png\" alt=\"sampleCode_folder\"></p>\n<p>Open Android Studio, select &quot;Open an existing Android Studio project&quot; in the Android Studio Setup Wizard, then select the <strong>Sample Code</strong> folder to open the project:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/openSampleCode.png\" alt=\"openSampleCode\"></p>\n<h3 id=\"entering-app-key\">Entering App Key</h3>\n<p>Find and double click the &quot;AndroidManifest.xml&quot; file in left project navigator to open it.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/enterAppKey.png\" alt=\"enterAppKey\"></p>\n<p>Please substitude your App Key of the application we just created in the value attribute under the android:name=&quot;com.dji.sdk.API_KEY&quot; attribute as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!--\n    ADD API_KEY HERE and make sure you\n    are connected to the Internet before\n    the app is launched\n--&gt;\n&lt;meta-data\n    android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;&quot; /&gt; //Enter your App Key here.</code></pre>\n<h3 id=\"checking-remote-controller-aoa-support\">Checking Remote Controller AOA Support</h3>\n<p>Please make sure your DJI Remote Controller supports <a href=\"https://source.android.com/devices/accessories/protocol.html\" target=\"_blank\"> AOA </a> before you test the Sample app. You can upgrade your DJI Remote Controller to the latest firmware and check if there is a dialog pops up when you connect the app to it like this:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/dialog.png\" alt=\"dialog\"></p>\n<blockquote>\n<p>Note: To upgrade your DJI Remote Controller&#39;s firmware, you can download the <strong>DJI Go</strong> app from Google Play Store: <a href=\"https://play.google.com/store/apps/details?id=dji.pilot\" target=\"_blank\"> <a href=\"https://play.google.com/store/apps/details?id=dji.pilot\">https://play.google.com/store/apps/details?id=dji.pilot</a> </a> and open it. Connect the DJI Go app to your remote controller and upgrade its firmware.</p>\n</blockquote>\n<p>Once you finish it, build and run the project on your Android Device. Then connect the Android device to the Remote Controller, turn on the Remote Controller and the aircraft or handheld device. You can start to try different features in the sample project now! </p>\n<p>Here are the screenshots when you run the Sample app on Phantom 3 Professional successfully:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/sampleCodeScreenshot1.png\" alt=\"sampleCodeScreenshot1\">\n<img src=\"../../images/tutorials-and-samples/Android/RunSDKSampleInAndroidStudio/sampleCodeScreenshot2.png\" alt=\"sampleCodeScreenshot1\"></p>","meta":{"title":"Running DJI SDK Sample Code in Android Studio","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/dji-sdk/Mobile-SDK-Android"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI Forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use the TapFly and ActiveTrack Missions of DJI Android SDK to create a cool application for Phantom 4. Also you will get familiar with DJIMissionManager and using the Simulator of DJI Assistant 2 for testing, which is convenient for you to test the missions indoor. We will use Android Studio 2.1.1 version for demo here. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"phantom-4-new-missions\">Phantom 4 New Missions</h2>\n<p>  The Phantom 4 supports the two new TapFly and ActiveTrack missions, which brings you a more autonomous flying experience.</p>\n<h3 id=\"tapfly-mission\">TapFly Mission</h3>\n<p>TapFly Mission is only supported on Phantom 4. Given a coordinate in the live video stream (which can come from a user tap), the aircraft will calculate and fly towards the coordinate&#39;s direction in the real wold. During flight, the aircraft will automatically detect and avoid obstacles.</p>\n<p>During the mission, you can use the remote controller&#39;s yaw stick to adjust the heading of the aircraft, which also adjusts the direction of flight to the new yaw. Using any other stick controls will cancel the mission.</p>\n<p>Here is a <a href=\"https://dn-djidl2.qbox.me/cloud/6949e90958a3e0dbf1175cd9bb1f851a/720.mp4\" target=\"_blank\"> video </a> for you to get the first impression of the TapFly Mission.</p>\n<h3 id=\"activetrack-mission\">ActiveTrack Mission</h3>\n<p>ActiveTrack Mission is only supported on Phantom 4. It allows an aircraft to track a moving subject using the vision system and without a GPS tracker on the subject.</p>\n<p>The main camera is used to track the target, so the gimbal cannot be adjusted during an ActiveTrack mission. During the mission the aircraft can be manually flown with pitch, roll and throttle to move around the subject being tracked.</p>\n<p>Here is a <a href=\"https://dn-djidl2.qbox.me/cloud/4ebc02c536baf850f5a568d8c27743fc/720.mp4\" target=\"_blank\"> video </a> for you to get the first impression of the ActiveTrack Mission.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>Now that you know the details of the two new missions of Phantom 4, we can start working on the application. In our previous tutorial <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a>, you have learned how to import the DJI Android SDK into your Android Studio project and activate your application. If you haven&#39;t read that previously, please take a look at it. Once you&#39;ve done that, let&#39;s create the project.</p>\n<h3 id=\"importing-the-framework-and-libraries\">Importing the Framework and Libraries</h3>\n<p> <strong>1</strong>. Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &#39;P4MissionsDemo&#39;. Enter the company domain and package name(Here we use &quot;com.dji.P4MissionsDemo&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<p> <strong>2</strong>. Unzip the Android SDK package downloaded from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/importsSDK.png\" alt=\"importSDK\"></p>\n<p> <strong>3</strong>. Next, double click on the &quot;build.gradle(Module: app)&quot; in the project navigator to open it and replace the content with the following:</p>\n<pre><code class=\"lang-java\">apply plugin: &#39;com.android.application&#39;\nandroid {\n    compileSdkVersion 19\n    buildToolsVersion &quot;23.0.2&quot;\n\n    defaultConfig {\n        applicationId &quot;com.dji.P4MissionsDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\ndependencies {\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<p> In the code above, we modify its dependencies by adding <code>compile project(&#39;:dJISDKLIB&#39;)</code> at the bottom, and change the compileSdkVersion, buildToolsVersion number, etc. </p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/buildGradle.png\" alt=\"configureAndroidSDK\"></p>\n<p> Then, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p> <strong>4</strong>. Let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/dependencies.png\" alt=\"dependencies\"></p>\n<p> <strong>5</strong>. Now, open the MainActivity.java file in <code>com.dji.p4MissionsDemo</code> package and add <code>import dji.sdk.SDKManager.DJISDKManager;</code> at the bottom of the import classes section as shown below:</p>\n<pre><code class=\"lang-java\">package com.dji.p4MissionsDemo;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport dji.sdk.SDKManager.DJISDKManager;</code></pre>\n<p>  Wait for a few seconds and check if the words turn red, if they remain gray color, it means you can use DJI Android SDK in your project successfully now.</p>\n<h3 id=\"building-the-layouts-of-activities\">Building the Layouts of Activities</h3>\n<h4 id=\"1-creating-djidemoapplication-class\">1. Creating DJIDemoApplication Class</h4>\n<p>   Right-click on the package <code>com.dji.p4MissionsDemo</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;DJIDemoApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>   Next, Replace the code of the &quot;DJIDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.p4MissionsDemo;\nimport android.app.Application;\n\npublic class DJIDemoApplication extends Application{\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n}</code></pre>\n<p>   Here, we override the onCreate() method. We can do some settings when the application is created here.</p>\n<h4 id=\"2-implementing-demobaseactivity-class\">2. Implementing DemoBaseActivity Class</h4>\n<p>Similiarly, create a new Empty Activity class with the name of &quot;DemoBaseActivity&quot; in the <code>com.dji.p4MissionsDemo</code> package. Remember to deselect the &quot;Generate Layout File&quot;. Replace the code with the following, remember to import the related classes as Android Studio suggested:</p>\n<pre><code class=\"lang-java\">public class DemoBaseActivity extends FragmentActivity implements TextureView.SurfaceTextureListener {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n    }\n\n    @Override\n    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {\n    }\n\n    @Override\n    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n        return false;\n    }\n\n    @Override\n    public void onSurfaceTextureUpdated(SurfaceTexture surface) {\n    }\n\n}</code></pre>\n<p>  We will use this activity class as our base class later. More details of the implementation will be done later.</p>\n<h4 id=\"3-creating-the-mainactivity\">3. Creating the MainActivity</h4>\n<h5 id=\"working-on-the-mainactivity-class\">Working on the MainActivity Class</h5>\n<p>Let&#39;s come back to the MainActivity.java class, and replace the code with the following, remember to import the related classes as Android Studio suggested:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends DemoBaseActivity implements View.OnClickListener {\n\n    public static final String TAG = MainActivity.class.getName();\n    private ArrayList&lt;DemoInfo&gt; demos = new ArrayList&lt;DemoInfo&gt;();\n    private ListView mListView;\n    private DemoListAdapter mDemoListAdapter = new DemoListAdapter();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the \n        // following permissions at runtime to ensure the \n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[] { Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n\n        mListView = (ListView)findViewById(R.id.listView);\n        mListView.setAdapter(mDemoListAdapter);\n\n        loadDemoList();\n        mDemoListAdapter.notifyDataSetChanged();\n\n    }\n\n    private static class DemoInfo{\n        private final int title;\n        private final int desc;\n        private final Class&lt;? extends android.app.Activity&gt; demoClass;\n\n        public DemoInfo(int title , int desc,Class&lt;? extends android.app.Activity&gt; demoClass) {\n            this.title = title;\n            this.desc  = desc;\n            this.demoClass = demoClass;\n        }\n    }\n\n    private void loadDemoList() {\n        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            public void onItemClick(AdapterView&lt;?&gt; arg0, View v, int index, long arg3) {\n                onListItemClick(index);\n            }\n        });\n        demos.clear();\n        demos.add(new DemoInfo(R.string.title_activity_tracking_test, R.string.demo_desc_tracking, TrackingTestActivity.class));\n        demos.add(new DemoInfo(R.string.title_activity_pointing_test, R.string.demo_desc_pointing, PointingTestActivity.class));\n    }\n\n    private void onListItemClick(int index) {\n        Intent intent = null;\n        intent = new Intent(MainActivity.this, demos.get(index).demoClass);\n        this.startActivity(intent);\n    }\n\n    @SuppressLint(&quot;ViewHolder&quot;)\n    private class DemoListAdapter extends BaseAdapter {\n        public DemoListAdapter() {\n            super();\n        }\n\n        @Override\n        public View getView(int index, View convertView, ViewGroup parent) {\n            convertView = View.inflate(MainActivity.this, R.layout.demo_info_item, null);\n            TextView title = (TextView)convertView.findViewById(R.id.title);\n            TextView desc = (TextView)convertView.findViewById(R.id.desc);\n\n            title.setText(demos.get(index).title);\n            desc.setText(demos.get(index).desc);\n            return convertView;\n        }\n        @Override\n        public int getCount() {\n            return demos.size();\n        }\n        @Override\n        public Object getItem(int index) {\n            return  demos.get(index);\n        }\n\n        @Override\n        public long getItemId(int id) {\n            return id;\n        }\n    }\n\n    @Override\n    public void onClick(View v) {\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n    }\n\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n}</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create a ListView to show the &quot;TapFly&quot; and &quot;ActiveTrack&quot; activities&#39; layouts.</p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23).</p>\n<p><strong>3.</strong> Then create the <code>mListView</code> and invoke the <code>loadDemoList()</code> method to refresh the listView.</p>\n<p><strong>4.</strong> Create a DemoInfo class to includes title, desc and demoClass content. Implement the <code>loadDemoList()</code> method to add listView data source and implement the <code>mListView</code>&#39;s <code>setOnItemClickListener()</code> method. Then implement the <code>onListItemClick()</code> method by creating an Intent to launch the &quot;TapFly&quot; and &quot;ActiveTrack&quot; Activities from MainActivity.</p>\n<p><strong>5.</strong> Create the DemoListAdapter class, which extends from the BaseAdapter class, override the <code>getView()</code> method to update the <code>title</code> and <code>desc</code> variables&#39; text content. Also, override the <code>getCount()</code>, <code>getItem()</code> and <code>getitemId()</code> interface methods.</p>\n<h5 id=\"implementing-the-mainactivity-layout\">Implementing the MainActivity Layout</h5>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;fill_parent&quot;\n    android:layout_height=&quot;fill_parent&quot;\n    android:keepScreenOn=&quot;true&quot;\n    android:orientation=&quot;vertical&quot; &gt;\n\n    &lt;RelativeLayout\n        android:id=&quot;@+id/main_title_rl&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;40dp&quot;\n        android:background=&quot;@android:color/black&quot; &gt;\n\n        &lt;ImageButton\n            android:id=&quot;@+id/ReturnBtnMain&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;35dp&quot;\n            android:layout_alignParentLeft=&quot;true&quot;\n            android:layout_centerVertical=&quot;true&quot;\n            android:layout_marginLeft=&quot;20dp&quot;\n            android:adjustViewBounds=&quot;true&quot;\n            android:background=&quot;@android:color/transparent&quot;\n            android:onClick=&quot;onReturn&quot;\n            android:scaleType=&quot;centerInside&quot;\n            android:src=&quot;@drawable/selector_back_button&quot; /&gt;\n\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_centerInParent=&quot;true&quot;\n            android:text=&quot;@string/title_activity_mainactivity&quot;\n            android:textColor=&quot;@android:color/white&quot;\n            android:textSize=&quot;21sp&quot; /&gt;\n    &lt;/RelativeLayout&gt;\n    &lt;TextView android:id=&quot;@+id/version_tv&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Firmware version: N/A&quot;/&gt;\n    &lt;ListView\n        android:id=&quot;@+id/listView&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot; /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<p>  In the xml file, firstly, we implement the RelativeLayout element. We declare an ImageButton(id: ReturnBtnMain) element to exit the application, and a TextView(id: ConnectStatusTextView) element to show the connection status text. Next, create a TextView(id:version_tv) element to show the firmware version and a ListView(id:listView) element to show the list items.</p>\n<p>  Next, copy all the image files from this Github sample project to the <strong>drawable</strong> folders inside the <strong>res</strong> folder.</p>\n<p>  <img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/imageFiles.png\" alt=\"imageFiles\"></p>\n<p>  Moreover, open the AndroidManifest.xml file and update the &quot;.MainActivity&quot; activity element with several attributes as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;activity\n            android:name=&quot;.MainActivity&quot;\n            android:configChanges=&quot;orientation|screenSize&quot;\n            android:label=&quot;@string/title_activity_mainactivity&quot;\n            android:screenOrientation=&quot;landscape&quot;\n            android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n&lt;/activity&gt;</code></pre>\n<p>  Furthermore, open the &quot;strings.xml&quot; file in <strong>values</strong> folder and add the following string content:</p>\n<pre><code class=\"lang-xml\"> &lt;string name=&quot;title_activity_mainactivity&quot;&gt;P4MissionsDemo&lt;/string&gt;</code></pre>\n<p>   Lastly, let&#39;s create a new xml file named &quot;demo_ info_item.xml&quot; in the layout folder by right-clicking on the &quot;layout&quot; folder and select <strong>New-&gt;XML-&gt;Layout XML File</strong>. Then replace the code of the file with the following:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot; &gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/title&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:textSize=&quot;22sp&quot;\n        android:layout_marginTop=&quot;6dp&quot;\n        android:layout_marginBottom=&quot;3dp&quot;\n        android:layout_marginLeft=&quot;10dp&quot;\n        android:text=&quot;demo title&quot; /&gt;\n\n     &lt;TextView \n        android:id=&quot;@+id/desc&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:textSize=&quot;14sp&quot;\n        android:layout_marginBottom=&quot;6dp&quot;\n        android:layout_marginLeft=&quot;10dp&quot;\n        android:text=&quot;demo desc&quot;\n        android:textColor=&quot;@color/white&quot;/&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<p>This xml file will help to setup the two TextViews with &quot;title&quot; and &quot;desc&quot; ids for the convertView of DemoListAdapter.</p>\n<p>Now, if you check the activity_main.xml file, you can see the preview screenshot of MainActivity as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/mainActivityImage.png\" alt=\"MainActivity\"></p>\n<h4 id=\"4-creating-the-pointingtestactivity\">4. Creating the PointingTestActivity</h4>\n<h5 id=\"implementing-the-pointingtestactivity-class\">Implementing the PointingTestActivity Class</h5>\n<p>   Let&#39;s create a new Empty Activity class with the name of &quot;PointingTestActivity&quot; in the <code>com.dji.p4MissionsDemo</code> package. Replace the code with the following, remember to import the related classes as Android Studio suggested: </p>\n<pre><code class=\"lang-java\">public class PointingTestActivity extends DemoBaseActivity implements TextureView.SurfaceTextureListener, View.OnClickListener {\n\n    private static final String TAG = &quot;PointingTestActivity&quot;;\n    private ImageButton mPushDrawerIb;\n    private SlidingDrawer mPushDrawerSd;\n    private Button mStartBtn;\n    private ImageButton mStopBtn;\n    private TextView mPushTv;\n    private RelativeLayout mBgLayout;\n    private ImageView mRstPointIv;\n    private TextView mAssisTv;\n    private Switch mAssisSw;\n    private TextView mSpeedTv;\n    private SeekBar mSpeedSb;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_pointing_test);\n        initUI();\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n    }\n\n    private void initUI() {\n        mPushDrawerIb = (ImageButton)findViewById(R.id.pointing_drawer_control_ib);\n        mPushDrawerSd = (SlidingDrawer)findViewById(R.id.pointing_drawer_sd);\n        mStartBtn = (Button)findViewById(R.id.pointing_start_btn);\n        mStopBtn = (ImageButton)findViewById(R.id.pointing_stop_btn);\n        mPushTv = (TextView)findViewById(R.id.pointing_push_tv);\n        mBgLayout = (RelativeLayout)findViewById(R.id.pointing_bg_layout);\n        mRstPointIv = (ImageView)findViewById(R.id.pointing_rst_point_iv);\n        mAssisTv = (TextView)findViewById(R.id.pointing_assistant_tv);\n        mAssisSw = (Switch)findViewById(R.id.pointing_assistant_sw);\n        mSpeedTv = (TextView)findViewById(R.id.pointing_speed_tv);\n        mSpeedSb = (SeekBar)findViewById(R.id.pointing_speed_sb);\n\n        mPushDrawerIb.setOnClickListener(this);\n        mStartBtn.setOnClickListener(this);\n        mStopBtn.setOnClickListener(this);\n        mSpeedSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n                mSpeedTv.setText(progress + 1 + &quot;&quot;);\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {\n            }\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {\n            }\n        });\n    }\n\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    @Override\n    public void onClick(View v) {\n\n        if (v.getId() == R.id.pointing_drawer_control_ib) {\n            if (mPushDrawerSd.isOpened()) {\n                mPushDrawerSd.animateClose();\n            } else {\n                mPushDrawerSd.animateOpen();\n            }\n            return;\n        }\n    }\n}</code></pre>\n<p> Here, we implement several features: </p>\n<p><strong>1.</strong> Declare the UI member variables like ImageButton, TextView, SeekBar, etc. Then override the <code>onCreate()</code> method to invoke the <code>initUI()</code> method to initialize the UI elements of the Activity.</p>\n<p><strong>2.</strong> In the <code>initUI()</code> method, we create the member variables by invoking the <code>fineViewById()</code> method and passing the related id value declared in the associated layout xml file. Then call the <code>setOnClickListener()</code> method by assigning &quot;this&quot; to it for all the Button member variables. Next implement the SeekBar&#39;s <code>setOnSeekBarChangeListener()</code> method and override the three interface methods of OnSeekBarChangeListener. Here we update the text value of SeekBar in the <code>onProgresshanged()</code> method. </p>\n<p><strong>3.</strong> Lastly, we override the <code>onClick()</code> method to implement the click action of the <code>mPushDrawerIb</code> ImageButton. When you press the <code>mPushDrawerIb</code>, it will add animations when open and close the <code>mPushDrawerSd</code>, which is a <strong>SlidingDrawer</strong>.</p>\n<h5 id=\"working-on-pointingtestactivity-layout\">Working on PointingTestActivity Layout</h5>\n<p>  Open the colors.xml file in the <strong>values</strong> folder and replace the content with the following:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n    &lt;color name=&quot;button_normal&quot;&gt;#50808080&lt;/color&gt;\n    &lt;color name=&quot;button_press&quot;&gt;#5086BFFF&lt;/color&gt;\n    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;\n    &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;\n&lt;/resources&gt;</code></pre>\n<p>  Here, we add button press and normal colors, white and black colors.</p>\n<p>  Moreover, add the two new string elements to the strings.xml file:</p>\n<pre><code class=\"lang-xml\">&lt;string name=&quot;push_info&quot;&gt;Push Info&lt;/string&gt;\n&lt;string name=&quot;title_activity_pointing_test&quot;&gt;TapFly Sample&lt;/string&gt;</code></pre>\n<p>  Then, update the styles.xml with the following code:</p>\n<pre><code class=\"lang-xml\">&lt;resources&gt;\n    &lt;!--\n        Base application theme, dependent on API level. This theme is replaced\n        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.\n    --&gt;\n    &lt;style name=&quot;AppBaseTheme&quot; parent=&quot;android:Theme.Light&quot;&gt;\n        &lt;!--\n            Theme customizations available in newer API levels can go in\n            res/values-vXX/styles.xml, while customizations related to\n            backward-compatibility can go here.\n        --&gt;\n    &lt;/style&gt;\n\n    &lt;!-- Application theme. --&gt;\n    &lt;style name=&quot;AppTheme&quot; parent=&quot;AppBaseTheme&quot;&gt;\n        &lt;!-- All customizations that are NOT specific to a particular API-level can go here. --&gt;\n    &lt;/style&gt;\n    &lt;style name=&quot;test_text&quot;&gt;\n        &lt;item name=&quot;android:shadowColor&quot;&gt;@color/black&lt;/item&gt;\n        &lt;item name=&quot;android:shadowDx&quot;&gt;2&lt;/item&gt;\n        &lt;item name=&quot;android:shadowDy&quot;&gt;1&lt;/item&gt;\n        &lt;item name=&quot;android:shadowRadius&quot;&gt;6&lt;/item&gt;\n        &lt;item name=&quot;android:textSize&quot;&gt;@dimen/test_log_textsize&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;\n    &lt;/style&gt;\n\n&lt;/resources&gt;</code></pre>\n<p>   Lastly, jump over to your associated layout in layout/activity_ pointing_test.xml and replace everything with the same xml file from the Github Sample Project, since the xml file&#39;s content is too much, we don&#39;t show them here. </p>\n<p>   For the UI, we declare a main title, a return button, a connect status text view, a pointing button, etc. Here is a screenshot of the preview of PointingTestActivity:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/tapFlyActivityUI.png\" alt=\"PointingTestActivity\"></p>\n<h4 id=\"5-creating-the-trackingtestactivity\">5. Creating the TrackingTestActivity</h4>\n<h5 id=\"working-on-trackingtestactivity-class\">Working on TrackingTestActivity Class</h5>\n<p>  Once you finish the steps above, let&#39;s create a new Empty Activity class with the name of &quot;TrackingTestActivity&quot; in the <code>com.dji.p4MissionsDemo</code> package. Replace the code with the following: </p>\n<pre><code class=\"lang-java\">public class TrackingTestActivity extends DemoBaseActivity implements TextureView.SurfaceTextureListener, View.OnClickListener {\n\n    private static final String TAG = &quot;TrackingTestActivity&quot;;\n    private ImageButton mPushDrawerIb;\n    private SlidingDrawer mPushInfoSd;\n    private ImageButton mStopBtn;\n    private Button mConfirmBtn;\n    private RelativeLayout mBgLayout;\n    private TextView mPushInfoTv;\n    private TextView mPushBackTv;\n    private Switch mPushBackSw;\n    private ImageView mSendRectIV;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_tracking_test);\n        initUI();\n    }\n\n    private void initUI() {\n        mPushDrawerIb = (ImageButton)findViewById(R.id.tracking_drawer_control_ib);\n        mPushInfoSd = (SlidingDrawer)findViewById(R.id.tracking_drawer_sd);\n        mStopBtn = (ImageButton)findViewById(R.id.tracking_stop_btn);\n        mConfirmBtn = (Button)findViewById(R.id.tracking_confirm_btn);\n        mBgLayout = (RelativeLayout)findViewById(R.id.tracking_bg_layout);\n        mPushInfoTv = (TextView)findViewById(R.id.tracking_push_tv);\n        mSendRectIV = (ImageView)findViewById(R.id.tracking_send_rect_iv);\n        mPushBackSw = (Switch)findViewById(R.id.tracking_pull_back_sw);\n        mPushBackTv = (TextView)findViewById(R.id.tracking_backward_tv);\n        mStopBtn.setOnClickListener(this);\n        mConfirmBtn.setOnClickListener(this);\n        mPushDrawerIb.setOnClickListener(this);\n    }\n\n    public void onReturn(View view){\n        Log.d(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.tracking_stop_btn:\n\n                break;\n            case R.id.tracking_confirm_btn:\n\n                break;\n            case R.id.tracking_drawer_control_ib:\n                if (mPushInfoSd.isOpened()) {\n                    mPushInfoSd.animateClose();\n                } else {\n                    mPushInfoSd.animateOpen();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}</code></pre>\n<p>Here, we implement several features: </p>\n<p><strong>1.</strong> Declare the UI member variables like ImageButton, SlidingDrawer, SeekBar, etc. Then override the <code>onCreate()</code> method to invoke the <code>initUI()</code> method to initialize the UI elements of the Activity.</p>\n<p><strong>2.</strong> In the <code>initUI()</code> method, we create the member variables by invoking the <code>fineViewById()</code> method and passing the related id value declared in the associated layout xml file. Then call the <code>setOnClickListener()</code> method by assigning &quot;this&quot; to it for all the Button member variables.</p>\n<p><strong>3.</strong> Lastly, we override the <code>onClick()</code> method to implement the click action of the <code>mStopBtn</code>, <code>mConfirmBtn</code> and <code>mPushDrawerIb</code> member variables. When you press the <code>mPushDrawerIb</code> ImageButton, it will add animation to open and close the <code>mPushInfoSd</code>.</p>\n<p>Next, open the strings.xml file and add the following code:</p>\n<pre><code class=\"lang-xml\">    &lt;string name=&quot;title_activity_tracking_test&quot;&gt;ActiveTrack Sample&lt;/string&gt;\n    &lt;string name=&quot;demo_desc_tracking&quot;&gt;ActiveTrack Mission&lt;/string&gt;\n    &lt;string name=&quot;demo_desc_pointing&quot;&gt;TapFly Mission&lt;/string&gt;</code></pre>\n<p>Finally, jump over to your associated layout in layout/activity_ tracking_test.xml and replace everything with the same xml file from the Github Sample Project, since the xml file&#39;s content is a lot, we don&#39;t show them here. For more details, please check the related xml file from the Github Sample Project of the demo project.</p>\n<p>For the UI, we declare a main title, a return button, a connect status text view, a TextureView to show live video stream, an ImageView to show the tracking rectangle, etc. Here is a screenshot of the preview of TrackingTestActivity:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/activeTrackActivityUI.png\" alt=\"PointingTestActivity\"></p>\n<h4 id=\"6-preview-the-ui-of-the-application\">6. Preview the UI of the Application</h4>\n<p>Now, let&#39;s open the dimens.xml file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n    &lt;!-- left button list --&gt;\n    &lt;dimen name=&quot;left_button_list_button_width&quot;&gt;150dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_height&quot;&gt;45dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_padding_left&quot;&gt;5dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_padding_right&quot;&gt;5dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_margin_left&quot;&gt;10dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_margin_top&quot;&gt;10dp&lt;/dimen&gt;\n    &lt;dimen name=&quot;left_button_list_button_text_size&quot;&gt;14sp&lt;/dimen&gt;\n\n    &lt;dimen name=&quot;test_log_textsize&quot;&gt;17sp&lt;/dimen&gt;\n&lt;/resources&gt;</code></pre>\n<p>Next, open the AndroidManifest.xml file and modify the <strong>.PointingTestActivity</strong> and <strong>.TrackingTestActivity</strong> elements as shown below:</p>\n<pre><code class=\"lang-xml\">    &lt;activity\n        android:name=&quot;.TrackingTestActivity&quot;\n        android:label=&quot;@string/title_activity_tracking_test&quot;\n        android:launchMode=&quot;singleInstance&quot;\n        android:screenOrientation=&quot;landscape&quot;\n        android:theme=&quot;@android:style/Theme.Holo.NoActionBar.Fullscreen&quot; &gt;\n    &lt;/activity&gt;\n    &lt;activity\n        android:name=&quot;.PointingTestActivity&quot;\n        android:label=&quot;@string/title_activity_pointing_test&quot;\n        android:launchMode=&quot;singleInstance&quot;\n        android:screenOrientation=&quot;landscape&quot;\n        android:theme=&quot;@android:style/Theme.Holo.NoActionBar.Fullscreen&quot; &gt;\n    &lt;/activity&gt;</code></pre>\n<p>In the code above, we modify the label, launchMode, screenOrientation and theme attributes for the two Activities.</p>\n<p>We have gone through a long process to setup the UI of the application. Now, let&#39;s build and run the project and install it in your Android device to test it. Here we use Nexus 5 for testing. If everything goes well, you should see the following gif animation of the application:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/p4MissionsUIDemo.gif\" alt=\"p4MissionsUIDemo\"></p>\n<h3 id=\"registering-the-application\">Registering the Application</h3>\n<p>After you finish the above steps, let&#39;s register our application with the <strong>App Key</strong> you apply from DJI Developer Website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>1.</strong> Let&#39;s open the AndroidManifest.xml file and add the following elements to it:</p>\n<pre><code class=\"lang-xml\">\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.host&quot;\n        android:required=&quot;false&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.accessory&quot;\n        android:required=&quot;true&quot; /&gt;</code></pre>\n<p>Here, we add uses permissions and uses features for the app. They are required for registeration.</p>\n<p>Then add the following elements above the <strong>MainActivity</strong> activity element:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n        &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n        &lt;meta-data\n            android:name=&quot;com.dji.sdk.API_KEY&quot;\n            android:value=&quot;Please enter your App Key here.&quot; /&gt;\n        &lt;activity\n            android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n            android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n            &lt;/intent-filter&gt;\n            &lt;meta-data\n                android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n                android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n        &lt;/activity&gt;\n        &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n        &lt;/service&gt;\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, we enter the <strong>App Key</strong> of the application under the <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute. For more details of the AndroidManifest.xml file, please check the Github source code of the demo project.</p>\n<p><strong>2.</strong> After you finish the steps above, open the DJIDemoApplication.java file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">@Override\npublic void onCreate() {\n    super.onCreate();\n    mHandler = new Handler(Looper.getMainLooper());\n    DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n    @Override\n    public void onGetRegisteredResult(DJIError error) {\n        Log.d(TAG, error == null ? &quot;Success&quot; : error.getDescription());\n        if(error == DJISDKError.REGISTRATION_SUCCESS) {\n            DJISDKManager.getInstance().startConnectionToProduct();\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;Success&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        } else {\n            Handler handler = new Handler(Looper.getMainLooper());\n            handler.post(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(getApplicationContext(), &quot;register sdk fails, check network is available&quot;, Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n        Log.e(&quot;TAG&quot;, error.toString());\n    }\n\n    @Override\n    public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n        mProduct = newProduct;\n        if(mProduct != null) {\n            mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n        }\n        notifyStatusChange();\n    }\n};</code></pre>\n<p>  Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of DJISDKManagerCallback. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<h2 id=\"coordinate-transformations-for-missions\">Coordinate Transformations for Missions</h2>\n<p>Before we dive into the implementation of two missions, let&#39;s learn something about the special coordinate transformations of them.</p>\n<h3 id=\"tapfly-mission-coordinate-transformation\">TapFly Mission Coordinate Transformation</h3>\n<p>If we check the <strong>DJITapFlyMission.DJITapFlyMissionProgressStatus</strong> class, you can see the following two public methods:</p>\n<pre><code class=\"lang-java\">\npublic DJIVector getDirection ()\npublic PointF getImageLocation ()</code></pre>\n<p><strong>1.</strong> The <code>getDirection ()</code> method returns a DJIVector object, which represents a cartesian vector in 3D space. You can get the actual flying direction of the aircraft using the N-E-D(North-East-Down) coordinate system when the aircraft is executing a TapFly mission.</p>\n<p><strong>2.</strong> The <code>getImageLocation ()</code> method returns a PointF object, which represents the image point from the live video stream where the vision system should calculate the flight direction from. The image point is normalized to [0,1] where (0,0) is the top left corner and (1,1) is the bottom right.</p>\n<p>Here is a diagram to show the coordinate transformation of the mission:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/android_tapFlyMissionCoordinate.png\" alt=\"tapFlyMissionCoordinate\"></p>\n<p>As the diagram shown above, you can see the process of transformation.</p>\n<ul>\n<li><p>The <code>imageLocationToCalculateDirection</code> object shown above is transformed from TouchPoint (PointF) to a Video Stream Coordinate System PointF.</p>\n</li>\n<li><p>The <code>getDirection()</code> method shown above belongs to the <strong>N-E-D (North-East-Down) Coordinate System</strong> and you can invoke this method to get the field value from the SDK.</p>\n</li>\n<li><p>The <code>imageLocation()</code> method shown above belongs to the <strong>Video Stream Coordinate System</strong> and you can invoke this method to get the field value from the SDK.</p>\n</li>\n</ul>\n<p>So in our demo application, in order to implement the TapFly mission, we should transform the user&#39;s touch location (A PointF object) of Android View Coordinate System into the image location (A PointF object) of Video Stream Coordination System and pass it to the following <code>imageLocationToCalculateDirection</code> object of DJITapFlyMission:</p>\n<pre><code class=\"lang-java\">/**\n *  The image point from the video feed where the vision system should calculate the flight direction from. The image point is normalized to [0,1] where (0,0) is the top left corner and (1,1) is the bottom right.\n */\npublic PointF imageLocationToCalculateDirection</code></pre>\n<h3 id=\"activetrack-mission-coordinate-transformation\">ActiveTrack Mission Coordinate Transformation</h3>\n<p>Next, let&#39;s check the <strong>DJIActiveTrackMission.DJIActiveTrackMissionProgressStatus</strong> class, you may see the following public getter method:</p>\n<pre><code class=\"lang-java\">public RectF getTrackingRect()</code></pre>\n<p>Check the <strong>DJIActiveTrackMission</strong> class, you can also see this object:</p>\n<pre><code class=\"lang-java\">public RectF rect</code></pre>\n<p><strong>1.</strong> You can invoke the <code>trackingRect ()</code> method to get a RectF object which is a rectangle in the live video stream view image that represents the target being tracked. The rectangle is normalized to [0,1] where (0,0) is the top left of the video preview and (1,1) is the bottom right.</p>\n<p><strong>2.</strong> The <code>rect</code> object is a RectF class object, it represents a bounding box for the target. The rectangle is normalized to [0,1] where (0,0) is the top left of the video preview and (1,1) is the bottom right.</p>\n<p>   If the mission is initialized with a PointF object, the vision system will try to recognize object around the point and return the representative rect in the MissionProgressStatusCallback.</p>\n<p>   Here is a diagram to show the coordinate transformation of the ActiveTrack mission:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/android_ActiveTrackMissionCoordinateSystem.png\" alt=\"ActiveTrackMissionCoordinate\"></p>\n<p>As the diagram shown above, you can see the process of transformation. </p>\n<ul>\n<li>The <code>getTrackingRect()</code> method and <code>rect</code> object shown above belongs to the <strong>Video Stream Coordinate System</strong>.</li>\n</ul>\n<p>So in order to implement the ActiveTrack Mission, we should transform the user&#39;s touch rect (A RectF object) of Android View Coordinate System into the tracking rect (A RectF object) of Video Stream Coordination System and pass it to the <code>rect</code> object of DJIActiveTrackMission. You can get the tracking rect object by invoking the <code>getTrackingRect()</code> method of SDK. And you can use it to update the rectangle on your screen.</p>\n<h2 id=\"implementing-the-tapfly-mission\">Implementing the TapFly Mission</h2>\n<h3 id=\"updating-the-demobaseactivity\">Updating the DemoBaseActivity</h3>\n<p>Before we implement the TapFly Mission, we should update the DemoBaseActivity.java class to configure the live video streaming feature. Let&#39;s open the file and add the following codes to it:</p>\n<pre><code class=\"lang-java\">\nprotected TextureView mVideoSurface = null;\nprotected CameraReceivedVideoDataCallback mReceivedVideoDataCallBack = null;\nprotected DJIOnReceivedVideoCallback mOnReceivedVideoCallback = null;\nprotected DJICodecManager mCodecManager = null;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    IntentFilter filter = new IntentFilter();  \n    filter.addAction(DJIDemoApplication.FLAG_CONNECTION_CHANGE);\n    registerReceiver(mReceiver, filter);\n\n    mVideoSurface = (TextureView) findViewById(R.id.video_previewer_surface);\n\n    if (null != mVideoSurface) {\n        mVideoSurface.setSurfaceTextureListener(this);\n\n        mConnectStatusTextView = (TextView) findViewById(R.id.ConnectStatusTextView);\n\n        mReceivedVideoDataCallBack = new CameraReceivedVideoDataCallback() {\n\n            @Override\n            public void onResult(byte[] videoBuffer, int size) {\n                if(mCodecManager != null){\n                    mCodecManager.sendDataToDecoder(videoBuffer, size);\n                }\n            }\n        };\n    }\n    initPreviewer();\n}</code></pre>\n<p> Here we declare a TextureView(<code>mVideoSurface</code> object) to show the live video stream data. We use the <code>video_previewer_surface</code> id from its layout xml file to create the object. This id should be the same as PointingTestActivity and TrackingTestActivity&#39;s layout settings. Then create the callback variable <code>mReceivedVideoDataCallBack</code> to implement the DJICamera&#39;s interface methods for receiving video data.</p>\n<p> Moreover, we implement the <code>initPreviewer()</code> method as shown below to check product connection status and set the DJICameraReceivedVideoDataCallback method to DJICamera  object:</p>\n<pre><code class=\"lang-java\"> private void initPreviewer() {\n        try {\n            mProduct = DJIDemoApplication.getProductInstance();\n        } catch (Exception exception) {\n            mProduct = null;\n        }\n\n        if (null == mProduct || !mProduct.isConnected()) {\n            mCamera = null;\n            showToast(&quot;Disconnect&quot;);\n        } else {\n            if (!mProduct.getModel().equals(Model.UnknownAircraft)) {\n                mCamera = mProduct.getCamera();\n                if (mCamera != null){\n                    mCamera.setDJICameraReceivedVideoDataCallback(mReceivedVideoDataCallBack);\n                }\n            }\n        }\n    }</code></pre>\n<h3 id=\"working-on-the-pointingtestactivity\">Working on the PointingTestActivity</h3>\n<h4 id=\"showing-the-live-video-stream\">Showing the Live Video Stream</h4>\n<p>  Now let&#39;s come back to the PointingTestActivity.java class and override the <code>onCreate()</code> method firstly:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\n    setContentView(R.layout.activity_pointing_test);\n    super.onCreate(savedInstanceState);\n    initUI();\n}</code></pre>\n<p>  In the method shown above, we invoke the <code>setContentView()</code> method firstly to show the PointingTestActivity view. Then invoke the DemoBaseActivity class&#39;s <code>onCreate()</code> method to implement the live video stream showing methods. Lastly, invoke the <code>initUI()</code> to initialize all the UI elements.</p>\n<h4 id=\"working-on-the-tapfly-mission\">Working on the TapFly Mission</h4>\n<p>Before we start to create the DJITapFlyMission object, let&#39;s check the three member variables we can set for each DJITapFlyMission:</p>\n<p><strong>1.</strong> AutoFlightSpeed</p>\n<p>You can set the aircraft&#39;s auto flight speed during the mission by setting this member variable for DJITapFlyMission. The range for it is [1, 10] m/s.</p>\n<p><strong>2.</strong> IsHorizontalObstacleAvoidanceEnabled</p>\n<p>If you want to allow the aircraft to bypass or move around an obstacle by going to the left or right of the obstacle when executing TapFly mission, you can set this member variable to YES. Otherwise, the aircraft will only go over an obstacle to avoid it.</p>\n<p><strong>3.</strong> ImageLocationToCalculateDirection</p>\n<p>This is where we should pass the coordinate transformation PointF object to, we can use the <code>getTapFlyPoint()</code> method to do the coordinate transformation and return the PointF object. It&#39;s the image point from the video feed where the vision system should calculate the flight direction from.</p>\n<h5 id=\"prepare-mission\">Prepare Mission</h5>\n<p><strong>1.</strong> Firslty, let&#39;s implement the <code>initMissionManager()</code> method to initialize the <code>mMissionManager</code> and <code>mTapFlyMission</code> variables. Also, we set MissionProgressStatusCallback and MissionExecutionFinishedCallback of DJIMissionManager to <code>this</code>:</p>\n<pre><code class=\"lang-java\">private void initMissionManager() {\n    DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n\n    if (product == null || !product.isConnected()) {\n        setResultToToast(&quot;Disconnected&quot;);\n        mMissionManager = null;\n    } else {\n        mMissionManager = product.getMissionManager();\n        mMissionManager.setMissionProgressStatusCallback(this);\n        mMissionManager.setMissionExecutionFinishedCallback(this);\n    }\n    mTapFlyMission = new DJITapFlyMission();\n}</code></pre>\n<p><strong>2.</strong> Next, implement the following two methods to manage the mission coordinate transformations:</p>\n<pre><code class=\"lang-java\">private PointF getTapFlyPoint(View iv) {\n    if (iv == null) return null;\n    View parent = (View)iv.getParent();\n    float centerX = iv.getLeft() + iv.getX()  + ((float)iv.getWidth()) / 2;\n    float centerY = iv.getTop() + iv.getY() + ((float)iv.getHeight()) / 2;\n    centerX = centerX &lt; 0 ? 0 : centerX;\n    centerX = centerX &gt; parent.getWidth() ? parent.getWidth() : centerX;\n    centerY = centerY &lt; 0 ? 0 : centerY;\n    centerY = centerY &gt; parent.getHeight() ? parent.getHeight() : centerY;\n\n    return new PointF(centerX / parent.getWidth(), centerY / parent.getHeight());\n}\n\nprivate void showPointByTapFlyPoint(final PointF point, final ImageView iv) {\n    if (point == null || iv == null) {\n        return;\n    }\n    final View parent = (View)iv.getParent();\n     PointingTestActivity.this.runOnUiThread(new Runnable() {\n\n         @Override\n         public void run() {\n             iv.setX(point.x * parent.getWidth() - iv.getWidth() / 2);\n             iv.setY(point.y * parent.getHeight() - iv.getHeight() / 2);\n             iv.setVisibility(View.VISIBLE);\n             iv.requestLayout();\n         }\n     });\n}</code></pre>\n<p>   We can use the <code>getTapFlyPoint()</code> method to transform the tap point position of Android View coordinate system to the video stream coordinate system. In contrast, we use the <code>showPointByTapFlyPoint()</code> method to transform the tap point position(We use <code>mRstPointIv</code> to represent it) from video stream coordinate system back to the Android View coordinate system and show it on screen.</p>\n<p><strong>3.</strong> Moreover, let&#39;s override the <code>onTouch()</code> method to track the ACTION_UP gesture of MotionEvent:</p>\n<pre><code class=\"lang-java\">\n@Override\npublic boolean onTouch(View v, MotionEvent event) {\n    if (v.getId() == R.id.pointing_bg_layout) {\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_UP:\n            if (mMissionManager != null) {\n                mStartBtn.setVisibility(View.VISIBLE);\n                mStartBtn.setX(event.getX() - mStartBtn.getWidth() / 2);\n                mStartBtn.setY(event.getY() - mStartBtn.getHeight() / 2);\n                mStartBtn.requestLayout();\n                mTapFlyMission.imageLocationToCalculateDirection = getTapFlyPoint(mStartBtn);\n                mMissionManager.prepareMission(mTapFlyMission, null, new DJICompletionCallback() {\n\n                    @Override\n                    public void onResult(DJIError error) {\n                        if (error == null) {\n                            setVisible(mStartBtn, true);\n                        } else {\n                            setVisible(mStartBtn, false);\n                        }\n                        setResultToToast(error == null ? &quot;Success&quot; : error.getDescription());\n                    }\n                });\n            } else {\n                setResultToToast(&quot;Mission manager is null&quot;);\n            }\n            break;\n\n        default:\n            break;\n        }\n    }\n    return true;\n}</code></pre>\n<p>Here, we update the <code>mStartBtn</code>&#39;s position to the position user press. Then we invoke the <code>getTapFlyPoint()</code> method to do the coordinate transformation and pass it to DJITapFlyMission&#39;s <code>imageLocationToCalculateDirection</code> member variable. Lastly, invoke the <code>prepareMission()</code> method of DJIMissionManager to prepare the DJITapFlyMission.</p>\n<h5 id=\"start-and-stop-mission\">Start and Stop Mission</h5>\n<p>Next, let&#39;s override the <code>onClick()</code> method to implement the click action of <code>mStartBtn</code> and <code>mStopBtn</code> buttons to start and stop the DJITapFlyMission:</p>\n<pre><code class=\"lang-java\">    @Override\n    public void onClick(View v) {\n        if (v.getId() == R.id.pointing_drawer_control_ib) {\n            if (mPushDrawerSd.isOpened()) {\n                mPushDrawerSd.animateClose();\n            } else {\n                mPushDrawerSd.animateOpen();\n            }\n            return;\n        }\n        if (mMissionManager != null) {\n            switch (v.getId()) { \n            case R.id.pointing_start_btn:\n                mTapFlyMission.autoFlightSpeed = getSpeed();\n                mTapFlyMission.isHorizontalObstacleAvoidanceEnabled = mAssisSw.isChecked();\n                mMissionManager.startMissionExecution(new DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError error) {\n                        if (error == null) {\n                            setVisible(mStartBtn, false);\n                            setVisible(mStopBtn, true);\n                            setVisible(mAssisTv, false);\n                            setVisible(mAssisSw, false);\n                        } else {\n                            setVisible(mStartBtn, true);\n                            setVisible(mStopBtn, false);\n                            setVisible(mAssisTv, true);\n                            setVisible(mAssisSw, true);\n                        }\n                        setResultToToast(&quot;Start: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n                    }\n                });\n                break;\n            case R.id.pointing_stop_btn:\n                mMissionManager.stopMissionExecution(new DJICompletionCallback() {\n\n                    @Override\n                    public void onResult(DJIError error) {\n                        setResultToToast(&quot;Stop: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n                    } \n                });\n                break; \n\n            default:\n                break;\n            }\n        } else {\n            setResultToToast(&quot;Mission manager is null&quot;);\n        }\n    }</code></pre>\n<p>In the code above, we use a switch statement to identify the <code>mStartBtn</code> and <code>mStopBtn</code> buttons&#39; click action. In the &#39;mStartBtn&#39; click action case, firstly set the <code>autoFlightSpeed</code> and <code>isHorizontalObstacleAvoidanceEnabled</code> member variables of DJITapFlyMission. Then we invoke the <code>startMissionExecution()</code> method of DJIMissionManager to start the mission and update the visibilities of buttons. </p>\n<p>In the <code>mStopBtn</code> click action case, we invoke the <code>stopMissionExecution()</code> method of DJIMissionManager to stop the DJITapFlyMission.</p>\n<h5 id=\"missionmanager-callback\">MissionManager Callback</h5>\n<p>Finally, let&#39;s override the two Mission Manager&#39;s callback methods:</p>\n<pre><code class=\"lang-java\">    /**\n     * @Description : MissionExecutionFinishedCallback Method\n     */\n    @Override\n    public void onResult(DJIError error) {\n        setResultToText(&quot;Execution finished: &quot; + (error == null ? &quot;Success!&quot; : error.getDescription()));\n        setResultToToast(&quot;Execution finished: &quot; + (error == null ? &quot;Success!&quot; : error.getDescription()));\n        setVisible(mRstPointIv, false);\n        setVisible(mStopBtn, false);\n        setVisible(mAssisTv, true);\n        setVisible(mAssisSw, true);\n    }\n\n    /**\n     * @Description MissionProgressStatusCallback Method\n     */\n    @Override\n    public void missionProgressStatus(DJIMissionProgressStatus progressStatus) {\n        if (progressStatus instanceof DJITapFlyMissionProgressStatus) {\n            DJITapFlyMissionProgressStatus pointingStatus = (DJITapFlyMissionProgressStatus)progressStatus;\n            StringBuffer sb = new StringBuffer();\n            Utils.addLineToSB(sb, &quot;Flight state&quot;, pointingStatus.getExecutionState().name());\n            Utils.addLineToSB(sb, &quot;pointing direction X&quot;, pointingStatus.getDirection().x);\n            Utils.addLineToSB(sb, &quot;pointing direction Y&quot;, pointingStatus.getDirection().y);\n            Utils.addLineToSB(sb, &quot;pointing direction Z&quot;, pointingStatus.getDirection().z);\n            Utils.addLineToSB(sb, &quot;point x&quot;, pointingStatus.getImageLocation().x);\n            Utils.addLineToSB(sb, &quot;point y&quot;, pointingStatus.getImageLocation().y);\n            Utils.addLineToSB(sb, &quot;Bypass state&quot;, pointingStatus.getBypassDirection().name());\n            Utils.addLineToSB(sb, &quot;Error&quot;, pointingStatus.getError());\n            setResultToText(sb.toString());\n            showPointByTapFlyPoint(pointingStatus.getImageLocation(), mRstPointIv);\n        }\n    }</code></pre>\n<p>  When the mission finish executing, the <code>onResult()</code> callback method will be called, and we can update the UI and show result here. Moreover, we can use the <code>missionProgressStatus()</code> callback method to update the mission progress status by showing logs on <code>mPushTv</code> TextView and update the <code>mRstPointIv</code> location on screen.</p>\n<p>  BTW, you may notice the <code>addLineToSB()</code> method of Tools class here, we should then create a new Java class, named &quot;Utils.java&quot; and replace the code of the file with the same file in Github Source code of this demo project.</p>\n<p>  For more implementation details of the PointingTestActivity.java file, please check the Github source code. </p>\n<p>Now let&#39;s build and run the project to install the app to your Android device, if everything goes well, you should be able to use the TapFly mission of Phantom 4 now.</p>\n<blockquote>\n<p><strong>Important</strong>: Remember to switch the remote controller to <strong>P</strong> mode before you test the TapFly mission.</p>\n</blockquote>\n<p>   Here are two gif animations for you to get a better understanding of using the TapFly mission, especially the <strong>Horizontal Obstacle Avoidance</strong> feature:</p>\n<ul>\n<li>Enable Horizontal Obstacle Avoidance</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/tapFlyLeftRightAnimate.gif\" alt=\"tapFlyMissionHoriGif\"></p>\n<p>   In the animation, you can see there are two flat surface obstacles stand towards the Phantom 4. We tap on the right obstacle and ask the Phantom 4 to fly towards it. With the help of the front obstacle sensors, Phantom 4 won&#39;t hit the obstacle and crash. You may notice that we switch on the &quot;Horizontal Obstacle Avoidance Enable&quot; before the TapFly mission start. </p>\n<p>   Press the <strong>GO</strong> button, Phantom 4 will start to fly towards it. When flying close to the obstacle, the Obstacle Sensing System will help to adjust the aircraft&#39;s attitude and fly towards the left side of it. </p>\n<ul>\n<li>Disable Horizontal Obstacle Avoidance</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/tapFlyAnimate.gif\" alt=\"tapFlyMissionHoriGif\"></p>\n<p>   If we switch off the &quot;Horizontal Obstacle Avoidance Enable&quot;, when the Phantom 4 fly close to the obstacle, it will rise to avoid the obstacle and continue to fly towards the origin direction. When you want to stop the mission, just press the <strong>X</strong> button, Phantom 4 will stop immediately and hover there.</p>\n<h2 id=\"implementing-activetrack-mission\">Implementing ActiveTrack Mission</h2>\n<h3 id=\"working-on-the-trackingtestactivity\">Working on the TrackingTestActivity</h3>\n<h4 id=\"showing-the-live-video-stream\">Showing the Live Video Stream</h4>\n<p>  Now let&#39;s go to TrackingTestActivity.java class and override the <code>onCreate()</code> method firstly:</p>\n<pre><code class=\"lang-java\">    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        setContentView(R.layout.activity_tracking_test);\n        super.onCreate(savedInstanceState);\n        initUI();\n    }</code></pre>\n<p>  In the method shown above, we invoke the <code>setContentView()</code> method firstly to show the TrackingTestActivity view. Then invoke the DemoBaseActivity class&#39;s <code>onCreate()</code> method to implement the live video stream showing methods. Lastly, invoke the <code>initUI()</code> to initialize all the UI elements.</p>\n<h4 id=\"working-on-the-activetrack-mission\">Working on the ActiveTrack Mission</h4>\n<h5 id=\"prepare-and-start-mission\">Prepare and Start Mission</h5>\n<p><strong>1.</strong> Now, let&#39;s implement the <code>initMissionManager()</code> method to initialize the <code>mMissionManager</code> variable. Also, we set MissionProgressStatusCallback and MissionExecutionFinishedCallback of DJIMissionManager to <code>this</code>:</p>\n<pre><code class=\"lang-java\">    private void initMissionManager() {\n        DJIBaseProduct product = DJIDemoApplication.getProductInstance();\n\n        if (product == null || !product.isConnected()) {\n            setResultToToast(&quot;Disconnected&quot;);\n            mMissionManager = null;\n        } else {\n            mMissionManager = product.getMissionManager();\n            mMissionManager.setMissionProgressStatusCallback(this);\n            mMissionManager.setMissionExecutionFinishedCallback(this);\n        }\n    }</code></pre>\n<p><strong>2.</strong> Next, implement the following two methods to manage the mission coordinate transformations:</p>\n<p>   We can use the <code>getActiveTrackRect()</code> method to transform the tracking rectangle of Android View coordinate system to the video stream coordinate system. In contrast, we use the <code>updateActiveTrackRect()</code> method to transform the tracking rectangle (We use <code>mConfirmBtn</code> to represent it) from video stream coordinate system back to the Android View coordinate system and show it on screen.</p>\n<pre><code class=\"lang-java\">private RectF getActiveTrackRect(View iv) {\n        View parent = (View)iv.getParent();\n        return new RectF(\n                ((float)iv.getLeft() + iv.getX()) / (float)parent.getWidth(),\n                ((float)iv.getTop() + iv.getY()) / (float)parent.getHeight(),\n                ((float)iv.getRight() + iv.getX()) / (float)parent.getWidth(),\n                ((float)iv.getBottom() + iv.getY()) / (float)parent.getHeight()\n        );\n    }\n\n    private void updateActiveTrackRect(final TextView iv, final DJIActiveTrackMissionProgressStatus progressStatus) {\n        if (iv == null || progressStatus == null) return;\n        View parent = (View)iv.getParent();\n        RectF trackingRect = progressStatus.getTrackingRect();\n\n        final int l = (int)((trackingRect.centerX() - trackingRect.width() / 2) * parent.getWidth());\n        final int t = (int)((trackingRect.centerY() - trackingRect.height() / 2) * parent.getHeight());\n        final int r = (int)((trackingRect.centerX() + trackingRect.width() / 2) * parent.getWidth());\n        final int b = (int)((trackingRect.centerY() + trackingRect.height() / 2) * parent.getHeight());\n\n        TrackingTestActivity.this.runOnUiThread(new Runnable() {\n\n            @Override\n            public void run() {\n                if (progressStatus.getExecutionState() == DJIActiveTrackMissionExecutionState.TrackingWithLowConfidence ||\n                        progressStatus.getExecutionState() == DJIActiveTrackMissionExecutionState.CannotContinue) {\n                    iv.setBackgroundColor(0x55ff0000);\n                    iv.setClickable(false);\n                    iv.setText(&quot;&quot;);\n                } else if (progressStatus.getExecutionState() == DJIActiveTrackMissionExecutionState.WaitingForConfirmation) {\n                    iv.setBackgroundColor(0x5500ff00);\n                    iv.setClickable(true);\n                    iv.setText(&quot;OK&quot;);\n                } else {\n                    iv.setBackgroundResource(R.drawable.visual_track_now);\n                    iv.setClickable(false);\n                    iv.setText(&quot;&quot;);\n                }\n                if (progressStatus.getExecutionState() == DJIActiveTrackMissionExecutionState.TargetLost) {\n                    iv.setVisibility(View.INVISIBLE);\n                } else {\n                    iv.setVisibility(View.VISIBLE);\n                }\n                iv.setX(l);\n                iv.setY(t);\n                iv.getLayoutParams().width = r - l;\n                iv.getLayoutParams().height = b - t;\n                iv.requestLayout();\n            }\n        });\n\n    }</code></pre>\n<p>  In the implementation of <code>updateActiveTrackRect()</code> method, we can use the <code>getExecutionState()</code> method of DJIActiveTrackMissionProgressStatus to get the mission execution state and update the UI and tracking rectangle&#39;s location. Here is the details of the state:</p>\n<ul>\n<li><p><strong>CannotContinue</strong> :  Used when tracking cannot continue for reasons other than low confidence. </p>\n</li>\n<li><p><strong>TargetLost</strong> :  The tracking target is lost. </p>\n</li>\n<li><p><strong>Tracking</strong> :  The ActiveTrack Mission is tracking a target.</p>\n</li>\n<li><p><strong>TrackingWithLowConfidence</strong> :  The ActiveTrack Mission is tracking a target with low confidence. </p>\n</li>\n<li><p><strong>Unknown</strong> :  Unknown state. </p>\n</li>\n<li><p><strong>WaitingForConfirmation</strong> :  At the start of a mission, when a mission is resumed or anytime the aircraft looses sufficient confidence the target it is tracking, the aircraft will ask for confirmation that it is tracking the correct object. </p>\n</li>\n</ul>\n<p><strong>3.</strong> The Phantom 4&#39;s ActiveTrack Mission can track both moving subjects and humans.</p>\n<ul>\n<li><p>Track Moving Subjects</p>\n<p>For moving subjests, you need to provide a RectF object of tracking rectangle to the DJIActiveTrackMission method&#39;s <code>RectF</code> parameter.</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">  DJIActiveTrackMission activeTrackMission = new DJIActiveTrackMission(getActiveTrackRect(mSendRectIV));</code></pre>\n<ul>\n<li><p>Track Humans</p>\n<p>For humans, you can provide a PointF object of tracking point to the DJIActiveTrackMission method&#39;s <code>PointF</code> parameter. Like you can tap on the human on your Android&#39;s screen.</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">  DJIActiveTrackMission activeTrackMission = new DJIActiveTrackMission(new PointF(downX / mBgLayout.getWidth(), downY / mBgLayout.getHeight());</code></pre>\n<p>Moreover, let&#39;s override the <code>onTouch()</code> method to track the ACTION_DOWN, ACTION_MOVE and ACTION_UP gestures of MotionEvent:</p>\n<pre><code class=\"lang-java\">@Override\n    public boolean onTouch(View v, MotionEvent event) {\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                isDrawingRect = false;\n                downX = event.getX();\n                downY = event.getY();\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (calcManhattanDistance(downX, downY, event.getX(), event.getY()) &lt; 20 &amp;&amp; !isDrawingRect) {\n                    return true;\n                }\n                isDrawingRect = true;\n                mSendRectIV.setVisibility(View.VISIBLE);\n                int l = (int)(downX &lt; event.getX() ? downX : event.getX());\n                int t = (int)(downY &lt; event.getY() ? downY : event.getY());\n                int r = (int)(downX &gt;= event.getX() ? downX : event.getX());\n                int b = (int)(downY &gt;= event.getY() ? downY : event.getY());\n                mSendRectIV.setX(l);\n                mSendRectIV.setY(t);\n                mSendRectIV.getLayoutParams().width = r - l;\n                mSendRectIV.getLayoutParams().height = b - t;\n                mSendRectIV.requestLayout();\n                break;\n\n            case MotionEvent.ACTION_UP:\n                if (mMissionManager != null) {\n                    DJIActiveTrackMission activeTrackMission = isDrawingRect ? new DJIActiveTrackMission(getActiveTrackRect(mSendRectIV)) : new DJIActiveTrackMission(new PointF(downX / mBgLayout.getWidth(), downY / mBgLayout.getHeight()));\n                    activeTrackMission.isRetreatEnabled = mPushBackSw.isChecked();\n                    mMissionManager.prepareMission(activeTrackMission, null, new DJICompletionCallback() {\n                        @Override\n                        public void onResult(DJIError error) {\n                            if (error == null) {\n                                mMissionManager.startMissionExecution(new DJICompletionCallback() {\n                                    @Override\n                                    public void onResult(final DJIError error) {\n                                        TrackingTestActivity.this.runOnUiThread(new Runnable() {\n                                            @Override\n                                            public void run() {\n                                                if (error == null) {\n                                                    mStopBtn.setVisibility(View.VISIBLE);\n                                                    mPushBackSw.setVisibility(View.INVISIBLE);\n                                                    mPushBackTv.setVisibility(View.INVISIBLE);\n                                                }\n                                            }\n                                        });\n                                        setResultToToast(&quot;Start: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n                                    }\n                                });\n                            } else {\n                                setResultToToast(&quot;Prepare: &quot; + (error == null ? &quot;Success&quot; : error.getDescription()));\n                            }\n                        }\n                    });\n                } else {\n                    setResultToToast(&quot;No mission manager!!!&quot;);\n                }\n                mSendRectIV.setVisibility(View.INVISIBLE);\n                break;\n            default:\n                break;\n        }\n\n        return true;\n    }</code></pre>\n<p>Here, we update the <code>mSendRectIV</code>&#39;s size and position according to the user&#39;s drawing position on the screen. Then when the user trigger the ACTION_UP gesture, we create the DJIActiveTrackMission object based on the <code>isDrawingRect</code> bool variable.</p>\n<p>We invoke the <code>getActiveTrackRect()</code> method to do the coordinate transformation and pass the RectF to <code>DJIActiveTrackMission()</code> method. Also, we pass the <code>mPushBackSw</code>&#39;s isChecked() value to the <code>isRetreatEnabled</code> member variable of DJIActiveTrackMission to control the retreat feature.</p>\n<p>Lastly, invoke the <code>prepareMission()</code> method of DJIMissionManager to prepare the DJIActiveTrackMission.</p>\n<h5 id=\"stop-mission\">Stop Mission</h5>\n<p>Next, let&#39;s override the <code>onClick()</code> method to implement the click action features of <code>mPushDrawerIb</code>, <code>mStopBtn</code> and <code>mConfirmBtn</code> buttons.</p>\n<pre><code class=\"lang-java\">    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.tracking_stop_btn:\n                mMissionManager.stopMissionExecution(new DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError error) {\n                        setResultToToast(error == null ? &quot;Success!&quot; : error.getDescription());\n                    }\n                });\n                break;\n            case R.id.tracking_confirm_btn:\n                DJIActiveTrackMission.acceptConfirmation(new DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError error) {\n                        setResultToToast(error == null ? &quot;Success!&quot; : error.getDescription());\n                    }\n                });\n                break;\n            case R.id.tracking_drawer_control_ib:\n                if (mPushInfoSd.isOpened()) {\n                    mPushInfoSd.animateClose();\n                } else {\n                    mPushInfoSd.animateOpen();\n                }\n                break;\n            default:\n                break;\n        }\n    }</code></pre>\n<p>In the code above, we use a switch statement to identify the <code>mPushDrawerIb</code>, <code>mStopBtn</code> and <code>mConfirmBtn</code> buttons&#39; click action. In the <code>mStopBtn</code> click action case, we invoke the <code>stopMissionExecution()</code> method of DJIMissionManager to stop the mission and show result. </p>\n<p>In the <code>mConfirmBtn</code> click action case, we invoke the <code>acceptConfirmation()</code> method of DJIMissionManager to accept the confirmation of the tracking rectangle.</p>\n<h5 id=\"missionmanager-callback\">MissionManager Callback</h5>\n<p>Finally, let&#39;s override the two Mission Manager&#39;s callback methods:</p>\n<pre><code class=\"lang-java\">    /**\n     * @Description : MissionExecutionFinishedCallback Method\n     */\n    @Override\n    public void onResult(DJIError error) {\n        setResultToText(&quot;Execution finished: &quot; + (error == null ? &quot;Success!&quot; : error.getDescription()));\n        setResultToToast(&quot;Execution finished: &quot; + (error == null ? &quot;Success!&quot; : error.getDescription()));\n        TrackingTestActivity.this.runOnUiThread(new Runnable() {\n\n            @Override\n            public void run() {\n                mConfirmBtn.setVisibility(View.INVISIBLE);\n                mStopBtn.setVisibility(View.INVISIBLE);\n                mStopBtn.setClickable(false);\n                mPushBackTv.setVisibility(View.VISIBLE);\n                mPushBackSw.setVisibility(View.VISIBLE);\n            }\n        });\n    }\n\n    /**\n     * @Description MissionProgressStatusCallback Method\n     */\n    @Override\n    public void missionProgressStatus(DJIMissionProgressStatus progressStatus) {\n        if (progressStatus instanceof DJIActiveTrackMissionProgressStatus) {\n            DJIActiveTrackMissionProgressStatus trackingStatus = (DJIActiveTrackMissionProgressStatus)progressStatus;\n            StringBuffer sb = new StringBuffer();\n            Utils.addLineToSB(sb, &quot;center x&quot;, trackingStatus.getTrackingRect().centerX());\n            Utils.addLineToSB(sb, &quot;center y&quot;, trackingStatus.getTrackingRect().centerY());\n            Utils.addLineToSB(sb, &quot;width&quot;, trackingStatus.getTrackingRect().width());\n            Utils.addLineToSB(sb, &quot;height&quot;, trackingStatus.getTrackingRect().height());\n            Utils.addLineToSB(sb, &quot;Executing State&quot;, trackingStatus.getExecutionState().name());\n            Utils.addLineToSB(sb, &quot;is human&quot;, trackingStatus.isHuman());\n            Utils.addLineToSB(sb, &quot;Error&quot;, trackingStatus.getError() == null ? &quot;Null&quot; : trackingStatus.getError().getDescription());\n            setResultToText(sb.toString());\n            updateActiveTrackRect(mConfirmBtn, trackingStatus);\n        }\n    }</code></pre>\n<p>  When the mission finish executing, the <code>onResult()</code> callback method will be called, and we can update the UI and show result here. Moreover, we can use the <code>missionProgressStatus()</code> callback method to update the mission progress status by showing logs on <code>mPushInfoTv</code> TextView and update the <code>mConfirmBtn</code> location on screen.</p>\n<p>  For more implementation details of the TrackingTestActivity.java file, please check the Github source code. </p>\n<p>Now let&#39;s build and run the project, if everything goes well, you should be able to use the ActiveTrack mission of Phantom 4 now. </p>\n<blockquote>\n<p><strong>Important</strong>: Remember to switch the remote controller to <strong>P</strong> mode before you test the ActiveTrack mission.</p>\n</blockquote>\n<p>Here is a gif animation for you to get a better understanding of using the ActiveTrack mission:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/Phantom4Missions/activeTrackAnimate.gif\" alt=\"ActiveTrackMissionGif\"></p>\n<p>   In the animation, you can see there is a person standing there, you can touch the screen to draw a green rectangle on him. Then the &quot;OK&quot; text will appear on the green rectangle to ask you for confirmation. You can tap on the rectangle to confirm it.</p>\n<p>   After the confirmation, the ActiveTrack mission starts. The person walks around and the green rectangle will follow it to track its movement. This means that Phantom 4 is now tracking you automatically!</p>\n<p>   Press the <strong>X</strong> button if you want to stop the ActiveTrack mission. By the way, you can try to switch on the &quot;RetreatEnabled&quot; switcher on the top left corner of the screen to enable the <strong>Retreat</strong> feature. Once you go towards the Phantom 4, it will fly backwards.</p>\n<h3 id=\"using-the-dji-assistant-2-for-mission-testing\">Using the DJI Assistant 2 for Mission Testing</h3>\n<p>Since most of our developers don&#39;t have a perfect testing environment, like a big indoor space, wide backyard, etc. If we need to go outdoors and bring our latop to debug and test our application everytime, it&#39;s time consuming and not efficient. </p>\n<p>Luckily, we have a new DJI Assistant 2 (Includes the 3D Simulator) for you to test the mission easily on your Mac. The simulator creates a virtual 3D environment from flight data transmitted to the Mac.</p>\n<p>You can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-Assistant-2-Simulator\">Using DJI Assistant 2 Simulator</a> for its basic usage.</p>\n<p>Now you can connect your Android which is running the demo application to the remote controller, and start to test the <strong>TapFly</strong> and <strong>ActiveTrack</strong> missions on the simulator of DJI Assistant 2.  </p>\n<p>By the way, you can use Wireless Android Debug Bridge (adb) to debug the app using Android Studio when your android device is connecting to the remote controller. If you are not familiar with Android Debug Bridge, please check this <a href=\"http://developer.android.com/tools/help/adb.html\" target=\"_blank\"> link </a> for details.</p>\n<h3 id=\"summary\">Summary</h3>\n<p>  Congratulations! You&#39;ve finished the demo project and implement the two cool <strong>TapFly</strong> and <strong>ActiveTrack</strong> missions using DJI Mobile SDK. It&#39;s easy and straightforward. You&#39;ve learned how to use the DJITapFlyMission, DJIActiveTrackMission and DJIMissionManager to implement the features.</p>\n<p>  But, In order to make a cool <strong>TapFly</strong> and <strong>ActiveTrack</strong> mission application, you still have a long way to go. You can add more necessary features like showing the battery percentage, GPS signal quality, add a checklist like DJI Go app to check the aircraft status before flying, etc. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a TapFly and ActiveTrack Missions Application","version":"v3.2.1","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-Phantom4Missions"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI Forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use the DJISimulator in your Android Studio project using DJI Mobile SDK. With the help of Virtual Stick control, you can input Virtual Stick flight control data and check the changes of simulator state in real time.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<p>We use Phantom 4 as an example to make this demo.</p>\n<p>Let&#39;s get started!</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>DJISimulator is used to control the aircraft in a simulated environment based on the virtual stick input. The simulated aircraft state information will also be displayed on the screen.</p>\n<p>You can use the <code>DJISimulator</code> class in <code>DJIFlightController</code> to control the simulation. It allows both manual and automated flights to be simulated without actually flying the aircraft.</p>\n<p>Additionally, simulator initialization, monitoring and termination can be controlled directly through the SDK allowing for application development in continuous integration environments.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<p>In the <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a> tutorial, you have learned how to import the DJI Android SDK into your Android Studio project and activate your application. If you haven&#39;t read that previously, please take a look at it. Once you&#39;ve done that, let&#39;s continue to create the project.</p>\n<h3 id=\"importing-sdk-library\">Importing SDK Library</h3>\n<p><strong>1</strong>. Open Android Studio and select <strong>File -&gt; New -&gt; New Project</strong> to create a new project, named &#39;DJISimulatorDemo&#39;. Enter the company domain and package name (Here we use &quot;com.dji.simulatorDemo&quot;) you want and press Next. Set the mimimum SDK version as <code>API 19: Android 4.4 (KitKat)</code> for &quot;Phone and Tablet&quot; and press Next. Then select &quot;Empty Activity&quot; and press Next. Lastly, leave the Activity Name as &quot;MainActivity&quot;, and the Layout Name as &quot;activity_main&quot;, Press &quot;Finish&quot; to create the project.</p>\n<p> <strong>2</strong>. Unzip the Android SDK package downloaded from <a href=\"http://developer.dji.com/mobile-sdk/downloads/\" target=\"_blank\">DJI Developer Website</a>. Go to <strong>File -&gt; New -&gt; Import Module</strong>, enter the &quot;API Library&quot; folder location of the downloaded Android SDK package in the &quot;Source directory&quot; field. A &quot;dJISDKLib&quot; name will show in the &quot;Module name&quot; field. Press Next and Finish button to finish the settings.</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/importsSDK.png\" alt=\"importSDK\"></p>\n<p> <strong>3</strong>. Next, double click on the &quot;build.gradle(Module: app)&quot; in the project navigator to open it and replace the content with the followings:</p>\n<pre><code class=\"lang-java\">apply plugin: &#39;com.android.application&#39;\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion &quot;23.0.3&quot;\n\n    defaultConfig {\n        applicationId &quot;com.dji.simulatorDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n\n}</code></pre>\n<p>  Here, we modify its dependencies by adding <code>compile project(&#39;:dJISDKLIB&#39;)</code> in the &quot;dependencies&quot; part at the bottom, and change the <strong>compileSdkVersion</strong>, <strong>buildToolsVersion</strong> number, etc. </p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/buildGradle.png\" alt=\"configureAndroidSDK\"></p>\n<p> Then, select the <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> on the top bar and wait for Gradle project sync finish.</p>\n<p> <strong>4</strong>. Let&#39;s right click on the &#39;app&#39; module in the project navigator and click &quot;Open Module Settings&quot; to open the Project Struture window. Navigate to the &quot;Dependencies&quot; tab, you should find the &quot;dJISDKLIB&quot; appear in the list. Your SDK environmental setup should be ready now!</p>\n<p> <img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/dependencies.png\" alt=\"dependencies\"></p>\n<p> <strong>5</strong>. Now, open the MainActivity.java file in <code>com.dji.simulatorDemo</code> package and add <code>import dji.sdk.SDKManager.DJISDKManager;</code> at the bottom of the import classes section as shown below:</p>\n<pre><code class=\"lang-java\">package com.dji.simulatorDemo;\n\nimport dji.sdk.SDKManager.DJISDKManager;</code></pre>\n<p>  Wait for a few seconds and check if the words turn red, if they remain gray color, it means you can use DJI Android SDK in your project successfully now.</p>\n<h3 id=\"buidling-the-layouts-of-activity\">Buidling the Layouts of Activity</h3>\n<h4 id=\"1-creating-djisimulatorapplication-class\">1. Creating DJISimulatorApplication Class</h4>\n<p>Right-click on the package <code>com.dji.simulatorDemo</code> in the project navigator and choose <strong>New -&gt; Java Class</strong>, Type in &quot;DJISimulatorApplication&quot; in the Name field and select &quot;Class&quot; as Kind field content.</p>\n<p>Next, Replace the code of the &quot;FPVDemoApplication.java&quot; file with the following:</p>\n<pre><code class=\"lang-java\">package com.dji.simulatorDemo;\nimport android.app.Application;\n\npublic class DJISimulatorApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n}</code></pre>\n<p>Here, we override the onCreate() method. We can do some settings when the application is created here.</p>\n<h4 id=\"2-implementing-the-joystick-control\">2. Implementing the Joystick Control</h4>\n<p>In order to input some simulated data, like <code>pitch</code>, <code>roll</code>, <code>yaw</code> and <code>verticalThrottle</code>, you may need a joystick control. Let&#39;s work on the implementation of it.</p>\n<p>We implement the joystick control base on an open source Github project <a href=\"https://github.com/Ville-/OnScreenJoystick/tree/master/OnScreenJoystick/src/com/salamientertainment/view/onscreenjoystick\" target=\"_blank\"> OnScreenJoystick </a>. You can download the Github project to get the <strong>OnScreenJoystick.java</strong> and <strong>OnScreenJoystickListener.java</strong> files or get them from this tutorial&#39;s Github Sample project. Now, copy and paste these two java files to the folder of &quot;com.dji.simulatorDemo&quot; on the left navigator as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/onScreenJoystick.png\" alt=\"onScreenJoystick\"></p>\n<p>When you touch on the <strong>OnScreenJoystick</strong> view, the <code>onTouch</code> method in OnScreenJoystickListener will be called and you can get the &quot;OnScreenJoystick&quot; joystick object, and the x and y coordinate of the knob parameters from this method as shown below:</p>\n<pre><code class=\"lang-java\">/** Called when the joystick is touched.\n * @param joystick The joystick which has been touched.\n * @param pX The x coordinate of the knob. Values are between -1 (left) and 1 (right).\n * @param pY The y coordinate of the knob. Values are between -1 (down) and 1 (up).\n */\npublic void onTouch(final OnScreenJoystick joystick, final float pX, final float pY);</code></pre>\n<blockquote>\n<p>Note: The values for x coordinate of the knob are between -1 (left) and 1 (right), the values for y coordinate of the knob are between -1 (down) and 1 (up).</p>\n</blockquote>\n<p>Next, copy and paste the <strong>joystick.png</strong> and <strong>joystick_bg.png</strong> files from this tutorial&#39;s Github sample project to the <strong>mipmap</strong> folder on the left navigator as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/joystickImages.png\" alt=\"joystickImages\"></p>\n<h4 id=\"3-implementing-ui-elements-in-mainactivity-class\">3. Implementing UI Elements in MainActivity Class</h4>\n<p>Now, let&#39;s open the MainActivity.java file and replace the code with the followings:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends Activity implements View.OnClickListener {\n\n    private static final String TAG = MainActivity.class.getName();\n    protected TextView mConnectStatusTextView;\n    private Button mBtnEnableVirtualStick;\n    private Button mBtnDisableVirtualStick;\n    private ToggleButton mBtnSimulator;\n    private Button mBtnTakeOff;\n    private Button mBtnLand;\n    private TextView mTextView;\n\n    private OnScreenJoystick mScreenJoystickRight;\n    private OnScreenJoystick mScreenJoystickLeft;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // When the compile and target version is higher than 22, please request the\n        // following permissions at runtime to ensure the\n        // SDK work well.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }\n\n        setContentView(R.layout.activity_main);\n        initUI();\n    }\n\n    @Override\n    public void onResume() {\n        Log.e(TAG, &quot;onResume&quot;);\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        Log.e(TAG, &quot;onPause&quot;);\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        Log.e(TAG, &quot;onStop&quot;);\n        super.onStop();\n    }\n\n    public void onReturn(View view){\n        Log.e(TAG, &quot;onReturn&quot;);\n        this.finish();\n    }\n\n    @Override\n    protected void onDestroy() {\n        Log.e(TAG, &quot;onDestroy&quot;);\n        super.onDestroy();\n    }\n\n    private void initUI() {\n\n        mBtnEnableVirtualStick = (Button) findViewById(R.id.btn_enable_virtual_stick);\n        mBtnDisableVirtualStick = (Button) findViewById(R.id.btn_disable_virtual_stick);\n        mBtnTakeOff = (Button) findViewById(R.id.btn_take_off);\n        mBtnLand = (Button) findViewById(R.id.btn_land);\n        mBtnSimulator = (ToggleButton) findViewById(R.id.btn_start_simulator);\n        mTextView = (TextView) findViewById(R.id.textview_simulator);\n        mConnectStatusTextView = (TextView) findViewById(R.id.ConnectStatusTextView);\n        mScreenJoystickRight = (OnScreenJoystick)findViewById(R.id.directionJoystickRight);\n        mScreenJoystickLeft = (OnScreenJoystick)findViewById(R.id.directionJoystickLeft);\n\n        mBtnEnableVirtualStick.setOnClickListener(this);\n        mBtnDisableVirtualStick.setOnClickListener(this);\n        mBtnTakeOff.setOnClickListener(this);\n        mBtnLand.setOnClickListener(this);\n\n        mBtnSimulator.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            }\n        });\n\n        mScreenJoystickLeft.setJoystickListener(new OnScreenJoystickListener(){\n\n            @Override\n            public void onTouch(OnScreenJoystick joystick, float pX, float pY) {\n          }\n        });\n\n        mScreenJoystickRight.setJoystickListener(new OnScreenJoystickListener() {\n\n            @Override\n            public void onTouch(OnScreenJoystick joystick, float pX, float pY) {\n            }\n        });\n    }\n\n    @Override\n    public void onClick(View v) {\n\n        switch (v.getId()) {\n            case R.id.btn_enable_virtual_stick:\n                break;\n            case R.id.btn_disable_virtual_stick:\n                break;\n            case R.id.btn_take_off:\n                break;\n            case R.id.btn_land:\n                break;\n            default:\n                break;\n        }\n    }\n}</code></pre>\n<p>In the code above, we implement the following features:</p>\n<p><strong>1.</strong> Create the layout UI elements variables, including two TextView <code>mConnectStatusTextView</code>, <code>mTextView</code>, four buttons <code>mBtnEnableVirtualStick</code>, <code>mBtnDisableVirtualStick</code>, <code>mBtnTakeOff</code>, <code>mBtnLand</code>, one Toggle Button <code>mBtnSimulator</code> and two OnScreenJoystick control <code>mScreenJoystickRight</code> and <code>mScreenJoystickLeft</code>. </p>\n<p><strong>2.</strong> In the <code>onCreate()</code> method, we request several permissions at runtime to ensure the SDK works well when the compile and target SDK version is higher than 22(Like Android Marshmallow 6.0 device and API 23). Then invoke the <code>initUI()</code> method to initialize UI variables and their listeners.</p>\n<p><strong>3.</strong> In the <code>initUI()</code> method, we first initialize the UI elements variables, then set the click listener of the four buttons to &quot;this&quot;. Moreover, implement the <code>onCheckedChanged()</code> method of toggle button <code>mBtnSimulator</code>&#39;s &quot;setOnCheckedChangeListener&quot;. Finally, implement the <code>onTouch()</code> method of the two <code>OnScreenJoystick</code> objects&#39; &quot;setJoystickListener&quot;.</p>\n<p><strong>4.</strong> Override the <code>onClick()</code> method to implement the four buttons&#39; click actions.</p>\n<h4 id=\"4-implementing-the-mainactivity-layout\">4. Implementing the MainActivity Layout</h4>\n<p>Open the <strong>activity_main.xml</strong> layout file and replace the code with the following:</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;RelativeLayout\n        android:id=&quot;@+id/main_title_rl&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;40dp&quot;\n        android:background=&quot;@color/black_overlay&quot; &gt;\n\n        &lt;ImageButton\n            android:id=&quot;@+id/ReturnBtn&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;35dp&quot;\n            android:layout_alignParentLeft=&quot;true&quot;\n            android:layout_centerVertical=&quot;true&quot;\n            android:layout_marginLeft=&quot;5dp&quot;\n            android:adjustViewBounds=&quot;true&quot;\n            android:background=&quot;@android:color/transparent&quot;\n            android:onClick=&quot;onReturn&quot;\n            android:scaleType=&quot;centerInside&quot;\n            android:src=&quot;@drawable/selector_back_button&quot; /&gt;\n\n        &lt;TextView\n            android:id=&quot;@+id/ConnectStatusTextView&quot;\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_centerInParent=&quot;true&quot;\n            android:text=&quot;SimulatorDemo&quot;\n            android:textColor=&quot;@android:color/white&quot;\n            android:textSize=&quot;19sp&quot; /&gt;\n    &lt;/RelativeLayout&gt;\n\n    &lt;TextView\n        android:layout_marginTop=&quot;70dp&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_centerHorizontal=&quot;true&quot;\n        android:text=&quot;Simulator is off.&quot;\n        android:id=&quot;@+id/textview_simulator&quot;/&gt;\n\n    &lt;Button\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Enable Virtual Stick&quot;\n        style=&quot;@style/common_button&quot;\n        android:id=&quot;@+id/btn_enable_virtual_stick&quot;\n        android:layout_marginLeft=&quot;5dp&quot;\n        android:layout_alignTop=&quot;@+id/btn_start_simulator&quot;\n        android:layout_alignStart=&quot;@+id/directionJoystickRight&quot;\n        android:layout_marginTop=&quot;0dp&quot; /&gt;\n\n    &lt;Button\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Disable Virtual Stick&quot;\n        style=&quot;@style/common_button&quot;\n        android:id=&quot;@+id/btn_disable_virtual_stick&quot;\n        android:layout_below=&quot;@+id/btn_enable_virtual_stick&quot;\n        android:layout_alignStart=&quot;@+id/btn_enable_virtual_stick&quot;\n        android:layout_marginLeft=&quot;0dp&quot;\n        android:layout_alignEnd=&quot;@+id/btn_enable_virtual_stick&quot; /&gt;\n\n    &lt;Button\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Take Off&quot;\n        style=&quot;@style/common_button&quot;\n        android:id=&quot;@+id/btn_take_off&quot;\n        android:layout_alignTop=&quot;@+id/btn_disable_virtual_stick&quot;\n        android:layout_alignStart=&quot;@+id/btn_start_simulator&quot;\n        android:layout_marginTop=&quot;0dp&quot;\n        android:layout_alignEnd=&quot;@+id/btn_start_simulator&quot; /&gt;\n\n    &lt;ToggleButton\n        android:id=&quot;@+id/btn_start_simulator&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Start Simulator&quot;\n        android:textOff=&quot;Start Simulator&quot;\n        android:textOn=&quot;Stop Simulator&quot;\n        style=&quot;@style/common_button&quot;\n        android:layout_below=&quot;@+id/textview_simulator&quot;\n        android:layout_toEndOf=&quot;@+id/btn_enable_virtual_stick&quot;\n        android:layout_marginTop=&quot;107dp&quot;\n        android:layout_marginLeft=&quot;10dp&quot; /&gt;\n\n    &lt;Button\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Land&quot;\n        style=&quot;@style/common_button&quot;\n        android:id=&quot;@+id/btn_land&quot;\n        android:layout_alignTop=&quot;@+id/btn_take_off&quot;\n        android:layout_marginTop=&quot;0dp&quot;\n        android:layout_alignEnd=&quot;@+id/directionJoystickLeft&quot;\n        android:layout_toEndOf=&quot;@+id/btn_take_off&quot;\n        android:layout_marginLeft=&quot;10dp&quot; /&gt;\n\n    &lt;com.dji.simulatorDemo.OnScreenJoystick\n        android:id=&quot;@+id/directionJoystickRight&quot;\n        android:layout_width=&quot;130dp&quot;\n        android:layout_height=&quot;130dp&quot;\n        android:layout_alignParentLeft=&quot;true&quot;\n        android:layout_alignParentBottom=&quot;true&quot;\n        android:layout_marginBottom=&quot;10dp&quot;\n        android:layout_marginLeft=&quot;10dp&quot;\n        android:background=&quot;@mipmap/joystick_bg&quot;/&gt;\n\n    &lt;com.dji.simulatorDemo.OnScreenJoystick\n        android:id=&quot;@+id/directionJoystickLeft&quot;\n        android:layout_width=&quot;130dp&quot;\n        android:layout_height=&quot;130dp&quot;\n        android:layout_alignParentRight=&quot;true&quot;\n        android:layout_alignParentBottom=&quot;true&quot;\n        android:layout_marginBottom=&quot;10dp&quot;\n        android:layout_marginRight=&quot;10dp&quot;\n        android:background=&quot;@mipmap/joystick_bg&quot;/&gt;\n\n&lt;/RelativeLayout&gt;</code></pre>\n<p> In the xml file, first, we implement the RelativeLayout element. We declare an ImageButton(id: ReturnBtnCamera) element to exit the application, and a TextView(id: ConnectStatusTextView) element to show the connection status text. </p>\n<p>  Next, create a TextureView(id: textview_simulator) element to show the simulator state infos. Moreover, create the &quot;Enable Virtual Stick&quot; button(id: btn_enable_virtual_stick), &quot;Disable Virtual Stick&quot; button(id: btn_disable_virtual_stick), &quot;Take Off&quot; button(id: btn_take_off), &quot;Land&quot; button(id: btn_land). Moreover, create the &quot;Start Simulator&quot; toggle button(id: btn_start_simulator) and set its <strong>textOn</strong> and <strong>textOff</strong> params to &quot;Start Simulator&quot; and &quot;Stop Simulator&quot;.</p>\n<p>  Lastly, we create two OnScreenJoystick elements (id: directionJoystickRight) and (id:directionJoystickLeft) for joystick control.</p>\n<h4 id=\"5-configuring-the-resources\">5. Configuring the Resources</h4>\n<p>  Once you finish the above steps, let&#39;s add some resources files to the <strong>res</strong> folder on the left navigator of Android Studio.</p>\n<p>  Copy the following image and xml files from the tutorial Github Sample project&#39;s <strong>drawable</strong> folder to your project, they are used for the button&#39;s UI:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/drawable.png\" alt=\"drawable\"></p>\n<p>  Next, open the &quot;colors.xml&quot; file and add the following code at the bottom to declare the black overlay color:</p>\n<pre><code class=\"lang-xml\">&lt;color name=&quot;black_overlay&quot;&gt;#66000000&lt;/color&gt;</code></pre>\n<p> Moreover, open the &quot;strings.xml&quot; file and add the &quot;success&quot; string:</p>\n<pre><code class=\"lang-xml\">&lt;string name=&quot;success&quot;&gt;Success&lt;/string&gt;</code></pre>\n<p> Lastly, open the &quot;styles.xml&quot; file and add the following code to declare the &quot;common_button&quot; style:</p>\n<pre><code class=\"lang-xml\">&lt;!-- Common button style --&gt;\n&lt;style name=&quot;common_button&quot;&gt;\n    &lt;item name=&quot;android:layout_width&quot;&gt;100dp&lt;/item&gt;\n    &lt;item name=&quot;android:layout_height&quot;&gt;45dp&lt;/item&gt;\n    &lt;item name=&quot;android:layout_marginTop&quot;&gt;10dp&lt;/item&gt;\n    &lt;item name=&quot;android:background&quot;&gt;@drawable/round_btn&lt;/item&gt;\n    &lt;item name=&quot;android:paddingLeft&quot;&gt;5dp&lt;/item&gt;\n    &lt;item name=&quot;android:paddingRight&quot;&gt;5dp&lt;/item&gt;\n    &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;\n    &lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt;\n    &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;\n&lt;/style&gt;</code></pre>\n<h3 id=\"registering-the-application\">Registering the Application</h3>\n<p>  Once you finish the above steps, let&#39;s register the application on DJI Developer Website and get the <strong>App Key</strong>. If you are not familiar with the App Key, please check <a href=\"../quick-start/index.html#generate-an-app-key\">Generate an App Key</a> for details.</p>\n<p><strong>1.</strong> Open the AndroidManifest.xml file and add the following elements on top of the <strong>application</strong> element: </p>\n<pre><code class=\"lang-xml\">&lt;!-- SDK permission requirement --&gt;\n    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.host&quot;\n        android:required=&quot;false&quot; /&gt;\n    &lt;uses-feature\n        android:name=&quot;android.hardware.usb.accessory&quot;\n        android:required=&quot;true&quot; /&gt;\n\n&lt;!-- SDK requirement permission end --&gt;</code></pre>\n<p>Here, we request permissions that the application must be granted in order for it to register DJI SDK correctly. Also we declare the camera and usb hardwares which is used by the application.</p>\n<p>Moreover, let&#39;s add the following elements as childs of element on top of the &quot;MainActivity&quot; activity element as shown below:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n&lt;meta-data\n    android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;Please enter your APP Key here.&quot; /&gt;\n\n&lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n&lt;/service&gt;\n\n&lt;activity\n    android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n    android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n    &lt;/intent-filter&gt;\n\n    &lt;meta-data\n     android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n        android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n&lt;/activity&gt;\n\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p>In the code above, you should substitude your <strong>App Key</strong> of the application for &quot;Please enter your App Key here.&quot; in the <strong>value</strong> attribute under the <code>android:name=&quot;com.dji.sdk.API_KEY&quot;</code> attribute.</p>\n<p><strong>2.</strong> After you finish the steps above, open the &quot;DJISimulatorApplication.java&quot; file and replace the code with the same file in the Github Source Code, here we explain the important parts of it:</p>\n<pre><code class=\"lang-java\">\n@Override\npublic void onCreate() {\nsuper.onCreate();\n\nmHandler = new Handler(Looper.getMainLooper());\n\n/**\n * handles SDK Registration using the API_KEY\n */\nDJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n}\n\nprivate DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n\n@Override\npublic void onGetRegisteredResult(DJIError error) {\n    if(error == DJISDKError.REGISTRATION_SUCCESS) {\n        DJISDKManager.getInstance().startConnectionToProduct();\n    } else {\n        Handler handler = new Handler(Looper.getMainLooper());\n        handler.post(new Runnable() {\n\n            @Override\n            public void run() {\n                Toast.makeText(getApplicationContext(),\n                        R.string.sdk_registration_message,\n                        Toast.LENGTH_LONG).show();\n            }\n        });\n\n    }\n    Log.v(TAG, error.getDescription());\n}\n\n@Override\npublic void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n\n    Log.v(TAG, String.format(&quot;onProductChanged oldProduct:%s, newProduct:%s&quot;, oldProduct, newProduct));\n    mProduct = newProduct;\n    if(mProduct != null) {\n        mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n    }\n\n    notifyStatusChange();\n}\n\nprivate DJIBaseProduct.DJIBaseProductListener mDJIBaseProductListener = new DJIBaseProduct.DJIBaseProductListener() {\n\n    @Override\n    public void onComponentChange(DJIBaseProduct.DJIComponentKey key, DJIBaseComponent oldComponent, DJIBaseComponent newComponent) {\n\n        if(newComponent != null) {\n            newComponent.setDJIComponentListener(mDJIComponentListener);\n        }\n        Log.v(TAG, String.format(&quot;onComponentChange key:%s, oldComponent:%s, newComponent:%s&quot;, key, oldComponent, newComponent));\n\n        notifyStatusChange();\n    }\n\n    @Override\n    public void onProductConnectivityChanged(boolean isConnected) {\n\n        Log.v(TAG, &quot;onProductConnectivityChanged: &quot; + isConnected);\n\n        notifyStatusChange();\n    }\n\n};</code></pre>\n<p>Here, we implement several features:</p>\n<ol>\n<li>We override the <code>onCreate()</code> method to initialize the DJISDKManager.</li>\n<li>Implement the two interface methods of <code>DJISDKManagerCallback</code>. You can use the <code>onGetRegisteredResult()</code> method to check the Application registration status and show text message here. Using the <code>onProductChanged()</code> method, we can check the product connection status and invoke the <code>notifyStatusChange()</code> method to notify status changes.</li>\n<li>Implement the two interface methods of <code>DJIBaseProductListener</code>. You can use the <code>onComponentChange()</code> method to check the product component change status and invoke the <code>notifyStatusChange()</code> method to notify status changes. Also, you can use the <code>onProductConnectivityChanged()</code> method to notify the product connectivity changes.</li>\n</ol>\n<p>Now let&#39;s build and run the project and install it to your Android device. If everything goes well, you should see the &quot;success&quot; textView like the following screenshot when you register the app successfully.</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<blockquote>\n<p><strong>Important:</strong> Please check if the &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; and &quot;x86&quot; lib folders has been added to your jnLibs folder in <strong>dJISDKLib</strong> successfully before testing resgistering the app. </p>\n<p><img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/armeabi.png\" alt=\"armeabi\"></p>\n</blockquote>\n<p>For more details of integrating and activating the SDK in Android Studio, please check: <a href=\"../application-development-workflow/workflow-integrate.html#android-studio-project-integration\">Android Studio Project Integration</a>.</p>\n<h2 id=\"working-on-mainactivity-class\">Working on MainActivity class</h2>\n<h3 id=\"update-product-connection-status\">Update Product Connection Status</h3>\n<p>Now, let&#39;s update the product connection status. Open the &quot;MainActivity.java&quot; file and add the following code at the bottom of <code>onCreate()</code> method:</p>\n<pre><code class=\"lang-java\">    IntentFilter filter = new IntentFilter();\n    filter.addAction(DJISimulatorApplication.FLAG_CONNECTION_CHANGE);\n    registerReceiver(mReceiver, filter);</code></pre>\n<p>The code above register the broadcast receiver for receiving the device connection&#39;s changes.</p>\n<p>Next, add the following four methods below <code>onCreate()</code> and override the <code>onResume()</code> and <code>onDestroy()</code> methods as shown below:</p>\n<pre><code class=\"lang-java\">protected BroadcastReceiver mReceiver = new BroadcastReceiver() {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            updateTitleBar();\n        }\n    };\n\npublic void showToast(final String msg) {\n    runOnUiThread(new Runnable() {\n        public void run() {\n            Toast.makeText(MainActivity.this, msg, Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n\nprivate void updateTitleBar() {\n    if(mConnectStatusTextView == null) return;\n    boolean ret = false;\n    DJIBaseProduct product = DJISimulatorApplication.getProductInstance();\n    if (product != null) {\n        if(product.isConnected()) {\n            //The product is connected\n            mConnectStatusTextView.setText(DJISimulatorApplication.getProductInstance().getModel() + &quot; Connected&quot;);\n            ret = true;\n        } else {\n            if(product instanceof DJIAircraft) {\n                DJIAircraft aircraft = (DJIAircraft)product;\n                if(aircraft.getRemoteController() != null &amp;&amp; aircraft.getRemoteController().isConnected()) {\n                    // The product is not connected, but the remote controller is connected\n                    mConnectStatusTextView.setText(&quot;only RC Connected&quot;);\n                    ret = true;\n                }\n            }\n        }\n    }\n\n    if(!ret) {\n        // The product or the remote controller are not connected.\n        mConnectStatusTextView.setText(&quot;Disconnected&quot;);\n    }\n}\n\n@Override\npublic void onResume() {\n    Log.e(TAG, &quot;onResume&quot;);\n    super.onResume();\n    updateTitleBar();\n}\n\n@Override\nprotected void onDestroy() {\n    Log.e(TAG, &quot;onDestroy&quot;);\n    unregisterReceiver(mReceiver);\n\n    super.onDestroy();\n}</code></pre>\n<p>As the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Create a BroadcastReceiver object <code>mReceiver</code>, override its <code>onReceive()</code> method and invoke the <code>updateTitleBar()</code> method to update the <code>mConnectStatusTextView</code>&#39;s content.</p>\n<p><strong>2.</strong> Create the <code>showToast()</code> method to display the toast notification message to users.</p>\n<p><strong>3.</strong> In the <code>updateTitleBar()</code> method, we first check if mConnectStatusTextView is null, then create a DJIBaseProduct object by invoking the <code>getProductInstance()</code> method of DJISimulatorApplication. </p>\n<p>Moreover, invoke the <code>isConnected()</code> method of DJIBaseProduct to check if the product is connected, then invoke the <code>getModel()</code> method of DJIBaseProduct to get the model name and show it in <code>mConnectStatusTextView</code>. If the product is not connected, cast the <code>product</code> object as DJIAircraft object, and check if the remoteController is not null and if it&#39;s connected, then update the <code>mConnectStatusTextView</code>&#39;s text content. </p>\n<p>Lastly, if the product or remote controller are not connected, then update the <code>mConnectStatusTextView</code>&#39;s text with &quot;Disconnected&quot;.</p>\n<p><strong>4.</strong> We override the <code>onResume()</code> method to invoke the <code>updateTitleBar()</code> method to update <code>mConnectStatusTextView</code> when the activity start interacting with the user. Then override the <code>onDestroy()</code> method to unregister the BroadcastReceiver object.</p>\n<p>Now let&#39;s build and run the project and install it to your Android device. Then connect the demo application to your Phantom 4 (Please check <a href=\"../application-development-workflow/workflow-run.html\">Run Application</a> for more details), if everything goes well, you should see the title textView content updates to &quot;Phantom_4 Connected&quot; as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/updateTitleBar.png\" alt=\"registerSuccess\"></p>\n<h3 id=\"implementing-virtual-stick-control\">Implementing Virtual Stick Control</h3>\n<p> Since we have implemented the Joystick control, now let&#39;s continue to work on sending virtual stick flight control data to the aircraft. First, we create a DJIFlightController variable <code>mFlightController</code>, a Timer variable <code>mSendVirtualStickDataTimer</code>, a SendVirtualStickDataTask(extends from TimerTask class) variable <code>mSendVirtualStickDataTask</code> and four float variables on top of <code>onCreate()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">    private DJIFlightController mFlightController;\n    private Timer mSendVirtualStickDataTimer;\n    private SendVirtualStickDataTask mSendVirtualStickDataTask;\n\n    private float mPitch;\n    private float mRoll;\n    private float mYaw;\n    private float mThrottle;</code></pre>\n<p> We may use the <code>mPitch</code>, <code>mRoll</code>, <code>mYaw</code> and <code>mThrottle</code> variables to store the <strong>pitch</strong>, <strong>roll</strong>, <strong>yaw</strong> and <strong>vertical throttle</strong> virtual stick flight control data.</p>\n<p> Next, create the <code>initFlightController()</code> method, invoke it in the <code>onResume()</code> method and implement the SendVirtualStickDataTask class as shown below:</p>\n<pre><code class=\"lang-java\">private void initFlightController() {\n\n    DJIAircraft aircraft = DJISimulatorApplication.getAircraftInstance();\n    if (aircraft == null || !aircraft.isConnected()) {\n        showToast(&quot;Disconnected&quot;);\n        mFlightController = null;\n        return;\n    } else {\n        mFlightController = aircraft.getFlightController();\n    }\n}\n\n@Override\npublic void onResume() {\n    Log.e(TAG, &quot;onResume&quot;);\n    super.onResume();\n    updateTitleBar();\n    initFlightController();\n}\n\nclass SendVirtualStickDataTask extends TimerTask {\n\n    @Override\n    public void run() {\n\n        if (mFlightController != null) {\n            mFlightController.sendVirtualStickFlightControlData(\n                    new DJIFlightControllerDataType.DJIVirtualStickFlightControlData(\n                            mPitch, mRoll, mYaw, mThrottle\n                    ), new DJIBaseComponent.DJICompletionCallback() {\n                        @Override\n                        public void onResult(DJIError djiError) {\n\n                        }\n                    }\n            );\n        }\n    }\n}</code></pre>\n<p>In the code above, we implement the following features:</p>\n<p><strong>1.</strong> In the <code>initFlightController()</code> method, we first check if the aircraft is not null and is connected, then invoke the <code>getFlightController()</code> method of DJIAircraft to get the <code>mFlightController</code> variable.</p>\n<p><strong>2.</strong> Next, extends from TimerTask class to create the <strong>SendVirtualStickDataTask</strong> class. Inside the class, override the <code>run()</code> method to invoke the <code>sendVirtualStickFlightControlData()</code> method of DJIFlightController to send virtual stick flight control data. Here, we create the <strong>DJIVirtualStickFlightControlData</strong> object from the four float variables declared before: <code>mPitch</code>, <code>mRoll</code>, <code>mYaw</code> and <code>mThrottle</code>.</p>\n<p>Once you finish the above steps, let&#39;s implement the <code>setJoystickListener()</code> methods of <code>mScreenJoystickLeft</code> and <code>mScreenJoystickRight</code> variables at the bottom of <code>initUI()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">    mScreenJoystickLeft.setJoystickListener(new OnScreenJoystickListener(){\n\n        @Override\n        public void onTouch(OnScreenJoystick joystick, float pX, float pY) {\n            if(Math.abs(pX) &lt; 0.02 ){\n                pX = 0;\n            }\n\n            if(Math.abs(pY) &lt; 0.02 ){\n                pY = 0;\n            }\n            float pitchJoyControlMaxSpeed = DJIFlightControllerDataType.DJIVirtualStickRollPitchControlMaxVelocity;\n            float rollJoyControlMaxSpeed = DJIFlightControllerDataType.DJIVirtualStickRollPitchControlMaxVelocity;\n\n            mPitch = (float)(pitchJoyControlMaxSpeed * pY);\n\n            mRoll = (float)(rollJoyControlMaxSpeed * pX);\n\n            if (null == mSendVirtualStickDataTimer) {\n                mSendVirtualStickDataTask = new SendVirtualStickDataTask();\n                mSendVirtualStickDataTimer = new Timer();\n                mSendVirtualStickDataTimer.schedule(mSendVirtualStickDataTask, 0, 200);\n            }\n\n        }\n\n    });\n\n    mScreenJoystickRight.setJoystickListener(new OnScreenJoystickListener() {\n\n        @Override\n        public void onTouch(OnScreenJoystick joystick, float pX, float pY) {\n            if(Math.abs(pX) &lt; 0.02 ){\n                pX = 0;\n            }\n\n            if(Math.abs(pY) &lt; 0.02 ){\n                pY = 0;\n            }\n                 float verticalJoyStickControlMaxSpeed = DJIFlightControllerDataType.DJIVirtualStickVerticalControlMaxVelocity;\n                float yawJoyStickControlMaxSpeed = DJIFlightControllerDataType.DJIVirtualStickYawControlMaxAngularVelocity;\n\n                mYaw = (float)(yawJoyStickControlMaxSpeed * pX);\n                mThrottle = (float)(yawJoyStickControlMaxSpeed * pY);\n\n            if (null == mSendVirtualStickDataTimer) {\n                mSendVirtualStickDataTask = new SendVirtualStickDataTask();\n                mSendVirtualStickDataTimer = new Timer();\n                mSendVirtualStickDataTimer.schedule(mSendVirtualStickDataTask, 0, 200);\n            }\n\n        }\n    });</code></pre>\n<p>Here, we implement the following features:</p>\n<p><strong>1.</strong> Override the <code>onTouch()</code> method of <strong>setJoystickListener</strong> and filter the <code>pX</code> and <code>pY</code> variables&#39; value by checking if they are less than 0.02. We should not send the virtual stick data to flight controller too frequently if the value is too small.</p>\n<p><strong>2.</strong> Get the maximum velocity of vertical control and maximum angle velocity of Virtual Stick, then store them to <code>verticalJoyControlMaxSpeed</code> and <code>yawJoyControlMaxSpeed</code> variables. Since the value of <code>pX</code> is between -1 (left) and 1 (right), the value of <code>pY</code> is between -1 (down) and 1 (up), we multiply by using the <code>verticalJoyControlMaxSpeed</code> and <code>yawJoyControlMaxSpeed</code> valures to update the <code>mYaw</code> and <code>mThrottle</code> data. Here we take Mode 2(American mode) of remote controller as example.</p>\n<p><strong>3.</strong> Lastly, we check if <code>mSendVirtualStickDataTimer</code> is null, and create it by invoking the <code>SendVirtualStickDataTask()</code> method. Then, create the <code>mSendVirtualStickDataTimer</code> and invoke its <code>schedule()</code> method to trigger the timer by passing <code>mSendVirtualStickDataTask</code> variable, 0 milliseconds of delay and 200 milliseconds between subsequent executions.</p>\n<p><strong>4.</strong> Similarly, implement the <code>setJoystickListener()</code> method of <code>mScreenJoystickRight</code> variable to update the <code>mYaw</code> and <code>mThrottle</code> values and trigger the timer to send virtual stick data to the aircraft&#39;s flight controller.</p>\n<p>Now, when you control the left and right joysticks, they will send the simulated virtual stick data (Including <strong>Yaw</strong>, <strong>Pitch</strong>, <strong>Roll</strong> and <strong>Vertical Throttle</strong>) to the flight controller of aircraft.</p>\n<p>Lastly, override the <code>onClick()</code> method to implement the enable and disable virtual stick control buttons click actions as shown below:</p>\n<pre><code class=\"lang-java\">@Override\n  public void onClick(View v) {\n\n    switch (v.getId()) {\n        case R.id.btn_enable_virtual_stick:\n            if (mFlightController != null){\n                mFlightController.enableVirtualStickControlMode(\n                        new DJIBaseComponent.DJICompletionCallback() {\n                            @Override\n                            public void onResult(DJIError djiError) {\n                                if (djiError != null){\n                                    showToast(djiError.getDescription());\n                                }else\n                                {\n                                    showToast(&quot;Enable Virtual Stick Success&quot;);\n                                }\n                            }\n                        }\n                );\n            }\n        break;\n\n        case R.id.btn_disable_virtual_stick:\n            if (mFlightController != null){\n                mFlightController.disableVirtualStickControlMode(\n                        new DJIBaseComponent.DJICompletionCallback() {\n                            @Override\n                            public void onResult(DJIError djiError) {\n                                if (djiError != null) {\n                                    showToast(djiError.getDescription());\n                                } else {\n                                    showToast(&quot;Disable Virtual Stick Success&quot;);\n                                }\n                            }\n                        }\n                );\n            }\n         break;\n        }\n    }</code></pre>\n<p>This invoke the <code>enableVirtualStickControlMode()</code> and <code>disableVirtualStickControlMode()</code> methods of DJIFlightController to enable and disable the virtual stick control mode.</p>\n<h3 id=\"implementing-djisimulator\">Implementing DJISimulator</h3>\n<p>Let&#39;s implement the DJISimulator feature now. In order to update the simulator state data in <code>mTextView</code>, we may need to implement the <code>setUpdatedSimulatorStateDataCallback()</code> method of DJISimulator in the <code>initFlightController()</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">   private void initFlightController() {\n\n        DJIAircraft aircraft = DJISimulatorApplication.getAircraftInstance();\n        if (aircraft == null || !aircraft.isConnected()) {\n            showToast(&quot;Disconnected&quot;);\n            mFlightController = null;\n            return;\n        } else {\n            mFlightController = aircraft.getFlightController();\n            mFlightController.getSimulator().setUpdatedSimulatorStateDataCallback(new DJISimulator.UpdatedSimulatorStateDataCallback() {\n                @Override\n                public void onSimulatorDataUpdated(final DJISimulator.DJISimulatorStateData djiSimulatorStateData) {\n                    new Handler(Looper.getMainLooper()).post(new Runnable() {\n                        @Override\n                        public void run() {\n\n                            String yaw = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getYaw());\n                            String pitch = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getPitch());\n                            String roll = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getRoll());\n                            String positionX = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getPositionX());\n                            String positionY = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getPositionY());\n                            String positionZ = String.format(&quot;%.2f&quot;, djiSimulatorStateData.getPositionZ());\n\n                            mTextView.setText(&quot;Yaw : &quot; + yaw + &quot;, Pitch : &quot; + pitch + &quot;, Roll : &quot; + roll + &quot;\\n&quot; + &quot;, PosX : &quot; + positionX +\n                                                &quot;, PosY : &quot; + positionY +\n                                                &quot;, PosZ : &quot; + positionZ);\n                        }\n                    });\n                }\n            });\n        }\n    }</code></pre>\n<p>In the code above, we override the <code>onSimulatorDataUpdated()</code> method to get the lastest simulator state data, then invoke the <code>getYaw()</code>, <code>getPitch()</code>, <code>getRoll()</code>, <code>getPositionX()</code>, <code>getPositionY()</code> and <code>getPositionZ()</code> methods of <code>DJISimulatorStateData</code> to get the updated yaw, pitch, roll, positionX, positionY and positionZ values and show them in <code>mTextView</code>.</p>\n<p>Next, override the <code>onCheckedChanged()</code> method of <code>mBtnSimulator</code> toggleButton&#39;s  <code>setOnCheckedChangeListener()</code> method as shown below:</p>\n<pre><code class=\"lang-java\">    mBtnSimulator.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            if (isChecked) {\n\n                mTextView.setVisibility(View.VISIBLE);\n\n                if (mFlightController != null) {\n                    mFlightController.getSimulator()\n                            .startSimulator(new DJISimulator.DJISimulatorInitializationData(\n                                    23, 113, 10, 10\n                            )\n                                    , new DJIBaseComponent.DJICompletionCallback() {\n                                @Override\n                                public void onResult(DJIError djiError) {\n                                    if (djiError != null) {\n                                        showToast(djiError.getDescription());\n                                    }else\n                                    {\n                                        showToast(&quot;Start Simulator Success&quot;);\n                                    }\n                                }\n                            });\n                }\n\n            } else {\n\n                mTextView.setVisibility(View.INVISIBLE);\n\n                if (mFlightController != null) {\n                    mFlightController.getSimulator()\n                            .stopSimulator(\n                                    new DJIBaseComponent.DJICompletionCallback() {\n                                        @Override\n                                        public void onResult(DJIError djiError) {\n                                            if (djiError != null) {\n                                                showToast(djiError.getDescription());\n                                            }else\n                                            {\n                                                showToast(&quot;Stop Simulator Success&quot;);\n                                            }\n                                        }\n                                    }\n                            );\n                }\n            }\n        }\n    });</code></pre>\n<p>In the code above, we implement the following features:</p>\n<p><strong>1.</strong> If the <code>mBtnSimulator</code> toggle button is checked, then show the <code>mTextView</code>. Next, if the <code>mFlightController</code> is not null, we invoke the <code>startSimulator()</code> method of DJISimulator by passing  a DJISimulatorInitializationData with lattitude 23, longitude 113, simulationStateUpdateFrequency 10 and numOfSatellites 10 parameters to it. For more details of DJISimulator.DJISimulatorInitializationData, please check the <a href=\"https://developer.dji.com/iframe/mobile-sdk-doc/android/reference/dji/sdk/FlightController/DJISimulator.DJISimulatorInitializationData.html\">Android API Reference</a>.</p>\n<p><strong>2.</strong> Next, overide the <code>onResult()</code> method of <code>startSimulator()</code>, invoke <code>showToast()</code> method to show the start simulator result to the user.</p>\n<p><strong>3.</strong> Similarly, if the <code>mBtnSimulator</code> toggle button is not checked, then invoke the <code>stopSimulator()</code> method of DJISimulator to stop the simulator. Furthermore, override the <code>onResult()</code> method and invoke the <code>showToast()</code> method to show the stop simulator result to the user.</p>\n<h3 id=\"working-on-takeoff-and-autolanding-features\">Working on Takeoff and AutoLanding features</h3>\n<p>Finally, let&#39;s add the following code at the bottom of <code>onClick()</code> method to implement the <strong>Take off</strong> and <strong>Land</strong> buttons&#39; click actions as shown below:</p>\n<pre><code class=\"lang-java\">case R.id.btn_take_off:\n    if (mFlightController != null){\n        mFlightController.takeOff(\n                new DJIBaseComponent.DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError djiError) {\n                        if (djiError != null) {\n                            showToast(djiError.getDescription());\n                        } else {\n                            showToast(&quot;Take off Success&quot;);\n                        }\n                    }\n                }\n        );\n    }\n    break;\n\ncase R.id.btn_land:\n    if (mFlightController != null){\n        mFlightController.autoLanding(\n                new DJIBaseComponent.DJICompletionCallback() {\n                    @Override\n                    public void onResult(DJIError djiError) {\n                        if (djiError != null) {\n                            showToast(djiError.getDescription());\n                        } else {\n                            showToast(&quot;AutoLand Started&quot;);\n                        }\n                    }\n                }\n        );\n    }\n    break;</code></pre>\n<p>For the case of &quot;R.id.btn_take_off&quot;, we invoke the <code>takeOff()</code> method of DJIFlightController to send the take off command to the aircraft. Similiarly, for the case of &quot;R.id.btn_land&quot;, we invoke the <code>autoLanding()</code> method to send the auto landing command. It&#39;s just that simple and easy.</p>\n<p>We have gone through a long way in this tutorial, now let&#39;s build and run the project, connect the demo application to  your Phantom 4 (Please check <a href=\"../application-development-workflow/workflow-run.html\">Run Application</a> for more details) and check all the features we have implemented so far. </p>\n<p>If everything goes well, you should see something similiar to the following gif animations like this:</p>\n <html><center><img src=\"../../images/tutorials-and-samples/Android/SimulatorDemo/simulatorAnimation.gif\"></center></html>\n\n<ul>\n<li><p>If the demo application is connected with Phantom 4 successfully, you should see the title textView content updates to &quot;Phantom_4 Connected&quot;.</p>\n</li>\n<li><p>Press <strong>Enable Virtual Stick</strong> button to enable virtual stick control, then press <strong>Start Simulator</strong> to start the simulator.</p>\n</li>\n<li><p>Moreover, press the <strong>Take Off</strong> button to send take off command to the aircraft, if the command executes successfully, you should see the <strong>PosZ</strong> value start to change, means that the aircraft is rising.</p>\n</li>\n<li><p>Now you can drag the left and right virtual stick controls to simulate the flight behavious.</p>\n</li>\n<li><p>Lastly, press the <strong>Land</strong> button to make the aircraft start auto landing, once it finish, you may notice the <strong>PosZ</strong> value becomes &quot;0.00&quot;. Press the <strong>Stop Simulator</strong> button to stop the simulator and then press <strong>Disable Virtual Stick</strong> to disable the virtual stick control.</p>\n</li>\n</ul>\n<h3 id=\"summary\">Summary</h3>\n<p>In this tutorial, you&#39;ve learned how to use the DJISimulator feature to simulate aircraft&#39;s flight behaviour in a simulated environment based on the virtual stick control input and show the changes of simulator state(Yaw,Pitch,Roll,PosX,PosY and PosZ) in real time. Also you&#39;ve learned how to use Virtual Stick control to send virtual stick flight control data to the aircraft.</p>\n<p>This demo is a simple demonstration of using DJISimulator, to have a better user experience, you can create a 3D simulated environment using 3D game engine like <a href=\"https://unity3d.com\" target=\"_blank\"> Unity3D </a> to show the simulated data and aircraft flight behavious inside your mobile application (Like the Flight Simulator in DJI Go app)!  </p>\n<p>Furthermore, the DJISimulator allows for automated testing in continous integration environment(Like <a href=\"https://jenkins.io\" target=\"_blank\">Jenkins</a>), it would help your DJI-SDK based application testing process. Good luck, and hope you enjoyed this tutorial!</p>","meta":{"title":"DJI Simulator Tutorial","version":"v3.2.1","date":"2016-07-13T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/Android-SimulatorDemo"},"locale":"cn"}{"content":"<p>Deploying an Android application using the DJI Mobile SDK does not require any additional steps outside of the typical process.</p>\n<p>iOS applications however require proper Xcode configuration as well as MFI accessory authorization.</p>\n<h2 id=\"xcode-configuration\">Xcode Configuration</h2>\n<p>A workaround for an App Store submission bug when archiving universal binaries is required:</p>\n<ul>\n<li>Create a new &quot;Run Script Phase&quot; in the application target&#39;s &quot;Build Phases&quot;</li>\n<li><p>Paste the following in the script text field: <code>bash &quot;${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/DJISDK.framework/strip-frameworks.sh&quot;</code></p>\n<p><img src=\"../../images/application-development-workflow/runShellScript.png\" alt=\"runScript\"> </p>\n</li>\n</ul>\n<h2 id=\"mfi-authorization\">MFI Authorization</h2>\n<p>DJI&#39;s products that require an Apple Lightning connection to an iOS mobile device are MFi accessories. Applications that use MFi accessories need authorization from Apple to do so.</p>\n<p>Therefore, an application needs to go through the MFi Program Application process before being released on the App Store. This process requires communication between the developer, DJI and Apple and can take several weeks to complete if no challenges come up.</p>\n<h4 id=\"how-to-apply-for-the-mfi-program\">How to Apply for the MFi Program</h4>\n<p><img src=\"../../images/application-development-workflow/MFiProcess.png\" alt=\"graph\"> </p>\n<p>The picture above shows the six steps for applying for the MFi Program.</p>\n<h5 id=\"1-developer-submits-the-mfi-program-application-form-to-dji\">1. Developer Submits the MFi Program Application Form to DJI</h5>\n<p>Login into the <strong>User Center</strong> at <a href=\"http://developer.dji.com\" target=\"_blank\"> <a href=\"http://developer.dji.com\">http://developer.dji.com</a> </a> and complete the MFi Program Application Form for the specific application to be released.</p>\n<p><img src=\"../../images/application-development-workflow/MFiApplicationForm.png\" alt=\"graph\"></p>\n<h5 id=\"2-dji-submits-app-information-to-apple-for-review\">2. DJI Submits App Information to Apple for Review</h5>\n<p>After receiving the application form, DJI will record the application information and send to Apple for review.</p>\n<p><img src=\"../../images/application-development-workflow/mfiReviewing.png\" alt=\"mfiReviewing\"></p>\n<h5 id=\"3-apple-approves-rejects-the-mfi-application\">3. Apple Approves/Rejects the MFi Application</h5>\n<p>Typically it takes up to ten business days for Apple to finish the review process. Once approved, a MFi PPID (Product Plan Identification) will be provided by Apple. </p>\n<h5 id=\"4-dji-provides-ppid-to-developer\">4. DJI Provides PPID to Developer</h5>\n<p>The PPID will appear in the status bar of the DJI developer User Center. </p>\n<p><img src=\"../../images/application-development-workflow/mfiApprove.png\" alt=\"mfiApprove\"></p>\n<h5 id=\"5-developer-submits-the-app-to-apple-for-final-review\">5. Developer Submits the App to Apple for Final Review</h5>\n<p>During the application submission process, enter the PPID in the <strong>Notes</strong> section of the App Review Information webpage:</p>\n<p><img src=\"../../images/application-development-workflow/reviewNotes.png\" alt=\"graph\"></p>\n<h5 id=\"6-apple-reviews-the-app-to-determine-whether-it-can-be-published-on-the-app-store\">6. Apple reviews the App to determine whether it can be published on the App Store</h5>\n<p>The normal Apple review process proceeds.</p>","meta":{"title":"Deploy","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>The examples below import the DJI SDK into a new iOS and Android project. The same steps can be used for integration into an existing application.</p>\n<h2 id=\"xcode-project-integration\">Xcode Project Integration</h2>\n<p>Screenshots in this section are generated using Xcode 7.3.</p>\n<h3 id=\"create-a-new-application\">Create a New Application</h3>\n<ul>\n<li>Open Xcode.</li>\n<li>Select <strong>File-&gt;New-&gt;Project</strong>.</li>\n<li>Choose <strong>Single View Application</strong> template.</li>\n<li>Press <strong>Next</strong>.\n <img src=\"../../images/quick-start/iOSCreateProject.png\" alt=\"createProject\">  </li>\n<li>&quot;ImportSDKDemo&quot; will be used as the <strong>Product Name</strong>.</li>\n<li>Other settings can remain as default.\n <img src=\"../../images/quick-start/iOSEnterProjectInfo.png\" alt=\"enterProjectInfo\"></li>\n</ul>\n<h3 id=\"import-framework\">Import Framework</h3>\n<ul>\n<li>In Finder, navigate to the newly created <strong>ImportSDKDemo</strong> folder, and create <strong>Frameworks</strong> folder.</li>\n<li>In Finder, copy <strong>DJISDK.framework</strong> from the downloaded SDK <strong>Sample Code</strong> folder  to <strong>ImportSDKDemo/Frameworks/</strong>.\n<img src=\"../../images/quick-start/iOSCopyFrameworkToProject.png\" alt=\"copyFrameworks\"></li>\n<li>In Xcode right click on the project and select <strong>Add Files to...</strong>\n<img src=\"../../images/quick-start/iOSRightClickToAddFiles.png\" alt=\"importFramework\"></li>\n<li>Select the <strong>Framework</strong> folder (ensure <em>Create groups</em> is selected in <em>Options</em>)\n<img src=\"../../images/quick-start/iOSImportFramework2.png\" alt=\"importFramework2\"></li>\n<li>The DJI SDK framework should now be listed under the &quot;ImportSDKDemo&quot; Project tree.</li>\n<li>Select &quot;ImportSDKDemo&quot; target, open the <strong>General</strong> tab and click on the <strong>+</strong> in <strong>Embedded Binaries</strong>.\n<img src=\"../../images/quick-start/iOSImportFrameworkEmbedBinaries.png\" alt=\"importFrameworkEmbeddedBinaries\"></li>\n<li>Add the DJI SDK framework.</li>\n</ul>\n<h3 id=\"configure-build-settings\">Configure Build Settings</h3>\n<ul>\n<li>For DJI products that connect to the mobile device through USB, add the &quot;Supported external accessory protocols&quot; key to the <strong>info.plist</strong> file, and add the strings &quot;com.dji.video&quot;, &quot;com.dji.protocol&quot; and &quot;com.dji.common&quot; to the key.\n<img src=\"../../images/quick-start/iOSSupportedExternalAccessories.png\" alt=\"supportedExternalAccessoryProtocols\"></li>\n<li>Since iOS 9, App Transport Security has blocked cleartext HTTP (http://) resource loading. The &quot;App Transport Security Settings&quot; key must be added and &quot;Allow Arbitrary Loads&quot; must be set to &quot;YES&quot;.\n<img src=\"../../images/quick-start/iOSAllowArbitraryLoads.png\" alt=\"allowArbitraryLoads\"></li>\n<li>Currently the DJI iOS SDK doesn&#39;t support <strong>Bitcode</strong> for iOS device, please modify the Build Settings to disable it.\n<img src=\"../../images/quick-start/disableBitcode.png\" alt=\"disableBitcode\"></li>\n</ul>\n<h3 id=\"register-application\">Register Application</h3>\n<ul>\n<li>Import the DJI SDK header file into <code>ViewController.m</code>.</li>\n<li>Give the view controller the <code>DJISDKManagerDelegate</code> protocol to follow.</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &quot;ViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\n@interface ViewController ()&lt;DJISDKManagerDelegate&gt;\n@end</code></pre>\n<ul>\n<li>Create a new method <code>registerApp</code>.</li>\n<li>Use the application&#39;s Bundle Identifier to <a href=\"../quick-start/index.html#Generate-an-App-Key\">generate an App Key</a>.</li>\n<li>Set the <code>appKey</code> string in <code>registerApp</code> to the generated App Key.</li>\n<li>Invoke <code>registerApp</code> in <code>viewDidAppear</code> as shown below:</li>\n</ul>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [self registerApp];\n}\n\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<ul>\n<li>The <code>DJISDKManagerDelegate</code> protocol requires the<code>sdkManagerDidRegisterAppWithError</code> method to be implemented.</li>\n<li>Additionally implement <code>showAlertViewWithTitle</code> to give the registration result in a simple view.</li>\n</ul>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successful!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n       [DJISDKManager startConnectionToProduct];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}\n\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n}</code></pre>\n<h3 id=\"run-import-sdk-demo\">Run Import SDK Demo</h3>\n<p>The <strong>ImportSDKDemo</strong> project can now be run. You can download the sample code of this project from <a href=\"https://github.com/DJI-Mobile-SDK/iOS-ImportAndActivateSDKInXcode\" target=\"_blank\">Github</a>.</p>\n<p>As this application is only checking for registration and not interacting directly with a product, no product needs to be connected to the application for this to run. Therefore, the application can either be run on a mobile device (with or without a DJI product connected) or in the iOS simulator. The application will need internet connectivity to perform registration successfully.</p>\n<p>If the App Key was generated correctly and the iOS simulator or mobile device has internet connectivity, then the following should be seen:</p>\n<p>   <img src=\"../../images/quick-start/iOSAppRegistrationSuccessful.png\" alt=\"iOSAppRegistrationSuccessful\"></p>\n<h2 id=\"android-studio-project-integration\">Android Studio Project Integration</h2>\n<p>Screenshots in this section are generated using Android Studio 2.1.</p>\n<h3 id=\"create-a-new-application\">Create a New Application</h3>\n<p>A new application can be used to show how to integrate the DJI SDK into an Android Studio project.</p>\n<ul>\n<li><p>Open Android Studio and at the initial screen select <strong>Start a new Android Studio project</strong>\n<img src=\"../../images/quick-start/AndroidNewProjectSplashScreen.png\" alt=\"AndroidNewProjectSplashScreen\"></p>\n</li>\n<li><p>In the <strong>New Project</strong> screen:</p>\n<ul>\n<li>Set the <strong>Application name</strong> to &quot;ImportSDKDemo&quot;.</li>\n<li>Set the <strong>Company Domain</strong> and <strong>Package name</strong> to &quot;com.dji.ImportSDKDemo&quot;.\n<img src=\"../../images/quick-start/AndroidConfigureNewProject.png\" alt=\"AndroidConfigureNewProject\"></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> <strong>Package name</strong> is the identifying string required to <a href=\"../quick-start/index.html#Generate-an-App-Key\">generate an App Key</a>.\nThe activity java, manifest xml and Gradle script code below assumes <strong>Package name</strong> is &quot;com.dji.ImportSDKDemo&quot;</p>\n</blockquote>\n<ul>\n<li><p>In the <strong>Target Android Devices</strong> screen:</p>\n<ul>\n<li>Select <strong>Phone and Tablet</strong> form factor.</li>\n<li>Choose <strong>API 19: Android 4.4 (KitKat)</strong>.\n<img src=\"../../images/quick-start/AndroidSelectFormFactor.png\" alt=\"AndroidSelectFormFactor\"></li>\n</ul>\n</li>\n<li><p>In the <strong>Add an Activity to Mobile</strong> screen choose <strong>Empty Activity</strong>.\n<img src=\"../../images/quick-start/AndroidAddAnActivityToMobile.png\" alt=\"AndroidAddAnActivityToMobile\"></p>\n</li>\n<li><p>In the <strong>Customize the Activity</strong> screen:</p>\n<ul>\n<li>Set <strong>Activity Name:</strong> to &quot;MainActivity&quot;.</li>\n<li>Ensure <strong>Generate Layout File</strong> is checked.</li>\n<li>Set <strong>Layout Name:</strong> to &quot;activity_main&quot;.</li>\n<li>Click <strong>Finish</strong> when done.\n<img src=\"../../images/quick-start/AndroidCustomizeTheActivity.png\" alt=\"AndroidCustomizeTheActivity\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"import-module\">Import Module</h3>\n<p>After unzipping the downloaded Android SDK package:</p>\n<ul>\n<li>In the Android Studio menu bar select <strong>File-&gt;New-&gt;Import Module</strong>\n<img src=\"../../images/quick-start/AndroidNewModuleImport.png\" alt=\"AndroidNewModuleImport\"></li>\n<li>Move to the next screen, and finish import.\n<img src=\"../../images/quick-start/AndroidImportNewModuleDependencies.png\" alt=\"AndroidImportNewModuleDependencies\"></li>\n</ul>\n<h3 id=\"configure-gradle-script\">Configure Gradle Script</h3>\n<ul>\n<li>In <strong>Gradle Scripts</strong> double click on <strong>build.gradle (Module: app)</strong>\n<img src=\"../../images/quick-start/AndroidConfigureGradleInitial.png\" alt=\"AndroidConfigureGradleInitial\"></li>\n<li>Replace the script with:</li>\n</ul>\n<pre><code class=\"lang-java\">apply plugin: &#39;com.android.application&#39;\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion &quot;23.0.3&quot;\n\n    defaultConfig {\n        applicationId &quot;com.dji.ImportSDKDemo&quot;\n        minSdkVersion 19\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;\n    compile project(&#39;:dJISDKLIB&#39;)\n}</code></pre>\n<ul>\n<li>The main changes should be:<ul>\n<li>Add <code>compile project(&#39;:dJISDKLIB&#39;)</code> to the <strong>dependencies</strong>.\n<img src=\"../../images/quick-start/AndroidConfigureGradleAfterChange.png\" alt=\"AndroidConfigureGradleAfterChange\"></li>\n<li>Select <strong>Tools -&gt; Android -&gt; Sync Project with Gradle Files</strong> and wait for Gradle project sync to finish.</li>\n<li>Right click on <strong>app</strong> module in the project navigator and go to <strong>Open Module Settings</strong>.\n<img src=\"../../images/quick-start/AndroidOpenModuleSettings.png\" alt=\"AndroidOpenModuleSettings\"></li>\n<li>Select <strong>app</strong> module on the left, and <strong>Dependencies</strong> on the top tab to confirm &quot;djiSDKLIB&quot; appears in the list.\n<img src=\"../../images/quick-start/AndroidConfirmAppDependencies.png\" alt=\"AndroidConfirmAppDependencies\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"implement-app-registration-and-sdk-callbacks\">Implement App Registration and SDK Callbacks</h3>\n<p>Double click on <strong>MainActivity.java</strong> in the <strong>app</strong> module.\n   <img src=\"../../images/quick-start/AndroidImplementationMainActivity.png\" alt=\"AndroidImplementationMainActivity\">\nTo import additional Android and DJI SDK classes that will be needed for the registration demonstration, add the following after <code>import android.os.Bundle;</code>:</p>\n<pre><code class=\"lang-java\">import android.content.Intent;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport dji.sdk.SDKManager.DJISDKManager;\nimport dji.sdk.base.DJIBaseComponent;\nimport dji.sdk.base.DJIBaseProduct;\nimport dji.sdk.base.DJIError;\nimport dji.sdk.base.DJISDKError;</code></pre>\n<p>The MainActivity class needs to register the application to get authorization to use the DJI Mobile SDK. It also needs to implement callback methods expected by the SDK.</p>\n<p>The MainActivity class will first be modified to include four class variables including <code>mProduct</code> which is the object that represents the DJI product connected to the mobile device. Additionally the <code>onCreate</code> method will be modified to instantiate the DJISDKManager.</p>\n<p>Replace the MainActivity class with:</p>\n<pre><code class=\"lang-java\">public class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = MainActivity.class.getName();\n    public static final String FLAG_CONNECTION_CHANGE = &quot;dji_sdk_connection_change&quot;;\n    private static DJIBaseProduct mProduct;\n    private Handler mHandler;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //Initialize DJI SDK Manager\n        mHandler = new Handler(Looper.getMainLooper());\n        DJISDKManager.getInstance().initSDKManager(this, mDJISDKManagerCallback);\n    }\n}</code></pre>\n<p> DJISDKManager has a callback that needs to process two methods for processing the application registration result, and for when the product connected to the mobile device is changed.</p>\n<p>Add the DJISDKManager callback and implementations of <code>onGetRegisteredResult</code> and <code>onProductChanged</code>.</p>\n<pre><code class=\"lang-java\"> private DJISDKManager.DJISDKManagerCallback mDJISDKManagerCallback = new DJISDKManager.DJISDKManagerCallback() {\n\n        @Override\n        public void onGetRegisteredResult(DJIError error) {\n            Log.d(TAG, error == null ? &quot;success&quot; : error.getDescription());\n            if(error == DJISDKError.REGISTRATION_SUCCESS) {\n                DJISDKManager.getInstance().startConnectionToProduct();\n                Handler handler = new Handler(Looper.getMainLooper());\n                handler.post(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        Toast.makeText(getApplicationContext(), &quot;Register App Successful&quot;, Toast.LENGTH_LONG).show();\n                    }\n                });\n            } else {\n                Handler handler = new Handler(Looper.getMainLooper());\n                handler.post(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        Toast.makeText(getApplicationContext(), &quot;Register App Failed! Please enter your App Key and check the network.&quot;, Toast.LENGTH_LONG).show();\n                    }\n                });\n\n            }\n            Log.e(&quot;TAG&quot;, error.toString());\n        }\n\n        @Override\n        public void onProductChanged(DJIBaseProduct oldProduct, DJIBaseProduct newProduct) {\n\n            mProduct = newProduct;\n            if(mProduct != null) {\n                mProduct.setDJIBaseProductListener(mDJIBaseProductListener);\n            }\n\n            notifyStatusChange();\n        }\n    };</code></pre>\n<p>Finally methods for <code>DJIBaseProductListener</code>, <code>DJIComponentListener</code>, <code>notifyStatusChange</code> and <code>Runnable</code> need to be implemented :</p>\n<pre><code class=\"lang-java\">private DJIBaseProduct.DJIBaseProductListener mDJIBaseProductListener = new DJIBaseProduct.DJIBaseProductListener() {\n\n        @Override\n        public void onComponentChange(DJIBaseProduct.DJIComponentKey key, DJIBaseComponent oldComponent, DJIBaseComponent newComponent) {\n            if(newComponent != null) {\n                newComponent.setDJIComponentListener(mDJIComponentListener);\n            }\n            notifyStatusChange();\n        }\n\n        @Override\n        public void onProductConnectivityChanged(boolean isConnected) {\n            notifyStatusChange();\n        }\n\n    };\n\n    private DJIBaseComponent.DJIComponentListener mDJIComponentListener = new DJIBaseComponent.DJIComponentListener() {\n\n        @Override\n        public void onComponentConnectivityChanged(boolean isConnected) {\n            notifyStatusChange();\n        }\n\n    };\n\n    private void notifyStatusChange() {\n        mHandler.removeCallbacks(updateRunnable);\n        mHandler.postDelayed(updateRunnable, 500);\n    }\n\n    private Runnable updateRunnable = new Runnable() {\n\n        @Override\n        public void run() {\n            Intent intent = new Intent(FLAG_CONNECTION_CHANGE);\n            sendBroadcast(intent);\n        }\n    };</code></pre>\n<p>The application must be granted permissions to in order for the DJI SDK to operate.</p>\n<ul>\n<li>Double click on <strong>AndroidManifest.xml</strong> in the <strong>app</strong> module.\n<img src=\"../../images/quick-start/AndroidManifest.png\" alt=\"AndroidManifest\"></li>\n<li>After <code>package=com.dji.ImportSDKDemo</code> and before <code>&lt;application</code> insert:</li>\n</ul>\n<pre><code class=\"lang-objc\">&lt;!-- Permissions and features --&gt;\n&lt;uses-sdk /&gt;\n\n&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;\n\n&lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;\n&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.host&quot;\n    android:required=&quot;false&quot; /&gt;\n&lt;uses-feature\n    android:name=&quot;android.hardware.usb.accessory&quot;\n    android:required=&quot;true&quot; /&gt;\n&lt;!-- Permissions and features --&gt;</code></pre>\n<p>Insert the following after <code>android:theme=&quot;@style/AppTheme&quot;&gt;</code> and before <code>&lt;activity android:name=&quot;.MainActivity&quot;&gt;</code>:</p>\n<pre><code class=\"lang-xml\">&lt;!-- DJI SDK --&gt;\n    &lt;uses-library android:name=&quot;com.android.future.usb.accessory&quot; /&gt;\n    &lt;meta-data\n        android:name=&quot;com.dji.sdk.API_KEY&quot;\n        android:value=&quot;Please enter your App Key here.&quot; /&gt;\n    &lt;activity\n        android:name=&quot;dji.sdk.SDKManager.DJIAoaControllerActivity&quot;\n        android:theme=&quot;@android:style/Theme.Translucent&quot; &gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot; /&gt;\n        &lt;/intent-filter&gt;\n        &lt;meta-data\n            android:name=&quot;android.hardware.usb.action.USB_ACCESSORY_ATTACHED&quot;\n            android:resource=&quot;@xml/accessory_filter&quot; /&gt;\n    &lt;/activity&gt;\n    &lt;service android:name=&quot;dji.sdk.SDKManager.DJIGlobalService&quot; &gt;\n    &lt;/service&gt;\n&lt;!-- DJI SDK --&gt;</code></pre>\n<p><a href=\"../quick-start/index.html#Generate-an-App-Key\">Generate an App Key</a>, and replace &quot;Please enter your App Key here.&quot; with the App Key string.</p>\n<h3 id=\"run-import-sdk-demo\">Run Import SDK Demo</h3>\n<p>The <strong>ImportSDKDemo</strong> project can now be run. You can download the sample code of this project from <a href=\"https://github.com/DJI-Mobile-SDK/Android-ImportAndActivateSDKInAndroidStudio\" target=\"_blank\">Github</a>.</p>\n<p>As this application is only checking for registration and not interacting directly with a product, no product needs to be connected to the application for this to run. Therefore, the application can either be run on a mobile device (with or without a DJI product connected) or in the Android simulator. The application will need internet connectivity to perform registration successfully.</p>\n<p>If the App Key was generated correctly and the Android simulator or mobile device has internet connectivity, then the following should be seen:</p>\n<p> <img src=\"../../images/quick-start/AndroidRunSuccess.png\" alt=\"AndroidRunSuccess\"></p>","meta":{"title":"Integrate SDK into Application","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>Several general and platform specific prerequisites are required to develop an application with the DJI Mobile SDK.</p>\n<h3 id=\"general\">General</h3>\n<ul>\n<li>An understanding of how to develop applications for either iOS or Android.</li>\n<li>A DJI product that is compatible with the DJI Mobile SDK. A list of compatible products is <a href=\"../introduction/product_introduction.html#Supported-Products\">here</a>.</li>\n<li>A credit card or phone number for DJI developer registration verification (no charges will be made).</li>\n<li>At least one compatible iOS or Android mobile device.</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong>\nFor iOS, two mobile devices can be used for easier debugging and profiling.</p>\n</blockquote>\n<h3 id=\"ios\">iOS</h3>\n<ul>\n<li>Xcode 7.0+ or higher</li>\n<li>Deployment target of iOS 8.1 or higher</li>\n<li>iOS Developer account</li>\n<li>Device support<ul>\n<li>iPhone 5s or later</li>\n<li>iPad Pro, iPad Air 2, iPad Mini 2 or later</li>\n<li>iPod Touch 5 or later</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"android\">Android</h3>\n<ul>\n<li>Android API Level 22 or higher</li>\n<li>Android Studio 1.5 or higher</li>\n<li>Device support: Samsung tabs 705c, Samsung S6, Samsung S5, Samsung NOTE4, Samsung NOTE3, Google Nexus 9, Google Nexus 7 II, Ascend Mate7, Huawei Mate 8, Nubia Z7 mini, SONY Xperia Z3, MI 3, MI PAD</li>\n</ul>\n<blockquote>\n<p>Note: Support for additional Android devices available as testing and development continues.</p>\n</blockquote>","meta":{"title":"Prerequisites","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>Register for a DJI Developer account here: <a href=\"http://developer.dji.com/register/\" target=\"_blank\"><a href=\"http://developer.dji.com/register/\">http://developer.dji.com/register/</a></a>. </p>\n<p>During the registration process, email information and a credit card or phone number will need to be supplied to verify registration. Any credit card information given will only be used for verification and will not be charged. </p>\n<p>Download the DJI Mobile SDK for iOS or Android from here: <a href=\"http://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"http://developer.dji.com/mobile-sdk/downloads\">http://developer.dji.com/mobile-sdk/downloads</a></a>.</p>","meta":{"title":"Register as a DJI Developer & Download SDK","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"prepare-product\">Prepare Product</h2>\n<p>The user manual for each product should be reviewed to understand the full product setup (visit <a href=\"http://www.dji.com\" target=\"_blank\"><a href=\"http://www.dji.com\">http://www.dji.com</a></a> and navigate to the downloads page for each product). This section details some of the key points to remember. </p>\n<h3 id=\"charge-batteries\">Charge Batteries</h3>\n<p>Generally, all batteries of a product should be charged before running an application for best experience. This can include aircraft batteries, remote controller batteries, handheld gimbal batteries, and aircraft mounted gimbal batteries (for the Ronin MX). When a battery is too low, an aircraft may return home or land early in the application, or might not take off at all.</p>\n<h3 id=\"activate-product\">Activate Product</h3>\n<p>Any new product will need to be activated through <strong>DJI GO</strong> before being used for the first time. <strong>DJI GO</strong> is available on the <a href=\"https://itunes.apple.com/en/app/dji-pilot/id943780750?mt=8\" target=\"_blank\">iOS App Store</a> and <a href=\"https://play.google.com/store/apps/details?id=dji.pilot&hl=en\" target=\"_blank\"> Google Store</a> and can be used to activate a product.</p>\n<h3 id=\"upgrade-product-firmware\">Upgrade Product Firmware</h3>\n<p>Aircraft, remote controller and/or handheld controller firmware should be updated to the most recent release before beginning application testing and debugging. Different products sometimes have different processes for checking firmware version and upgrading firmware. Each product&#39;s page at <a href=\"http://www.dji.com\">http://www.dji.com</a> has instructions in the <strong>Downloads</strong> section for upgrading firmware.</p>\n<h3 id=\"remote-controller-flight-mode-switch\">Remote Controller Flight Mode Switch</h3>\n<p>For aircraft, the remote controller FAP or ASP flight mode switch needs to be in a specific position to accept SDK commands that change flight orientation and automate flight. Remote controllers and aircraft can sometimes be interchanged making the FAP/ASP switch configuration have several options.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Aircraft</th>\n<th style=\"text-align:center\">Remote Controller</th>\n<th style=\"text-align:center\">Switch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">P3, Inspire (all models)</td>\n<td style=\"text-align:center\">P3, Inspire (all models)</td>\n<td style=\"text-align:center\">F</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P3, Inspire (all models)</td>\n<td style=\"text-align:center\">P4</td>\n<td style=\"text-align:center\">A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P4</td>\n<td style=\"text-align:center\">P3, Inspire (all models)</td>\n<td style=\"text-align:center\">P</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P4</td>\n<td style=\"text-align:center\">P4</td>\n<td style=\"text-align:center\">P</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"internet-connectivity\">Internet Connectivity</h2>\n<p>Any SDK application will need internet connectivity the first time it runs to register with DJI and get authorization to use the SDK. After the first successful registration, the authorization will be stored locally, and internet connectivity will not be required for registration.</p>\n<h2 id=\"connect-mobile-device-and-run-application\">Connect Mobile Device and Run Application</h2>\n<p>There are several connection configurations between mobile device and product:</p>\n<ul>\n<li>Mobile device -&gt; USB -&gt; Remote Controller -&gt; Lightbridge -&gt; Aircraft</li>\n<li>Mobile device -&gt; WiFi -&gt; Remote Controller -&gt; WiFi -&gt; Aircraft</li>\n<li>Mobile device -&gt; WiFi -&gt; Handheld Gimbal</li>\n</ul>\n<p>There are several ways to initialize all products and run an application. An example for USB and WiFi connection scenarios is given below.</p>\n<h3 id=\"usb-connection-procedure\">USB Connection Procedure</h3>\n<p><em>Phantom 4, Phantom 3 Professional, Phantom 3 Advanced, Inspire series, Matrice Series:</em></p>\n<ol>\n<li>Turn on the Remote Controller. </li>\n<li>Turn on the Aircraft and wait until the Remote Controller has connected with the Aircraft.</li>\n<li>Connect iOS/Android Mobile Device to the Remote Controller using a <strong>Lightning</strong> (iOS) or <strong>USB</strong> (Android) cable.</li>\n<li>Run Application on the Mobile Device.</li>\n</ol>\n<blockquote>\n<p><strong>Note:</strong> </p>\n<p>If using an Android device, the DJI Remote Controller needs to support <a href=\"https://source.android.com/devices/accessories/protocol.html\" target=\"_blank\"> AOA </a>. All recent versions of the firmware support AOA. AOA is supported if when the Sample Application connects with the Android device, a dialog similar to that below appears:</p>\n<p> <img src=\"../../images/application-development-workflow/android_dialog.png\" alt=\"dialog\"></p>\n<p>To learn how to change the default app for USB accessory, please check these two FAQs: <a href=\"../faq/index.html#How-do-I-reset-the-default-app-behavior-for-a-USB-Accessory-DJI-Product-on-Android-devices\">Android Device</a>, <a href=\"../faq/index.html#How-do-I-reset-the-default-app-behavior-for-a-USB-Accessory-DJI-Product-on-Samsung-devices\">Samsung Device</a>.</p>\n</blockquote>\n<h3 id=\"wifi-connection-procedure\">WiFi Connection Procedure</h3>\n<p><em>Phantom 3 Standard, Phantom 3 4K:</em></p>\n<ol>\n<li>Turn on the Remote Controller.  </li>\n<li>Connect Mobile Device to the WiFi network created by the Remote Controller.</li>\n<li>Turn on the Aircraft and wait until the Remote Controller has connected with the Aircraft.</li>\n<li>Run Application on the Mobile Device.</li>\n</ol>\n<p><em>Osmo:</em></p>\n<ol>\n<li>Turn on the Osmo.  </li>\n<li>Connect Mobile Device to the WiFi network created by the Osmo.</li>\n<li>Run Application on Mobile Device.</li>\n</ol>","meta":{"title":"Run Application","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>Application development requires extensive testing, profiling and debugging. DJI provides tools including an aircraft simulator, a wireless bridge application and remote logging functionality to make development faster and more convenient.</p>\n<h2 id=\"aircraft-simulator\">Aircraft Simulator</h2>\n<p>DJI aircraft products include a simulator that resides in the aircraft Flight Controller that can: </p>\n<ul>\n<li>Take aircraft control input from the remote controller (manual flight) or application (SDK commands)</li>\n<li>Simulate aircraft behavior in a simulated environment based on the input</li>\n<li>Output aircraft state information based on the simulated behavior</li>\n</ul>\n<p>This allows both manual and automated flights to be simulated without actually flying the aircraft.</p>\n<p>DJI provides tools for Windows and Mac which can be used to initialize the simulator, and visualize the aircraft behavior based on the state information provided by the simulator:</p>\n<ul>\n<li><strong>DJI PC Simulator</strong> ( <a href=\"https://dev.dji.com/downloads/dev/0d63fc06-30a9-4818-9b27-66265f777cdd\" target=\"_blank\"> Windows </a> only) is used for Phantom 3, Inspire and Matrice series of aircraft.</li>\n<li><strong>DJI Assistant 2</strong> (<a href=\"https://dl.djicdn.com/downloads/phantom_4/DJI_Assistant2_Installer_v1.0.2.zip\" target=\"_blank\"> Windows </a> or <a href=\"https://dl.djicdn.com/downloads/phantom_4/DJI_Assistant_Installer_mac_v1.0.2.dmg\" target=\"_blank\"> Mac </a>) is used for Phantom 4.</li>\n</ul>\n<p>Additionally, simulator initialization, monitoring and termination can be controlled directly through the SDK allowing for application development in continuous integration environments.</p>\n<h3 id=\"dji-pc-simulator\">DJI PC Simulator</h3>\n<p>The DJI PC Simulator tool is built specifically for SDK developers and can initialize, terminate and provide visualization of the aircraft simulator running in the Flight Controller of the DJI aircraft. The DJI PC Simulator tool connects to the aircraft through USB.</p>\n<ul>\n<li>Supported DJI Products: Matrice series, Phantom 3 series, Inspire series.</li>\n<li>Supported Operating Systems: Windows 7, Windows 8, Windows 8.1</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Windows 10 is not officially supported, but generally does work.</p>\n</blockquote>\n<h5 id=\"installation-and-setup\">Installation and Setup</h5>\n<ul>\n<li><p>Download the <a href=\"https://dev.dji.com/downloads/dev/0d63fc06-30a9-4818-9b27-66265f777cdd\" target=\"_blank\"> DJI PC Simulator Installer and User Manual </a> and <a href=\"https://dev.dji.com/downloads/dev/1f3df392-3026-44ed-a9a8-20caa020f6c7\" target=\"_blank\"> WIN Driver Installer </a>.</p>\n</li>\n<li><p>Run the <strong>Win Driver Installer</strong></p>\n<ul>\n<li>For earlier product compatibility, a dialog box with the message <em>Please power on MC and connect it to PC via USB!</em> will be shown.</li>\n<li>No action is required now, so press <strong>Yes</strong> to continue.</li>\n<li>Follow the remaining installation steps.</li>\n</ul>\n</li>\n<li><p>Run the <strong>DJI PC Simulator Installer</strong> </p>\n<ul>\n<li>Follow the installation steps to complete installation.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"using-the-dji-pc-simulator\">Using the DJI PC Simulator</h5>\n<p>The <strong>DJI PC Simulator</strong> can either be run on a Windows PC or on a virtual machine (like Parallels or VMWare) on a Mac.</p>\n<p>First connect the Windows PC to the aircraft using USB and turn on the aircraft.</p>\n<p>Start <strong>DJI PC Simulator</strong> to configure and initialize the aircraft simulator. Set latitude and longitude for simulation. \n <img src=\"../../images/application-development-workflow/simulator_config.png\" alt=\"Config\"></p>\n<blockquote>\n<p><strong>Note:</strong> The aircraft will not take off if the latitude and longitude is too close to or inside a <a href=\"http://flysafe.dji.com/no-fly\" target=\"_blank\"> No Fly Zone </a>.</p>\n</blockquote>\n<p>If the aircraft is on and connected to the PC, then the serial number should be displayed in the <strong>SN:</strong> text view.</p>\n<p>Select <strong>show log window</strong> under the <strong>Log Settings</strong> tab to display the log window.\n <img src=\"../../images/application-development-workflow/showLog.png\" alt=\"showLog\"></p>\n<p>Back in the <strong>Simulator Control</strong> tab, press <strong>Start Simulation</strong> to start the aircraft simulator. At this point the aircraft will simulate flight without actually starting the motors.</p>\n<p>Press <strong>Display Simulation</strong> to start the visualization.</p>\n<p>Take-off and fly with the remote controller to experiment with the simulator.</p>\n<p>The visualization will show the connected product (in this case an Inspire 1), as well as some of the position and speed state information.</p>\n<p> <img src=\"../../images/application-development-workflow/display.png\" alt=\"display\"></p>\n<blockquote>\n<p><strong>Note:</strong> Positive World X, Y and Z are North, East and Up directions respectively.</p>\n</blockquote>\n<p>The view angle can be changed by left-clicking and dragging in the visualization window. Scrolling within the window will zoom in and out.</p>\n<p> <img src=\"../../images/application-development-workflow/zoomIn.png\" alt=\"zoomIn\"></p>\n<p>While flying, the flight path can be traced by right clicking on the visualization and selecting <strong>Setup</strong>.</p>\n<p> <img src=\"../../images/application-development-workflow/simulatorSetup.png\" alt=\"simulatorSetup\"></p>\n<p>Then select <strong>show trace</strong> under the simulator UI Config tab to display the flight trace, as shown below:</p>\n<p> <img src=\"../../images/application-development-workflow/showTrace.png\" alt=\"showTrace\"></p>\n<p>The flight path trace will then be added to the visualization.</p>\n<p> <img src=\"../../images/application-development-workflow/flightTrace.png\" alt=\"flightTrace\"></p>\n<p>In the <strong>Simulator Config</strong> window, <strong>Stop Simulation</strong> can be pressed to stop the simulation. </p>\n<blockquote>\n<p><strong>Important:</strong> To stop midway through a Waypoint Mission, stop the mission from the application, then stop the simulator. Otherwise the simulator may run the previous waypoint mission when restarted.</p>\n</blockquote>\n<p>For more info about <strong>DJI PC Simulator</strong>, check the User Manual pdf file included in the download of <strong>DJI PC Simulator.</strong></p>\n<h3 id=\"dji-assistant-2-simulator\">DJI Assistant 2 Simulator</h3>\n<p>The DJI Assistant 2 tool is built specifically for SDK developers and can initialize, terminate and provide visualization of the aircraft simulator running in the Flight Controller of the DJI aircraft. DJI Assistant 2 connects to the aircraft through USB.</p>\n<ul>\n<li>Supported DJI Products: Phantom 4.</li>\n<li>Supported Operating Systems: Mac OS X 10, Windows 7, Windows 8, and Windows 8.1</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Windows 10 is not officially supported, but generally does work.</p>\n</blockquote>\n<h4 id=\"installation-and-setup\">Installation and Setup</h4>\n<h5 id=\"mac\">Mac</h5>\n<ul>\n<li>Download <a href=\"https://dl.djicdn.com/downloads/phantom_4/DJI_Assistant_Installer_mac_v1.0.2.dmg\" target=\"_blank\"> DJI Assistant 2 </a> for Mac.</li>\n<li>Install the driver by double clicking on it and following the instructions.</li>\n<li>Open the downloaded <strong>DMG</strong> file.</li>\n<li>Drag <strong>Assistant.app</strong> into the systems <strong>Applications</strong> folder.</li>\n</ul>\n<h5 id=\"windows\">Windows</h5>\n<ul>\n<li>Download <a href=\"https://dl.djicdn.com/downloads/phantom_4/DJI_Assistant2_Installer_v1.0.2.zip\" target=\"_blank\"> DJI Assistant 2 </a> for Windows.</li>\n<li>Run the installer executable.</li>\n<li>Follow the installation instructions.</li>\n<li>During installation, confirm the request to install the driver.</li>\n</ul>\n<h4 id=\"using-dji-assistant-2\">Using DJI Assistant 2</h4>\n<p>On launch, a window asking for connection of DJI Assistant 2 to the Aircraft will appear.</p>\n<p><img src=\"../../images/application-development-workflow/assistantLaunch.png\" alt=\"assistantLaunch\"></p>\n<p>Connect the aircraft to the Mac or PC with a <strong>USB cable</strong>.</p>\n<p>Turn on the remote controller and then turn on the aircraft. After a few seconds, the application will detect the aircraft.</p>\n<p>Select &quot;Phantom 4&quot; in the connected devices page, and select the <strong>Simulator</strong> tab on the left side. The following screen should be seen:</p>\n<p> <img src=\"../../images/application-development-workflow/P4Connected.png\" alt=\"P4Connected\"></p>\n<p>Press the <strong>Open</strong> button and enter the desired starting latitude and longitude and wind speed desired.</p>\n<p>Press the <strong>Start Emulating</strong> button. The connected product will be shown, as well as some of the position and speed state information.</p>\n<p> <img src=\"../../images/application-development-workflow/startEmulating.png\" alt=\"simulatorOld\"></p>\n<blockquote>\n<p><strong>Note:</strong> Positive World X, Y and Z are North, East and Up directions respectively.</p>\n</blockquote>\n<p>Take-off and fly with the remote controller to experiment with the simulator.</p>\n<p>The view angle can be changed by left-clicking and dragging in the visualization window. Scrolling within the window will zoom in and out.</p>\n<p>While flying, the flight path can be traced by right clicking on the visualization and selecting <strong>Setup</strong>.</p>\n<p> <img src=\"../../images/application-development-workflow/setupButton.png\" alt=\"setupButton\"></p>\n<p>Then select <strong>show trace</strong> under the simulator UI Config tab to display the flight trace, as shown below:</p>\n<p> <img src=\"../../images/application-development-workflow/showTraces.png\" alt=\"showTrace\"></p>\n<p>The flight path trace will then be added to the visualization.</p>\n<p> <img src=\"../../images/application-development-workflow/simulator.png\" alt=\"simulator\"></p>\n<h3 id=\"continuous-integration-simulation\">Continuous Integration Simulation</h3>\n<p><strong>DJI PC Assistant</strong> and <strong>DJI Assistant 2</strong> both provide visualization of the aircraft simulator which requires a PC or Mac to be connected to the aircraft.</p>\n<p>If visualization is not required, the DJI SDK can be used to start and stop the simulator. This means simulation can be performed without aircraft connection to a Mac or PC, allowing for automated testing in continuous integration environments.</p>\n<p>The <code>DJISimulator</code> class in <code>DJIFlightController</code> is used to control the simulation. The class provides the ability to:</p>\n<ul>\n<li>Start and stop simulation</li>\n<li>Seed the simulation with a GPS location</li>\n<li>Retrieve state information about the aircraft relative to the world.</li>\n</ul>\n<p>Sample code is provided on using the simulator in a project here: <a href=\"../ios-tutorials/SimulatorDemo.html\">iOS</a> | <a href=\"../android-tutorials/SimulatorDemo.html\">Android</a>.</p>\n<h2 id=\"wireless-bridge-app\">Wireless Bridge App</h2>\n<p>For both Android and iOS, application development is most efficient when the mobile device is connected directly to Android Studio or Xcode through a USB cable.</p>\n<p>However, some DJI aircraft require direct connection between the aircraft&#39;s remote controller and mobile device. This means the application cannot be connected to the development environment directly through USB.</p>\n<p> <img src=\"../../images/application-development-workflow/BridgeAppNeeded.png\" alt=\"BridgeAppNeeded\"></p>\n<p>For Android, ADB over WiFi can be used to enable real time development, however there is no such option for iOS.</p>\n<p>Therefore, DJI provides a Wireless Bridge Application, or <strong>Bridge App</strong>. </p>\n<ul>\n<li>The Bridge App connects directly to the remote controller. </li>\n<li>The mobile device running the developer&#39;s application is connected to the Mac. </li>\n<li><p>The SDK reroutes all aircraft traffic from USB to a WiFi connection with the Bridge App device.</p>\n<p><img src=\"../../images/application-development-workflow/BridgeApp.png\" alt=\"BridgeApp\"></p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> If only one mobile device is available, the Bridge App can also be run with the iOS simulator. In this case the mobile device would host the bridge app, while the developer application runs on the iOS simulator.</p>\n</blockquote>\n<p>The Bridge App is provided by DJI under the MIT license from Github <a href=\"https://github.com/dji-sdk/DJI-Bridge-App\" target=\"_blank\"> here </a>.</p>\n<p>A tutorial describing how to use the DJI Bridge App is <a href=\"../ios-tutorials/BridgeAppDemo.html\">here</a>.</p>\n<h2 id=\"remote-logging\">Remote Logging</h2>\n<p>When testing an application in the field some form of logging is often required to understand behavior.</p>\n<p>For iOS, the DJI Mobile SDK can be setup to allow remote logging. If the mobile device has an internet connection, messages can be logged to a remote server as they are generated during flight.</p>\n<p>A tutorial describing how to use Remote Logging is <a href=\"../ios-tutorials/RemoteLoggerDemo.html\">here</a>.</p>","meta":{"title":"Testing, Profiling & Debugging","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"table-of-contents\">Table of Contents</h2>\n<p><strong>Getting Started</strong></p>\n<ul>\n<li><a href=\"#how-can-i-become-a-dji-developer\">How can I become a DJI Developer?</a></li>\n<li><a href=\"#where-are-the-dji-mobile-sdk-resources\">Where are the DJI Mobile SDK Resources?</a></li>\n<li><a href=\"#are-there-any-tutorials-for-the-dji-mobile-sdk\">Are there any tutorials for the DJI Mobile SDK?</a></li>\n<li><a href=\"#where-can-i-get-the-dji-sdk-api-reference\">Where can I get the DJI SDK API Reference?</a></li>\n<li><a href=\"#if-i-have-questions-where-can-i-get-help\">If I have questions, where can I get help?</a></li>\n<li><a href=\"#how-can-i-import-and-activate-the-dji-mobile-sdk-in-my-own-project\">How can I import and activate the DJI Mobile SDK in my own project?</a></li>\n<li><a href=\"#why-does-application-registration-fail\">Why does application registration fail?</a></li>\n</ul>\n<p><strong>Product Related</strong></p>\n<ul>\n<li><a href=\"#can-i-access-sd-card-data-without-an-sd-card-reader\">Can I access SD card data without an SD card reader?</a></li>\n<li><a href=\"#how-can-i-update-my-dji-aircraft-or-osmo-s-firmware\">How can I update my DJI Aircraft or OSMO&#39;s firmware?</a></li>\n<li><a href=\"#how-can-i-unlock-travel-mode-for-inspire-1\">How can I Unlock Travel Mode for Inspire 1?</a></li>\n<li><a href=\"#how-do-i-link-the-remote-controller-to-an-aircraft\">How do I link the Remote Controller to an aircraft?</a></li>\n</ul>\n<p><strong>General SDK</strong></p>\n<ul>\n<li><a href=\"#does-the-dji-mobile-sdk-give-access-to-all-the-functionality-in-the-dji-go-app\">Does the DJI Mobile SDK give access to all the functionality in the DJI GO App?</a></li>\n<li><a href=\"#is-a-flight-simulator-available-to-test-applications\">Is a flight simulator available to test applications?</a></li>\n<li><a href=\"#why-can-t-i-use-the-existing-simulator-for-the-phantom-4\">Why can’t I use the existing simulator for the Phantom 4?</a></li>\n<li><a href=\"#what-path-does-the-aircraft-take-in-a-curved-waypoint-mission\">What path does the aircraft take in a curved waypoint mission?</a></li>\n<li><a href=\"#why-does-yaw-rotation-cause-the-drone-to-drift-when-using-virtual-stick-apis\">Why does yaw rotation cause the drone to drift when using Virtual Stick APIs?</a></li>\n<li><a href=\"#Does-DJIWaypointMission-allow-only-one-waypoint\">Does DJIWaypointMission allow only one waypoint?</a></li>\n</ul>\n<p><strong>Android</strong></p>\n<ul>\n<li><a href=\"#how-can-i-run-the-android-sdk-sample-code\">How can I run the Android SDK Sample Code</a></li>\n<li><a href=\"#how-do-i-reset-the-default-app-behavior-for-a-usb-accessory-dji-product-on-android-devices\">How do I reset the default app behavior for a USB Accessory  (DJI Product) on Android devices?</a></li>\n<li><a href=\"#how-do-i-reset-the-default-app-behavior-for-a-usb-accessory-dji-product-on-android-devices\">How do I reset the default app behavior for a USB Accessory  (DJI Product) on Samsung devices?</a></li>\n<li><a href=\"#why-does-my-application-crash-when-i-run-on-android-6-0-marshmallow\">Why does my application crash when I run on Android 6.0 Marshmallow？</a></li>\n<li><a href=\"#why-can-t-my-android-application-connect-to-a-dji-product-when-using-the-dji-mobile-sdk-3-2-1-and-android-6-0-marshmallow-with-targetsdkversion-23\">Why can&#39;t my Android application connect to a DJI Product when using the DJI Mobile SDK 3.2.1 and Android 6.0 Marshmallow with targetSdkVersion 23?</a></li>\n</ul>\n<p><strong>iOS</strong></p>\n<ul>\n<li><a href=\"#does-dji-ios-sdk-support-cocoapods\">Does DJI iOS SDK Support CocoaPods?</a></li>\n<li><a href=\"#enabling-bitcode-in-xcode-7-doesn-t-work-for-dji-ios-sdk-sample-code-how-can-i-fix-it\">Enabling Bitcode in Xcode 7 doesn&#39;t work for DJI iOS SDK Sample Code, How can I fix it?</a></li>\n<li><a href=\"#does-dji-ios-sdk-support-swift-any-swift-sample-code\">Does DJI iOS SDK support Swift? Any Swift Sample Code?</a></li>\n<li><a href=\"#what-is-the-dji-remote-logger\">What is the DJI Remote Logger?</a></li>\n<li><a href=\"#will-my-application-work-with-phantom-3-and-inspire-1-if-supported-external-accessory-protocols-is-removed-from-info-plist\">Will my application work with Phantom 3 and Inspire 1 if &quot;Supported external accessory protocols&quot; is removed from info.plist?</a></li>\n</ul>\n<h2 id=\"getting-started\">Getting Started</h2>\n<h3 id=\"how-can-i-become-a-dji-developer-\">How can I become a DJI Developer?</h3>\n<p>Becoming a DJI developer is easy. Please see <a href=\"./application-development-workflow/workflow-register.html\">here</a> for details.</p>\n<h3 id=\"where-are-the-dji-mobile-sdk-resources-\">Where are the DJI Mobile SDK Resources?</h3>\n<p>All <a href=\"http://developer.dji.com/mobile-sdk/documentation\" target=\"_blank\"> documentation </a> can be found on the DJI developer website.</p>\n<p>The SDK can be downloaded from the <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"> website </a>. </p>\n<p>All sample code referenced in the tutorials is available on <a href=\"https://github.com/dji-sdk\" target=\"_blank\"> Github </a>.</p>\n<h3 id=\"are-there-any-tutorials-for-the-dji-mobile-sdk-\">Are there any tutorials for the DJI Mobile SDK?</h3>\n<p>Several tutorials for <a href=\"../android-tutorials/index.html\">Android</a> and <a href=\"../ios-tutorials/index.html\">iOS</a> are available. </p>\n<h3 id=\"where-can-i-get-the-dji-sdk-api-reference-\">Where can I get the DJI SDK API Reference?</h3>\n<ul>\n<li><p><a href=\"http://developer.dji.com/mobile-sdk/documentation/\" target=\"_blank\">iOS API Reference</a></p>\n</li>\n<li><p><a href=\"http://developer.dji.com/mobile-sdk/documentation/android\" target=\"_blank\">Android API Reference</a></p>\n</li>\n</ul>\n<h3 id=\"if-i-have-questions-where-can-i-get-help-\">If I have questions, where can I get help?</h3>\n<p>You can use the following methods to get help:</p>\n<ul>\n<li><p>StackOverFlow </p>\n<p>Post questions in StackOverFlow with DJI SDK tag: <a href=\"http://stackoverflow.com/questions/tagged/dji-sdk\" target=\"_blank\">dji-sdk</a></p>\n</li>\n<li><p>DJI SDK Forum</p>\n<p><a href=\"http://forum.dev.dji.com/forum-90-1.html\" target=\"_blank\"><a href=\"http://forum.dev.dji.com/forum-90-1.html\">http://forum.dev.dji.com/forum-90-1.html</a></a></p>\n</li>\n<li><p>Github Issues</p>\n<p><a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/issues\" target=\"_blank\">iOS Github Issues</a></p>\n<p><a href=\"https://github.com/dji-sdk/Mobile-SDK-Android/issues\" target=\"_blank\">Android Github Issues</a></p>\n</li>\n<li><p>Send Email</p>\n<p>If you prefer email, please send to <a href=\"&#109;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#100;&#x65;&#118;&#x40;&#x64;&#106;&#105;&#46;&#99;&#x6f;&#x6d;\">&#100;&#x65;&#118;&#x40;&#x64;&#106;&#105;&#46;&#99;&#x6f;&#x6d;</a> for help.</p>\n</li>\n</ul>\n<h3 id=\"how-can-i-import-and-activate-the-dji-mobile-sdk-in-my-own-project-\">How can I import and activate the DJI Mobile SDK in my own project?</h3>\n<p>The following two links from the documentation can help here:</p>\n<ul>\n<li><p><a href=\"../application-development-workflow/workflow-integrate.html#xcode-project-integration\">Xcode Project Integration</a></p>\n</li>\n<li><p><a href=\"../application-development-workflow/workflow-integrate.html#android-studio-project-integration\">Android Studio Project Integration</a></p>\n</li>\n</ul>\n<h3 id=\"why-does-application-registration-fail-\">Why does application registration fail?</h3>\n<p>The first time the application is initialized after installation, it connects to a DJI Server to verify it&#39;s authorized to use the DJI Mobile SDK by sending the Application Key. This process is called registration. Reasons for why it might fail include:</p>\n<ul>\n<li>Application needs internet connectivity the first time it is run after installation (successful registration is locally cached, so internet connectivity is not required after the first initialization).</li>\n<li>App key is incorrect. Check in the <a href=\"https://developer.dji.com/user/apps/#all\" target=\"_blank\"> User Center </a> to confirm the application key, or <a href=\"../quick-start/index.html#generate-an-app-key\">create</a> one if it hasn&#39;t been created yet.</li>\n<li>Bundle Identifier (iOS) or Package Name (Android) isn&#39;t the same as the one associated with the App Key. See how to <a href=\"../quick-start/index.html#generate-an-app-key\">create</a> an application key and associate it with the correct application identifier.</li>\n</ul>\n<h2 id=\"product-related\">Product Related</h2>\n<h3 id=\"can-i-access-sd-card-data-without-an-sd-card-reader-\">Can I access SD card data without an SD card reader?</h3>\n<p>Yes, you can use a USB cable to connect between DJI Products and your computer to access the SD card data directly. Each product&#39;s manual illustrates the location of the USB port on the product.</p>\n<h3 id=\"how-can-i-update-my-dji-aircraft-or-osmo-s-firmware-\">How can I update my DJI Aircraft or OSMO&#39;s firmware?</h3>\n<p>Each product&#39;s web page at <a href=\"http://www.dji.com\" target=\"_blank\">www.dji.com</a> has a firmware installation manual in the <strong>Downloads</strong> section.</p>\n<h3 id=\"how-can-i-unlock-travel-mode-for-inspire-1-\">How can I Unlock Travel Mode for Inspire 1?</h3>\n<p>The aircraft is in Travel Mode during delivery. In this mode, the landing gear is half way between the retracted (up) and deployed (down) state. The landing gear needs to be deployed to attach a camera. Follow these steps to deploy the landing gear (put the aircraft in Landing Mode):</p>\n<ol>\n<li>Place the Inspire on a flat surface clear of any obstructions (the propellors do not need to be installed).</li>\n<li>Insert the battery into the battery compartment.</li>\n<li>Power on the Remote Controller and the Inspire.</li>\n<li>Toggle the Transformation Switch up and down at least four times.</li>\n<li>The aircraft body will slowly raise as the landing gear deploys.</li>\n<li><p>Power off the aircraft.</p>\n<p><img src=\"../../images/faq/unlockTravelMode_en.png\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Note:</strong> </p>\n<ul>\n<li>If you have purchased the dual remote controller version, you must use the Master remote controller to deactivate Travel Mode. </li>\n<li>Be sure to remove the camera from the aircraft before switch from Landing Mode to Travel Mode. </li>\n<li>The ultrasonic sensor underneath the aircraft is used to determine when the landing gear is at the right position. Smooth reflective surfaces will work better than rough, sound-absorbing surfaces (e.g. carpet). </li>\n</ul>\n</blockquote>\n<h3 id=\"how-do-i-link-the-remote-controller-to-an-aircraft-\">How do I link the Remote Controller to an aircraft?</h3>\n<p>The remote controller is linked to your aircraft before delivery. Linking is only required when using a remote controller with an aircraft it did not ship with for the first time. Follow these steps to link a new remote controller:</p>\n<ol>\n<li>Turn on the remote controller and connect to the mobile device. Launch the DJI GO app.</li>\n<li>Turn on the aircraft.</li>\n<li><p>Enter “Remote Controller Settings” and tap “Linking Remote Controller” button as shown below.</p>\n<p><img src=\"../../images/faq/linkingRC1_en.png\" alt=\"\"></p>\n</li>\n<li><p>The remote controller is ready to link. The Remote Controller Status Indicator blinks blue and a beep is\nemitted.</p>\n<p><img src=\"../../images/faq/linkingRC2_en.png\" alt=\"\"></p>\n</li>\n<li><p>Locate the linking button on the side of the aircraft. The figures below show the Phantom 3, Phantom 4 and Inspire button positions. The M100 and M600 positions can be found in their respective manuals. Press the link button to start linking. The Remote Controller Status Indicator LED will display a solid green once the remote controller is successfully linked to the aircraft.</p>\n</li>\n<li><p>Phantom 3 Series</p>\n<p><img src=\"../../images/faq/linkButton_Phantom_en.png\" alt=\"\"></p>\n</li>\n<li><p>Phantom 4</p>\n<p><img src=\"../../images/faq/linkButton_Phantom4.png\" alt=\"\"></p>\n</li>\n<li><p>Inspire Series</p>\n<p><img src=\"../../images/faq/linkButton_inspire1.png\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Note:</strong> The remote controller will un-link itself from an aircraft if a new remote controller is linked to the same aircraft.</p>\n</blockquote>\n<h2 id=\"general-sdk\">General SDK</h2>\n<h3 id=\"does-the-dji-mobile-sdk-give-access-to-all-the-functionality-in-the-dji-go-app-\">Does the DJI Mobile SDK give access to all the functionality in the DJI GO App?</h3>\n<p>Almost all of the functionality found in DJI GO is exposed in the Mobile SDK.  </p>\n<h3 id=\"is-a-flight-simulator-available-to-test-applications-\">Is a flight simulator available to test applications?</h3>\n<p>Yes, a flight simulator is available for all products and can be used both as visual verification that flight behavior is correct, and as an automated tool for CI systems.</p>\n<p><a href=\"../application-development-workflow/workflow-testing.html\">Documentation</a> describing setup and use of the simulator.</p>\n<!-- plus a tutorial ([iOS](TODO), [Android](TODO) are available to get you started. -->\n\n<h3 id=\"why-can-t-i-use-the-existing-simulator-for-the-phantom-4-\">Why can’t I use the existing simulator for the Phantom 4?</h3>\n<p>The Phantom 4 uses a different simulator application compared to Phantom 3, Inspire and Matrice series of aircraft. </p>\n<p>The Phantom 4 simulator can be downloaded from <a href=\"http://www.dji.com/product/phantom-4/info#downloads\" target=\"_blank\">here</a> and an explanation of how to use it can be found <a href=\"../application-development-workflow/workflow.html#DJI-Assistant-2-Simulator\">here</a>.</p>\n<h3 id=\"what-path-does-the-aircraft-take-in-a-curved-waypoint-mission-\">What path does the aircraft take in a curved waypoint mission?</h3>\n<p>Waypoint missions have two flight path modes:</p>\n<ol>\n<li>Aircraft flies from waypoint to waypoint</li>\n<li>Aircraft flies a curved path where the waypoints define the curve, but the aircraft doesn&#39;t necessarily fly through the waypoint.</li>\n</ol>\n<p>The curve is formed using a quadratic Bezier curve. The corner radius defines the start point of the Bezier curve.</p>\n<ul>\n<li>Consider three waypoints W0, W1, W2 where the curve is defined for W1.</li>\n<li>P0 and P2 are the start and end points of the Bezier curve defined by P0,P1,P2</li>\n<li>d01 is the cornerRadiusInMeters.</li>\n</ul>\n<html><img src=\"../../images/faq/waypointCurveDiagram.png\" width=50%></html>\n\n<h3 id=\"why-does-yaw-rotation-cause-the-drone-to-drift-when-using-virtual-stick-apis-\">Why does yaw rotation cause the drone to drift when using Virtual Stick APIs?</h3>\n<p>This is a firmware bug. Virtual stick yaw angle can be set with either angle or angular velocity commands. This behavior is seen when using angle mode. As a temporary workaround, angular velocity can be used instead.</p>\n<p><strong>iOS:</strong></p>\n<pre><code class=\"lang-objc\">\nDJIFlightController *flightController = ...; //Get the flightController instance\n\nflightController.yawControlMode = DJIVirtualStickYawControlModeAngularVelocity;\nflightController.rollPitchControlMode = DJIVirtualStickRollPitchControlModeAngle;\nflightController.verticalControlMode = DJIVirtualStickVerticalControlModeVelocity;\n...\n//Invoke the &quot;sendVirtualStickFlightControlData:withCompletion:&quot; method of DJIFlightController\n...</code></pre>\n<p><strong>Android:</strong></p>\n<pre><code class=\"lang-java\">\nDJIFlightController flightController = ...; //Get the flightController instance\n\nflightController.setYawControlMode(DJIFlightControllerDataType.DJIVirtualStickYawControlMode.AngularVelocity);\n\nflightController.setRollPitchControlMode(DJIFlightControllerDataType.DJIVirtualStickRollPitchControlMode.Angle);\n            flightController.setVerticalControlMode(DJIFlightControllerDataType.DJIVirtualStickVerticalControlMode.Velocity);         \n\n...\n//Invoke the &quot;sendVirtualStickFlightControlData()&quot; method of DJIFlightController</code></pre>\n<p>When yaw is controlled by angular velocity, the aircraft&#39;s yaw position can be controlled precisely by using a <a href=\"https://en.wikipedia.org/wiki/PID_controller\">PID controller algorithm</a>.  </p>\n<h3 id=\"does-djiwaypointmission-allow-only-one-waypoint-\">Does DJIWaypointMission allow only one waypoint?</h3>\n<p>No, the minimum number of waypoints allowed in a DJIWaypointMission is 2.</p>\n<h2 id=\"android\">Android</h2>\n<h3 id=\"how-can-i-run-the-android-sdk-sample-code-\">How can I run the Android SDK Sample Code?</h3>\n<p>The following tutorial can help here: <a href=\"../android-tutorials/index.html\">Running DJI SDK Sample Code in Android Studio</a>.</p>\n<h3 id=\"how-do-i-reset-the-default-app-behavior-for-a-usb-accessory-dji-product-on-android-devices-\">How do I reset the default app behavior for a USB Accessory  (DJI Product) on Android devices?</h3>\n<p>DJI Products that connect to Android mobile devices over USB do so through the AOA (Android Open Accessory) protocol. DJI GO, and DJI Mobile SDK applications support this protocol. When a USB accessory (DJI Product) is connected to the Android mobile device, Android will automatically open the application which supports it, or has been designated the default application for that accessory.</p>\n<p>If there is more than one application that supports the accessory, and no application has been designated as the default, then the user will be given an option for which application to open. Usually, the user will also be able to select whether the application should only be opened for this connection, or should be considered the default application going forward.</p>\n<p>Once an application is tied as the default application to an accessory, no other applications will be able to use that accessory. For example, if DJI GO is the default application, then no other SDK based application will work the DJI products.</p>\n<p>To solve this, the default behavior needs to be removed for the accessory. For example, if the DJI GO is the default application, navigate in Android to <strong>Settings-&gt;Apps-&gt;DJI GO-&gt;Open as default</strong> and you should see a similar screen to this:</p>\n<p> <img src=\"../../images/faq/defaultApp_nexus6_001.jpg\" alt=\"\"></p>\n<p>Click on the <strong>CLEAR DEFAULTS</strong> button. </p>\n<p>If you want to change the default application from DJI GO to the SDK-based app, make sure both applications are completely terminated. Then, after clearing defaults as above, reconnect the remote controller and Android should ask which application to open and whether to make it default or not.</p>\n<h3 id=\"how-do-i-reset-the-default-app-behavior-for-a-usb-accessory-dji-product-on-samsung-devices-\">How do I reset the default app behavior for a USB Accessory  (DJI Product) on Samsung devices?</h3>\n<p>DJI Products that connect to Android mobile devices over USB do so through the AOA (Android Open Accessory) protocol. DJI GO, and DJI Mobile SDK applications support this protocol. When a USB accessory (DJI Product) is connected to the Android mobile device, Android will automatically open the application which supports it, or has been designated the default application for that accessory.</p>\n<p>If there is more than one application that supports the accessory, and no application has been designated as the default, then the user will be given an option for which application to open. Usually, the user will also be able to select whether the application should only be opened for this connection, or should be considered the default application going forward. <strong>However, some Samsung devices do not give this additional option, and will instead make the selected application the default application.</strong></p>\n<p>Once an application is tied as the default application to an accessory, no other applications will be able to use that accessory. For example, if DJI GO is the default application, then no other SDK based application will work the DJI products.</p>\n<p>To solve this, the default behavior needs to be removed for the accessory. For example, if the DJI GO is the default application, navigate in Android to <strong>Settings-&gt;Apps-&gt;DJI GO-&gt;Open as default</strong> and you should see a similar screen to this:</p>\n<p> <img src=\"../../images/faq/defaultApp_nexus6_001.jpg\" alt=\"\"></p>\n<p>Click on the <strong>CLEAR DEFAULTS</strong> button. The next time the DJI product is connected to the mobile device, the user will be given the option to select the application to open with it.</p>\n<h3 id=\"why-does-my-application-crash-when-i-run-on-android-6-0-marshmallow-\">Why does my application crash when I run on Android 6.0 Marshmallow?</h3>\n<p>  Please update your application‘s Android SDK to the latest 3.2.2 version. You can download it from <a href=\"https://developer.dji.com/mobile-sdk/downloads/\"> here </a>. </p>\n<p>  For more details, please check the <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a> tutorial.</p>\n<h3 id=\"why-can-t-my-android-application-connect-to-a-dji-product-when-using-the-dji-mobile-sdk-3-2-1-and-android-6-0-marshmallow-with-targetsdkversion-23-\">Why can&#39;t my Android application connect to a DJI Product when using the DJI Mobile SDK 3.2.1 and Android 6.0 Marshmallow with targetSdkVersion 23?</h3>\n<p><a href=\"https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html\" target=\"_blank\"> Runtime Permissions </a> are a new feature of Android 6.0.</p>\n<p> You can add the following code to request permissions before you connect to the internet to register your application to use the DJI SDK:</p>\n<pre><code class=\"lang-java\">  // When the compile and target version is higher than 22, request the following permissions at runtime.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }</code></pre>\n<p> Then build and run your application, press &quot;Allow&quot; in the permission request alert as shown below:</p>\n<p> <img src=\"../../images/faq/requestPermissions.png\" alt=\"requestPermission\"></p>\n<p> After restarting the application, it should now. This process only needs to be completed once.  </p>\n<h2 id=\"ios\">iOS</h2>\n<h3 id=\"does-dji-ios-sdk-support-cocoapods-\">Does DJI iOS SDK Support CocoaPods?</h3>\n<p>Yes, DJI iOS SDK supports CocoaPods. You can check this link for details: <a href=\"https://cocoapods.org/pods/DJI-SDK-iOS\" target=\"_blank\"><a href=\"https://cocoapods.org/pods/DJI-SDK-iOS\">https://cocoapods.org/pods/DJI-SDK-iOS</a></a>.</p>\n<h3 id=\"enabling-bitcode-in-xcode-7-doesn-t-work-for-dji-ios-sdk-sample-code-how-can-i-fix-it-\">Enabling Bitcode in Xcode 7 doesn&#39;t work for DJI iOS SDK Sample Code, How can I fix it?</h3>\n<p>We have a temporary way to enable bitcode in the <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS\" target=\"_blank\">iOS Sample Project</a>:</p>\n<ol>\n<li>Enable bitcode for both demo project and VideoPreviewer project. </li>\n<li>Remove &quot;Other Linker Flags&quot; in VideoPreviewer. </li>\n</ol>\n<p>Then you can compile the demo with bitcode enabled to your mobile device. However, there will be error when compiling the demo with this setting to the iPhone simulator. So if you want to debug your application on the iPhone simulator, please use the original setting. We will keep looking for a better way to do this.</p>\n<h3 id=\"does-dji-ios-sdk-support-swift-any-swift-sample-code-\">Does DJI iOS SDK support Swift? Any Swift Sample Code?</h3>\n<p>Yes, the DJI Mobile SDK for iOS does support Swift. Swift sample code is available <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/SwiftSampleCode\" target=\"_blank\"> here</a>.</p>\n<h3 id=\"what-is-the-dji-remote-logger-\">What is the DJI Remote Logger?</h3>\n<p>The DJI Remote Logger allows iOS applications to log remotely. Field testing is critical in application development, and remote logging allows simple ways to log events in real time to a remote server. For more details, see the <a href=\"../ios-tutorials/RemoteLoggerDemo.html\">DJI Remote Logger Tutorial</a>.</p>\n<h3 id=\"will-my-application-work-with-dji-aircraft-if-supported-external-accessory-protocols-is-removed-from-info-plist-\">Will my application work with DJI Aircraft if &quot;Supported external accessory protocols&quot; is removed from info.plist?</h3>\n<p>If the connection between mobile device and DJI Aircraft is USB, the “Supported external accessory protocols” must be added and will enable your SDK-based Application to connect to the MFI compatible remote controller of the DJI Aircraft. For WiFi connection product, like Phantom 4K, this setting is not necessary to be added to info.plist file.</p>","meta":{"title":"DJI Mobile SDK FAQ","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"how-to-capture-a-picture\">How to Capture a Picture</h2>\n<p>To understand the photography concepts of exposure, aperture, shutter, ISO and focal length it can be useful to consider how a picture is captured.</p>\n<h3 id=\"capture-light\">Capture Light</h3>\n<p>When light is incident on an object, it will usually scatter or reflect in all directions. </p>\n<html><img src=\"../../images/camera-concepts/IncidentLightSingleSource.gif\" width=100%></html>\n\n<p>The animation shows just two incident light beams on an object, effectively illuminating two features. In reality light is incident on the entire object, with all light from all features being scattered into space. A single point in space in front of the object will receive light from all features it can see - overlaid on each other. However the simplification of just a few object features being illuminated is easier to visualize. </p>\n<p>Therefore with the exception of active light sources (like a light bulb, computer display or the sun), seeing an object means seeing the light reflected from it. </p>\n<p>To capture a picture, a device that is sensitive to and can record light is needed (a light sensor). In digital cameras, this device is a rectangular piece of silicon that has a grid of light detectors on it. Each light detector records how much light is incident on it, and is a single pixel in your final picture.</p>\n<p>However, if you just put the sensor next to the object you want to capture a picture of, you won&#39;t recognize the resulting picture. As each pixel can see each feature of the object, then each pixel will almost look the same. </p>\n<p>The image becomes a constant color of all light combined:</p>\n<html><img src=\"../../images/camera-concepts/SensorInFrontOfTree.gif\" width=100%></html>\n\n<h3 id=\"resolve-the-image\">Resolve the Image</h3>\n<p>To resolve the image, it is required that light from each feature of the scene only hit one small part of the sensor, or one pixel. This can be achieved by covering the sensor and putting a small hole or <strong>aperture</strong> in the cover to let light through.</p>\n<html><img src=\"../../images/camera-concepts/IntroduceAperture.gif\" width=100%></html>\n\n<p>Now, each pixel of the sensor, sees a different part of the scene, and therefore the picture will be completely recognizable, though also upside down.</p>\n<p>When very small, the aperture restricts the amount of light hitting the sensor to a minimum, but also lets the camera capture the entire scene in focus, as each pixel can only see a small part (feature) of the scene.</p>\n<h3 id=\"capture-time\">Capture Time</h3>\n<p>If the camera or the scene moves a little bit, the features will be captured by a different pixel. This spreading of the features over multiple pixels will start to blur the image, and significant movement will once again make the picture completely unrecognizable.</p>\n<p>Therefore, the sensor can only be exposed to the scene for a short period of time. The shorter this period of time, the less chance the image will be blurred, as the less relative motion the scene or camera will have.</p>\n<p>Between the sensor and the aperture is a <strong>shutter</strong>. The shutter is normally shut, blocking all light to the sensor. It will momentarily open and close, exposing the sensor to the light from the scene for a brief period of time. </p>\n<p>Light sensitive material, a shutter and a small aperture is all that&#39;s required to capture an image and is the basis of a simple camera.</p>\n<h3 id=\"exposure\">Exposure</h3>\n<p>As mentioned previously, each pixel of the sensor is a light detector. The more light that the pixel is exposed to, the brighter the pixel will be in the resulting picture. A picture that is too dark, means the sensor has been exposed to too little light, and often is called an under exposed picture. A picture that is too light, is often called over exposed. </p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td><img src=\"../../images/camera-concepts/CameraExposure_f8_s250_iso200_85mm.jpg\" width=260></td>\n    <td><img src=\"../../images/camera-concepts/CameraExposure_f8_s250_iso800_85mm.jpg\" width=260></td>\n        <td><img src=\"../../images/camera-concepts/CameraExposure_f8_s250_iso3600_85mm.jpg\" width=260></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\">Under Exposed </td>\n    <td align=\"center\">Good Exposure </td>\n    <td align=\"center\">Over Exposed </td>\n  </tr>\n</table>\n</html>\n\n<p>One of the keys to a great, recognizable picture is to get the <strong>exposure</strong> just right. Not too dark, not too light. If the shutter is opened and closed very quickly, the aperture is very small and the scene is not well lit, then each pixel will only be exposed to a small amount of light and the resulting picture may be under exposed. </p>\n<p>Exposure is usually described in <strong>stops</strong>, which is a relative measure where <strong>one stop describes a doubling or halving of light</strong>. Increasing the exposure by <strong>one stop</strong> is achieved by doubling the amount of light on the sensor. </p>\n<p>Thinking about exposure in stops is convenient when using different methods to control the exposure. Doubling the light (increasing the exposure by one stop) with method A can be compensated for by halving the light (decreasing the exposure by one stop) with method B.</p>\n<p>So, how can exposure be changed?</p>\n<h3 id=\"shutter-speed\">Shutter Speed</h3>\n<p>How long the shutter stays open controls how much light is incident on the sensor in time. Therefore a slower (longer) shutter speed will increase the exposure while a faster (shorter) shutter speed will decrease the exposure. </p>\n<p>While a slower shutter speed will increase exposure, the trade-off is potential blur in the image due to scene or camera movement. The two pictures below have fast moving (propellors) and slow moving (aircraft body) features. The image of the propellors blur when there is a slow shutter speed, and are sharp when there is a fast shutter speed.</p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td width=50%><img src=\"../../images/camera-concepts/ShutterSpeed_f5.6_s8000_iso11400_85mm.jpg\" width=400></td>\n    <td width=50%><img src=\"../../images/camera-concepts/CameraExposure_f8_s250_iso800_85mm.jpg\" width=400></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\"><p>Shutter speed 1/8000s<br><font size=1>Aperture: f/8, ISO: 11400</p></td>\n    <td align=\"center\"><p>Shutter speed 1/250s<br><font size=1>Aperture: f/8, ISO: 800</p></td>\n  </tr>\n</table>\n</html>\n\n<p>&gt;</p>\n<blockquote>\n<p><strong>Note:</strong> Changing the shutter speed by itself also changes the exposure. To make both images have the same exposure, another exposure control method (ISO) was changed to compensate. ISO is described in the next section.</p>\n</blockquote>\n<p>Shutter speed is usually measured in seconds. As an example, DJI&#39;s Zenmuse X5 camera has a shutter speed range of 1/8000 seconds (fast) to 8 seconds (slow).</p>\n<p>If the shutter is open for twice the amount of time, then exposure is doubled. Therefore doubling or halving shutter speed is the equivalent of increasing or decreasing the exposure by one stop.</p>\n<h3 id=\"iso\">ISO</h3>\n<p>Another way to increase exposure is to amplify the light detector reading on the sensor (effectively increase the light detector sensitivity). As the reading is amplified, the resulting pixel brightness will increase, and therefore exposure increases.</p>\n<p>However, the light detector reading is never perfect. Electronics have a small amount of noise in them which will make small changes to the reading. Sometimes the reading will be a little brighter than it should be, other times a little darker. If the light reading is much stronger than the noise changes, then the noise (small fluctuations in exposure between adjacent pixels) won&#39;t be noticeable. However, as the light reading becomes weaker, then the noise fluctuations will become obvious. </p>\n<p>Any amplification will not just amplify low light detector readings, but also amplify the noise in the readings, making these exposure fluctuations obvious.</p>\n<p>This is especially the case for an image of a smooth, simple surface. Instead of all the pixels being the same exposure, they will all be a little different, which will result in a grainy effect (as you can now distinguish each pixel). </p>\n<p>Pixel amplification is called <strong>ISO</strong>. Increasing ISO will increase exposure, but will also make the noise in the image more noticeable resulting in grainy pictures. Typically ISO is set as low as possible to achieve the cleanest image and is used to increase exposure as a last resort. </p>\n<p>In the two pictures above (demonstrating shutter speed difference), the ISO was used to compensate for the change in exposure from the shutter. If you zoom in on the images, the noise in the high ISO image is noticeable, especially on the blue background.</p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td width=50%><img src=\"../../images/camera-concepts/ISO_f5.6_s8000_iso11400_85mm.jpg\" width=400></td>\n    <td width=50%><img src=\"../../images/camera-concepts/ISO_f8_s250_iso800_85mm.jpg\" width=400></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\"><p>ISO 11400<br><font size=1>Aperture: f/8, Shutter: 1/8000s</p></td>\n    <td align=\"center\"><p>ISO 800<br><font size=1>Aperture: f/8, Shutter: 1/250s</p></td>\n  </tr>\n</table>\n</html>\n\n<blockquote>\n<p><strong>Note:</strong> All concepts here apply to both greyscale (monochrome) and color sensors. A color sensor is simply a greyscale sensor that has a color filter in front of it. The color filter is a film with a grid of filters that line up with each pixel. Each filter will only let through one color of light: red, green or blue. The light detector or pixel behind each filter is then only detecting the strength of the light with the specific color and can be thought of as a red, green or blue pixel.</p>\n<p>If a picture is taken of a black scene, then the result should be very little red, green and blue light detected. If the exposure of the image is increased using amplification (ISO), then the red, green and blue pixels will all get brighter, but to slightly different levels. This means the combination of red, green, blue pixels will no longer be black, but instead be slightly red, green or blue depending on which pixel had more additive noise. </p>\n</blockquote>\n<p>As an example of ISO, DJI&#39;s Zenmuse X5 has an ISO range from 100 (low noise) to 25600 (high noise). The ISO number is proportional to the amount of light the sensor is exposed to. Doubling the ISO is the same as increasing the exposure by one stop.</p>\n<h3 id=\"aperture\">Aperture</h3>\n<p>Another way to increase exposure is to increase the aperture. </p>\n<p>Aperture is usually described in f-numbers (also called f-stops):</p>\n<ul>\n<li>The f-number describes the diameter of the aperture</li>\n<li>To double the amount of light, the aperture area must be doubled</li>\n<li>Doubling the aperture area, increases the diameter by 1.414 (square root of 2)</li>\n<li>Therefore to increase an aperture by one exposure stop, the f-number is increased by 1.414</li>\n</ul>\n<p>However as shown <a href=\"#resolve-the-image\">previously</a>, as the aperture increases each pixel will see more than one feature in the scene, causing the picture to be increasingly out of focus.  </p>\n<p>A lens can be used to bring parts of the scene back into focus. </p>\n<html><img src=\"../../images/camera-concepts/LensOnAperture.gif\" width=100%></html>\n\n<p>Lenses however can only focus light from a fixed distance in front of it, to a fixed distance behind it. Light coming from a different distance in front of it, will focus at a different distance behind it. When a lens is used to bring a feature into focus, features at different distances to the camera will be out of focus.</p>\n<html><img src=\"../../images/camera-concepts/LensDemonstrator.gif\" width=100%></html>\n\n\n<p>Features that are in focus have more light incident on the lens and then redirected to the pixel. Features that are out of focus have light spread over more pixels. Therefore a larger aperture increases the exposure of the picture.</p>\n<p>The difference in focus between features at different distances from the camera is known as <strong>Depth of Field</strong>. Features in a picture captured with a shallow depth of field become strongly out of focus (more blurred) as they change in distance from the camera. Conversely, a picture captured with a deep depth of field will have the same features more in focus.</p>\n<p>The two images below show differences in depth of field caused by changing aperture. An M600 is flying in front of a tree. The large f/1.4 aperture creates a depth of field so shallow, that not only is the background strongly out of focus compared to the M600, but some features of the M600 that are closer to or further from the focus plane (front battery) are also slightly out of focus. </p>\n<p>The smaller f/16 aperture image background is significantly more in focus.</p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td width=50%><img src=\"../../images/camera-concepts/DOF_f1.4_s1000_iso100_85mm.jpg\" width=400></td>\n    <td width=50%><img src=\"../../images/camera-concepts/DOF_f16_s1000_iso10000_85mm.jpg\" width=400></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\"><p>Shallow Depth of Field<br>Aperture: f/1.4<br><font size=1>Shutter: 1/1000s, ISO 100</p></td>\n    <td align=\"center\"><p>Deep Depth of Field<br>Aperture: f/16<br><font size=1>Shutter: 1/1000s, ISO: 10000</p></td>\n  </tr>\n</table>\n</html>\n\n<p>Depth of field can be used to highlight the subject of an image. It is easier to distinguish the M600 from the background when the background is out of focus. On the other hand, if the camera is being used to computationally map a scene with many features at different distances, it would be more appropriate to have the entire image in focus (smaller aperture, deeper depth of field).</p>\n<p>As an example, DJI&#39;s Zenmuse X5 has an aperture adjustable from f/1.7 (large) to f/16 (small). This is a range of 6 1/3 exposure stops.</p>\n<h2 id=\"trade-off-between-aperture-shutter-iso\">Trade-off Between Aperture, Shutter, ISO</h2>\n<p><a href=\"#aperture\">Aperture</a>, <a href=\"#shutter-speed\">shutter speed</a> and <a href=\"#iso\">ISO</a> need to balanced to achieve a good exposure. However, when each is used to change exposure, depth of field, sharpness, and noise in the picture change.</p>\n<p>The diagram below illustrates the effect of changing aperture, shutter and ISO and how it impacts exposure and the resulting picture.</p>\n<html><img src=\"../../images/camera-concepts/ExposureTradeoff.png\"></html>\n\n<p>To understand this trade off better, it can be useful to consider several examples.</p>\n<p><strong>Example 1: A well lit, stationary scene.</strong>\nThe camera receives lots of light from the scene, and underexposure is not a problem. One way to approach this is:</p>\n<ul>\n<li><strong>Aperture</strong>: Either shallow or deep depth of field can be selected. Any change in exposure can be compensated for by the shutter as the scene is stationary.</li>\n<li><strong>ISO</strong>: Can be set to minimum setting. Shutter will do all exposure compensation, so can minimize noise.</li>\n<li><strong>Shutter</strong>: The scene is stationary, so both fast and slow shutter speeds will result in a sharp picture. Shutter is simply used to get the correct exposure.</li>\n</ul>\n<p><strong>Example 2: Poorly lit scene with moving features. Sharp picture with in focus features at different distances to the camera desired.</strong> This example might require a compromise in the desired depth of field, sharpness or noise in the image. The &quot;poorly lit&quot;, &quot;moving features&quot;, &quot;sharp picture&quot;, &quot;features at different depths in focus&quot; requirements compete with each other. Increasing the exposure to compensate for &quot;poorly lit&quot; will make capturing sharp moving features in focus more difficult. One way to approach this where the noise in the image is the most compromised:</p>\n<ul>\n<li><strong>Shutter</strong>: Set quick enough to make moving features sharp, but no quicker so the exposure can be maximized. </li>\n<li><strong>Aperture</strong>: As large as possible that allows a depth of field that captures the desired features sufficiently in focus.</li>\n<li><strong>ISO</strong>: Finally the ISO is increased to get the correct exposure.</li>\n</ul>\n<p><strong>Example 3: Well lit scene of flowing water. A picture that captures the movement of water by letting it blur is desired.</strong> This example might be difficult as it will be easy to overexpose the image. One way to approach it is:</p>\n<ul>\n<li><strong>ISO</strong>: Set as low as possible to reduce noise and exposure.</li>\n<li><strong>Aperture</strong>: Set as small as possible to reduce exposure. As a consequence all stationary features in the scene will be in focus.</li>\n<li><strong>Shutter</strong>: Normally, a slow shutter would be desired to blur the movement, but as aperture and ISO have already been set to minimize exposure, there will only be one shutter speed that gives correct exposure. If the scene is very well lit, the blurring of water might not be significant.</li>\n</ul>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Note:</strong> To control over exposure and use a slower shutter speed, a neutral density (ND) filter that reduces exposure by several stops could be used on the camera lens.</p>\n</blockquote>\n<p><strong>Example 4: Picture taken with correct exposure, but shutter too slow.</strong> Scene motion is blurred in the picture as the shutter speed is too slow. One way to take the next picture is:</p>\n<ul>\n<li><strong>Shutter</strong>: Halve the shutter speed, effectively decreasing the exposure by one stop.</li>\n<li><strong>Aperture</strong>: Increase the aperture by 1 stop, to compensate for exposure. This assumes depth of field is not a concern.</li>\n<li><strong>ISO</strong>: No change.</li>\n</ul>\n<p>As a final example, consider three pictures with similar exposure taken with different combinations of aperture, ISO and shutter speed.</p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td><img src=\"../../images/camera-concepts/Tradeoff_f8_s80_iso100.jpg\" width=260></td>\n    <td><img src=\"../../images/camera-concepts/Tradeoff_f2_s8000_iso640.jpg\" width=260></td>\n        <td><img src=\"../../images/camera-concepts/Tradeoff_f8_s8000_iso12800.jpg\" width=260></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\"><p><b>Aperture f/8</b> - Everything in Focus<br><b>Shutter 1/80s</b> - Propellors Blur<br><b>ISO 100</b> - Low Noise</p></td>\n    <td align=\"center\"><p><b>Aperture f/2</b> - Some features blurred<br><b>Shutter 1/8000s</b> - Propellors Sharp<br><b>ISO 640</b> - Relatively Low Noise</p></td>\n    <td align=\"center\"><p><b>Aperture f/8</b> - Everything in Focus<br><b>Shutter 1/8000s</b> - Propellors Sharp<br><b>ISO 12800</b> - High Noise</p></td>\n  </tr>\n</table>\n</html>\n\n<p>Calculating the difference in exposure for aperture, shutter and ISO for the second and third image relative to the first shows that all images should be approximately the same exposure (with the third being the brightest).</p>\n<html>\n<table class=\"table-exposure\">\n<tr>\n  <td align=\"center\" width=10%> <b>Image </b></td>\n  <td align=\"center\" width=30%> <b>1</b> </td>\n  <td align=\"center\" width=30%> <b>2</b> </td>\n  <td align=\"center\" width=30%> <b>3</b> </td>\n</tr>\n<tr>\n  <td align=\"center\"> <b>Aperture </b></th>\n  <td align=\"center\"><p> f/8</p></td>\n   <td align=\"center\"><p> Increase 4 stops <br><font size=1 color=\"#BBBBBB\">f/8-&gt;f/2</p></td>\n  <td align=\"center\"><p> No change to exposure<br><font size=1 color=\"#BBBBBB\">f/8-&gt;f/8 </p></td>\n</tr>\n<tr>\n  <td align=\"center\"> <b>Shutter </b></td>\n  <td align=\"center\"><p> 1/80s</p></td>\n  <td align=\"center\"><p> Decrease 6<sup>2</sup>&frasl;<sub>3</sub> stops<br><font size=1 color=\"#BBBBBB\">1/80s-&gt;1/8000s</p></td>\n<td align=\"center\"><p> Decrease 6<sup>2</sup>&frasl;<sub>3</sub> stops<br><font size=1 color=\"#BBBBBB\">1/80s-&gt;1/8000s</p></td>\n</tr>\n<tr>\n  <td align=\"center\"> <b>ISO </b></td>\n   <td align=\"center\"><p> 100</p></td>\n   <td align=\"center\"><p> Increase 2<sup>2</sup>&frasl;<sub>3</sub> stops<br><font size=1 color=\"#BBBBBB\">100-&gt;640</p></td>\n   <td align=\"center\"><p>Increase 7 stops<br><font size=1 color=\"#BBBBBB\">100-&gt;12800</p></td>\n</tr>\n<tr>\n  <td align=\"center\"> <b>Total Change</b></td>\n   <td align=\"center\"><p> - </p></td>\n   <td align=\"center\"><p> 0 Stops </p></td>\n   <td align=\"center\"><p> Exposure increased by <sup>1</sup>&frasl;<sub>3</sub> stops </p></td>\n</tr>\n</table>\n</html>\n\n\n\n\n<h2 id=\"field-of-view-and-focal-length\">Field of View and Focal Length</h2>\n<p>The <strong>field of view</strong> defines the extent of a scene a camera can capture and is measured in degrees. A larger field of view sees a larger portion of the scene, while a smaller field of view sees a smaller (but more detailed) portion of the scene. A telephoto lens with high zoom factor is a lens with a narrow field of view.</p>\n<p><html><img src=\"../../images/camera-concepts/FieldOfView.png\"></p>\n<p>The distance between a lens and its focal plane (the sensor is at the focal plane) is called the <strong>focal length</strong>. The focal length is directly related to field of view. As the focal length increases, the field of view decreases (and zoom factor increases). </p>\n<p>In the below diagram, a lens is moved away from the sensor, increasing the focal length. When the focal length is small, the two highlighted features are captured near the middle of the sensor. As the focal length increases, the field of view narrows and the same features spread further apart on the sensor, effectively zooming into a smaller part of the scene. </p>\n<p>Focal length is related to field of view based on sensor size. The diagram above also shows a smaller sensor will have a narrower field of view. Focal lengths are commonly referenced to a full frame sensor (35mm sensor).</p>\n<p><html><img src=\"../../images/camera-concepts/FocalLength.gif\" width = 100%></p>\n<p>As an example, DJI&#39;s Zenmuse X3 camera has a diagonal field of view of 94&deg;, which is equivalent to a 20mm focal length when using a 35mm sensor. Note, the X3 sensor is smaller than 35mm, and so the physical focal length is also smaller. </p>\n<p>A diagonal field of view can be deconstructed to its horizontal and vertical components by using the aspect ratio of the sensor. X3 has a 4000x3000 pixel sensor, and so the horizontal and vertical field of views are 84&deg; and 62&deg; respectively.</p>","meta":{"title":"Camera Exposure","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>AirLink describes the wireless link between aircraft, remote controllers, handheld cameras and mobile devices.</p>\n<p>There are three types of wireless links used in DJI products:</p>\n<ul>\n<li>WiFi</li>\n<li>Lightbridge</li>\n<li>Auxiliary</li>\n</ul>\n<p>Wireless communication links provide great flexibility, but also have limitations. The link will degrade as obstacles come between the devices communicating wirelessly, as the separation between devices increases, and as interference with other communication links increases.</p>\n<p>A table detailing the type of wireless link for all aircraft products can be found in the <a href=\"./product_introduction.html#remote-controller\">Product Introduction</a>.</p>\n<p>Osmo is not included in this table and uses the WiFi wireless link between itself and mobile device.</p>\n<h2 id=\"wifi\">WiFi</h2>\n<p>WiFi is used as the wireless communication link for both aircraft and handheld camera products. In the case of aircraft, the remote controller acts as a WiFi access point (AP) and the aircraft and mobile device join it as clients. Similarly for Osmo, the mobile device joins the Osmo AP as a client.</p>\n<p>Aspects of the wireless link that can customized include:</p>\n<ul>\n<li>SSID</li>\n<li>Password</li>\n<li>WiFi Frequency Band (Osmo Only)</li>\n</ul>\n<h2 id=\"lightbridge\">Lightbridge</h2>\n<p>Lightbridge has been developed by DJI specifically for long range, robust aerial communication in the 2.4 GHz band, and is used as the link between remote controller and aircraft. It provides significantly more range than WiFi, with up to 5 km communication in some products.</p>\n<p>Lightbridge has 8 selectable channels. Channel selection can either be done manually, or left to the radio to determine what channel has the least interference. Data rate and channel quality can be measured to understand how channel is performing.</p>\n<p>Some remote controllers with Lightbridge wireless links also have a secondary video port. This port can be used to send the live stream in HDMI or SDI format to an external device.</p>\n<h3 id=\"lightbridge-accessory\">Lightbridge Accessory</h3>\n<p>DJI also has a stand alone accessory product <a href=\"http://www.dji.com/product/lightbridge-2\" target=\"_blank\">Lightbridge 2</a> that can be integrated into airframes such as the S1000. This product consists of a module that mounts on the aircraft, and a remote controller for ground control. The purpose of the product is to relay remote control commands to the aircraft, and relay telemetry and video data to the remote controller. </p>\n<p>The accessory provides two additional features in the live video stream compared to ready-to-fly systems using Lightbridge technology:</p>\n<ul>\n<li>Multiple video inputs on the aircraft can be combined into a picture in picture live video stream</li>\n<li>An on-screen-display (OSD) mode overlays aircraft attitude information onto the live video stream</li>\n</ul>\n<h4 id=\"picture-in-picture\">Picture in Picture</h4>\n<p>The accessory provides several video inputs to accommodate an FPV (first person view) camera and a DJI HD camera and gimbal integration (like the Zenmuse X3 or X5). HDMI and AV ports are available for the FPV camera, and a HD gimbal port is available HD camera and gimbal integrations. </p>\n<p>The video streams from both cameras can be combined into a single live stream with one stream inside the other in <strong>picture in picture</strong> or <strong>PIP</strong> mode. In this mode, one camera video is placed as a thumbnail in the video from the other camera. </p>\n<p><img src=\"../../images/component-guide/lightbridge_PIP.png\" alt=\"PIP\"></p>\n<h4 id=\"osd-on-screen-display\">OSD - On Screen Display</h4>\n<p>OSD is when real time aircraft state information (like altitude, attitude etc.) is overlaid on the live video stream. Using OSD can greatly simplify an FPV application as there is less need to process and display aircraft state through the application.</p>\n<h2 id=\"auxiliary\">Auxiliary</h2>\n<p>WiFi and Auxiliary wireless links are used simultaneously between aircraft and remote controllers. The auxiliary link is a low bandwidth, but very robust link that carries control information critical to aircraft operation only. The WiFi link is higher bandwidth but is less robust and therefore carries application information and the live video stream.</p>","meta":{"title":"AirLink","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Smart batteries provide the energy required to run the products. Together with the flight controller, the smart battery can estimate remaining flight time and provide warnings when low battery thresholds are crossed. Batteries are easily swapped between flights, extending product use considerably.</p>\n<h2 id=\"battery-parameters\">Battery Parameters</h2>\n<p>Two important battery parameters are the amount of energy it can store when fully charged, and the amount of energy it currently has remaining. The remaining energy changes as energy is drawn from the battery during product operation and can be considered an instantaneous parameter. The amount of energy it can store when fully charged can be considered a lifetime parameter and due to battery chemistry reduces over time as the battery is cycled (discharged then charged). </p>\n<p>Therefore as the battery ages, it will store less energy and hence total expected product use time (e.g. flight time) is reduced. Battery <strong>lifetime</strong> is typically defined as the number of cycles it can experience before its full charge energy is 80% of its full charge energy when new. </p>\n<h3 id=\"instantaneous-parameters\">Instantaneous Parameters</h3>\n<p>Instantaneous battery parameters such as remaining energy, voltage and current can be used to predict remaining flight time or product use. Remaining energy is described in milliamp hours. A battery with 1000 mAh remaining will be able to provide 1000 mA for one hour before running out of energy. Examining the instantaneous current being drawn from the battery can be a predictor for how long a battery will last.</p>\n<h3 id=\"lifetime-parameters\">Lifetime Parameters</h3>\n<p>Lifetime parameters such as total number of cycles (or discharges), full charge energy and remaining life time can be used to determine when a battery should be replaced. Applications often require a minimum amount of flight time to be economically efficient, a keeping track of battery lifetime parameters can help determine when to replace batteries.</p>\n<h2 id=\"battery-aggregation\">Battery Aggregation</h2>\n<p>Products requiring multiple batteries such as the M600 provide both parameters for single batteries, as well as for the aggregation. This aggregation is useful as a summary for how the multi-battery system is performing.</p>\n<p>A multi-battery system is as strong as its weakest link. Therefore for most efficiency, it&#39;s important to make sure all batteries in the system are performing similarly. </p>","meta":{"title":"Smart Battery","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>The camera captures photos and videos. Many different modes of operation, resolutions, frame rates, exposure settings, picture settings and file types can be selected. Cameras have local storage to hold the media which will typically be an SD card, and in some cases an SSD (solid state drive). </p>\n<p>This guide covers the large array of settings, modes and functionality provided by DJI cameras. A more general description of camera concepts can be found <a href=\"./camera_concepts.html\">here</a>.</p>\n<h2 id=\"operation-work-modes\">Operation (Work) Modes</h2>\n<p>DJI cameras have several modes of operation:</p>\n<ul>\n<li>Still image capture</li>\n<li>Video capture</li>\n<li>Playback</li>\n<li>Media Manager</li>\n</ul>\n<p>The camera can only operate in one mode at any one time. For example, media download cannot happen during image capture.</p>\n<h5 id=\"still-image-capture-modes\">Still Image Capture Modes</h5>\n<p>There are several ways to capture a still image with DJI cameras. </p>\n<ul>\n<li><strong>Single</strong>: Takes a single picture every time the <code>shootPhoto</code> command is given.</li>\n<li><strong>Burst</strong>: Takes a small burst of photos every time the <code>shootPhoto</code> command is given. This can be useful for capturing action scenes.</li>\n<li><strong>HDR</strong>: Takes a high dynamic range photo. This results in several photos with different exposure levels being taken and then combined into one photo. The different exposure levels increase contrast in both dark and light areas, and therefore the dynamic range of the photo.</li>\n<li><strong>AEB (Auto Exposure Bracketing)</strong>: Captures multiple photos at different exposure levels and saves them separately every time the <code>shootPhoto</code> command is given.</li>\n<li><strong>Interval</strong>: The camera will take photos at a predetermined time interval (for example every 5 seconds) for either a set number of shots, or indefinitely.</li>\n<li><strong>Timelapse</strong>: The camera will take photos at a predetermined time interval and then combine the photos into a time lapse video.</li>\n</ul>\n<h5 id=\"quick-view\">Quick View</h5>\n<p>After a still image is captured, some cameras can be configured to display the captured image for a short period of time. By default, this is turned off, but a quick view for a set duration can be configured.</p>\n<h2 id=\"image-quality-resolution-and-frame-rate\">Image Quality, Resolution and Frame Rate</h2>\n<h5 id=\"video-resolution-and-frame-rate\">Video Resolution and Frame Rate</h5>\n<p>DJI Cameras typically support video resolutions of 1280x720 (720p), 1920x1080 (1080p), 2704x1520, 3840x2160 and 4096x2160 (4K). </p>\n<p>Resolution will determine the maximum frame rate able to be captured. The combinations of resolution and frame rate can be queried directly in the SDK, but typically choosing 4K resolution will limit the frame rate to 24/25 fps. Some cameras support up to 120 fps, but only at 1080p resolutions.</p>\n<h5 id=\"still-image-resolution-and-aspect-ratio\">Still Image Resolution and Aspect Ratio</h5>\n<p>DJI Cameras have a fixed still image resolution. On some cameras the aspect ratio can be changed between 4:3 and 16:9. Keep in mind that a 16:9 picture is simply a cropped version of a 4:3 image, as the sensor&#39;s aspect ratio is 4:3.</p>\n<h5 id=\"compression\">Compression</h5>\n<p>All of DJI&#39;s cameras support compression for both still images and videos. Some cameras also support uncompressed (RAW) file formats.</p>\n<p>The trade-off between capturing RAW and compressed images is:</p>\n<table id=\"t01\">\n  <thead>\n    <tr>\n      <th colspan=\"4\">RAW vs Compressed</th>\n    </tr>\n    <tr>\n      <th width=180>Metric</th>\n      <th width=100>Raw</th>\n      <th width=100>Compressed</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Image Quality</th>\n      <td>Higher</td>\n      <td>Lower</td><br>      <td>Compression algorithms are lossy. On small screens this is sometimes not noticeable, but on larger prints, or when capturing scenes with high contrast and color, the difference is more noticeable.</td>\n    </tr>\n    <tr>\n      <td>Post Processing Quality</td>\n      <td>Higher</td><br>      <td>Lower</td>\n      <td>RAW images use more bits to describe each pixel. This translates to more brightness levels making exposure compensation easier. In a color image where each color is represented by the brightness of a red, green and blue pixel, it also means there are more colors, making white balance adjustments easier.</td>\n    </tr>\n    <tr>\n      <td>Post Processing Necessity</td>\n      <td>More Often</td><br>      <td>Less Often</td>\n      <td>When exposure and white balance are fine, compressed images will usually require less post processing. If nothing else, to share a RAW image it usually needs to be compressed to a more common file format.</td>\n    </tr>\n    <tr>\n      <td>Compatibility with Media Viewers and Editors</td>\n      <td>Fewer</td><br>      <td>More</td>\n      <td>Most cameras use different uncompressed image formats making them less likely to be supported by all media viewing and editing programs.</td>\n    </tr>\n    <tr>\n      <td>File Size</td>\n      <td>High</td><br>      <td>Low</td>\n      <td>Lower file sizes makes storing and sharing media much easier.</td>\n    </tr>\n    <tr>\n      <td>Time Between Shots</td>\n      <td>Longer</td><br>      <td>Shorter</td>\n      <td>It takes a longer time to process and save a RAW image compared to JPEG. On fixed interval shooting, the difference can be as large as 2s minimum interval for JPEG and 10s for RAW.</td>\n    </tr>\n\n  </tbody>\n</table>\n\n\n<p>For still images, DIJ cameras typically support JPEG (compressed) and DNG (RAW). Cameras can also capture in JPEG + RAW, saving two images for each shot.</p>\n<p>For video, only the Zenmuse X5 RAW supports capturing raw video. RAW video files are so large, the camera has a solid state drive (SSD). All cameras support compressed formats MP4 (MPEG – 4 AVC) and MOV (H.264).</p>\n<h5 id=\"photo-quality\">Photo Quality</h5>\n<p>As a JPEG image is compressed increased, it&#39;s file size and image quality reduces. Quality options of <strong>Normal</strong>, <strong>Fine</strong> and <strong>Excellent</strong> are available for users and developers to choose the right balance for their application.</p>\n<h2 id=\"exposure-options\">Exposure Options</h2>\n<p>Getting the exposure right is important to capture a great, recognizable picture. Under exposed (too dark) or over exposed (too light) pictures will lack detail of the subject. The concepts behind exposure, aperture, shutter, ISO, stops, field of view and depth of field are described and compared in detail in <a href=\"./camera_concepts.html\">Camera Concepts</a>.</p>\n<h5 id=\"shutter-speed\">Shutter Speed</h5>\n<p>The time the camera shutter exposes the camera sensor to light is described by the <strong>Shutter Speed</strong>. DJI cameras typically have shutter speeds from 1/8000 s to 8 s. Faster shutter speeds can capture moving features in a scene sharply, but will expose the sensor to less light.</p>\n<p>The shutter speed should not be set slower than the video frame rate when the camera recording video. For example, if the video frame rate is 30 fps, the shutter speed must be &lt;= 1/30 s.</p>\n<h5 id=\"iso\">ISO</h5>\n<p>ISO relates to the amount of amplification applied to each pixel. Higher ISO will increase amplification and therefore exposure, but will also increase noise in the picture. Higher ISO is effectively making the camera more sensitive to light, and is useful when trying to capture darker scenes. </p>\n<p>Different DJI cameras have different ISO ranges. The Zenmuse X5 has an ISO range of 100-25600.</p>\n<h5 id=\"aperture\">Aperture</h5>\n<p>The camera aperture controls how large the <strong>window</strong> the sensor can see the world through. Increasing the aperture will increase the amount of light incident on the camera, and therefore increase the exposure. It will also make the depth of field shallower. A shallower depth of field will mean that features at different distances to the camera will be more out of focus. This can create a great effect if trying to highlight the subject (in focus foreground, blurred background), but can be challenging if trying to capture both the foreground and background in focus.</p>\n<p>Aperture is measured in f-numbers or f-stops, where the numbers relate to the aperture diameter. A doubling of aperture area, is equivalent to multiplying the diameter by 1.414 (square root of 2), and increases the exposure by one stop.</p>\n<p>Cameras on the Phantom series of products have fixed aperture lenses (e.g. f/2.8). The Zenmuse X5 has an aperture range of f/1.7 to f/16.</p>\n<h5 id=\"exposure-mode\">Exposure Mode</h5>\n<p>There are 4 exposure modes available that vary with how exposure is automatically or manually adjusted.</p>\n<ol>\n<li><strong>Program</strong>: The camera automatically adjusts shutter, aperture (if available) and ISO automatically to find the best exposure. On cameras with adjustable aperture, ISO can either be set manually, or automatically based on preference.</li>\n<li><strong>Shutter Priority</strong>: Allows manual setting of the shutter speed. Aperture and ISO are automatically adjusted to find the best exposure. On cameras with adjustable aperture, ISO can either be set manually, or automatically based on preference. This mode is useful when trying to control the sharpness of a scene with moving features.</li>\n<li><strong>Aperture Priority</strong>: Allows manual setting of the aperture. Shutter speed and ISO are automatically adjusted to find the best exposure. On cameras with adjustable aperture, ISO can either be set manually, or automatically based on preference. This mode is useful when trying to control the depth of field of a scene.</li>\n<li><strong>Manual</strong>: ISO, aperture and shutter speed are all manually set. The <code>exposureCompensation</code> property can be monitored to understand how many stops away the picture is from good exposure.</li>\n</ol>\n<p>Camera Concepts contains a <a href=\"./camera_concepts.html#trade-off-between-aperture-shutter-iso\">description</a> and several examples on what to consider when setting aperture, shutter speed and ISO to get good exposure.</p>\n<h5 id=\"exposure-compensation\">Exposure Compensation</h5>\n<p>In the Program, Aperture Priority and Shutter Priority exposure modes, the exposure compensation value changes the exposure target the camera is using to calculate correct exposure and is set by the user. This can be used to capture darker or lighter images.</p>\n<p>In the Manual exposure mode, this value is reported from the camera and reports how much the exposure needs to be compensated for to get to what the camera thinks is the correct exposure. </p>\n<h5 id=\"ae-auto-exposure-metering\">AE (Auto Exposure) Metering</h5>\n<p>Exposure is measured by the camera by examining (metering) the pixels in an image. Metering can be set to either the whole image, or just part of the image (the center position or a custom position). This allows scenes that have a high dynamic range of light to be captured with the desired parts having correct exposure.</p>\n<h5 id=\"ae-auto-exposure-lock\">AE (Auto Exposure) Lock</h5>\n<p>If exposure is being calculated automatically, shutter, aperture and ISO settings might be changing dynamically. AELock allows a freeze of exposure setting changes without needing to change the exposure mode. This can be used to automatically set the exposure of a subject in a scene before moving the camera to frame the subject in a more interesting way (without the exposure changing).</p>\n<h2 id=\"picture-settings\">Picture Settings</h2>\n<h5 id=\"white-balance-and-color-temperature\">White Balance and Color Temperature</h5>\n<p>The color of the light (also known as color temperature) illuminating a scene determines the color of the captured image. A fluorescent white light will be cooler (have more blue than light) than light from the sun, and so a scene illuminated with a fluorescent light will look cooler. An outside scene and inside scene can be adjusted to have more similar colors if the white balance of the pictures are adjusted. If the white balance is adjusted so the white and grey colors in different pictures look similar, then the other colors in the pictures should also be similar.</p>\n<p>The DJI SDK offers several color temperature and white balance related settings:</p>\n<ul>\n<li>Auto white balance</li>\n<li>Preset white balance (e.g. sunny, cloudy, fluorescent etc)</li>\n<li>Custom color temperature</li>\n</ul>\n<p>Another way to adjust the color temperature is to capture the image in RAW format and change the color temperature in post processing.</p>\n<h5 id=\"anti-flicker\">Anti-Flicker</h5>\n<p>Light sources that flicker due to the frequency of their power source (50 Hz or 60 Hz) can sometime look weird when captured on video. The camera detects these oscillations in a light source and will try to only capture an image when the flicker&#39;s effect on the exposure or color is minimal.</p>\n<p>The setting can either be manually selected, or put in automatic mode.</p>\n<h5 id=\"sharpness\">Sharpness</h5>\n<p>The sharpness of an image describes how well defined details in the image are.</p>\n<p>The sharpness of an image is dependent on many factors including the shutter speed, lens design and manufacturing quality, aperture, focal length, distance from the image center and the sensor (number of pixels and anti-aliasing filter).</p>\n<p>A picture can be further sharpened or softened using high and low pass filters on the image. Sharpening the image will highlight changes in brightness, and emphasize details. Sharpening will therefore also increase the noise as noise is seen as small changes in brightness.</p>\n<p>In comparison, softening an image will reduce changes in brightness, reduce noise, but also make finer details harder to see. </p>\n<p>DJI cameras offer three sharpness settings: <strong>Standard</strong>, <strong>Hard</strong> and <strong>Soft</strong>.</p>\n<h5 id=\"contrast\">Contrast</h5>\n<p>Contrast is the difference or gradient of color and brightness. The larger the difference, the higher the contrast. Increasing the contrast of an image can make it more vivid, but can also reduce the amount of detail.</p>\n<p>DJI cameras offer three contrast settings: <strong>Standard</strong>, <strong>Hard</strong> and <strong>Soft</strong>.</p>\n<h5 id=\"hue-and-saturation\">Hue and Saturation</h5>\n<p>Hue is another word for a pure color. Saturation is the amount of grey in the color. A lower saturation has more grey in the color, and makes it look duller. Higher saturation decreases the grey in a color, making it more pure.</p>\n<p>Hue and saturation can be seen on a color wheel.</p>\n<html><img src=\"../../images/component-guide/camera-colorwheel.png\" width=30%></html>\n\n<p>The outside of the color wheel has complete color saturation, and is the hue. The center of the color wheel is grey, and is no saturation.</p>\n<p>Camera hue and saturation can both be adjusted. Adjusting the hue of an image will adjust the tint. Adjusting the saturation will make the image more or less grey. Images with high saturation can be very vivid, but also look false. </p>\n<h5 id=\"digital-filter\">Digital Filter</h5>\n<p>DJI cameras include several built-in filters that allow for interesting and creative effects. Many filters are available, some of which are <strong>Oil Painting</strong>, <strong>Water Color</strong>, and <strong>Art</strong>.</p>\n<h2 id=\"lens-and-focus\">Lens and Focus</h2>\n<p>Most DJI cameras come with a fixed lens, fixed aperture and fixed focus at infinity.</p>\n<p>The Zenmuse X5 camera however has a variable aperture, variable focus and the ability to swap lenses between DJI and third party options.</p>\n<p>DJI cameras with variable focus allow both manual and automatic focusing. When in automatic mode, the camera will calculate focus from an area in the image, which can be set through the SDK.</p>\n<p>Manual focusing is achieved by programmatically (or physically) setting the focus ring value.</p>\n<p>For some lenses, the minimum focus ring value (which corresponds with infinity focus) varies slightly between models and units. Therefore, when using a lens for the first time, a calibration needs to be done:</p>\n<ul>\n<li>Set focus mode to auto</li>\n<li>Point the camera at distant scene</li>\n<li>Ensure the focus target area is pointing at features &gt;30m away</li>\n<li>Let the camera auto focus</li>\n<li>Read the minimum focus ring value</li>\n</ul>\n<p>This focus ring value can be tied to the serial number of the camera for future reference.</p>\n<h2 id=\"live-video-feed\">Live Video Feed</h2>\n<p>Developers can get live H.264 video data from Camera using the Mobile SDK. The H.264 is a video coding format that is currently one of the most commonly used formats for compression, and distribution of video content. </p>\n<p>Even though most cameras can capture in 1080p or 4K, the live video stream is typically 720p to conserve wireless bandwidth. The live video stream is highly dependent on the quality of the wireless link. Wireless systems are complex, with many variables contributing to overall quality, however generally as the transmission distance increases, or obstacles start to occlude the signal, video quality can deteriorate rapidly.</p>\n<h2 id=\"playback-manager\">Playback Manager</h2>\n<p>DJI cameras support a media playback mode. The live video stream is replaced with a media preview stream. Commands can be sent to the camera to:</p>\n<ul>\n<li>View single previews or as pages of smaller thumbnails</li>\n<li>Navigate single and page previews</li>\n<li>Select and deselect files</li>\n<li>Delete files</li>\n<li>Play/pause/stop video previews</li>\n<li>Download Files</li>\n</ul>\n<h2 id=\"media-manager\">Media Manager</h2>\n<p>Media manager is used to interact with the file system on the SD card.\nBy using the media manager, metadata for all the multimedia files can be read, and files can be downloaded or deleted.</p>\n<p>During media download, the live video feed is paused so all wireless bandwidth can be dedicated to transferring files.</p>\n<h2 id=\"media\">Media</h2>\n<h5 id=\"storage\">Storage</h5>\n<p>DJI Cameras typically use SD cards to store photos and videos. Depending on whether Class 10 or UHS-1 Micro SD cards of up to 64 GB are required to accommodate the video bandwidths of the various cameras.</p>\n<p>The Zenmuse X5 RAW also has a 512 GB solid state drive (SSD) to record video. 4K RAW video data rates can peak at 2.4 Gbps compared to 60 Mbps for MP4 or MOV.</p>\n<p>SD Cards are either located on the camera itself, or the gimbal the camera is integrated into.</p>\n<h5 id=\"file-index\">File Index</h5>\n<p>There are two file index modes for storing media: <strong>Reset</strong> and <strong>Sequence</strong>. </p>\n<p><strong>Reset mode</strong>: The camera will reset the newest file&#39;s index to be one larger than the largest number of photos taken on the SD card.</p>\n<p><strong>Sequence mode</strong>, the camera will set the newest file&#39;s index to the larger of either the maximum number of photos taken on the SD card or the camera. </p>","meta":{"title":"Camera","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>The flight controller is an onboard computer that combines control information from the pilot with sensor information to adjust the thrust at each propellor and fly the aircraft as desired.</p>\n<p>The flight controller is responsible for:</p>\n<ul>\n<li>Flight control including motor control, taking off and landing, manual flight modes</li>\n<li>Aircraft state information such as attitude, position, speed</li>\n<li>Sensor sub components such as compasses, IMUs, and positioning systems.</li>\n<li>Aircraft sub components such as the landing gear</li>\n<li>Flight limitation systems such as No Fly Zones and the GEO System</li>\n<li>Aircraft flight simulation for testing and debugging</li>\n</ul>\n<p>A general description of fundamental flight control concepts can be found <a href=\"./flightController_concepts.html\">here</a>.</p>\n<h2 id=\"state\">State</h2>\n<p>The flight controller provides detailed state information at up to 10 Hz including:</p>\n<ul>\n<li>Aircraft position, velocity and altitude</li>\n<li>Remaining Battery and Flight time information</li>\n<li>Home location</li>\n<li>Sensor information (compass, IMU, Satellite positioning)</li>\n<li>Return home status</li>\n<li>Whether motors are on and aircraft is flying or not</li>\n<li>Flight limitation and GEO system information</li>\n</ul>\n<h2 id=\"flying\">Flying</h2>\n<h3 id=\"motor-control\">Motor Control</h3>\n<p>Motors can be turned on and off through APIs in the DJI Mobile SDK. Motors can only be turned off when the aircraft is not flying. Motors will not turn on if there are IMU or Compass calibration errors, or if the IMU is still pre-heating.</p>\n<h3 id=\"beginning-and-ending-flights\">Beginning and Ending Flights</h3>\n<p>Aircraft take-off and landing can be automated through APIs in the DJI Mobile SDK. Takeoff is considered complete when the aircraft is hovering 1.2 meters (4 feet) above the ground. Automatic take-off can only be initiated when the motors are off.</p>\n<p>When a automated land command is sent, the aircraft will descend at it&#39;s current position and land.</p>\n<h3 id=\"flight-control\">Flight Control</h3>\n<p>Aircraft flight can be controlled in several ways:</p>\n<ul>\n<li><strong>Manually</strong>: Remote controller control sticks can be manipulated by the user</li>\n<li><strong><a href=\"./component-guide-missions.html\">Missions</a></strong>: Simple high level flight automation</li>\n<li><strong><a href=\"#virtual-sticks\">Virtual Sticks</a></strong>: Stick commands can be sent using DJI Mobile SDK APIs that simulate manual flight. </li>\n</ul>\n<h3 id=\"flight-orientation\">Flight Orientation</h3>\n<p>The remote controller control sticks can be used to move the aircraft forward, backwards, left and right. However, if the direction of the aircraft isn&#39;t obvious, it can be difficult to control the aircraft predictably from pilot&#39;s perspective on the ground.</p>\n<p>Several flight orientation modes are available to make flying easier:</p>\n<ul>\n<li><strong>Course Lock</strong>: The aircraft moves relative to a locked course heading.</li>\n<li><strong>Home Lock</strong>: The aircraft moves relative radially to the Home Point.</li>\n<li><strong>Aircraft Heading</strong>: The aircraft moves relative to the front of the aircraft.</li>\n</ul>\n<p>More details are described in <a href=\"./flightController_concepts.html#ioc-intelligent-orientation-control\">Flight Control Concepts</a>.</p>\n<h3 id=\"flight-limitation\">Flight Limitation</h3>\n<p>Maximum aircraft altitude and distance from home location can be used to limit the area an aircraft can fly in. The DJI Mobile SDK provides APIs that allow developers to query and change these limitations.</p>\n<h3 id=\"geospatial-environment-online-geo-\">Geospatial Environment Online (GEO)</h3>\n<p>The <a href=\"http://www.dji.com/flysafe/geo-system\" target=\"_blank\">GEO system</a> is a best-in-class geospatial information system that provides drone operators with information that will help them make smart decisions about where and when to fly. It combines up-to-date airspace information, a warning and flight-restriction system, a mechanism for <a href=\"http://www.dji.com/flysafe/geo-system/unlock\" target=\"_blank\"> unlocking </a> (self-authorizing) drone flights in locations where flight is permitted under certain conditions, and a minimally-invasive accountability mechanism for these decisions.</p>\n<h2 id=\"sensors\">Sensors</h2>\n<p>The Flight controller manages several sub components of the aircraft including sensors and landing gear.</p>\n<h3 id=\"compass\">Compass</h3>\n<p>The compass measures magnetic field direction and is used to determine the heading of the aircraft relative to North. The compass sometimes needs to be calibrated if flying near magnetic interference. Compass calibration will require the user to rotate the aircraft vertically and horizontally through the azimuth. Products with multiple compasses (like the Phantom 4) will have their compass state fused into one compass class for simplicity.</p>\n<h3 id=\"imu-inertial-measurement-unit\">IMU - Inertial Measurement Unit</h3>\n<p>The IMU contains an accelerometer and gyroscope to measure linear acceleration and angular velocity. The IMU is a sensitive system that is dependent on temperature and sometimes requires recalibration. Preheating is done automatically by the aircraft, and its status can be monitored in the flight controller state data. Calibration can be initiated by DJI Mobile SDK APIs when required.</p>\n<p>Some products have more than one IMU for redundancy. The Phantom 4 has two IMUs, while the M600 can accommodate up to three.</p>\n<h3 id=\"rtk-positioning-system\">RTK Positioning System</h3>\n<p>DJI Products come with built-in consumer satellite positioning systems that use GPS and GLONASS satellite constellations. Consumer grade satellite positioning can have position errors of several meters.</p>\n<p>The DJI DRTK positioning system is an accessory compatible with the M600 and A3 flight controller that allows centimeter level positioning. DRTK is a real time kinetic satellite positioning system that uses GPS+GLONASS or GPS+Beidou constellations (depending on DRTK model).</p>\n<p>The system requires both a base station and mobile station receiver, which are connected together through a wireless link. The base station receiver is deployed at a known location on the ground, while the mobile station is deployed on the aircraft. Both base station and mobile station will experience similar satellite signal errors at the same time. As the base station is at a known location, it can send real time correction information to the mobile station, resulting in centimeter accurate positing information for the mobile station relative to the base station.</p>\n<p>The mobile station comes with two antennas which can be deployed on opposite sides of the aircraft. As the position of both antennas can be combined into a heading vector that can often be more accurate than compass heading in the environments with high magnetic field interference (like near large metal structures, or high voltage lines).</p>\n<h2 id=\"vision-system-and-intelligent-flight-assistant\">Vision System and Intelligent Flight Assistant</h2>\n<p>Cameras can be used to detect obstacles and accurately determine relative position and velocity. These cameras are typically mounted on the product facing downward for positioning and forward for obstacle detection. They are separate from the main camera used to capture photos and videos.</p>\n<h5 id=\"obstacle-avoidance\">Obstacle Avoidance</h5>\n<p>The Phantom 4 has two forward facing cameras that use stereo vision to determine the depth of the environment. This vision system allows the aircraft to either stop in front of or go around obstacles in its flight path.</p>\n<p>The vision system enables users to fly with increased comfort as there is lower probability they will make a mistake and impact an object. However, limitations of the system still need to be understood to fly safely. Objects that are difficult to detect are those that are small, very narrow, too plain in appearance (visual features can&#39;t be extracted), not in the field of view of both cameras, or too close or too far from the product (see <a href=\"http://www.dji.com/product/phantom-4/info#specs\" target=\"_blank\"> product page </a>) for specifications). </p>\n<h5 id=\"positioning\">Positioning</h5>\n<p>Downward facing cameras can help determine relative position and velocity more accurately than consumer satellite positioning systems. They can also be used to hover in GPS denied environments such as inside buildings.</p>\n<h5 id=\"intelligent-flight-assistant\">Intelligent Flight Assistant</h5>\n<p>The DJI Mobile SDK provides an Intelligent Flight Assistant that gives access to state information of the obstacle avoidance and positioning vision systems.</p>\n<p>In addition, warning and distance information is available to developers for obstacles in front of the aircraft.</p>\n<h2 id=\"landing-gear\">Landing Gear</h2>\n<p>Some products have moveable landing gear that are deployed when landing to protect the camera, but can be raised (retracted) when flying to not impede the camera view. </p>\n<p>Landing gear can be deployed or retracted programmatically or automatically. When automatic, the flight controller will determine when to deploy the landing gear and when to retract it. In situations where a fast landing is required, it is better to programmatically deploy the landing gear so the aircraft doesn&#39;t have to pause at a height close to the ground to trigger the automatic process.</p>\n<h5 id=\"transport-mode\">Transport mode</h5>\n<p>In transport mode, the landing gear will be in the same geometric plane as the aircraft body so it can be easily transported. </p>\n<h2 id=\"flight-time-and-battery-thresholds\">Flight Time and Battery Thresholds</h2>\n<p>Aircraft flight time is determined by total aircraft mass, the available stored (battery) energy on the aircraft, the environment the aircraft is flying in, and how the aircraft is being flown. Flying fast against strong wind with a heavy payload will have a shorter flight time than hovering in no wind with a light payload.</p>\n<p>During a flight, the flight controller and smart battery will work together to estimate the remaining time of the current flight based on data collected during the flight. It will also provide estimates for the the battery percentage required to return home from the current location, or land immediately.</p>\n<p>In addition, two manual battery thresholds can be set that will automate aircraft behavior when the battery is running low. </p>\n<ul>\n<li><strong>Return to home</strong>: The threshold is usually set between 25% and 50%, and will automatically initiate a return to home warning if the threshold is crossed. If no action is taken within 10s, then the aircraft will automatically return home. The return home can be cancelled by pressing the <strong>Return Home</strong> button on the remote controller.</li>\n<li><strong>Land in place</strong>: The threshold is usually set between 10% and 25%, and will immediately land the aircraft if crossed.</li>\n</ul>\n<h2 id=\"returning-home\">Returning Home</h2>\n<p>The aircraft can automatically return-to-home (RTH) in a number of scenarios:</p>\n<ul>\n<li><strong>Smart RTH</strong>: Commanded to by the pilot through the application or the remote controller</li>\n<li><strong>Failsafe RTH</strong>: If the wireless link is lost between the remote controller and aircraft</li>\n<li><strong>Low Battery RTH</strong>: If the battery drops below a threshold that is enough to get home, but not enough to require immediate emergency landing</li>\n</ul>\n<p>When automatically going home, the aircraft will rise to a minimum altitude, fly to the home location (home point) using GPS positioning, then land.</p>\n<p>The home point is automatically set as the location the aircraft first takes off from after power on. After that, the home point can be updated through APIs in the DJI Mobile SDK but is limited to being within 30m of initial take-off location, current aircraft&#39;s location, current mobile location, or current remote controller&#39;s location (for remote controllers with GPS capability).</p>\n<blockquote>\n<p><strong>Note:</strong> If the GPS signal is not sufficient during take-off to record a home location, the home point will be recorded when the GPS signal is strong enough. When taking off in poor satellite signal environments, developers should ensure the home point being set is within the user&#39;s expectations.</p>\n</blockquote>\n<h4 id=\"smart-rth\">Smart RTH</h4>\n<p>Press the <strong>Return Home</strong> button on the remote controller to initiate Smart RTH. The aircraft will then automatically return to the last recorded Home Point. </p>\n<p>The remote controller&#39;s control sticks can be used to change the aircraft&#39;s position to avoid a collision during the Smart RTH process. Press and hold the button once to start the process, and press the button again to terminate the procedure and regain full control of the aircraft.</p>\n<p>Smart RTH can also be initiated and cancelled through the DJI Mobile SDK.</p>\n<h4 id=\"failsafe-rth\">Failsafe RTH</h4>\n<p>If the Home Point was successfully recorded and the compass is functioning normally, Failsafe RTH will be automatically activated if the remote controller signal is lost for more than three seconds. The RTH process may be interrupted and the operator may regain control of the aircraft if the remote controller signal connection is re-established.</p>\n<p>In some missions, it is not desirable to immediately return home when signal connection is lost. Failsafe behavior can be configured using DJI Mobile SDK APIs.</p>\n<h4 id=\"low-battery-rth\">Low Battery RTH</h4>\n<p>When the battery drops below a certain threshold (typically 25% to 50%), the aircraft will request to come home. When it does so, the DJI Mobile SDK APIs that monitor flight controller state will be updated to include this request, and at the same time the remote controller will start beeping.</p>\n<p>The RTH procedure can be cancelled by either pressing the home button on the remote controller, or sending a cancel command through the application using the SDK.</p>\n<h2 id=\"loss-of-wireless-link\">Loss of Wireless Link</h2>\n<p>The wireless connection between the remote controller and aircraft can sometimes be lost when the distance is too great, or obstacles impede the link.</p>\n<p>If the link is lost for 3 seconds, the aircraft will start performing a failsafe behavior. Behavior options include:</p>\n<ul>\n<li>Automatically returning home (see <a href=\"#returning-home\">Returning Home</a>)</li>\n<li>Hovering in position</li>\n<li>Landing in position</li>\n</ul>\n<h2 id=\"onboard-sdk-communication\">Onboard SDK Communication</h2>\n<p>Applications using the DJI Mobile SDK can communicate with DJI Onboard SDK applications deployed on the aircraft over the Lightbridge wireless communication link.</p>\n<p>The DJI Mobile SDK gives developers the ability to detect if an Onboard SDK application is connected to the flight controller, and both send and receive data to it. The size of the data cannot be greater than 100 bytes, and will be sent in 40 byte increments every 14ms.</p>\n<h2 id=\"simulator\">Simulator</h2>\n<p>DJI aircraft flight controllers support a simulation mode for faster, safer development of applications. The flight controller accept control commands, and use them to simulate sensor and state information. Applications can be tested in the simulator first before taking the products into the field.</p>\n<p>The simulator can be started and stopped using the DJI Mobile SDK. Programatic control of the simulator means continuous integration environments can leverage the simulator to do comprehensive application testing every time an application is built.</p>\n<p>A windows application (and for P4 a mac application) can be used to visualize the simulated flight. More details on using the simulator are <a href=\"../application-development-workflow/workflow-testing.html\">here</a>.</p>\n<h2 id=\"virtual-sticks\">Virtual Sticks</h2>\n<p>Virtual stick functions in the DJI Mobile SDK simulate the remote controller&#39;s joysticks, and therefore an aircraft can be automated to fly in any way a human can manually fly it. Compared to missions, this is a more complicated, but flexible way to automate flight.</p>\n<p>The virtual stick APIs have several modes of operation that are important to understand.</p>\n<h3 id=\"coordinate-system\">Coordinate System</h3>\n<p>Either Ground or Body coordinate system can be chosen. All horizontal movement commands (X, Y, pitch, roll) will be relative to the coordinate system.</p>\n<h3 id=\"roll-pitch-control-mode\">Roll Pitch Control Mode</h3>\n<p>Virtual stick commands to move the aircraft horizontally can either be set with X/Y velocities, or roll/pitch angles. Larger roll and pitch angles result in larger Y and X velocities respectively. Roll and pitch angles are always relative to the horizontal. Roll and pitch directions are dependent on the coordinate system, and can be confusing. For convenience a table detailing how the aircraft moves depending on coordinate system and roll pitch control mode is given below. These can all be calculated using the definition of the coordinate systems.</p>\n<table id=\"t01\">\n  <thead>\n    <tr>\n      <th>Coordinate</th>\n      <th>RollPitch Control Mode</th>\n      <th>Aircraft Heading</th>\n      <th>FlightControl Data.Pitch (Positive)</th>\n      <th>FlightControl Data.Pitch (Negative)</th>\n      <th>FlightControl Data.Roll (Positive)</th>\n      <th>FlightControl Data.Roll (Negative)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"2\">Ground</th>\n      <td>Angle</td>\n      <td>North</td><br>      <td>Go South</td>\n      <td>Go North</td>\n      <td>Go East</td><br>      <td>Go West</td>\n    </tr>\n    <tr>\n      <td>Angle</td>\n      <td>East</td><br>      <td>Go South</td>\n      <td>Go North</td>\n      <td>Go East</td><br>      <td>Go West</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">Ground</th>\n      <td>Velocity</td>\n      <td>North</td><br>      <td>Go East</td>\n      <td>Go West</td>\n      <td>Go North</td><br>      <td>Go South</td>\n    </tr>\n    <tr>\n      <td>Velocity</td>\n      <td>East</td><br>      <td>Go East</td>\n      <td>Go West</td>\n      <td>Go North</td><br>      <td>Go South</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">Body</th>\n      <td>Angle</td>\n      <td>North</td><br>      <td>Go South</td>\n      <td>Go North</td>\n      <td>Go East</td><br>      <td>Go West</td>\n    </tr>\n    <tr>\n      <td>Angle</td>\n      <td>East</td><br>      <td>Go West</td>\n      <td>Go East</td>\n      <td>Go South</td><br>      <td>Go North</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">Body</th>\n      <td>Velocity</td>\n      <td>North</td><br>      <td>Go East</td>\n      <td>Go West</td>\n      <td>Go North</td><br>      <td>Go South</td>\n    </tr>\n    <tr>\n      <td> Velocity </td>\n      <td>East</td><br>      <td>Go South</td>\n      <td>Go North</td>\n      <td>Go East</td><br>      <td>Go West</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"yaw-control-mode\">Yaw Control Mode</h3>\n<p>Yaw can be changed by either angle or velocity. Yaw settings are independent of the coordinate system. Positive yaw velocity will always rotate clockwise, and yaw angle is always relative to North.</p>\n<h3 id=\"vertical-throttle-control-mode-\">Vertical Throttle Control Mode:</h3>\n<p>Vertical movement can be achieved either using velocity or position. Position is an altitude relative to the take-off location. Velocity is always relative to the aircraft, and does not follow typical coordinate system convention (positive vertical velocity results in the aircraft ascending). </p>","meta":{"title":"Flight Controller","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Cameras fixed to an aircraft will record images that pitch and roll with the aircraft as it moves. Multi rotor aircraft need to pitch and roll simply to move horizontally, and so getting a stable horizontal shot is not possible.</p>\n<p>A gimbal is used to keep a camera or sensor horizontal when its mount (e.g. aircraft) is moving. The gimbal has three motors controlling rotation in orthogonal axes. The gimbal feeds gyroscope information back to the motor controllers to compensate for rotational movement of the mount.</p>\n<p>In addition to stabilization, the three motors can be used to control the direction the camera is pointing, and can be used to smoothly track a target, or pan a shot. The three axes of rotation are referred to as Pitch, Roll and Yaw, and the gimbal orientation is referred to as its attitude. Explanations of these axes can be found in the <a href=\"./flightController_concepts.html\">Flight Control Concepts</a>.</p>\n<p>Gimbals have mechanical limits (or stops) to their rotation around each axis. When a sensor is mounted on a gimbal, many data and control lines are required to go from mount to sensor. These control lines are usually bundled in a cable assembly or flex circuit, both of which will limit the available rotation of the gimbal. Additionally, gimbals will also limit rotation so cameras cannot see landing gear or the product itself.</p>\n<p>The DJI Mobile SDK gives access to gimbal capabilities, state, and control. Numerous settings are possible with the gimbal that define its work mode and how it compensates for movement.</p>\n<p><img src=\"../../images/component-guide/gimbal_intro.png\" alt=\"\"></p>\n<h2 id=\"gimbal-capabilities\">Gimbal Capabilities</h2>\n<p>Gimbal features vary significantly across product lines. Therefore the DJI Mobile SDK provides a dictionary of gimbal capabilities for runtime use. Gimbal capabilities include:</p>\n<ul>\n<li>Which axes are controllable</li>\n<li>Mechanical stops of each axis</li>\n<li>Whether response speeds to manual control are customizable</li>\n<li>Whether <a href=\"#smoothTrack\">SmoothTrack</a> is available and customizable</li>\n<li>Whether <a href=\"#endPoint\">End point</a> settings are available and customizable</li>\n<li>Whether <a href=\"#motor-control\">Motor control</a> settings are available and customizable</li>\n</ul>\n<h2 id=\"work-modes\">Work Modes</h2>\n<p>The gimbal has several work modes that define how the gimbal follows aircraft movement, and how many axes are available for control.</p>\n<ul>\n<li><strong>FPV (First Person View) Mode</strong>: Only pitch is controllable. Yaw and roll will be fixed relative to the product while pitch remains controllable.</li>\n<li><strong>Yaw Follow Mode</strong>: Pitch and roll are controllable. Yaw will follow the products heading.</li>\n<li><strong>Free Mode</strong>: Pitch, roll and yaw are all controllable, meaning the gimbal can move independently of the product&#39;s yaw. In this mode, even if the product yaw changes, the camera will continue pointing in the same world direction. </li>\n</ul>\n<h2 id=\"gimbal-state\">Gimbal State</h2>\n<p>The gimbal component pushes state information back to the Mobile device at up to 10 Hz. State information includes current attitude, calibration state, calibration offsets, work mode, and whether the gimbal is at a mechanical stop.</p>\n<h2 id=\"moving-the-gimbal\">Moving the Gimbal</h2>\n<h3 id=\"custom-control\">Custom Control</h3>\n<p>Through the DJI Mobile SDK, the gimbal can be moved in two ways:</p>\n<ul>\n<li>Move to an angle over a duration</li>\n<li>Move at a speed in a direction</li>\n</ul>\n<p>When using angle mode to rotate the gimbal&#39;s pitch, roll and yaw, the rotation angle of the gimbal can be defined as either <strong>Absolute</strong>(relative to the aircraft heading), or <strong>Relative</strong> (relative to its current angle). </p>\n<p>When using speed to rotate the gimbal&#39;s pitch, roll and yaw, the direction can either be set to clockwise or counter-clockwise.</p>\n<h3 id=\"reset\">Reset</h3>\n<p>The gimbal can be reset, and its pitch, roll and yaw will be set to 0 degrees. The reset position is pointing horizontally and being in the same direction as product heading. </p>\n<p>For X3, X5 and X5R, the pitch doesn&#39;t get set to 0 degrees, but remains at the current pitch.</p>\n<h2 id=\"calibration\">Calibration</h2>\n<p>Gimbals will be automatically calibrated on power up, but can also be calibrated through SDK APIs. Users will see the camera rotate around all three axes for several seconds when the gimbal is calibrating.</p>\n<p>The product should be stationary (not flying, or being held) and horizontal during calibration. For gimbal with adjustable payloads, the payload should be present and <a href=\"#balancing\">balanced</a> before doing a calibration.</p>\n<h3 id=\"fine-tune-roll\">Fine Tune Roll</h3>\n<p>The gimbal roll can be fine tuned with a custom offset. The range for the custom offset is [-10, 10] degrees. If the offset is negative, the gimbal will be fine tuned the specified number of degrees in the counterclockwise direction.</p>\n<h3 id=\"balancing\">Balancing</h3>\n<p>Gimbals that can accommodate custom payloads (like the Ronin MX) require the payload&#39;s center of mass to be at the gimbal&#39;s rotational center. The process of adjusting the payload position to achieve this is called balancing.</p>\n<p>Balancing APIs are provided to initiate balancing tests and return balancing results. A payload needs to be properly balanced before starting gimbal calibration.</p>\n<h2 id=\"osmo-and-ronin-mx-functionality\">Osmo and Ronin-MX Functionality</h2>\n<p>Osmo and Ronin-MX can be used in a handheld configuration, and allow additional customizations to how the gimbal responds to user movement.</p>\n<h3 id=\"smoothtrack\">SmoothTrack</h3>\n<p>SmoothTrack describes how and when the gimbal will compensate for yaw and pitch movement at it&#39;s mount (e.g. Osmo handle). SmoothTrack speed, acceleration and deadband can be customized. The animation below shows the gimbal compensating for handle yaw rotation relatively slowly. Roll is not supported with SmoothTrack as a horizontal image is usually preferred.</p>\n<p> <img src=\"../../images/component-guide/osmo_smoothTrack.gif\" alt=\"osmoSmoothTrack\"></p>\n<ul>\n<li><p><strong>SmoothTrack Speed</strong> is the gimbal&#39;s <em>catch-up</em> speed to large mount rotations. A faster speed will be more responsive for tracking fast moving objects, but also produce less smooth video.</p>\n</li>\n<li><p><strong>SmoothTrack Acceleration</strong> determines how closely the gimbal will compensate for handle movement (how quickly it will reach the SmoothTrack speed). A fast acceleration will be more responsive to small handle rotations, and therefore less able to smooth out small unwanted rotations.</p>\n</li>\n<li><p><strong>SmoothTrack Deadband</strong> determines the amount of rotation required before the gimbal starts to compensate. A larger deadband requires more mount movement before the gimbal will start to move. Having a large deadband is useful for when the camera is moving a lot, and the subject is relatively stationary. Smaller deadbands are required if quicker response is needed to mount movement.</p>\n</li>\n</ul>\n<h3 id=\"physical-controller\">Physical Controller</h3>\n<p>The gimbal can be manually moved around the pitch and yaw axes using the joystick on OSMO and the remote controller on Ronin-MX. The joystick and remote controller are physical controllers on the handles of the products.</p>\n<p>The gimbal&#39;s response to the physical controller can be customized using speed, smoothing and deadband settings. The animation below shows the gimbal following movement of the Osmo joystick.</p>\n<p> <img src=\"../../images/component-guide/osmo_joystick.gif\" alt=\"osmoJoystick\"></p>\n<ul>\n<li><p><strong>Controller Speed</strong> is the gimbal&#39;s movement speed when controlled with the physical controller. When the controller is at full deflection (displacement), the gimbal will be moving at the controller speed.</p>\n</li>\n<li><p><strong>Controller Smoothing</strong> controls the deceleration of the gimbal when the physical controller deflection reduces. </p>\n</li>\n<li><p><strong>Controller Deadband</strong> determines the amount of deflection required in the physical controller before the gimbal starts to move. </p>\n</li>\n</ul>\n<h3 id=\"selfie\">Selfie</h3>\n<p>The Osmo gimbal can quickly adjust the camera into a selfie position by pressing the trigger three times rapidly. The camera yaw will rotate to 180 degrees (facing the back of the handle), and the pitch will be adjusted to be horizontal.</p>\n<p>Pressing the trigger two times will adjust the camera yaw to 0 degrees, and pitch to be horizontal.</p>\n<p>The DJI Mobile SDK has an API that can toggle between the selfie, and 0 position.</p>\n<h3 id=\"orientation-lock\">Orientation Lock</h3>\n<p>Holding the trigger will lock the camera to it&#39;s current orientation. Any rotation in pitch, roll and yaw of the handle will be compensated for by the gimbal up to the gimbal stops. The below animation illustrates an Osmo in orientation Lock.</p>\n<p><img src=\"../../images/component-guide/osmo_lock.gif\" alt=\"osmoLock\"></p>\n<h3 id=\"endpoint\">Endpoint</h3>\n<p>All gimbals have mechanical stops, but the Ronin MX can also have logical stops (Endpoints) that limit rotation when using the physical controller. The DJI Mobile SDK has APIs to enable and set Endpoints in the directions of <strong>PitchUp</strong>, <strong>PitchDown</strong>, <strong>YawLeft</strong> and <strong>YawRight</strong>.</p>\n<h3 id=\"motor-control\">Motor Control</h3>\n<p>For gimbals with adjustable payloads, finer level motor control is useful to compensate for payloads with different masses. The controller is a proportional-integral-derivative (PID) type, and it&#39;s coefficients can all be adjusted.</p>\n<ul>\n<li><strong>Stiffness:</strong> The proportional term of a PID controller</li>\n<li><strong>Strength:</strong> The coefficient for the integral term of a PID controller</li>\n<li><strong>Precontrol:</strong> The coefficient for the derivative term of a PID controller</li>\n<li><strong>Gyro Filtering:</strong> The coefficient for denoising the output</li>\n</ul>\n<h3 id=\"range-extension\">Range Extension</h3>\n<p>Some gimbals have stops in place to prevent the camera from being impeded by the landing gear or other parts of the product when the product is at extreme attitudes. For some applications, it can be useful to extend the range of motion of the gimbal, as long as the developer and user understand that some shots might be compromised.</p>\n<p>Therefore the DJI Mobile SDK provides APIs that enable some axes on some products to have range extensions. The gimbal capability dictionary can be used to determine when range extensions are available.</p>\n<h3 id=\"upright-mode\">Upright Mode</h3>\n<p>The M600 allows the Ronin MX to be mounted on top of the aircraft instead of underneath the aircraft. This is especially useful when doing inspections underneath structures like bridges. The DJI Mobile SDK provides APIs that can set the gimbal upright mode.</p>","meta":{"title":"Gimbal","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Missions can be used to easily automate flight. There are many different mission types that offer different product behavior. Some missions can be uploaded to and managed by the aircraft, while other missions are managed from the mobile device.</p>\n<p>Missions run from the mobile device can offer more complex or customizable behavior, however if the wireless link between remote controller and aircraft is lost then they can be interrupted. In comparison, missions run from the aircraft will be less customizable and be limited by aircraft memory, but be able to continue when there is a loss in the wireless link.</p>\n<h2 id=\"mission-manager\">Mission Manager</h2>\n<p>All missions are managed through the DJI Mobile SDK&#39;s Mission Manager. The Mission Manager provides a consistent execution experience for all missions and allows preparation, starting, pausing, resuming, downloading and ending of missions.</p>\n<h2 id=\"waypoint-mission\">Waypoint Mission</h2>\n<p>A waypoint mission is a series of pre-defined locations (waypoints) the aircraft will fly to. A location is a latitude, longitude and altitude. Aircraft heading and altitude between waypoints can change either gradually or at the waypoint itself. A series of actions (such as take photo) can be executed at each waypoint.</p>\n<p>During the mission, the mission can be manually adjusted using the remote controller control sticks. The mission speed can be sped up, slowed down or even executed in reverse. </p>\n<p><img src=\"../../images/component-guide/waypoints.gif\" alt=\"\"></p>\n<p>A Waypoint Mission is uploaded to and executed by the aircraft, but is limited by the amount of storage in the flight controller. Accordingly only 99 waypoints can be executed per mission. Custom Mission can be used to easily queue waypoint missions, in applications that require more than 99 points.</p>\n<h3 id=\"hot-point-mission\">Hot Point Mission</h3>\n<p>In a Hot Point Mission, the aircraft will repeatedly fly circles of a constant radius around a specified point called a Hot Point. Altitude, velocity, the Hot Point location, aircraft heading and flight direction can all be defined as part of the mission.</p>\n<p>Altitude, heading and radius can also be adjusted manually using the remote controller control sticks during the mission.</p>\n<p><img src=\"../../images/component-guide/hotPoint.gif\" alt=\"\"></p>\n<h3 id=\"follow-me-mission\">Follow Me Mission</h3>\n<p>In a Follow Me Mission, the aircraft will follow GPS coordinates continually sent to the aircraft maintaining separation and a constant altitude.</p>\n<p>The aircraft will hover in place if it hasn&#39;t received a new GPS coordinate for more than 6 seconds. </p>\n<p><img src=\"../../images/component-guide/followMe.gif\" alt=\"followMe\"></p>\n<h3 id=\"activetrack-mission\">ActiveTrack Mission</h3>\n<p>The ActiveTrack Mission allows an aircraft to track a moving subject using the vision system and without a GPS tracker on the subject. </p>\n<ul>\n<li>User defines a rectangle on the live video view that defines the subject to track.</li>\n<li>The rectangle is sent to the aircraft, and which will start to track the object</li>\n<li>The aircraft will send back real-time updates of the rectangle tracking what it thinks is the subject and ask for confirmation it is tracking correctly</li>\n<li>On confirmation, the aircraft will start to move with the subject, following it while tracking</li>\n<li>If the tracking algorithm loses confidence it is tracking the subject correctly the aircraft will return to a hover and ask for confirmation about the subject again</li>\n</ul>\n<p>During the mission, the main camera is used to track the object and so the gimbal cannot be controlled by the user or application. The aircraft can be flown manually with pitch, roll and throttle stick commands from the remote controller to move the aircraft around the subject being tracked.</p>\n<p>ActiveTrack is only supported on the Phantom 4.</p>\n<p><img src=\"../../images/component-guide/p4ActiveTrackAni.gif\" alt=\"p4ActiveTrackAni\"></p>\n<h3 id=\"tapfly-mission\">TapFly Mission</h3>\n<p>The TapFly mission flies the aircraft in the direction of a point on the live video stream that the user chooses. The mission is initialized with a position target from the live video stream. The 3D direction of the coordinate is calculated, and the aircraft proceeds to fly in that direction. The aircraft can automatically avoid obstacles when the scene is sufficiently illuminated (more than 300 lux but less than 10,000 lux). The aircraft stops flying in the direction if it reaches its radius limitation, the mission is stopped, the user pulls back on the pitch stick or if it comes to an obstacle it cannot bypass. </p>\n<p>The Remote Controller yaw stick can be used to adjust the heading of the aircraft during mission execution, which also adjusts the direction of flight to the new yaw. Using any other stick controls will cancel the mission.</p>\n<p>TapFly is only supported on the Phantom 4.</p>\n<p><img src=\"../../images/component-guide/p4TapFlyAni.gif\" alt=\"p4TapFlyAni\"></p>\n<h3 id=\"panorama-mission\">Panorama Mission</h3>\n<p>The Panorama Mission rotates the camera 180 or 360 degrees while taking photos which can then be downloaded to render a panorama. In full circle mode, 8 photos are taken. In half circle mode, 5 photos are taken. Other commands cannot be sent to the camera until the mission is finished. The Panorama Mission does not support the image stitching feature, so the images must be stitched manually. All the images will be stored on the SD card.</p>\n<p>The Panorama Mission is only supported on OSMO. </p>\n<h3 id=\"custom-mission\">Custom Mission</h3>\n<p>The Custom Mission serializes multiple missions or mission steps. It is an easy way to create complex, rich missions. Each mission step is uploaded to the aircraft at time of execution. Mission steps available are:</p>\n<ul>\n<li>Waypoint Mission</li>\n<li>Follow Me Mission</li>\n<li>Hot Point Mission</li>\n<li>Aircraft Take off</li>\n<li>Aircraft Land</li>\n<li>Goto Waypoint</li>\n<li>Go Home</li>\n<li>Shoot Photo</li>\n<li>Record Video</li>\n<li>Change Aircraft Yaw</li>\n<li>Change Gimbal Attitude</li>\n</ul>","meta":{"title":"Missions","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>The remote controller allows manual flight, gimbal and camera control, and provides a robust wireless control link for aircraft. The mobile device can connect to the remote controller to communicate to the aircraft and receive the live video stream from the camera.</p>\n<p>The remote controller has sticks, wheels, switches and buttons that give control. It has a USB connector for mobile devices, and sometimes additional video output ports to connect with external video equipment.</p>\n<p>In some products, remote controllers can be linked together in a master slave relationship where the master controls aircraft flight and the slave controls the gimbal and camera. This is useful for cinematic applications where the pilot can focus on flying while the camera operator on capturing a good shot.</p>\n<h2 id=\"control-input\">Control Input</h2>\n<p>The diagram below illustrates many of the remote controller sticks, buttons and wheels for the Phantom 4 remote controller. Sticks can be used for controlling flight direction and sometimes gimbal. Wheels are usually used for gimbal control, and buttons for camera control, and returning home.</p>\n<p><img src=\"../../images/product-introduction/ComponentsRemoteController.png\" alt=\"\"></p>\n<p>Different products have different remote controllers depending on aircraft features, and so each product&#39;s manual should be reviewed for detailed information on each remote controller.</p>\n<h3 id=\"control-sticks\">Control Sticks</h3>\n<p>The two control sticks (left and right) are typically used for flight control. Moving the left and right stick either horizontally or vertically will control throttle, yaw, pitch and roll. By default, the sticks are mapped to <strong>Mode 2</strong> shown in the table below.</p>\n<p><img src=\"../../images/component-guide/remotecontroller-joysticks.png\" alt=\"\"></p>\n<h2 id=\"flight-mode\">Flight Mode</h2>\n<p>DJI aircraft have many flight modes that depend on the remote controller&#39;s <strong>Flight Mode Switch</strong> state, what positioning aids are available, and what the aircraft is doing at the time.</p>\n<p>The Flight Mode Switch can be used to determine whether the aircraft uses positioning aids to maintain position (like GPS), and whether automated flight control using <a href=\"./component-guide-missions.html\">Missions</a> and <a href=\"./component-guide-flightController.html#Virtual-Sticks\">Virtual Sticks</a> is enabled. Therefore the switch can be used to effectively override positioning sensors, and automated flight whenever the pilot needs to.</p>\n<p>Four modes are available (P, S, A, F) of which each product has three to select from. All products except the Phantom 4 use P, A and F. The Phantom 4 uses P, A and S.</p>\n<h3 id=\"p-mode-positioning-\">P-Mode (Positioning)</h3>\n<p>In Positioning Mode, the aircraft uses all positioning aids that are available to fly. These include GPS, the vision positioning system, and the obstacle avoidance system. Positioning systems won&#39;t be available if they are not part of the product, if they&#39;ve been disabled, or if the environment doesn&#39;t allow it (e.g. indoor environments won&#39;t have sufficiently strong GPS signals for the GPS positioning aid to be available).</p>\n<p>For the Phantom 4, advanced features such as Missions, Virtual Sticks and <a href=\"./flightController_concepts.html#ioc-intelligent-orientation-control\">Intelligent Orientation Control</a> are enabled. For all other products, these advanced features are disabled in this mode.</p>\n<p>Therefore, if the pilot needs to override automated flight on a Phantom 4, they should move the flight mode switch out of P-Mode. Alternatively, if they need to override automated flight on other products, they can move the switch into P-Mode.</p>\n<h3 id=\"a-mode-attitude-\">A-Mode (Attitude)</h3>\n<p>In Attitude Mode, the aircraft does not use any positioning aids to fly. Only the barometer is used to track altitude. No advanced features are enabled in this mode.</p>\n<p>For all products, A-Mode can be used to regain manual control from automated flight.</p>\n<p>In A-Mode, GPS is still used to return home automatically assuming a sufficiently strong GPS signal is present, and a home location exists.</p>\n<h3 id=\"f-mode-function-\">F-Mode (Function)</h3>\n<p>In Function Mode, the aircraft uses all positioning aids available (similar to P-Mode) and also enables advanced features such as <a href=\"./component-guide-missions.html\">Missions</a> and <a href=\"./flightController_concepts.html#ioc-intelligent-orientation-control\">Intelligent Orientation Control</a>. Function mode is available in all products except the Phantom 4.</p>\n<p>If manual control needs to be regained by the pilot while executing missions or Virtual Stick commands, the Flight Mode Switch should be moved out of F-Mode.</p>\n<h3 id=\"s-mode-sport-\">S-Mode (Sport)</h3>\n<p>Only available on the Phantom 4, Sport mode uses all positioning aids, adjusts the handling gain values of the aircraft in order to enhance the maneuverability, and increases the maximum flight speed to 20 m/s. The obstacle avoidance system is disabled in S-Mode.</p>\n<p>S-Mode can be used to regain manual control from automated flight.</p>\n<h2 id=\"linking\">Linking</h2>\n<p>Remote controllers are linked to individual aircraft and need to be re-linked if used with a different aircraft. Linking remote controllers with different aircraft that are different product models is possible if the wireless link between aircraft and remote controller is the same. For example, a Phantom 3 Professional remote controller that uses a Lightbridge wireless link will also work with a Phantom 4 aircraft. However, when mixing aircraft and remote controller product models, not all functionality will necessarily be present.</p>\n<p>To link, the remote controller must be put in linking mode (through DJI Go or the DJI Mobile SDK APIs). The remote controller will start beeping and its status LED will blink blue. The link button on the aircraft then needs to be pressed to finish the linking process. For example, the link button on the Phantom 4 is shown below.</p>\n<p><img src=\"../../images/component-guide/p4_linkButton.png\" alt=\"p4_linkButton\"></p>\n<p>The linking button is in a different location for each aircraft, and the product manual should be reviewed for specific position.</p>\n<h2 id=\"master-slave-control\">Master/Slave Control</h2>\n<p>Dual remote controllers can be used to simultaneously control some aircraft such as the Inspire 1. The master remote controller communicates directly with the aircraft and controls flight. The slave remote controller receives video from the aircraft, but communicates with the master remote controller to relay gimbal and camera control.</p>\n<p>To operate in this mode, the remote controllers must be put in master or slave mode, and then wirelessly linked together using either DJI Go or the DJI Mobile SDK APIs. </p>\n<h2 id=\"custom-buttons\">Custom Buttons</h2>\n<p>There are two custom buttons on the back of the remote controller. The custom buttons do not communicate with the aircraft, and are only available for mobile applications. Custom button state (whether pressed or not) is available in the DJI Mobile SDK, and so users can use the custom buttons to interact with an application if configured in the application.</p>\n<p>Additionally each custom button can have a unique tag value set to it, which can be used as a way to store unique information on each remote controller.</p>\n<blockquote>\n<p><strong>Note</strong>: Custom button 1 is by default bound with DJI Go in iOS. When the remote controller is connected to the mobile device, and C1 is pressed, a dialog confirming the user wants to enter DJI Go is displayed. On confirmation, DJI Go will load.</p>\n<p>This behavior can be disabled using the DJI Mobile SDK, but developers should inform users of the behavior change so they don&#39;t have an unexpected experience.</p>\n</blockquote>","meta":{"title":"Remote Controller","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Similar to visible light cameras, thermal cameras can capture photos and videos of a scene. </p>\n<h2 id=\"thermal\">Thermal</h2>\n<p>  The following features supported only by thermal imaging cameras.</p>\n<h4 id=\"scene-modes\">Scene Modes</h4>\n<p>  Using scene option to instantly enhance the image. In all modes except Manual and User modes, the DDE, ACE, SSO, brightness and contrast are set automatically to obtain the best result.\n  In User modes, the DDE, brightness and contrast are set automatically to obtain the best results. Any settings that are made in these modes are retained if the scene is changed.\n  In Manual mode, DDE, ACE, SSO, brightness and contrast are set manually.</p>\n<h4 id=\"isotherms\">Isotherms</h4>\n<p>  Isotherms can be used to highlight specific temperature rages. When it&#39;s enabled, only 128 values (0-127) are mapped linearly to temperature. Then three bands 128-175, 176-223 and 224-255 can be mapped to user defined temperatures to highlight them to the user. Using some of the false colour palettes (like RainbowIso) results in a thermal image that is grey scale except for three specific bands highlighted by either reds, blues or greens.</p>\n<p>  Setting the <strong>unit</strong> of the Isotherm ranges is also available, it could be either Celsius or percent. Different units results in different value ranges for Isotherms. </p>\n<p>  Lastly, developers can set the <strong>lower</strong>, <strong>middle</strong> and <strong>upper</strong> threshold values for Isotherm. </p>\n<p>  All temperature values above the upper threshold value will use colors 224-255 from the palatte. Temperature values between the middle and upper Isotherm threshold will be displayed with colors 176-223 from the palette. Temperature values between the lower and middle Isotherm threshold will be displayed with colors 128-175 from the palette.</p>\n<h4 id=\"gain-mode\">Gain Mode</h4>\n<p>There are three gain modes for Thermal: <strong>Auto</strong>, <strong>Low</strong> and <strong>High</strong>.</p>\n<p>For <strong>Auto</strong> gain mode, the camera will automatically select the optimal gain mode according to the temperature range of the image.</p>\n<p>For <strong>Low</strong> gain mode, the camera covers a wider temperature range but is less sensitive to temperature differences.</p>\n<p>For <strong>High</strong> gain mode, the camera covers a smaller temperature range but is more sensitive to temperature differences.</p>\n<p>Low gain mode can be used for scenes with temperatures ranging from -40 to 550 degrees Celsius. For higher contrast, the high gain mode can be used by for temperatures between -25 to 135 degrees Celsius for the 640x512 camera and -25 to 100 degrees Celsius for 324 x 256 camera.</p>\n<h4 id=\"temperaturedata\">TemperatureData</h4>\n<p>  For the XT, the temperature measurement data is the average of the center four pixels of the image. The thermal imaging camera will only update the temperature if the temperature data is enabled.</p>\n<h4 id=\"digital-zoom-scale\">Digital Zoom Scale</h4>\n<p>  Thermal imaging camera is available to adjust the digital zoom. </p>\n<h4 id=\"palletes\">Palletes</h4>\n<p>Each palette is a unique look-up table that maps 8-bit temperature values to different colors. Different palettes can be used to help the user better visualize temperature contrast or specific temperature bands.</p>\n<p>The different colors are used to show various temperatures in the thermal imagery image. The colors are not actually related to wavelengths of light, but rather the grayscale intensity. There are different Palette types for Thermal. It could be WhiteHot, BlackHot, RedHot, GreenHot, etc.</p>","meta":{"title":"Camera","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"coordinate-systems\">Coordinate Systems</h2>\n<p>Description of aircraft movement is dependent on the location and orientation of coordinate axes that make a coordinate system (or frame of reference). Many coordinate systems exist, but the two used in the DJI Mobile SDK are relative to the aircraft body (body frame), and relative to the ground (world frame).</p>\n<h3 id=\"body-coordinate-system\">Body Coordinate System</h3>\n<p>The body coordinate system is relative to the aircraft itself. Three orthogonal axes are defined such that the origin is the center of mass, and the <strong>X</strong> axis is directed through the front of the aircraft and the <strong>Y</strong> axis through the right of the aircraft. Using the <a href=\"https://en.wikipedia.org/wiki/Right-hand_rule\" target=\"_blank\">coordinate right hand rule</a>, the <strong>Z</strong> axis is then through the bottom of the aircraft.</p>\n<p><img src=\"../../images/flightController-concepts/xyz_noRedArrows.png\" alt=\"\"></p>\n<p>Aircraft translation in positive X, Y and Z is therefore defined in the Body Coordinate System as forward, right and downward translation respectively.</p>\n<p>Aircraft rotation is also described with these same axes using the <a href=\"https://en.wikipedia.org/wiki/Right-hand_rule\" target=\"_blank\">coordinate right hand rule</a> to define the direction of positive rotation. When describing rotational movement, the X, Y and Z axes are renamed <strong>Roll</strong>, <strong>Pitch</strong> and <strong>Yaw</strong>.</p>\n<p><img src=\"../../images/flightController-concepts/altitude.png\" alt=\"\"></p>\n<p>The definition of X, Y, Z, roll, pitch and yaw is consistent with aircraft body coordinate systems, but can sometimes be unintuitive to a developer seeing it for the first time.</p>\n<p>For instance, if the aircraft rotates around the Pitch axis (Y axis) it will move in the X axis direction. Moreover, if the Pitch angle is positive, the direction will be backwards, or in the negative X axis. Care must therefore be taken when using roll, pitch and yaw to move an aircraft.</p>\n<h3 id=\"ground-world-coordinate-system\">Ground (World) Coordinate System</h3>\n<p>A popular ground or world coordinate system used for aircraft aligns the positive <strong>X</strong>, <strong>Y</strong> and <strong>Z</strong> axes with the directions of <strong>North</strong>, <strong>East</strong> and <strong>down</strong>. This convention is called <strong>North-East-Down</strong> or <strong>NED</strong>. </p>\n<p>Positive Z pointing downward can take some getting used to, but it is convenient as X and Y are then consistent with the right hand rule and normal navigation heading angles. A heading angle of 0&deg; will point toward the North, and +90&deg; toward the East.</p>\n<p>The origin for a NED coordinate system is usually a point in the world frame (like take-off location).</p>\n<html><img src=\"../../images/flightController-concepts/CoordinateSystemNED.png\" width=200></html>\n\n\n<h2 id=\"attitude-and-flight\">Attitude and Flight</h2>\n<p>The orientation of the aircraft and gimbal is known as its <strong>attitude</strong> and defined by the rotation around the pitch, roll and yaw axes in the body coordinate system. </p>\n<p>Combined with <strong>throttle</strong>, rotating the aircraft in pitch, roll and yaw orients the aircraft and moves it in space.</p>\n<h3 id=\"pitch\">Pitch</h3>\n<p><img src=\"../../images/flightController-concepts/pitchAxisGif.gif\" alt=\"\"></p>\n<p>The above diagram shows the aircraft from the side. Pitch measures an object&#39;s rotation about the lateral (Y, pitch) axis. Adjusting the pitch will tilt the aircraft forwards or backwards.</p>\n<p>To pitch forward, the back propellors spin faster and have more thrust than the front propellors. The flight controller automatically balances the thrust on each propellor and so the DJI Mobile SDK simply provides APIs to adjust the velocity along the X axis, or the pitch angle and throttle.</p>\n<h3 id=\"roll\">Roll</h3>\n<p><img src=\"../../images/flightController-concepts/rollAxisGif.gif\" alt=\"\"></p>\n<p>The above diagram shows the aircraft from the front. Roll measures an object&#39;s rotation about the longitudinal (X, roll) axis. Adjusting the roll will tilt the aircraft left or right.</p>\n<p>To roll left, the right propellors spin faster and have more thrust than the left propellors. The DJI Mobile SDK provides APIs to adjust the velocity along the Y axis, or the roll angle and throttle to achieve movement.</p>\n<h3 id=\"yaw\">Yaw</h3>\n<p><img src=\"../../images/flightController-concepts/yawAxisGif.gif\" alt=\"\"></p>\n<p>The above diagram shows the aircraft from above. Yaw measures an object&#39;s rotation about the vertical (Z, yaw) axis. Adjusting the yaw will change the heading of the aircraft.</p>\n<p>Half of the aircraft&#39;s propellors spin clockwise, while the other half anti-clockwise. When all spin with equal speed, the aircraft heading will be constant. If one half spin faster than the other half, the aircraft will rotate around the yaw axis. The flight controller balances the speed of each propellor and so the DJI SDK simply provides APIs to set the heading.</p>\n<h2 id=\"throttle\">Throttle</h2>\n<p><img src=\"../../images/flightController-concepts/throttle.gif\" alt=\"\"></p>\n<p>Throttle controls the aircraft&#39;s average thrust from its propulsion system. When the aircraft is level, adjusting the throttle will move the aircraft up or down as all the thrust is in the vertical direction. However, when the aircraft is not level (has non-zero pitch or roll), the thrust will have a horizontal component, and therefore the aircraft will move horizontally. A larger pitch or roll angle will result in more horizontal thrust and therefore faster horizontal movement.</p>\n<h2 id=\"ioc-intelligent-orientation-control-\">IOC (Intelligent Orientation Control)</h2>\n<p>IOC (referred to as Flight Orientation Mode in the Mobile SDK) defines how the aircraft will interpret horizontal flight commands (forward, backward, left and right).</p>\n<p>By default, the aircraft will fly relative to itself, so a left command causes the aircraft to fly to its left. This makes sense if an aircraft is being piloted from the first person view. However, when the aircraft is being piloted remotely from a fixed location it can be confusing or inconvenient.</p>\n<p>When the pilot can&#39;t determine the heading of the aircraft, then it is hard to predict how the aircraft will move relative to the pilot. If the aircraft is facing the pilot, then from the pilot&#39;s perspective, the aircraft will move right when a left command is issued.</p>\n<p>Therefore <strong>Course Lock</strong> and <strong>Home Lock</strong> orientation modes are provided, which make movement relative to the pilot instead of the aircraft. These orientation modes only work when the remote controller flight mode switch is in &quot;P&quot; for the Phantom 4, and &quot;F&quot; for all other aircraft.</p>\n<h3 id=\"course-lock\">Course Lock</h3>\n<p>The <strong>Course Lock</strong> orientation mode makes the aircraft move relative to a fixed heading. If a heading of 0&deg; (North) is chosen, then no matter the yaw of the aircraft, whenever a left command is given, the aircraft will move West.</p>\n<p>The diagram below illustrates an aircraft that is oriented in the opposite direction of the course lock heading, and shows that when a forward or right command is issued, the aircraft will backwards or left respectively relative to itself.</p>\n<p><img src=\"../../images/flightController-concepts/ioc_courseLock_en.png\" alt=\"\"></p>\n<h3 id=\"home-lock\">Home Lock</h3>\n<p>The <strong>Home Lock</strong> orientation mode makes the aircraft move radially relative to the home point. Forward and backwards commands will move the aircraft further from and closer to the home point respectively. Left and right commands will move the aircraft in a circle around the home point at the current radius.</p>\n<p><img src=\"../../images/flightController-concepts/ioc_homeLock.png\" alt=\"\"></p>","meta":{"title":"Flight Control","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>The goal of the Mobile SDK Documentation is to give any developer with iOS or Android experience the knowledge and understanding required to create world changing applications using DJI&#39;s technology.</p>\n<p>In addition to detailing how to use the Mobile SDK, this documentation describes and compares the products it can automate and the key technologies available.</p>\n<h3 id=\"get-started-immediately\">Get Started Immediately</h3>\n<p>Developers can <a href=\"../quick-start/index.html\">Run the Sample Application</a> to immediately run code and see how the DJI Mobile SDK can be used. </p>\n<p>One of DJI&#39;s aircraft or handheld cameras will be required to run the sample application.</p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>Most of DJI&#39;s aircraft and handheld cameras can be automated using the DJI Mobile SDK. This section introduces and compares these products, and introduces the Mobile SDK and it&#39;s architecture.</p>\n<ul>\n<li><a href=\"./product_introduction.html\">Hardware Products</a></li>\n<li><a href=\"./mobile_sdk_introduction.html\">Mobile SDK Introduction</a></li>\n<li><a href=\"./sdk_architectural_overview.html\">SDK Architectural Overview</a></li>\n</ul>\n<h3 id=\"concepts-to-understand\">Concepts to Understand</h3>\n<p>DJI products use technologies that not all developers are familiar with. Understanding the concepts of these technologies will make development easier, and allow developers to fully utilize the capability of DJI&#39;s aircraft and handheld cameras.</p>\n<ul>\n<li><a href=\"./flightController_concepts.html\">Flight Control</a></li>\n<li><a href=\"./camera_concepts.html\">Camera Exposure</a></li>\n</ul>\n<h3 id=\"guides\">Guides</h3>\n<p>Guides contain detailed information on product and SDK components. Most of the technologies and terminology used within the SDK is covered in these guides.</p>\n<ul>\n<li><a href=\"./component-guide-flightController.html\">Flight Controller</a></li>\n<li><a href=\"./component-guide-camera.html\">Camera</a></li>\n<li><a href=\"./component-guide-gimbal.html\">Gimbal</a></li>\n<li><a href=\"./component-guide-airlink.html\">AirLink</a></li>\n<li><a href=\"./component-guide-remotecontroller.html\">Remote Controller</a></li>\n<li><a href=\"./component-guide-battery.html\">Smart Battery</a></li>\n<li><a href=\"./component-guide-missions.html\">Missions</a></li>\n<li><a href=\"./sdk-guide-sdkmanager.html\">SDK Manager</a></li>\n</ul>\n<h3 id=\"development-workflow\">Development Workflow</h3>\n<p>From registering as a developer, to deploying an application, this section will take developers through the full development process.</p>\n<ul>\n<li><a href=\"../application-development-workflow/workflow-prerequisits.html\">Prerequisites</a></li>\n<li><a href=\"../application-development-workflow/workflow-register.html\">Register as a DJI Developer &amp; Download SDK</a></li>\n<li><a href=\"../application-development-workflow/workflow-integrate.html\">Integrate SDK into Application</a></li>\n<li><a href=\"../application-development-workflow/workflow-run.html\">Run Application</a></li>\n<li><a href=\"../application-development-workflow/workflow-testing.html\">Testing, Profiling &amp; Debugging</a></li>\n<li><a href=\"../application-development-workflow/workflow-deploy.html\">Deploy</a></li>\n</ul>\n<h3 id=\"tutorials\">Tutorials</h3>\n<p>Several iOS and Android tutorials are provided as examples on how to use the SDK for different applications.</p>\n<p><strong>iOS</strong></p>\n<ul>\n<li><a href=\"../ios-tutorials/index.html\">Camera Application</a></li>\n<li><a href=\"../ios-tutorials/PlaybackDemo.html\">Photo and Video Playback Application</a></li>\n<li><a href=\"../ios-tutorials/GSDemo.html\">MapView and Waypoint Application</a></li>\n<li><a href=\"../ios-tutorials/PanoDemo.html\">Panorama Application</a></li>\n<li><a href=\"../ios-tutorials/P4MissionsDemo.html\">TapFly and ActiveTrack Application</a></li>\n<li><a href=\"../ios-tutorials/BridgeAppDemo.html\">Using the Bridge App</a></li>\n<li><a href=\"../ios-tutorials/RemoteLoggerDemo.html\">Using the Remote Logger</a></li>\n</ul>\n<!-- TODO: Need help to review it before publish\n* [Simulator Application](../ios-tutorials/SimulatorDemo.html)\n-->\n\n<p><strong>Android</strong></p>\n<ul>\n<li><a href=\"../android-tutorials/index.html\">Running DJI SDK Sample Code in Android Studio</a></li>\n<li><a href=\"../android-tutorials/FPVDemo.html\">Camera Application</a></li>\n<li><a href=\"../android-tutorials/GSDemo-Gaode-Map.html\">MapView and Waypoint Application (GaodeMap)</a></li>\n<li><a href=\"../android-tutorials/GSDemo-Google-Map.html\">MapView and Waypoint Application (GoogleMap)</a></li>\n<li><a href=\"../android-tutorials/P4MissionsDemo.html\">TapFly and ActiveTrack Application</a></li>\n</ul>\n<h3 id=\"api-reference\">API Reference</h3>\n<p>Full API descriptions are available for iOS and Android.</p>\n<ul>\n<li><a href=\"https://developer.dji.com/iframe/mobile-sdk-doc/ios/index.html\" target=\"_blank\">iOS API Reference</a></li>\n<li><a href=\"https://developer.dji.com/iframe/mobile-sdk-doc/android/reference/packages.html\" target=\"_blank\">Android API Reference</a></li>\n</ul>\n<h3 id=\"faq\">FAQ</h3>\n<p>Frequently asked questions asked by developers can be found <a href=\"../faq/index.html\">here</a>.</p>","meta":{"title":"Documentation Introduction","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>The DJI Mobile SDK is a software development kit designed to give developers access to the capability of DJI&#39;s aircraft and handheld camera products. The SDK simplifies the application development process by taking care of lower level functionality such as flight stabilization, battery management, signal transmission and communication. This way, the developer does not require a background in robotics or embedded systems and can instead focus on the application the DJI product is being integrated into.</p>\n<p>The SDK includes:</p>\n<ul>\n<li>a library/framework that can be imported into an Android or iOS app that give access to the DJI product</li>\n<li>an aircraft simulator and visualization tool</li>\n<li>debugger and remote logger for iOS</li>\n<li>sample code and tutorials</li>\n<li>this developer guide and API documentation</li>\n</ul>\n<p>This introduction will describe how the SDK connects to the products, what functionality the SDK provides, and an introductory architecture of the SDK.</p>\n<h2 id=\"feature-overview\">Feature Overview</h2>\n<p>Many of DJI&#39;s product features and capabilities are accessible to developers through the SDK. Developers can automate flight, control the camera and gimbal, receive real time video and sensor data, download saved media from the product, and monitor state of the other components.</p>\n<h3 id=\"flight-control\">Flight Control</h3>\n<p>The DJI Mobile SDK allows three ways to control aircraft flight:</p>\n<ul>\n<li><strong>Manually</strong>: User pilots aircraft with remote controller while SDK allows monitoring live video and sensor data. </li>\n<li><strong>Virtual Stick Commands</strong>: SDK allows generation of remote controller stick movements virtually, simulating a pilot.</li>\n<li><strong>Missions</strong>: Convenient, easy to implement high level control of the aircraft. For example, defined flight paths can be executed with a Waypoint mission.</li>\n</ul>\n<p>Virtual stick commands and missions allow simple but powerful automated flight control of DJI aircraft. </p>\n<h3 id=\"camera\">Camera</h3>\n<p>Camera and gimbal functionality is highly programmable and allows:</p>\n<ul>\n<li><strong>Camera mode</strong>: Video and still image capture</li>\n<li><strong>Exposure</strong>: Shutter, ISO, aperture and exposure compensation are all available to customize for maximum flexibility</li>\n<li><strong>Image Parameters</strong>: Aspect ratio, contrast, hue, sharpness, saturation and filters</li>\n<li><strong>Video Parameters</strong>: Resolution and frame rate</li>\n<li><strong>Direction</strong>: Using the gimbal, camera direction and motion can be automated</li>\n</ul>\n<h3 id=\"live-video\">Live Video</h3>\n<p>The live video broadcast by the aircraft of the main camera feed is available through the DJI Mobile SDK. Live video is available even when the camera is capturing images or video to it&#39;s storage media.</p>\n<h3 id=\"sensor-data\">Sensor Data</h3>\n<p>Rich sensor data is available through the SDK. GPS position, compass, barometer, flight velocity and altitude are some of the sensor readings available at up to 10 Hz through the Mobile SDK. </p>\n<h3 id=\"download-media\">Download Media</h3>\n<p>Videos saved to the camera&#39;s storage media (SD card or solid state drive) is accessible to view and download through the DJI Mobile SDK. Both previews and full image data can be accessed.</p>\n<h3 id=\"remote-controller-battery-wireless-link\">Remote Controller, Battery, Wireless Link</h3>\n<p>The remote controller, battery and wireless link can all be accessed through the SDK. Mostly these components provide state information, but some control is also possible.</p>\n<h2 id=\"differences-with-other-sdks\">Differences with Other SDKs</h2>\n<p>Most iOS and Android applications will either create, manipulate and/or visualize data. However applications using DJI&#39;s Mobile SDK can be fundamentally different as they can interact with the world around the user.</p>\n<ul>\n<li><strong>Kinetic Energy</strong>: An aircraft can have a mass of several kilograms and move at speeds of up to 20 m/s. While the ability to programmatically change position is tremendously powerful, it also means an application can potentially damage the product it is controlling, or the environment the product is being controlled in.</li>\n<li><strong>Share Space</strong>: DJI&#39;s aircraft move in space shared by other people, structures and aircraft. DJI provides a geofencing system to prevent aircraft from entering critical space, but developers and users must still understand the local and federal rules of the environment the aircraft moves in.</li>\n<li><strong>Highly Asynchronous</strong>:  Wireless connectively can be unpredictable in challenging wireless environments. Sometimes it can take hundreds of milliseconds for a command to be transferred (assuming it ever does). While many developers are familiar with asynchronous programming techniques in networking, when commands aren&#39;t communicated on a robotic system, behavior in the physical world can be unexpected.</li>\n</ul>\n<p>It is not possible as a developer to predict or programmatically assess the environment a user will operate in. An easy maneuver in an open environment, can be difficult in a confined space. Environments can be dynamic and might be sometimes safe, and other times not. Therefore it is important that both developers and users understand the capabilities and limitations of the products and their controlling applications.</p>\n<h2 id=\"connection-to-application-and-product\">Connection to Application and Product</h2>\n<p>The following diagram illustrates how the DJI Mobile SDK fits into a mobile application, and how it is connected to a DJI aircraft. </p>\n <html><img src=\"../../images/mobile-sdk-introduction/SDKBlockDiagram.png\"></html>\n\n<p>&gt;</p>\n<blockquote>\n<p>For a handheld camera product, the Remote Controller is replaced with a Handheld Controller and there is no aircraft or additional wireless link.</p>\n</blockquote>\n<p>A mobile application is built with the DJI Mobile SDK, the platform SDK (iOS or Android) and is run on the Mobile Device (Apple iPhone, iPad, Nexus phone, Nexus tablet etc).</p>\n<p>The mobile device connects to a DJI product either wirelessly with WiFi or through a USB cable depending on the product. For aircraft products, the mobile device connects to the remote controller, which connects wirelessly to the aircraft through another wireless link (for the Phantom 3 Standard, two wireless links connect the remote controller and aircraft). Detailed connectivity for each product is shown below.</p>\n<html>\n\n\n<table class=\"table-pictures\">\n  <tr>\n    <td><img src=\"../../images/mobile-sdk-introduction/ConnectionUSB.png\"></td>\n    <td><img src=\"../../images/mobile-sdk-introduction/ConnectionWiFi.png\"></td>\n        <td><img src=\"../../images/mobile-sdk-introduction/ConnectionOsmo.png\"></td>\n  </tr>\n  <tr valign=\"top\">\n    <td><font color=\"#52545A\" align=\"center\"><p>Phantom 4 </br> Phantom 3 Professional </br> Phantom 3 Advanced </br> Inspire 1 </br> Inspire 1 Pro/Raw </br> Matrice 100 </br> Matrice 600 </br> </p></td>\n    <td><font color=\"#52545A\" align=\"center\"><p>Phantom 3 4K </br> Phantom 3 Standard </p></td>\n    <td><font color=\"#52545A\" align=\"center\"><p>Osmo</p></td>\n  </tr>\n\n</table>\n</html>\n\n<p>Therefore, depending on the product, when a command is sent from the DJI Mobile SDK to an aircraft, the command might pass through several wireless links and cable connections. </p>","meta":{"title":"Mobile SDK Introduction","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>DJI produces small, highly capable, remotely controlled aircraft as well as hand held cameras and stabilizers perfect for both consumer and commercial applications. The products are very accessible being easy to use and affordable, and have a quality and feature set unmatched in the industry.</p>\n<h3 id=\"aircraft\">Aircraft</h3>\n<p>DJI has a range of multi-rotor aircraft that can be automated with the Mobile SDK including the <a href=\"http://www.dji.com/products/phantom\" target=\"_blank\">Phantom series</a>, <a href=\"http://www.dji.com/products/inspire\" target=\"_blank\">Inspire series</a>, <a href=\"http://www.dji.com/product/matrice100\" target=\"_blank\">Matrice 100</a> and <a href=\"http://www.dji.com/product/matrice600\" target=\"_blank\">Matrice 600</a>.</p>\n<p>One of the key features of DJI aircraft is the camera&#39;s ability to stay horizontal no matter how the aircraft is flying. The camera is mounted on a gimbal, which actively compensates for any aircraft rotation, producing clear, beautiful images and videos.</p>\n<p>There are many DJI aircraft to choose from that provide a range of features, performance, size and price. Specific metrics developers and users should be aware of when they consider an aircraft include:</p>\n<ul>\n<li>Flight time</li>\n<li>Size and weight</li>\n<li>Camera specifications (image quality and movement control)</li>\n<li>Swappable cameras</li>\n<li>Obstacle avoidance</li>\n<li>Customizable payloads</li>\n<li>Maximum service ceiling</li>\n<li>Available accessories</li>\n<li>Remote controller features</li>\n<li>Price</li>\n</ul>\n<h3 id=\"handheld-camera\">Handheld Camera</h3>\n<p>DJI&#39;s handheld camera <a href=\"http://www.dji.com/product/osmo\" target=\"_blank\"> Osmo </a> allows users to take smooth, professional videos when the user is moving by integrating DJI&#39;s aircraft camera stabilization gimbal technology onto an easy to carry handle.</p>\n<h3 id=\"stand-alone-components\">Stand Alone Components</h3>\n<p>Two components of the aircraft (flight controller, wireless link) can be used on DJI or third party airframes. Some of these components are supported to a limited degree in the DJI Mobile SDK.</p>\n<h3 id=\"accessories\">Accessories</h3>\n<p>DJI aircraft and handheld cameras are compatible with a number of DJI accessories. Some of these accessories are also supported by the DJI Mobile SDK, meaning the mobile device will be able to interact with the accessory to some degree.</p>\n<h2 id=\"components\">Components</h2>\n<p>Before doing a detailed product comparison it is useful to understand the components of a product and their function.</p>\n<p>All products comprise component modules that provide an important feature or function. An introduction to typical components is below with more details in the <a href=\"./component-guide-flightController.html\">Component Guide</a>.</p>\n<p><img src=\"../../images/product-introduction/ComponentsAircraft.png\" alt=\"ComponentsAircraft\"></p>\n<h4 id=\"propulsion\">Propulsion</h4>\n<p>Motor mounted propellors provide vertical thrust. The vertical thrust can be adjusted at each motor to allow the aircraft to hover, rotate, ascend, descend or fly horizontally.</p>\n<h4 id=\"sensors\">Sensors</h4>\n<p>DJI aircraft have a large number of sensors including accelerometers, gyroscopes, compasses, barometers, ultrasonic sensors, cameras and satellite positioning systems. These sensors are used to determine the current and predict the future state of the aircraft and the environment around it.</p>\n<h4 id=\"flight-controller\">Flight Controller</h4>\n<p>The Flight Controller is an onboard computer that couples control information from the pilot with sensor information to adjust the thrust at each propellor and fly the aircraft as desired.</p>\n<h4 id=\"camera\">Camera</h4>\n<p>The camera can record image and video data locally or transfer it wirelessly to an Android or iOS mobile device. Wireless transfer includes the option of a live video stream from the camera. Camera exposure and settings are highly customizable allowing capture of the perfect shot.</p>\n<h4 id=\"gimbal\">Gimbal</h4>\n<p>The gimbal holds the camera and can rotate it around three axes. The rotation can be used to both control the direction the camera points, and provide rotational stabilization when the aircraft is not horizontal. The gimbal is mounted on a damped plate, meaning the camera is both stabilized from lateral vibrations and rotational movement.</p>\n<h4 id=\"vision-obstacle-avoidance-positioning\">Vision Obstacle Avoidance &amp; Positioning</h4>\n<p>Advanced sensors help the aircraft perceive the world around it. Stereo cameras are used to detect obstacles near the product. Downward facing cameras and ultrasonic sensors are used to determine relative ground position providing accurate velocity estimates and stable hover position in GPS denied environments (like indoors).</p>\n<h4 id=\"smart-battery\">Smart Battery</h4>\n<p>Smart batteries provide the energy required to run the system. Together with the flight controller, the smart battery can estimate remaining flight time and provide warnings when low battery thresholds are crossed. Batteries are easily swapped between flights, extending product use considerably.</p>\n<h4 id=\"remote-controller\">Remote Controller</h4>\n<p>The remote controller provides control sticks, buttons, and wheels that give control of the aircraft flight, camera and gimbal. The remote controller maintains a wireless link with the aircraft with some products having up to a 5km range in ideal environments. The <strong>Flight Mode Switch</strong> on the remote controller can be used to switch between manual and automated flight.</p>\n<p><img src=\"../../images/product-introduction/ComponentsRemoteController.png\" alt=\"ComponentsRemoteController\"></p>\n<h4 id=\"mobile-device\">Mobile Device</h4>\n<p>An Android or iOS device can be connected to the remote controller through either USB or WiFi to give an augmented flight experience showing the live camera feed, and showing aircraft state information. Using the Mobile SDK, the mobile device can also be used to control the aircraft.</p>\n<h4 id=\"handheld-controller\">Handheld Controller</h4>\n<p>The handheld controller provides a joystick and buttons for that give control of the camera and gimbal. The handheld controller connects to the mobile device through a WiFi access point inside the handle.</p>\n<p><img src=\"../../images/product-introduction/ComponentsHandheld.png\" alt=\"ComponentsHandheld\"></p>\n<h2 id=\"supported-products\">Supported Products</h2>\n<p>Below is a table listing the aircraft, handheld cameras and stand alone components supported by the DJI Mobile SDK.</p>\n<html><table class=\"table-product-accessories\">\n  <thead>\n    <tr>\n      <th colspan=\"4\">Products and Accessories</th>\n    </tr>\n    <tr>\n      <th>Category</th>\n      <th>Product</th>\n      <th>Cameras</th>\n      <th>SDK Supported Accessories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"9\">Aircraft</th>\n      <td>Phantom 4</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Phantom 3 Professional</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Phantom 3 4K</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Phantom 3 Advanced</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Phantom 3 Standard</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Inspire 1</td>\n      <td>X3, X5, X5R, XT</td><br>      <td> Focus </td>\n    </tr>\n    <tr>\n      <td>Inspire 1 Pro/Raw</td>\n      <td>X3, X5, X5R, XT</td><br>      <td> Focus </td>\n    </tr>\n    <tr>\n      <td>Matrice 100</td>\n      <td>X3, X5, X5R, XT</td><br>      <td> N1 Video Encoder, Focus </td>\n    </tr>\n    <tr>\n      <td>Matrice 600</td>\n      <td>X3, X5, X5R, XT</td><br>      <td> DRTK, Ronin MX, N1 Video Encoder, Focus </td>\n    </tr>\n    <tr>\n      <td>Handheld Camera</th>\n      <td>Osmo</td>\n      <td>X3, X5, X5R</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">Components</th>\n      <td>Lightbridge 2 with A2</td>\n      <td> — </td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Lightbridge 2 with A3</td>\n      <td> X3, X5, X5R </td><br>      <td> — </td>\n    </tr>\n  </tbody>\n</table></html>\n\n<p>Detailed specifications are listed on each product&#39;s webpage <strong>specs</strong> section at <a href=\"http://www.dji.com\" target=\"_blank\">www.dji.com</a>.</p>\n<h2 id=\"product-comparison\">Product Comparison</h2>\n<h3 id=\"aircraft-comparison\">Aircraft Comparison</h3>\n<p>Some defining product features that distinguish aircraft series are:</p>\n<h3 id=\"phantom\">Phantom</h3>\n<ul>\n<li>Small and portable</li>\n<li>Easiest to use</li>\n<li>Phantom 4 includes:<ul>\n<li>Built in obstacle avoidance</li>\n<li>Advanced vision features like being able to track a moving target selected by the user.</li>\n<li>A <strong>sport flight mode</strong> for a more dynamic flying experience</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"inspire\">Inspire</h3>\n<ul>\n<li>Swappable cameras</li>\n<li>Cameras with larger sensors, aperture and focus control</li>\n<li>Thermal camera available</li>\n<li>Gimbal can rotate camera completely through the horizontal (640&deg;)</li>\n<li>Landing gear can raise out of the camera&#39;s field of view\n<img src=\"../../images/product-introduction/inspire_landingGearRaised.gif\" alt=\"InspireRaised\"></li>\n<li>Remote controller has embedded GPS</li>\n</ul>\n<h3 id=\"matrice\">Matrice</h3>\n<ul>\n<li>Industrial and developer platform</li>\n<li>Highly customizable, with up to 6 kg payloads supported</li>\n<li>Payloads can communicate with the flight controller directly through a serial port and the DJI Onboard SDK</li>\n<li>Mechanical mounting features</li>\n<li>Can use same cameras as Inspire series</li>\n<li><p>Additional accessories including</p>\n<ul>\n<li><a href=\"http://www.dji.com/product/matrice600\" target=\"_blank\"> DRTK </a> - cm precision positioning</li>\n<li><a href=\"http://www.dji.com/product/guidance\" target=\"_blank\"> Guidance </a> - 5 direction stereo camera and ultrasonic sensor module</li>\n<li><a href=\"http://www.dji.com/product/ronin-mx\" target=\"_blank\"> Ronin MX </a> - Gimbal that can support custom payloads up to 4.5 kg</li>\n</ul>\n</li>\n</ul>\n<p>Aircraft comparison can be difficult due to the large selection of products, features and functionality. A summarized product comparison table is below to introduce the differences between products.</p>\n<html><table class=\"table-product-comparison\">\n <thead>\n  <tr>\n    <th colspan=\"10\">Product Comparison</th>\n  </tr>\n </thead>\n <tbody>\n <tr>\n    <td> </th>\n   <td rowspan=\"2\" width=12%> Phantom 4</th>\n     <td colspan=\"4\">Phantom 3</th>\n     <td colspan=\"2\">Inspire 1</th>\n     <td colspan=\"2\">Matrice </th>\n </tr>\n <tr>\n   <td width=10%> </td>\n   <td width=10%> Professional </td>\n   <td width=10%> 4K </td>\n   <td width=10%> Advanced </td>\n   <td width=10%> Standard </td>\n   <td width=10%> Standard </td>\n   <td width=10%>  Pro/RAW </td>\n   <td width=10%> 100 </td>\n   <td width=10%> 600 </td>\n</tr>\n<tr>\n   <td> <p> Propellors </p></td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>6 </td>\n</tr>\n<tr>\n   <td> <p> Flight Time </br><font color=\"#BBBBBB\" size=1>s </p></td> </td>\n   <td>28 </td>\n   <td>23 </td>\n   <td>25 </td>\n   <td>23 </td>\n   <td>25 </td>\n   <td>18<em> </td>\n   <td>15</em> </td>\n   <td>16-40<em> </td>\n   <td>18-40</em> </td>\n</tr>\n<tr>\n   <td> <p> Max Speed </br><font color=\"#BBBBBB\" size=1>m/s </p></td> </td>\n   <td>20 </td>\n   <td>16 </td>\n   <td>16 </td>\n   <td>16 </td>\n   <td>16 </td>\n   <td>22 </td>\n   <td>18 </td>\n   <td>22 </td>\n   <td>18 </td>\n</tr>\n<tr>\n   <td> <p> Camera </p></td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>X3, X5, X5R, XT </td>\n   <td>X3, X5, X5R, XT </td>\n   <td>X3, X5, X5R, XT </td>\n   <td>X3, X5, X5R, XT, Custom with Ronin MX </td>\n</tr>\n<tr>\n   <td> <p> Wireless Range </br> US / EU </br><font color=\"#BBBBBB\" size=1>km </p></td> </td>\n   <td>5 / 3.1 </td>\n   <td>5 / 3.1 </td>\n   <td>1.2 / 0.5 </td>\n   <td>5 / 3.1 </td>\n   <td>1 / 0.5 </td>\n   <td>5 / 3.1 </td>\n   <td>5 / 3.1 </td>\n   <td>5 / 3.1 </td>\n   <td>5 / 3.1 </td>\n</tr>\n<tr>\n   <td> <p> Obstacle Avoidance </p> </td>\n   <td>Front </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>With Guidance </td>\n   <td>With Guidance </td>\n</tr>\n<tr>\n   <td> <p> Vision Positioning </p> </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>- </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>With Guidance </td>\n   <td>With Guidance </td>\n</tr>\n<tr>\n   <td> <p> Max Take-off Mass </br><font color=\"#BBBBBB\" size=1>g</p></td> </td>\n   <td>1380 </td>\n   <td>1280 </td>\n   <td>1280 </td>\n   <td>1280 </td>\n   <td>1216 </td>\n   <td>3000 </td>\n   <td>3500 </td>\n   <td>3600 </td>\n   <td>15100 </td>\n</tr>\n<tr>\n   <td> <p> Max Dimension(Without Propellor) </br><font color=\"#BBBBBB\" size=1>mm </p></td> </td>\n   <td>350 </td>\n   <td>350 </td>\n   <td>350 </td>\n   <td>350 </td>\n   <td>350 </td>\n   <td>581 </td>\n   <td>581 </td>\n   <td>650 </td>\n   <td>1133 </td>\n</tr>\n<tr>\n   <td> <p> Max Service Ceiling </br><font color=\"#BBBBBB\" size=1>m </p></td> </td>\n   <td>6000 </td>\n   <td>6000 </td>\n   <td>6000 </td>\n   <td>6000 </td>\n   <td>6000 </td>\n   <td>4500 </td>\n   <td>4500 </td>\n   <td>4500 </td>\n   <td>2500 </td>\n</tr>\n<tr>\n   <td> <p> Landing Gear </p></td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Moveable </td>\n   <td>Moveable </td>\n   <td>Fixed </td>\n   <td>Moveable </td>\n</tr>\n<tr>\n   <td> <p> Max Batteries </p></td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>2 </td>\n   <td>6 </td>\n</tr>\n<tr>\n   <td> <p> Custom Payload </br><font color=\"#BBBBBB\" size=1>g </p></td> </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>1000 </td>\n   <td>6000 </td>\n</tr>\n<tr>\n   <td><p> Compatible Accessories </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>Guidance, Manifold </td>\n   <td>Guidance, Manifold, DRTK, Ronin MX </td>\n</tr>\n</table>\n</html>\n\n<blockquote>\n<p>Note:</p>\n<ol>\n<li>See <strong>Payload</strong> and <strong>Flight Time</strong> table for more information</li>\n<li>Difference between Inspire vs Inspire Pro:<ul>\n<li>Inspire Pro has more powerful propulsion making it able to lift heavier loads</li>\n<li>Inspire Pro comes with a gimbal mounting bracket able to support the X5 and X5R</li>\n<li>Inspire Pro comes with the X5 as default configuration</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"flight-time\">Flight Time</h3>\n<p>Product flight time is determined by total aircraft mass and the available stored (battery) energy on the aircraft. The available energy is determined by the number of batteries, the battery energy density and the maximum mass the propulsion system can support.</p>\n<h4 id=\"battery-energy-density\">Battery Energy Density</h4>\n<p>DJI provides two series of batteries for the Inspire and Matrice product lines. The TB47 series is the default 99 Wh battery that comes with all aircraft. The TB48 series is a 130 Wh battery. While the TB48 battery has a 10-15% higher energy density, it is less practical as batteries &gt;100 Wh often have transport restrictions.</p>\n<p>Using a battery with a higher energy density will always translate to longer flight time if all else is kept constant. However, as the TB48 battery is a little heavier than the TB47 battery, it is important to remember that its use will restrict the maximum custom payload. This is particularly noticeable on the Matrice series of products when using more than one battery.</p>\n<h4 id=\"using-more-batteries\">Using More Batteries</h4>\n<p>Increasing the number of batteries on a product will:</p>\n<ul>\n<li>Increase the available energy for flight (increasing flight time)</li>\n<li>Increase the aircraft mass and therefore:<ul>\n<li>Decrease flight time</li>\n<li>Decrease the allowable additional payload</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"flight-time-comparison\">Flight Time Comparison</h4>\n<p>To help understand the potential functionality and flight time of different aircraft configurations, a detailed summary of payload and flight times is below:</p>\n<html><table class=\"table-flight-time\" id=\"t03\">\n <thead>\n  <tr>\n    <th colspan=\"9\">Payload &amp; Flight Time</th>\n  </tr>\n  <tr>\n    <td width=20%>Product</td>\n    <td width=10%>Camera</td>\n    <td width=10%>Battery Configuration</td>\n    <td width=10%>Aircraft Mass</td>\n    <td width=10%>Battery Mass</td>\n    <td width=10%>Camera Mass</td>\n    <td width=10%>Payload</td>\n    <td width=10%>Take-off Mass</td>\n    <td width=10%>Flight Time</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">min</p></td>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n    <td rowspan=\"3\">\n    Inspire 1\n    <p><font size=\"1\">Max Take-off Mass: 3000g </br>Compatible with XT, X3</p>\n    </td>\n    <td >X3</td>\n    <td>TB47</td><br>    <td>2118</td><br>    <td>570</td><br>    <td>247</td><br>    <td>0</td><br>    <td>2935</td><br>    <td>18</td><br>  </tr>\n  <tr>\n    <td>X3</td><br>    <td>TB48</td><br>    <td>2118</td><br>    <td>670</td><br>    <td>247</td><br>    <td>0</td><br>    <td>3035</td><br>    <td>21</td><br>  </tr>\n  <tr>\n    <td>XT</td>\n    <td>TB48</td><br>    <td>2118</td><br>    <td>670</td><br>    <td>270</td><br>    <td>0</td><br>    <td>3058</td><br>    <td>21</td><br>  </tr>\n  <tr>\n    <td rowspan=\"4\">\n    Inspire 1 Pro/Raw\n    <p><font size=\"1\">Max Take-off Mass: 3500g</br>Compatible with XT, X3, X5, X5R</p>\n    </td>\n    <td>X5</td>\n    <td>TB47</td><br>    <td>2300</td><br>    <td>570</td><br>    <td>526</td><br>    <td>0</td><br>    <td>3396</td><br>    <td>15</td><br>  </tr>\n  <tr>\n    <td>X5</td>\n    <td>TB48</td><br>    <td>2300</td><br>    <td>670</td><br>    <td>526</td><br>    <td>0</td><br>    <td>3496</td><br>    <td>18</td><br>  </tr>\n  <tr>\n    <td>X5R</td>\n    <td>TB48</td><br>    <td>2300</td><br>    <td>670</td><br>    <td>583</td><br>    <td>0</td><br>    <td>3553</td><br>    <td>18</td><br>  </tr>\n  <tr>\n    <td>XT</td>\n    <td>TB48</td><br>    <td>2300</td><br>    <td>670</td><br>    <td>270</td><br>    <td>0</td><br>    <td>3240</td><br>    <td>20</td><br>  </tr>\n  <tr>\n    <td rowspan=\"11\">\n    Matrice 100\n    <p><font size=\"1\">Max Take-off Mass: 3600g</br>Compatible with XT, X3, X5, X5R, Guidance, Manifold</p>\n    </td>\n    <td align= \"center\">-</td>\n    <td>TB47D</td><br>    <td>1755</td><br>    <td>600</td><br>    <td>0</td><br>    <td>0</td><br>    <td>2355</td><br>    <td>22</td><br>  </tr>\n  <tr>\n    <td align= \"center\">-</td>\n    <td>TB47D</td><br>    <td>1755</td><br>    <td>600</td><br>    <td>0</td><br>    <td>500</td><br>    <td>2855</td><br>    <td>17</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>TB47D</td><br>    <td>1755</td><br>    <td>600</td><br>    <td>0</td><br>    <td>1000</td><br>    <td>3355</td><br>    <td>13</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>TB48D</td><br>    <td>1755</td><br>    <td>676</td><br>    <td>0</td><br>    <td>0</td><br>    <td>2431</td><br>    <td>28</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>TB48D</td><br>    <td>1755</td><br>    <td>676</td><br>    <td>0</td><br>    <td>500</td><br>    <td>2931</td><br>    <td>20</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>TB48D</td><br>    <td>1755</td><br>    <td>676</td><br>    <td>0</td><br>    <td>1000</td><br>    <td>3431</td><br>    <td>16</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>2x TB47D</td><br>    <td>1915</td><br>    <td>1200</td><br>    <td>0</td><br>    <td>0</td><br>    <td>3115</td><br>    <td>33</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>2x TB48D</td><br>    <td>1915</td><br>    <td>1352</td><br>    <td>0</td><br>    <td>0</td><br>    <td>3267</td><br>    <td>40</td>\n  </tr>\n    <tr>\n    <td>X3</td>\n    <td>TB47D</td><br>    <td>1755</td><br>    <td>600</td><br>    <td>247</td><br>    <td>0</td><br>    <td>2602</td><br>    <td>19</td>\n  </tr>\n    <tr>\n    <td>X3</td>\n    <td>TB48D</td><br>    <td>1755</td><br>    <td>676</td><br>    <td>247</td><br>    <td>0</td><br>    <td>2678</td><br>    <td>23</td>\n  </tr>\n    <tr>\n    <td>X3</td>\n    <td>2x TB48D</td><br>    <td>1915</td><br>    <td>1352</td><br>    <td>247</td><br>    <td>0</td><br>    <td>3514</td><br>    <td>33</td>\n  </tr>\n  <tr>\n    <td rowspan=\"4\">\n    Matrice 600\n    <p><font size=\"1\">Max Take-off Mass: 15100g</br>Compatible with XT, X3, X5, X5R, Guidance, Ronin MX, DRTK, Manifold</p>\n    </td>\n    <td align= \"center\">-</td>\n    <td>6x TB47S</td><br>    <td>5530</td><br>    <td>3570</td><br>    <td>0</td><br>    <td>0</td><br>    <td>9100</td><br>    <td>35</td><br>  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>6x TB47S</td><br>    <td>5530</td><br>    <td>3570</td><br>    <td>0</td><br>    <td>6000</td><br>    <td>15100</td><br>    <td>16</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>6x TB48S</td><br>    <td>5530</td><br>    <td>4080</td><br>    <td>0</td><br>    <td>0</td><br>    <td>9610</td><br>    <td>40</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>6x TB48S</td><br>    <td>5530</td><br>    <td>4080</td><br>    <td>0</td><br>    <td>5500</td><br>    <td>15110</td><br>    <td>18</td>\n  </tr>\n </tbody>\n</table></html>\n\n<h3 id=\"camera\">Camera</h3>\n<p>DJI provides several camera configurations. For the Phantom line of products, the cameras are fixed to the product. For the Inspire and Matrice line of products, cameras can be interchanged (Zenmuse X3, X5, X5R, XT).</p>\n<p>The Zenmuse XT is a thermal camera. It&#39;s specifications are difficult to compare directly to other cameras, however it is included in the comparison for it&#39;s mass for payload calculation. More details on the specifications of the Zenmuse XT can be found <a href=\"http://www.dji.com/product/zenmuse-xt/info#specs\" target=\"_blank\"> here </a>.</p>\n<html><table class=\"table-camera-comparison\">\n <thead>\n  <tr>\n    <th colspan=\"10\">Camera Comparison</th>\n  </tr>\n </thead>\n <tbody>\n <tr>\n    <td> </th>\n   <td rowspan=\"2\" width=12%> Phantom 4</th>\n     <td colspan=\"4\">Phantom 3</th>\n     <td colspan=\"4\">Zenmuse</th>\n </tr>\n <tr>\n   <td width=12%> </td>\n   <td width=8%> Professional </td>\n   <td width=9%> 4K </td>\n   <td width=8%> Advanced </td>\n   <td width=8%> Standard </td>\n   <td width=8%> X3 </td>\n   <td width=8%>  X5 </td>\n   <td width=8%> X5R </td>\n   <td width=15%> XT </td>\n</tr>\n<tr>\n   <td><p> Sensor Size </p></td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>4/3&quot; </td>\n   <td>4/3&quot; </td>\n   <td>NA </td>\n</tr>\n<tr>\n   <td><p> Image Pixels </p></td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>16 </td>\n   <td>16 </td>\n   <td>0.32 <p><font color=\"#BBBBBB\" size=1>Depending on Model </p></td> </td>\n</tr>\n<tr>\n   <td><p> Max Video Resolution </p></td>\n   <td>4K </td>\n   <td>4K </td>\n   <td>4K </td>\n   <td>2.7K </td>\n   <td>2.7K </td>\n   <td>4K </td>\n   <td>4K </td>\n   <td>4K </td>\n   <td>640x512 <p><font color=\"#BBBBBB\" size=1>Depending on Model </p></td> </td>\n</tr>\n<tr>\n   <td><p> ISO </p></td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-25600 </td>\n   <td>100-25600 </td>\n   <td>NA </td>\n</tr>\n<tr>\n   <td><p> Swappable Lens </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>- </td>\n</tr>\n<tr>\n   <td> <p> FOV </br><font color=\"#BBBBBB\" size=1>degrees </p></td> </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>72 </td>\n   <td>72 </td>\n   <td>13-90 <p><font color=\"#BBBBBB\" size=1>Fixed. Depending on lens </p></td> </td>\n</tr>\n<tr>\n   <td> <p> Focal Length </br><font color=\"#BBBBBB\" size=1>mm relative to 35mm sensor </p></td> </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>30 </td>\n   <td>30 </td>\n   <td>NA </td>\n</tr>\n<tr>\n   <td><p> Aperture </p></td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/1.7-f/16 </td>\n   <td>f/1.7-f/16 </td>\n   <td>f1.25-f/1.4 <p><font color=\"#BBBBBB\" size=1>Fixed. Depending on lens </p></td> </td>\n</tr>\n<tr>\n   <td><p> Focus </p></td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>Variable </td>\n   <td>Variable </td>\n   <td>NA </td>\n</tr>\n<tr>\n   <td><p> Controllable Gimbal Pan </br><font color=\"#BBBBBB\" size=1>degrees </p></td> </td>\n   <td>+/- 15</td>\n   <td>0 </td>\n   <td>0 </td>\n   <td>0 </td>\n   <td>0 </td>\n   <td>+/- 180 </td>\n   <td>+/- 180 </td>\n   <td>+/- 180 </td>\n   <td>+/- 180 </td>\n</tr>\n<tr>\n   <td><p> Controllable Gimbal Tilt </br><font color=\"#BBBBBB\" size=1>degrees </p></td> </td>\n   <td>-90 ~ 30</td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n</tr>\n<tr>\n   <td><p> Storage Media </p></td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD, SSD </td>\n   <td>Micro SD </td>\n</tr>\n<tr>\n   <td><p> Weight </br><font color=\"#BBBBBB\" size=1>g - with Gimbal </p></td> </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>247 </td>\n   <td>526 </td>\n   <td>583 </td>\n   <td>270 </td>\n</tr>\n</table></html>\n\n<h3 id=\"remote-controller\">Remote Controller</h3>\n<p>Remote controllers will differ in:</p>\n<ul>\n<li>How they connect to a mobile device</li>\n<li>What wireless technology they use to connect with the aircraft</li>\n<li>Whether they have GPS built-in</li>\n<li>If they can output secondary video</li>\n<li>If they can be used in a dual configuration (one flys the aircraft while the other controls the gimbal and camera)</li>\n</ul>\n<p>Remote Controllers that use WiFi to connect to the mobile device will act as a WiFi access point and will need to be joined.</p>\n<html><table class=\"table-remote-comparison\">\n <thead>\n  <tr>\n    <th colspan=\"10\">Remote Controller</th>\n  </tr>\n </thead>\n <tbody>\n <tr>\n    <td> </th>\n   <td rowspan=\"2\" width=12%> Phantom 4</th>\n     <td colspan=\"4\">Phantom 3</th>\n     <td colspan=\"2\">Inspire 1</th>\n     <td colspan=\"2\">Matrice </th>\n </tr>\n <tr>\n   <td width=10%> </td>\n   <td width=10%> Professional </td>\n   <td width=10%> 4K </td>\n   <td width=10%> Advanced </td>\n   <td width=10%> Standard </td>\n   <td width=10%> Standard </td>\n   <td width=10%>  Pro/RAW </td>\n   <td width=10%> 100 </td>\n   <td width=10%> 600 </td>\n</tr>\n<tr>\n   <td><p> Connection to Mobile Device </p></td>\n   <td>USB </td>\n   <td>USB </td>\n   <td>WiFi </td>\n   <td>USB </td>\n   <td>WiFi </td>\n   <td>USB </td>\n   <td>USB </td>\n   <td>USB </td>\n   <td>USB </td>\n</tr>\n<tr>\n   <td><p> Wireless Link Technology </p></td>\n   <td>Lightbridge </td>\n   <td>Lightbridge </td>\n   <td>WiFi, Aux </td>\n   <td>Lightbridge </td>\n   <td>WiFi, Aux </td>\n   <td>Lightbridge </td>\n   <td>Lightbridge </td>\n   <td>Lightbridge </td>\n   <td>Lightbridge </td>\n</tr>\n<tr>\n   <td><p> Supports Dual RC </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>YES </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>YES </td>\n</tr>\n<tr>\n   <td><p> Built-In GPS </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>YES </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>YES </td>\n</tr>\n<tr>\n   <td><p> Secondary Video Output </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>Mini HDMI </td>\n   <td>Mini HDMI </td>\n   <td>Mini HDMI </td>\n   <td>HDMI, SDI </td>\n</tr>\n</table></html>","meta":{"title":"Hardware Introduction","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>The architecture is designed to be highly extensible. Abstract product and component classes are used so applications can control different products with the same code. Features that are not consistent across all generations of supported products can be queried at runtime, and those that are consistent will simply work.</p>\n<p>For example, the large majority of features of the Phantom and Inspire series of products are consistent. Therefore an application written to support the Phantom 4 will, with the exception of unique Inspire 1 features, fully support the Inspire 1. </p>\n<p>This also means when new products are released, they will already work with existing applications (when that application is rebuilt with the latest SDK that supports the new product). Any new features of the new product will need to be added to the application, but all existing features will not need modification.</p>\n<h2 id=\"hierarchy\">Hierarchy</h2>\n<p>A mobile application accesses the DJI Mobile SDK through several main classes illustrated in the diagram below.</p>\n<html><img src=\"../../images/sdk-architectural-overview/Architecture.png\"></html>\n\n<ul>\n<li><strong>SDK Manager</strong>: Manages registration of the SDK, product connection and provides access to the product itself.</li>\n<li><strong>Product</strong>: The aircraft or handheld product, this class holds basic product properties and contains the main product components.</li>\n<li><strong>Component</strong>: Component classes describe the gimbal, camera, flight controller, remote controller and wireless link. The classes provide component control, state information and contain subcomponents.</li>\n<li><strong>Mission</strong>: Classes that describe different missions such as Waypoint and ActiveTrack missions and hold their setup properties and status.</li>\n<li><strong>Mission Manager</strong>: Missions are controlled through the mission manager. It provides control of mission preparation, execution, termination, pausing and resumption as well as provides access to the currently executing mission.</li>\n</ul>\n<h2 id=\"aircraft-product\">Aircraft Product</h2>\n<p>A more detailed description of the aircraft product class is below. The aircraft product holds a number of components and the component holds a number of subcomponents, all of which are accessible when the mobile device is connected to the aircraft through the remote controller (if the SDK registration is successful). If the connection between the remote controller and aircraft is lost, the remote controller object will persist (if the mobile device is still connected to the remote controller), while the product and all remaining components physically on the aircraft will become null.</p>\n<html><img src=\"../../images/sdk-architectural-overview/SDKAircraftArchitecture.png\"></html>\n\n<h2 id=\"handheld-product\">Handheld Product</h2>\n<p>The handheld camera product is simpler and has less components than an aircraft. The shared components are treated the same as on an aircraft, and so any code that controls the camera will work on both aircraft and handheld products.</p>\n<html><img src=\"../../images/sdk-architectural-overview/SDKHandheldArchitecture.png\"></html> \n\n<h2 id=\"missions\">Missions</h2>\n<p>All missions inherit from DJIMission so they can be handled by the Mission Manager.</p>\n<html><img src=\"../../images/sdk-architectural-overview/SDKMissionArchitecture.png\"></html>","meta":{"title":"SDK Architectural Overview","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<h2 id=\"base-product\">Base Product</h2>\n<h3 id=\"components\">Components</h3>\n<p>Each DJI Product has various components. In case of aircraft, it can has flight controller, remote controller, camera, gimbal, battery components. For an handheld device, it can also has a handheld controller component too. Each component inherites from the <strong>DJIBaseComponent</strong> class.\nIt uses an array to store different components of DJI Product.</p>\n<h3 id=\"model-names\">Model Names</h3>\n<p>Each DJIBaseProduct has its model Name, it can be &quot;Inspire 1&quot;, &quot;Osmo&quot;, &quot;Phantom 3 Professional&quot;, etc. You can check the name of the current connected DJI Product by accessing the model name. In case of iOS, you can get the model names list in <strong>DJIAircraft.h</strong> and <strong>DJIHandheld.h</strong> files. In case of Android, you can get the model names list in <strong>DJIBaseProduct.Model</strong> enum. </p>\n<h3 id=\"connectivity-status\">Connectivity Status</h3>\n<p>In case of aircraft, if the aircraft is out of range or turned off, the connectivity status will change to NOT connected. </p>\n<p>In case of handheld device, if the handheld device&#39;s Wi-Fi signal is lost or turn off, or the mobile device disconnected with the handheld device&#39;s Wi-Fi, the connectivity status will chagne to NOT connected.</p>\n<h3 id=\"firmware-package-version\">Firmware Package Version</h3>\n<p>Get the product&#39;s firmware package version. For products except Phantom 4, Internet connection is required and the execution time for this method highly depends on the Internet Status.</p>\n<h2 id=\"sdk-errors\">SDK Errors</h2>\n<p>DJI SDK Errors includes SDK Registration errors, camera errors, flight controller errors, mission errors, etc. Developers can get helps from these error infos when using the SDK.</p>\n<h2 id=\"dji-completion-blocks\">DJI Completion Blocks</h2>\n<p>Every SDK function you call requires a completion block as a parameter, which will be carried out after the aircraft executes the given command(s) or finish the related actions. For some special actions (Like take off, retract landing gear), which will take a peroid of time to finish, the completion block will be called once the actions finish.</p>","meta":{"title":"Base Product","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Application registration to use the DJI Mobile SDK, product connection, debugging and logging services are handled through the SDK manager class <code>DJISDKManager</code>.</p>\n<p>The class also provides the instance of the product connected to the mobile device, from which control, state and components can be accessed.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>Applications need permission to initialize the DJI Mobile SDK. During application development, a unique application key (App Key) needs to be <a href=\"../quick-start/index.html#generate-an-app-key\">generated</a> and included in the source code. When the application is first run, this key will be sent to a DJI server to validate the application can use the SDK. If successful, the result will be locally cached on the mobile device. Every subsequent initialization of the application on the mobile device will check the local cache if there is no connection to the internet.</p>\n<p>Therefore, the first time an application is run on a mobile device, the mobile device will need to have an internet connection. After that, an internet connection will not be required to initialize the DJI Mobile SDK, but connectivity will be used when available to confirm the application still has authorization to control DJI products.</p>\n<p>This process is called registration, and is made available through the SDK Manager. </p>\n<blockquote>\n<p><strong>Note</strong>: Some DJI products use WiFi as the connection between the mobile device and the product. The product is the access point and the mobile device is the client, which means no internet connectivity will exist through the WiFi connection for the mobile device. If using such a product, the first time the application is run should either be when the product is not connected to the mobile device, or the mobile device will need to have a cellular data connection. After the first successful registration, connectivity is not a requirement.</p>\n</blockquote>\n<h2 id=\"product-connection\">Product Connection</h2>\n<p>Once registered, the application can be connected to the product. The class method <code>startConnectionToProduct</code> can be used to initiate the connection between application and product assuming the mobile device is already physically connected to the product (through either USB or WiFi). </p>\n<p>The SDK manager can close the connection when desired. For iOS, the SDK manager can automatically close the connection when the application enters the background if desired.</p>\n<p>Once connected, the SDK manager provides an instance to the connected product. The product instance can be used to control and receive state information about the components of the product.</p>\n<h2 id=\"debug-mode-and-bridge-app\">Debug Mode and Bridge App</h2>\n<p>iOS development requires the mobile device be connected to Xcode directly through USB to use native debugging and profiling tools. As some DJI products use the USB port to connect to the remote controller, this can make application development difficult.</p>\n<p>DJI provides a Bridge App to resolve this. Debug mode can be turned on in the SDK Manager which will reroute all USB communication to WiFi. A second mobile device running the bridge app connects to the remote controller and relays WiFi communication. Alternatively, the iOS simulator can connect to the Bridge App over WiFi if only one mobile device is available.</p>\n<p>The Bridge App is available to download <a href=\"https://github.com/dji-sdk/DJI-Bridge-App\" target=\"_blank\">here</a> and a tutorial for using the Bridge App is <a href=\"../ios-tutorials/BridgeAppDemo.html\">here</a>.</p>\n<h2 id=\"remote-logging\">Remote Logging</h2>\n<p>The SDK Manager also allows iOS applications to log remotely. Field testing is critical in application development, and remote logging allows simple ways to log events in real time to a remote server.</p>\n<p>A tutorial for using remote logging can be found <a href=\"../ios-tutorials/RemoteLoggerDemo.html\">here</a>.</p>","meta":{"title":"SDK Manager","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<p>This tutorial is designed for you to gain a better understanding of the DJI Bridge App. It will teach you how to use it for app debugging by implementing the live video view and two basic camera functionalities: &quot;Take Photo&quot; and &quot;Record video&quot;.</p>\n<p>You can download the <a href=\"https://github.com/dji-sdk/DJI-Bridge-App\" target=\"_blank\">DJI Bridge App Source Code</a>, build and install it on your mobile device.</p>\n<p>Alos, you can download the sample project for this tutorial from the Github Page, which you can access it by pressing the <strong>Github Tag</strong> on top of this tutorial. </p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>The design of the DJI Bridge App is simple. It&#39;s a universal app supports both iPhone and iPad. You can use it to debug app for Phantom 3 Professional, Phantom 3 Advanced, Inspire 1, M100 and other products using USB/MFI connection between RC and your app.</p>\n<h3 id=\"workflow\">Workflow</h3>\n<p><img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/workFlow.png\" alt=\"workflow\"></p>\n<p>As you see above, the Bridge App and the iOS Device or Xcode Simulator should work in the same local network using TCP service to communicate. You can connect them to the same WiFi network or connect to a local wireless connection created on your Mac too. </p>\n<h3 id=\"signal-light\">Signal Light</h3>\n<p>At the top of the screen, there are two signal lights, which represent the connection between the bridge app and the remote controller or your application. When the bridge app connect to the remote controller successfully, the <strong>RC light</strong> will turn green. Similarly, when the bridge app connect to your app successfully, the <strong>App Light</strong> will turn green too.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/toolScreenshot.png\" alt=\"signalLight\"></p>\n<h3 id=\"tcp-connection\">TCP Connection</h3>\n<p>The bridge app uses TCP sockets to communicate with your app. It use <strong>Debug Id</strong> to distinguish between different bridge apps running on different mobile devices.</p>\n<p>TCP connection is stable and supports security network, which means your local network has firewall. The debug ID will change in different IP addresses.</p>\n<p>Now try to open the bridge app, and connect your mobile device to the remote controller using usb cable, you should see the RC Light turn green!</p>\n<blockquote>\n<p><strong>Note</strong>: </p>\n<p><strong>1.</strong> If you connect the bridge app to the RC and the RC light is still red, you may need to restart the app and try again. It should works.</p>\n</blockquote>\n<h3 id=\"link-reset\">Link Reset</h3>\n<p>   If the bridge app cannot connect to your app successfully because of switching your mobile device&#39;s wifi network or other unknown situations, you can press the <strong>Link Reset</strong> button at the bottom to force restart the TCP service to refresh the Debug ID.</p>\n<h2 id=\"download-and-import-the-sdk\">Download and Import the SDK</h2>\n<p>You can download the iOS SDK from here: <a href=\"http://developer.dji.com/en/mobile-sdk/downloads/\" target=\"_blank\"> <a href=\"http://developer.dji.com/en/mobile-sdk/downloads/\">http://developer.dji.com/en/mobile-sdk/downloads/</a> </a></p>\n<p>If you are not familiar with importing the SDK to your Xcode project, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a>.</p>\n<h2 id=\"implement-the-live-video-view\">Implement the Live Video View</h2>\n<p> <strong>1</strong>. We use the <strong>FFMPEG</strong> decoding library (found at <a href=\"http://ffmpeg.org\" target=\"_blank\"><a href=\"http://ffmpeg.org\">http://ffmpeg.org</a></a>) to do software video decoding here. For the hardware video decoding, we provide a <strong>DJIH264Decoder</strong> decoding library. You can find them in the <strong>VideoPreviewer</strong> folder, which you can download it from <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/VideoPreviewer\" target=\"_blank\">DJI iOS SDK Github Repository</a>. Download and copy the entire <strong>VideoPreviewer</strong> folder to your Xcode project&#39;s &quot;Frameworks&quot; folder and then add the &quot;VideoPreviewer.xcodeproj&quot; to the &quot;Frameworks&quot; folder in Xcode project navigator, as shown below:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/projectNavigator.png\" alt=\"projectNavigator\"></p>\n<blockquote>\n<p>Note: Please Make sure the <strong>VideoPreviewer</strong> folder and <strong>DJISDK.framework</strong> are in the same <strong>Frameworks</strong> folder like this:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/frameworksFolderStruct.png\" alt=\"frameworksFolderStruct\"></p>\n</blockquote>\n<p> <strong>2</strong>. Next, let&#39;s select the &quot;FPVDemo&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; button to add the &quot;VideoPreviewer.framework&quot; as shown below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/addFrameworks.png\" alt=\"addFrameworks\">\n  <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/addFrameworksResult.png\" alt=\"addFrameworksResult\"></p>\n<p>  <strong>3</strong>. In Main.storyboard, add a new View Controller and call it <strong>DJICameraViewController</strong>. Set <strong>DJICameraViewController</strong> as the root View Controller for the new View Controller you just added in Main.storyboard:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/cameraViewController.png\" alt=\"rootController\"></p>\n<p>Add a UIView inside the View Controller and set it as an IBOutlet called &quot;<strong>fpvPreviewView</strong>&quot;. Then, add two UIButtons and one UISegmentedControl at the bottom of the View Control and set their IBOutlets and IBActions, as shown below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/mainStoryboard.png\" alt=\"Storyboard\"></p>\n<p>  Go to <strong>DJICameraViewController.m</strong> file and import the <strong>DJISDK</strong> and <strong>VideoPreviewer</strong> header files. Then create a <strong>DJICamera</strong> property and implement its delegate protocol as below:</p>\n<pre><code class=\"lang-objc\">#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n@interface DJICameraViewController ()&lt;DJICameraDelegate&gt;\n\n@property (nonatomic, strong) DJICamera* camera;\n@property (weak, nonatomic) IBOutlet UIButton *recordBtn;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *changeWorkModeSegmentControl;\n@property (weak, nonatomic) IBOutlet UIView *fpvPreviewView;\n@property (weak, nonatomic) IBOutlet UILabel *currentRecordTimeLabel;\n\n- (IBAction)captureAction:(id)sender;\n- (IBAction)recordAction:(id)sender;\n- (IBAction)changeWorkModeAction:(id)sender;</code></pre>\n<p><strong>4</strong>. Implement the DJISDKManagerDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n}\n\n#pragma mark DJISDKManagerDelegate Method\n\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    if ([newProduct isKindOfClass:[DJIAircraft class]]) {\n        DJIAircraft* aircraft = (DJIAircraft*)newProduct;\n        self.camera = aircraft.camera;\n        self.camera.delegate = self;\n    }else if ([newProduct isKindOfClass:[DJIHandheld class]]){\n        DJIHandheld* handheld = (DJIHandheld*)newProduct;\n        self.camera = handheld.camera;\n        self.camera.delegate = self;\n    }\n}</code></pre>\n<p> The delegate method above is called when SDK detect a product. Here we create a <strong>DJIAircraft</strong> instance variable and initialize the DJICamera property variable from it. Similiarly, create a <strong>DJIHandheld</strong> instance variable when the <code>newProduct</code> is kind of <strong>DJIHandheld</strong> class. Then initialize the DJICamera property variable from it to support handheld device.</p>\n<p> Moreover, in the viewWillAppear method, set &quot;fpvPreviewView&quot; instance as a View of VideoPreviewer to show the Video Stream and reset it to nil in the viewWillDisappear method:</p>\n<pre><code class=\"lang-objc\">- (void)viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [[VideoPreviewer instance] setView:self.fpvPreviewView];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [[VideoPreviewer instance] setView:nil];   \n}</code></pre>\n<p>  Lastly, implement the DJICameraDelegate method, as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJICameraDelegate\n\n-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size\n{\n    uint8_t* pBuffer = (uint8_t*)malloc(size);\n    memcpy(pBuffer, videoBuffer, size);\n    [[VideoPreviewer instance].dataQueue push:pBuffer length:(int)size];\n}</code></pre>\n<p>  <code>-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size</code> method is used to send the video stream to <strong>VideoPreviewer</strong> to decode.</p>\n<h2 id=\"enter-debug-mode\">Enter Debug Mode</h2>\n<p><strong>1</strong>. Implement the <strong>DJISDKManagerDelegate</strong> protocol method in the DJICameraViewController.m file&#39;s extension part. Then create a new method named <strong>registerApp</strong> and invoke it in the viewDidAppear method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    [self registerApp];    \n}</code></pre>\n<blockquote>\n<p>Note: If you don&#39;t know how to apply as a DJI developer and get the App Key, please refer to <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n</blockquote>\n<p><strong>2</strong>. Next, let&#39;s implement the DJISDKManagerDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n        [DJISDKManager enterDebugModeWithDebugId:@&quot;Please type in Debug ID of the DJI Bridge app here&quot;];\n        [[VideoPreviewer instance] start];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}</code></pre>\n<p>The delegate method above gets called when the app is registered. If the registration is successful, we can call the <code>+(void) enterDebugModeWithDebugId:(NSString*)debugId;</code> class method of <strong>DJISDKManager</strong> to enter debug mode of the SDK by passing the <strong>Debug Id</strong> parameter, which you can get from <strong>the Bridge App</strong>. Then call the start method of the VideoPreviewer class to start video decoding.</p>\n<p><strong>3</strong>. Build and Run the project in Xcode. If everything is OK, you will see a &quot;Register App Successed!&quot; alert once the application loads. </p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/Screenshot.png\" alt=\"Screenshot\"></p>\n<h2 id=\"debug-live-video-view-on-ios-simulator\">Debug Live Video View on iOS Simulator</h2>\n<p>After you finish the steps above, you can now connect the DJI Bridge app to your aircraft to try debugging the Live Video View on your <strong>iOS Simulator</strong>. Here are the guidelines:</p>\n<p> In order to connect to DJI Inspire 1, Phantom 3 Professional, Phantom 3 Advanced or M100:</p>\n<p>  <strong>1</strong>. First, turn on your remote controller and connect it to the mobile device which is running the DJIBridge app.</p>\n<p>  <strong>2</strong>. Trust the device if an alert asking “Do you trust this device” comes up.</p>\n<p>  <strong>3</strong>. Make sure your mobile device connect to the same WiFi network to your Mac.</p>\n<p>  <strong>4</strong>. Then, turn on the power of the aircraft.</p>\n<p>  <strong>5</strong>. Now build and run the project in Xcode, wait for a few seconds, you will be able to view the live video stream from your aircraft&#39;s camera on your iOS simulator now!</p>\n<p>Here are the screenshots of the bridge app and iOS simulator if everthing goes well:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/workMode.png\" alt=\"TCP\"></p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/simulator.png\" alt=\"simulator\"></p>\n<blockquote>\n<p><strong>Note:</strong> </p>\n<p><strong>1.</strong> If you cannot see the live video, please check the log message in Xcode&#39;s console and try to move your aircraft around the RC. The live video should show up.</p>\n<p><strong>2.</strong> You may notice that the live video has mosaics. It&#39;s due to the delayed transmission and the software decoding quality of iOS Simulator.</p>\n</blockquote>\n<p>Congratulations! By using the bridge app, you can now debug your app with all the Xcode features, like adding <strong>Breakpoints</strong> in your code, using <strong>Instruments</strong> to profile the app, etc. Let&#39;s move forward.</p>\n<h2 id=\"implement-the-capture-and-record-function\">Implement the Capture and Record function</h2>\n<p>Create a BOOL property variable named <strong>isRecording</strong> in the DJICameraViewController.m file&#39;s extension part and implement the DJICameraDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (NSString *)formattingSeconds:(int)seconds\n{\n    NSDate *date = [NSDate dateWithTimeIntervalSince1970:seconds];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    [formatter setDateFormat:@&quot;mm:ss&quot;];\n    [formatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];\n\n    NSString *formattedTimeString = [formatter stringFromDate:date];\n    return formattedTimeString;\n}\n\n-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{\n    self.isRecording = systemState.isRecording;\n\n    [self.currentRecordTimeLabel setHidden:!self.isRecording];\n    [self.currentRecordTimeLabel setText:[self formattingSeconds:systemState.currentVideoRecordingTimeInSeconds]];\n\n    if (self.isRecording) {\n        [self.recordBtn setTitle:@&quot;Stop Record&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.recordBtn setTitle:@&quot;Start Record&quot; forState:UIControlStateNormal];\n    }\n\n    //Update UISegmented Control&#39;s state\n    if (systemState.workMode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.workMode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }\n\n}</code></pre>\n<p>The delegate method above is used to get the camera state from the camera on your aircraft. It will be called frequently, so you can update your user interface or camera settings accordingly here. We update the <strong>currentRecordTimeLabel</strong>&#39;s text with latest recording time. Then, update the recordBtn&#39;s title with the correct state. Lastly, update the changeWorkModeSegmentControl&#39;s selected index with <strong>systemState</strong>&#39;s workMode value.</p>\n<p>Once you finish it, let&#39;s implement the <strong>captureAction</strong>, <strong>recordAction</strong> and <strong>changeWorkModeAction</strong> IBAction methods, and show an alertView when error occurs as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)captureAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    [self.camera startShootPhoto:DJICameraPhotoShootModeSingle withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            [weakSelf showAlertViewWithTitle:@&quot;Take Photo Error&quot; withMessage:error.description];\n        }\n    }];\n\n}\n\n- (IBAction)recordAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n\n    if (self.isRecording) {\n        [self.camera stopRecordVideoWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Stop Record Video Error&quot; withMessage:error.description];\n            }\n        }];\n    }else\n    {\n        [self.camera startRecordVideoWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Start Record Video Error&quot; withMessage:error.description];\n            }\n        }];\n    }\n\n}\n\n- (IBAction)changeWorkModeAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    UISegmentedControl *segmentControl = (UISegmentedControl *)sender;\n    if (segmentControl.selectedSegmentIndex == 0) { //Take photo\n\n        [self.camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Set DJICameraModeShootPhoto Failed&quot; withMessage:error.description];\n            }\n\n        }];\n\n    }else if (segmentControl.selectedSegmentIndex == 1){ //Record video\n\n        [self.camera setCameraMode:DJICameraModeRecordVideo withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Set DJICameraModeRecordVideo Failed&quot; withMessage:error.description];\n            }\n\n        }];\n\n    }\n\n}</code></pre>\n<p>   Now, we can build and run the project. You can try to play with the <strong>Record</strong> and <strong>Switch Camera WorkMode</strong> functions, if everything is going well, you should see the simulator screenshot like this:</p>\n<p>   <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/record_screenshot.png\" alt=\"Screenshot\"></p>\n<h2 id=\"debug-on-actual-ios-device\">Debug on Actual iOS Device</h2>\n<p>   Currently, we are running the app on <strong>iOS Simulator</strong>. Although the iOS Simulator is extremely useful during app development, when you want to ensure the required functionality and performance of an application, such as App Memory Usage, Hardware usage like Accelerometer, Gyroscope, etc, testing on an actual device is still required. For more difference between iOS Simulator and actual iOS device, please refer to <a href=\"http://bluetubeinc.com/blog/2014/11/ios-simulator-vs-device-testing\" target=\"_blank\"> iOS Simulator Vs. Actual Device Testing </a>.</p>\n<p>   The good thing is DJI Bridge app supports actual iOS device debugging. You can find another iOS device, like an iPhone 6, iPad air 2, etc, and connect it to your Mac. Then build and run the project on it. It should work perfectly the same to the iOS Simulator.</p>\n<h2 id=\"debug-on-dji-product-requires-wifi-connection\">Debug on DJI Product requires WiFI Connection</h2>\n<p>   For the Phantom 3 Standard and OSMO, you cannot use DJI Bridge App to debug your application because they use WiFi to connect between your application and the remote controller or the handheld device.</p>\n<p>   Actually you can work without the DJI Bridge App. Let&#39;s add a Macro named &quot;ENABLE_DEBUG_MODE&quot; above the DJICameraViewController.m file&#39;s extension part as shown below:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJICameraViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n#define ENABLE_DEBUG_MODE 0\n\n@interface DJICameraViewController ()&lt;DJICameraDelegate, DJISDKManagerDelegate&gt;</code></pre>\n<p>  Then go to <code>- (void)sdkManagerDidRegisterAppWithError:(NSError *)error</code> method and replace the code with the following:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n\n#if ENABLE_DEBUG_MODE\n        [DJISDKManager enterDebugModeWithDebugId:@&quot;Please type in Debug ID of the DJI Bridge app here&quot;];\n#else\n        [DJISDKManager startConnectionToProduct];\n#endif\n        [[VideoPreviewer instance] start];\n    }\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}</code></pre>\n<p>   As the code shown above, if you don&#39;t want to use debug mode of the SDK with DJI Bridge app, you can call <code>+ (void)startConnectionToProduct;</code> class method of DJISDKManager instead once the app registration is successful.</p>\n<p>   Finally, connect your Mac, which uses iOS Simulator to debug, or your iOS device&#39;s WiFi network to DJI Product. Build and run the application on your Mac, if everthing goes well, you should see the following screenshot for iOS Simulator:</p>\n<p>   <img src=\"../../images/tutorials-and-samples/iOS/BridgeAppDemo/osmoScreenshot.png\" alt=\"Screenshot\"></p>\n<blockquote>\n<p><strong>Notes:</strong></p>\n<p><strong>1.</strong> If it&#39;s the first time to run the application, which isn&#39;t registered before, you may need to connect your Mac or iOS device&#39;s WiFi to the internet and build and run the app for registration. Next time, you can connect their WiFi back to the DJI Product to debug without problems.</p>\n<p><strong>2.</strong> You may notice the video is clear without mosaic. Because the iOS device use hardware decoding for live video, which is better than software decoding.</p>\n</blockquote>\n<h3 id=\"summary\">Summary</h3>\n<p>   Congratulations! You&#39;ve learned how to use DJI Bridge App to debug your application using DJI Mobile SDK. Also, for better understanding, the tutorial shows you how to show the live video view from the DJI Product&#39;s camera and control the camera to take photo and record video too. </p>\n<p>   With DJI Bridge App, you can build your application with DJI Mobile SDK more efficiently. Hope you enjoy this tutorial, Thanks!</p>","meta":{"title":"DJI Bridge App Tutorial","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/DJIBridgeAppDemo"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to implement the DJIWaypoint Mission feature and get familiar with the usages of DJIMissionManager. \nAlso you will know how to setup the DJI PC Simulator, upgrade your Inspire 1, Phantom 3 Professional and Phantom 3 Advanced&#39;s firmware to the lastest version, and how to test the Waypoint Mission API with DJI PC Simulator too. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"setup-the-map-view\">Setup The Map View</h2>\n<h3 id=\"1-importing-the-sdk\">1. Importing the SDK</h3>\n<p>Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;GSDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s import the <strong>DJISDK.framework</strong> to it. If you are not familiar with the process of importing DJI SDK, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h3 id=\"2-creating-the-map-view\">2. Creating the Map View</h3>\n<p>Now, let&#39;s delete the <strong>ViewController.h</strong> and <strong>ViewController.m</strong> files, which were created by Xcode when you created the project. Then, create a viewController named &quot;<strong>DJIRootViewController</strong>&quot; and set it as the <strong>Root View Controller</strong> in Main.storyboard. Moreover, drag a <strong>MKMapView</strong> from Object Library to <strong>DJIRootViewController</strong>, setup its AutoLayout constraints, and set its delegate to <strong>DJIRootViewController</strong>, as seen below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/mkMapView.png\" alt=\"mkMapView\"></p>\n<p>After that, import the <strong>MapKit.framework</strong> to the project and open the &quot;DJIRootViewController.m&quot; file, create an IBOutlet for the MKMapView, name it &quot;<strong>mapView</strong>&quot; and link it to the MKMapView in <strong>Main.storyboard</strong>. Import the following header files and implement MKMapView&#39;s delegate method:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIRootViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;MapKit/MapKit.h&gt;\n\n@interface DJIRootViewController() &lt;MKMapViewDelegate&gt;\n\n@property (weak, nonatomic) IBOutlet MKMapView *mapView;\n\n@end</code></pre>\n<p>Now, let&#39;s build and run the project. If everything is as it should be, you should see the following screenshot:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/mapView.png\" alt=\"mapView\"></p>\n<h3 id=\"3-adding-annotations-to-the-mapview\">3. Adding Annotations to the MapView</h3>\n<p>Currently, the map view is simple. Let&#39;s add something interesting to it. Create a new <strong>NSObject</strong> file named <strong>DJIMapController</strong>, which will be used to deal with the MKAnnotations(or for our purposes, Waypoints) logic on the map. Open the DJIMapController.h file and add the following code to it:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n#import &lt;MapKit/MapKit.h&gt;\n\n@interface DJIMapController : NSObject\n\n@property (strong, nonatomic) NSMutableArray *editPoints;\n\n/**\n *  Add Waypoints in Map View\n */\n- (void)addPoint:(CGPoint)point withMapView:(MKMapView *)mapView;\n\n/**\n *  Clean All Waypoints in Map View\n */\n- (void)cleanAllPointsWithMapView:(MKMapView *)mapView;\n\n/**\n *  Current Edit Points\n *\n *  @return Return an NSArray contains multiple CCLocation objects\n */\n- (NSArray *)wayPoints;\n\n@end</code></pre>\n<p>Here, we create an NSMutableArray called <strong>editPoints</strong> to store waypoint objects and add two methods to implement <strong>Add</strong> and <strong>Remove</strong> waypoints. The last method will be used to return the current waypoint objects on the map in an array.</p>\n<p>Let&#39;s go to the DJIMapController.m file and replace the original code with the following:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIMapController.h&quot;\n\n@implementation DJIMapController\n\n- (instancetype)init\n{\n    if (self = [super init]) {\n        self.editPoints = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)addPoint:(CGPoint)point withMapView:(MKMapView *)mapView\n{\n    CLLocationCoordinate2D coordinate = [mapView convertPoint:point toCoordinateFromView:mapView];\n    CLLocation *location = [[CLLocation alloc] initWithLatitude:coordinate.latitude longitude:coordinate.longitude];\n    [_editPoints addObject:location];\n    MKPointAnnotation* annotation = [[MKPointAnnotation alloc] init];\n    annotation.coordinate = location.coordinate;\n    [mapView addAnnotation:annotation];\n}\n\n- (void)cleanAllPointsWithMapView:(MKMapView *)mapView\n{\n    [_editPoints removeAllObjects];\n    NSArray* annos = [NSArray arrayWithArray:mapView.annotations];\n    for (int i = 0; i &lt; annos.count; i++) {\n        id&lt;MKAnnotation&gt; ann = [annos objectAtIndex:i];\n        [mapView removeAnnotation:ann];\n    }   \n}\n\n- (NSArray *)wayPoints\n{\n    return self.editPoints;\n}\n\n@end</code></pre>\n<p>First, we initialize the <strong>editPoints</strong> array in the init method, then create MKPointAnnotation objects from CGPoint and add them to our <strong>mapView</strong>, and finally implement the <strong>cleanAllPointsWithMapView</strong> method to clean up the <strong>eidtPoints</strong> array and the annotations on the mapView.</p>\n<p>Go back to the DJIRootViewController.m file, import the DJIMapController.h header file, and create a DJIMapController property named <strong>mapController</strong>. Since we want to add annotation pins by tapping on the map, we also need to create a UITapGestureRecognizer named as <strong>tapGesture</strong>. Lastly, add a UIButton to the DJIRootViewController scene in Main.storyboard, set its IBOutlet name as &quot;<strong>editBtn</strong>&quot;, and add an IBAction method named &quot;<strong>editBtnAction</strong>&quot; for it, as shown below:</p>\n<pre><code class=\"lang-objc\">@property (nonatomic, strong) DJIMapController *mapController;\n@property (nonatomic, strong) UITapGestureRecognizer *tapGesture;\n@property (weak, nonatomic) IBOutlet UIButton *editBtn;\n\n- (IBAction)editBtnAction:(id)sender;</code></pre>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/editButton.png\" alt=\"editButton\"></p>\n<p>Once that is complete, open the DJIRootViewController.m file, initialize the <strong>mapController</strong> and <strong>tapGesture</strong> variables, and add the <strong>tapGesture</strong> to mapView to add waypoints. Furthermore, we need a boolean variable named &quot;<strong>isEditingPoints</strong>&quot; to store the edit waypoint state, which will also change the title of <strong>editBtn</strong> accordingly. Lastly, implement tapGesture&#39;s action method <strong>addWayPoints</strong>, as shown below:</p>\n<pre><code class=\"lang-objc\">@interface DJIRootViewController ()&lt;MKMapViewDelegate&gt;\n@property (weak, nonatomic) IBOutlet MKMapView *mapView;\n@property (nonatomic, assign)BOOL isEditingPoints;\n@end\n\n@implementation DJIRootViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.mapController = [[DJIMapController alloc] init];\n    self.tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(addWaypoints:)];\n    [self.mapView addGestureRecognizer:self.tapGesture];\n\n}\n\n#pragma mark Custom Methods\n\n- (void)addWaypoints:(UITapGestureRecognizer *)tapGesture\n{\n    CGPoint point = [tapGesture locationInView:self.mapView];\n\n    if(tapGesture.state == UIGestureRecognizerStateEnded){\n\n        if (self.isEditingPoints) {\n            [self.mapController addPoint:point withMapView:self.mapView];\n        }\n    }\n}\n\n- (IBAction)editBtnAction:(id)sender {\n\n    if (self.isEditingPoints) {\n        [self.mapController cleanAllPointsWithMapView:self.mapView];\n        [self.editBtn setTitle:@&quot;Edit&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.editBtn setTitle:@&quot;Reset&quot; forState:UIControlStateNormal];\n    }\n\n    self.isEditingPoints = !self.isEditingPoints;\n\n}\n\n#pragma mark MKMapViewDelegate Method\n- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id &lt;MKAnnotation&gt;)annotation\n{\n    if ([annotation isKindOfClass:[MKPointAnnotation class]]) {\n        MKPinAnnotationView* pinView = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@&quot;Pin_Annotation&quot;];\n        pinView.pinColor = MKPinAnnotationColorPurple;\n        return pinView;\n\n    }\n\n    return nil;\n}</code></pre>\n<p>In the above code, we also added an NSNotification observer to check the DJI Mobile SDK&#39;s state, to make sure it was sucessfully registered. At the same time, we implement the <strong>addWaypoints</strong> gesture action by calling DJIMapController&#39;s </p>\n<pre><code> - (void)addPoint:(CGPoint)point withMapView:(MKMapView *)mapView</code></pre>\n<p>method to add waypoints to the map. Next, we implement the IBAction method <strong>editBtn</strong>, which will update the button&#39;s title and clean up waypoints based on the value of <strong>isEditingPoints</strong>. Finally, we implement MKMapViewDelegate&#39;s method to change the pin color to purple.</p>\n<p>When you are done with all the steps above, build and run your project and try to add waypoints on the map. If everything is fine, you will see the following animation:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/addWaypoint.gif\" alt=\"addWaypoint\"></p>\n<h3 id=\"4-focusing-the-mkmapview\">4. Focusing the MKMapView</h3>\n<p>You may be wondering why the map&#39;s location is different from your current location and why it is difficult to find your location on the map. Focusing the map to your current location quickly would be helpful for the application. To implement that feature, we need to use <strong>CLLocationManager</strong>.</p>\n<p>Open the DJIRootViewController.m file and import CoreLocation&#39;s header file. Create a CLLocationManager property named &quot;locationManager&quot;. Then create a CLLocationCoordinate2D property named &quot;userLocation&quot; to store the user&#39;s location data. Next, implement CLLocationManager&#39;s <strong>CLLocationManagerDelegate</strong> protocol in the class, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &lt;DJIRootViewController.h&gt;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;MapKit/MapKit.h&gt;\n#import &lt;CoreLocation/CoreLocation.h&gt;\n\n@interface DJIRootViewController()&lt;MKMapViewDelegate, CLLocationManagerDelegate&gt;\n\n@property (nonatomic, weak) IBOutlet MKMapView *mapView;\n@property (nonatomic, assign)BOOL isEditingPoints;\n@property (nonatomic, strong) CLLocationManager* locationManager;\n@property (nonatomic, assign) CLLocationCoordinate2D userLocation;\n@property (nonatomic, strong) UITapGestureRecognizer *tapGesture;\n@property (nonatomic, weak) IBOutlet UIButton *editBtn;\n\n- (IBAction)editBtnAction:(id)sender;\n- (IBAction)focusMapAction:(id)sender;\n\n@end</code></pre>\n<p>In the code above, we also added a UIButton named &quot;Focus Map&quot; in DJIRootViewController&#39;s scene in Main.storyboard and added an IBAction method named as <strong>focusMapAction</strong>. Here is the screenshot of the scene from Main.storyboard:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/focusMap.png\" alt=\"focusMap\"></p>\n<p>Once you are done, go back to DJIRootViewController.m file and add the following code:</p>\n<pre><code class=\"lang-objc\">- (void)viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [self startUpdateLocation];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [self.locationManager stopUpdatingLocation];\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.userLocation = kCLLocationCoordinate2DInvalid;\n\n    self.mapController = [[DJIMapController alloc] init];\n    self.tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(addWaypoints:)];\n    [self.mapView addGestureRecognizer:self.tapGesture];\n\n}\n\n- (BOOL)prefersStatusBarHidden {\n    return NO;\n}\n\n#pragma mark CLLocation Methods\n-(void) startUpdateLocation\n{\n    if ([CLLocationManager locationServicesEnabled]) {\n        if (self.locationManager == nil) {\n            self.locationManager = [[CLLocationManager alloc] init];\n            self.locationManager.delegate = self;\n            self.locationManager.desiredAccuracy = kCLLocationAccuracyBest;\n            self.locationManager.distanceFilter = 0.1;\n            if ([self.locationManager respondsToSelector:@selector(requestAlwaysAuthorization)]) {\n                [self.locationManager requestAlwaysAuthorization];\n            }\n            [self.locationManager startUpdatingLocation];\n        }\n    }else\n    {\n        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Location Service is not available&quot; message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n        [alert show];\n    }\n}\n\n- (IBAction)focusMapAction:(id)sender {\n{\n    if (CLLocationCoordinate2DIsValid(self.userLocation)) {\n        MKCoordinateRegion region = {0};\n        region.center = self.userLocation;\n        region.span.latitudeDelta = 0.001;\n        region.span.longitudeDelta = 0.001;\n\n        [self.mapView setRegion:region animated:YES];\n    }\n}\n\n#pragma mark - CLLocationManagerDelegate\n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations\n{\n    CLLocation* location = [locations lastObject];\n    self.userLocation = location.coordinate;\n}</code></pre>\n<p>First, we initialize <strong>userLocation</strong> data to kCLLocationCoordinate2DInvalid in the viewDidLoad method. Then we add a new method named as &quot;startUpdateLocation&quot; to initialize <strong>locationManger</strong>, set its properties and start updating location. If the Location Service is not available, we add a UIAlertView to display the warning. The <strong>startUpdateLocation</strong> is called in viewWillAppear method and is stopped in the viewWillDisappear method. Moreover, we need to implement CLLocationManagerDelegate method to update <strong>userLocation</strong> property. Finally, we implement the &quot;focusMapAction&quot; method to focus <strong>mapView</strong> to the user&#39;s current location.</p>\n<p>In iOS8, we must call <strong>locationManager</strong>&#39;s <strong>requestAlwaysAuthorization</strong> first, which was done in <strong>startUpdateLocation</strong> method. </p>\n<p>Next, add a NSLocationAlwaysUsageDescription or NSLocationWhenInUseUsageDescription key to your project’s Info.plist containing the message to be displayed to the user when a UIAlert asking whether or not they want to allow the application to use their location. We set the messages empty here:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/infoPlist.png\" alt=\"infoPlist\"></p>\n<p>It&#39;s time to build and run the project to check the focus map feature. When you launch the app for the first time, a pop up alert asking for your permission to access your location will appear. Select <strong>Allow</strong> and press the <strong>Focus Map</strong> button. If the map view animates to your current location like the following animation, congratulations, you have finished the <strong>Focus Map</strong> feature!</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/focusMap.gif\" alt=\"focusMap\"></p>\n<h3 id=\"5-showing-the-aircraft-on-map-view\">5. Showing the Aircraft on Map View</h3>\n<p>Now, we can focus the mapView to our current location, which is a good start! However, let&#39;s do something more interesting. We&#39;re going to simulate the aircraft&#39;s GPS location using the DJI PC Simulator and show it on our map view.</p>\n<p>You can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-PC-Simulator\">Using DJI PC Simulator</a> for its basic usage. If you want to place the aircraft in your current GPS location on Map View, you can set the latitude and longitude values in the <strong>Simulator Config</strong> to yours. We take the simulator&#39;s initial values in the following example.</p>\n<p>Let&#39;s come back to the code. Create a new subclass of <strong>MKAnnotationView</strong> named &quot;DJIAircraftAnnotationView&quot; and a new subclass of NSObject named <strong>DJIAircraftAnnotation</strong>. Below is the code:</p>\n<ul>\n<li>DJIAircraftAnnotationView.h</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &lt;MapKit/MapKit.h&gt;\n\n@interface DJIAircraftAnnotationView : MKAnnotationView\n\n-(void) updateHeading:(float)heading;\n\n@end</code></pre>\n<ul>\n<li>DJIAircraftAnnotationView.m</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &quot;DJIAircraftAnnotationView.h&quot;\n\n@implementation DJIAircraftAnnotationView\n\n- (instancetype)initWithAnnotation:(id &lt;MKAnnotation&gt;)annotation reuseIdentifier:(NSString *)reuseIdentifier\n{\n    self = [super initWithAnnotation:annotation reuseIdentifier:reuseIdentifier];\n    if (self) {\n        self.enabled = NO;\n        self.draggable = NO;\n        self.image = [UIImage imageNamed:@&quot;aircraft.png&quot;];\n    }\n\n    return self;\n}\n\n-(void) updateHeading:(float)heading\n{\n    self.transform = CGAffineTransformIdentity;\n    self.transform = CGAffineTransformMakeRotation(heading);\n}\n\n@end</code></pre>\n<p>In the code above, we create a MKAnnotationView for the aircraft, add a method named <strong>updateHeading</strong> to change the aircraft&#39;s rotation, and set its image to &quot;aircraft.png&quot;(You can get the image from this tutorial&#39;s demo project.) in the init method. Also, we disable the DJIAircraftAnnotationView&#39;s draggable property. Take a look at the code below:</p>\n<ul>\n<li>DJIAircraftAnnotation.h</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &lt;MapKit/MapKit.h&gt;\n#import &quot;DJIAircraftAnnotationView.h&quot;\n\n@interface DJIAircraftAnnotation : NSObject&lt;MKAnnotation&gt;\n\n@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;\n@property(nonatomic, weak) DJIAircraftAnnotationView* annotationView;\n\n-(id) initWithCoordiante:(CLLocationCoordinate2D)coordinate;\n\n-(void)setCoordinate:(CLLocationCoordinate2D)newCoordinate;\n\n-(void) updateHeading:(float)heading;\n\n@end</code></pre>\n<ul>\n<li>DJIAircraftAnnotation.m</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &quot;DJIAircraftAnnotation.h&quot;\n\n@implementation DJIAircraftAnnotation\n\n-(id) initWithCoordiante:(CLLocationCoordinate2D)coordinate\n{\n    self = [super init];\n    if (self) {\n        _coordinate = coordinate;\n    }   \n    return self;\n}\n\n- (void)setCoordinate:(CLLocationCoordinate2D)newCoordinate\n{\n    _coordinate = newCoordinate;\n}\n\n-(void)updateHeading:(float)heading\n{\n    if (self.annotationView) {\n        [self.annotationView updateHeading:heading];\n    }\n}\n@end</code></pre>\n<p>The <strong>DJIAircraftAnnotation</strong> class implements the <strong>MKAnnotation</strong> protocol. It&#39;s used to store and update a CLLocationCoordinate2D property. Also, we can update DJIAircraftAnnotationView&#39;s heading with the <strong>updateHeading</strong> method.</p>\n<p>Once you&#39;re done with that, open the DJIMapController.h file and import the DJIAircraftAnnotation.h file:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIAircraftAnnotation.h&quot;</code></pre>\n<p>Then create a property of an instance of DJIAircraftAnnotation and name it <strong>aircraftAnnotation</strong>. </p>\n<pre><code class=\"lang-objc\">@property (nonatomic, strong) DJIAircraftAnnotation* aircraftAnnotation;</code></pre>\n<p>Furthermore, add two new methods to update the aircraft&#39;s location and it&#39;s heading on the map.</p>\n<pre><code class=\"lang-objc\">/**\n *  Update Aircraft&#39;s location in Map View\n */\n-(void)updateAircraftLocation:(CLLocationCoordinate2D)location withMapView:(MKMapView *)mapView;\n\n/**\n *  Update Aircraft&#39;s heading in Map View\n */\n-(void)updateAircraftHeading:(float)heading;</code></pre>\n<p>Next, let&#39;s come back to the DJIMapController.m file and implement the two methods we just added:</p>\n<pre><code class=\"lang-objc\">-(void)updateAircraftLocation:(CLLocationCoordinate2D)location withMapView:(MKMapView *)mapView\n{\n    if (self.aircraftAnnotation == nil) {\n        self.aircraftAnnotation = [[DJIAircraftAnnotation alloc] initWithCoordiante:location];\n        [mapView addAnnotation:self.aircraftAnnotation];\n    }\n\n    [self.aircraftAnnotation setCoordinate:location];\n}\n\n-(void)updateAircraftHeading:(float)heading\n{\n    if (self.aircraftAnnotation) {\n        [self.aircraftAnnotation updateHeading:heading];\n    }\n}</code></pre>\n<p>Also, since we don&#39;t want the <strong>aircraftAnnotation</strong> removed by the <strong>cleanAllPointsWithMapView</strong> method in the DJIMapController.m file, we need to modify it, as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)cleanAllPointsWithMapView:(MKMapView *)mapView\n{\n    [_editPoints removeAllObjects];\n    NSArray* annos = [NSArray arrayWithArray:mapView.annotations];\n    for (int i = 0; i &lt; annos.count; i++) {\n        id&lt;MKAnnotation&gt; ann = [annos objectAtIndex:i];\n        if (![ann isEqual:self.aircraftAnnotation]) {\n            [mapView removeAnnotation:ann];\n        }\n\n    }   \n}</code></pre>\n<p>We add an if statement to check if the annotation of the map view is equal to the <strong>aircraftAnnotation</strong> property, and if it is not, we remove it. By doing so, we can prevent the Aircraft&#39;s annotation from being removed.</p>\n<p>To provide a better user experience, we need to add a status view on top of the mapView to show the aircraft&#39;s flight mode type, current GPS satellite count, vertical and horizontal flight speed and the flight altitude. Let&#39;s add the UI in Main.storyboard&#39;s RootViewController Scene, as seen below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/statusView.png\" alt=\"statusView\"></p>\n<p>Once that&#39;s done, open DJIRootViewController.m file, create IBOutlets for the above UI elements and import DJISDK&#39;s header file and implement &quot;DJIFlightControllerDelegate&quot; and &quot;DJISDKManagerDelegate&quot; protocols. Also, we need to create a CLLocationCoordinate2D property named <strong>droneLocation</strong> to record the aircraft&#39;s location, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &lt;DJIRootViewController.h&gt;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;MapKit/MapKit.h&gt;\n#import &lt;CoreLocation/CoreLocation.h&gt;\n\n@interface DJIRootViewController()&lt;MKMapViewDelegate, CLLocationManagerDelegate, DJISDKManagerDelegate, DJIFlightControllerDelegate&gt;\n\n@property(nonatomic, strong) IBOutlet UILabel* modeLabel;\n@property(nonatomic, strong) IBOutlet UILabel* gpsLabel;\n@property(nonatomic, strong) IBOutlet UILabel* hsLabel;\n@property(nonatomic, strong) IBOutlet UILabel* vsLabel;\n@property(nonatomic, strong) IBOutlet UILabel* altitudeLabel;\n\n@property(nonatomic, assign) CLLocationCoordinate2D droneLocation;</code></pre>\n<p>Now, let&#39;s initialize the UI elements&#39; values in a new method called <strong>initUI</strong>. Call the initUI method in the viewDidLoad method. Lastly, create a new method named &quot;registerApp&quot; and invoke it in the viewDidLoad method to register the app as shown below:</p>\n<pre><code class=\"lang-objc\">\n-(void) initUI\n{\n    self.modeLabel.text = @&quot;N/A&quot;;\n    self.gpsLabel.text = @&quot;0&quot;;\n    self.vsLabel.text = @&quot;0.0 M/S&quot;;\n    self.hsLabel.text = @&quot;0.0 M/S&quot;;\n    self.altitudeLabel.text = @&quot;0 M&quot;;\n}\n\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self registerApp];\n    [self initUI];\n    [self initData];\n}\n\n-(void)initData\n{\n    self.userLocation = kCLLocationCoordinate2DInvalid;\n    self.droneLocation = kCLLocationCoordinate2DInvalid;\n\n    self.mapController = [[DJIMapController alloc] init];\n    self.tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(addWaypoints:)];\n    [self.mapView addGestureRecognizer:self.tapGesture];\n\n}</code></pre>\n<p>Next, implement the &quot;DJISDKManagerDelegate&quot; method as follows:</p>\n<pre><code class=\"lang-objc\">\n#pragma mark DJISDKManagerDelegate Methods\n\n- (void)sdkManagerDidRegisterAppWithError:(NSError *_Nullable)error\n{\n    if (error){\n        NSString *registerResult = [NSString stringWithFormat:@&quot;Registration Error:%@&quot;, error.description];\n        ShowMessage(@&quot;Registration Result&quot;, registerResult, nil, @&quot;OK&quot;);\n    }\n    else{\n        [DJISDKManager startConnectionToProduct];\n    }\n}\n\n- (void)sdkManagerProductDidChangeFrom:(DJIBaseProduct *_Nullable)oldProduct to:(DJIBaseProduct *_Nullable)newProduct\n{\n    if (newProduct){\n        DJIFlightController* flightController = [DemoUtility fetchFlightController];\n        if (flightController) {\n            flightController.delegate = self;\n        }\n    }\n    else{\n        ShowMessage(@&quot;Product disconnected&quot;, nil, nil, @&quot;OK&quot;);\n    }\n}</code></pre>\n<p>In the code above, we can implement DJISDKManager&#39;s <strong>sdkManagerDidRegisterAppWithError:</strong> delegate method to check the register status and invoke the DJISDKManager&#39;s &quot;startConnectionToProduct&quot; method to connect to the aircraft. Moreover, the <strong>sdkManagerProductDidChangeFrom:to:</strong> delegate method will be invoked when the product connectivity status changes, so we can set DJIFlightController&#39;s delegate as DJIRootViewController here when product is connected.</p>\n<p>You may notice that there is a &quot;DemoUtility&quot; class here, it&#39;s a class which defines methods that will be used frequently in the project. Let&#39;s implement it now. Create a new NSObject class and named it as &quot;DemoUtility&quot;, replace its .h file and .m file with the followings:</p>\n<pre><code class=\"lang-objc\">#ifndef DemoUtility_h\n#define DemoUtility_h\n#define WeakRef(__obj) __weak typeof(self) __obj = self\n#define WeakReturn(__obj) if(__obj ==nil)return;\n#define DEGREE(x) ((x)*180.0/M_PI)\n#define RADIAN(x) ((x)*M_PI/180.0)\n#endif\n\nextern void ShowMessage(NSString *title, NSString *message, id target, NSString *cancleBtnTitle);\n\n@class DJIFlightController;\n@interface DemoUtility : NSObject\n+(DJIFlightController*) fetchFlightController;\n@end</code></pre>\n<pre><code class=\"lang-objc\">#import &quot;DemoUtility.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\ninline void ShowMessage(NSString *title, NSString *message, id target, NSString *cancleBtnTitle)\n{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title message:message delegate:target cancelButtonTitle:cancleBtnTitle otherButtonTitles:nil];\n        [alert show];\n    });\n}\n\n@implementation DemoUtility\n+(DJIFlightController*) fetchFlightController {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).flightController;\n    }\n    return nil;\n}\n@end</code></pre>\n<p>Then in the <strong>viewWillDisappear</strong> method, we need to invoke the &quot;stopUpdatingLocation&quot; method of CLLocationManager to stop update location as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [self.locationManager stopUpdatingLocation];\n}</code></pre>\n<p>Moreover, update the <strong>focusMapAction</strong> method to set <strong>droneLocation</strong> as the center of the map view&#39;s region, as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)focusMapAction:(id)sender {\n\n    if (CLLocationCoordinate2DIsValid(self.droneLocation)) {\n        MKCoordinateRegion region = {0};\n        region.center = self.droneLocation;\n        region.span.latitudeDelta = 0.001;\n        region.span.longitudeDelta = 0.001;\n        [self.mapView setRegion:region animated:YES];\n    }\n\n}</code></pre>\n<p>Next, We need to modify the <strong>MKMapViewDelegate</strong> method to what is shown below. It will check the annotation variable&#39;s class and set its annotationView as a <strong>DJIAircraftAnnotationView</strong> Class type object:</p>\n<pre><code class=\"lang-objc\">- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id &lt;MKAnnotation&gt;)annotation\n{\n    if ([annotation isKindOfClass:[MKPointAnnotation class]]) {\n        MKPinAnnotationView* pinView = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@&quot;Pin_Annotation&quot;];\n        pinView.pinColor = MKPinAnnotationColorPurple;\n        return pinView;\n\n    }else if ([annotation isKindOfClass:[DJIAircraftAnnotation class]])\n    {\n        DJIAircraftAnnotationView* annoView = [[DJIAircraftAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@&quot;Aircraft_Annotation&quot;];\n        ((DJIAircraftAnnotation*)annotation).annotationView = annoView;\n        return annoView;\n    }\n\n    return nil;\n}</code></pre>\n<p>Furthermore, let&#39;s implement the <strong>DJIFlightControllerDelegate</strong> method:</p>\n<pre><code class=\"lang-objc\">#pragma mark DJIFlightControllerDelegate\n\n- (void)flightController:(DJIFlightController *)fc didUpdateSystemState:(DJIFlightControllerCurrentState *)state\n{\n    self.droneLocation = state.aircraftLocation;\n\n    self.modeLabel.text = state.flightModeString;\n    self.gpsLabel.text = [NSString stringWithFormat:@&quot;%d&quot;, state.satelliteCount];\n    self.vsLabel.text = [NSString stringWithFormat:@&quot;%0.1f M/S&quot;,state.velocityZ];\n    self.hsLabel.text = [NSString stringWithFormat:@&quot;%0.1f M/S&quot;,(sqrtf(state.velocityX*state.velocityX + state.velocityY*state.velocityY))];\n    self.altitudeLabel.text = [NSString stringWithFormat:@&quot;%0.1f M&quot;,state.altitude];\n\n    [self.mapController updateAircraftLocation:self.droneLocation withMapView:self.mapView];\n    double radianYaw = RADIAN(state.attitude.yaw);\n    [self.mapController updateAircraftHeading:radianYaw];\n}</code></pre>\n<p>First, it will update the <strong>droneLocation</strong> with the aircraft&#39;s current location. Next, update the text for the status labels from the DJIFlightControllerCurrentState. Furthermore, update the aircraft&#39;s location and heading by calling the related methods from <strong>DJIMapController</strong>.</p>\n<p>Now, let&#39;s test the application! </p>\n<p>Build and run the project to install the app onto your mobile device. After that, please connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable, and then power on the aircraft and the remote controller. Click Display Simulator. You can type in your current location&#39;s latitude and longitude data in the Simulator Config, if you would like. </p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Then, run the app and connect your mobile device to the remote controller using Apple&#39;s lighting cable. You may see the following screenshot:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/enterNaviModeFailed.jpg\" alt=\"enterNaviModeFailed\"></p>\n<p><strong>Important</strong>: To fix this problem, please switch the Remote Controller&#39;s mode selection to the <strong>F</strong> position (which used to be the A position in the previous version) and press <strong>Retry</strong> button. If the mode selection bar is in the F position when the autopilot is powered on, the user must toggle back and forth between <strong>F</strong> and another position and then press the <strong>Retry</strong> button again.</p>\n<p>You are required to be in the <strong>F</strong> position when using the Intelligent Navigation, Hotpoint and Joystick functions in the DJI Mobile SDK.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/switchFlightMode.png\" alt=\"switchFlightMode\"></p>\n<p>Next, let&#39;s go to the DJI PC Simulator on your PC and press the <strong>Start Simulation</strong> button. If you check the application now, a tiny red aircraft will be shown on the map as seen below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/aircraftOnMap1.jpg\" alt=\"aircraftOnMap1\"></p>\n<p>If you cannot find the aircraft, press the &quot;<strong>Focus Map</strong>&quot; button and the map view will zoom in to center the aircraft on the center of the map view region as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/focusAircraft.gif\" alt=\"focusAircraft\"></p>\n<p>Now, if you press the <strong>Stop Simulation</strong> button on the Simulator Config, the aircraft will disappear on the map, since the simulator stops providing GPS data to the aircraft.</p>\n<h2 id=\"refactoring-the-ui\">Refactoring the UI</h2>\n<p>As you seen, the project&#39;s code structure was simple and not robust. In order to develop it further in this tutorial, it will need to be refactored and we will need to add more UI elements. </p>\n<h3 id=\"1-adding-handling-the-new-uibuttons\">1. Adding &amp; Handling the New UIButtons</h3>\n<p>Firstly, we will create a new file named &quot;DJIGSButtonController&quot;, which will be subclass of <strong>UIViewController</strong>. Make sure the check box saying &quot;Also create XIB file&quot; is selected when creating the file. Then open the DJIGSButtonController.xib file and set its size to <strong>Freeform</strong> under the &quot;Size&quot; dropdown in the <strong>Simulated Metrics</strong> section. In the view section, change the width to &quot;100&quot; and height to &quot;288&quot;. Take a look at the changes made below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/freeform.png\" alt=\"freeform\">\n<img src=\"../../images/tutorials-and-samples/iOS/GSDemo/changeFrameSize.png\" alt=\"changeSize\"></p>\n<p>Next, drag eight UIButtons to the view and change their names to &quot;Edit&quot;, &quot;Back&quot;, &quot;Clear&quot;, &quot;Focus Map&quot;, &quot;Start&quot;, &quot;Stop&quot;, &quot;Add&quot; and &quot;Config&quot;. &quot;Edit&quot; will sit on top of &quot;Back&quot;, and &quot;Focus Map&quot; will sit on top of &quot;Add&quot;. Make sure to hide the &quot;Back&quot;, &quot;Clear&quot;, &quot;Start&quot;, &quot;Stop&quot;, &quot;Add&quot; and &quot;Config&quot; buttons.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/gsButtonViews.png\" alt=\"gsButtons\"></p>\n<p> Then add IBOutlets and IBActions for each of the eight buttons in the DJIGSButtonViewController.h file. Also, we will add an Enum named <strong>DJIGSViewMode</strong> with the two different modes the application could be in. Next, we add serveral delegate methods to be implemented by the delegate viewcontroller when IBAction methods for the buttons are trigger. Lastly, add the method <strong>switchToMode:inGSButtonVC:</strong> to update the state of the buttons when the <strong>DJIGSViewMode</strong> changed. Take a look at the code below:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\ntypedef NS_ENUM(NSUInteger, DJIGSViewMode) {\n    DJIGSViewMode_ViewMode,\n    DJIGSViewMode_EditMode,\n};\n\n@class DJIGSButtonViewController;\n\n@protocol DJIGSButtonViewControllerDelegate &lt;NSObject&gt;\n\n- (void)stopBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)clearBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)focusMapBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)startBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)addBtn:(UIButton *)button withActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)configBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)switchToMode:(DJIGSViewMode)mode inGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n\n@end\n\n@interface DJIGSButtonViewController : UIViewController\n\n@property (weak, nonatomic) IBOutlet UIButton *backBtn;\n@property (weak, nonatomic) IBOutlet UIButton *stopBtn;\n@property (weak, nonatomic) IBOutlet UIButton *clearBtn;\n@property (weak, nonatomic) IBOutlet UIButton *focusMapBtn;\n@property (weak, nonatomic) IBOutlet UIButton *editBtn;\n@property (weak, nonatomic) IBOutlet UIButton *startBtn;\n@property (weak, nonatomic) IBOutlet UIButton *addBtn;\n@property (weak, nonatomic) IBOutlet UIButton *configBtn;\n\n@property (assign, nonatomic) DJIGSViewMode mode;\n@property (weak, nonatomic) id &lt;DJIGSButtonViewControllerDelegate&gt; delegate;\n\n- (IBAction)backBtnAction:(id)sender;\n- (IBAction)stopBtnAction:(id)sender;\n- (IBAction)clearBtnAction:(id)sender;\n- (IBAction)focusMapBtnAction:(id)sender;\n- (IBAction)editBtnAction:(id)sender;\n- (IBAction)startBtnAction:(id)sender;\n- (IBAction)addBtnAction:(id)sender;\n- (IBAction)configBtnAction:(id)sender;\n\n@end</code></pre>\n<p> Once you&#39;ve taken care of that, open the DJIGSButtonViewController.m file to replace all the code in the file with the following code:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIGSButtonViewController.h&quot;\n\n@implementation DJIGSButtonViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setMode:DJIGSViewMode_ViewMode];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n#pragma mark - Property Method\n- (void)setMode:(DJIGSViewMode)mode\n{\n    _mode = mode;\n    [_editBtn setHidden:(mode == DJIGSViewMode_EditMode)];\n    [_focusMapBtn setHidden:(mode == DJIGSViewMode_EditMode)];\n    [_backBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_clearBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_startBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_stopBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_addBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_configBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n}\n\n#pragma mark - IBAction Methods\n\n- (IBAction)backBtnAction:(id)sender {\n    [self setMode:DJIGSViewMode_ViewMode];\n    if ([_delegate respondsToSelector:@selector(switchToMode:inGSButtonVC:)]) {\n        [_delegate switchToMode:self.mode inGSButtonVC:self];\n    }\n}\n\n- (IBAction)stopBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(stopBtnActionInGSButtonVC:)]) {\n        [_delegate stopBtnActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)clearBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(clearBtnActionInGSButtonVC:)]) {\n        [_delegate clearBtnActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)focusMapBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(focusMapBtnActionInGSButtonVC:)]) {\n        [_delegate focusMapBtnActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)editBtnAction:(id)sender {\n    [self setMode:DJIGSViewMode_EditMode];\n    if ([_delegate respondsToSelector:@selector(switchToMode:inGSButtonVC:)]) {\n        [_delegate switchToMode:self.mode inGSButtonVC:self];\n    }\n}\n\n- (IBAction)startBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(startBtnActionInGSButtonVC:)]) {\n        [_delegate startBtnActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)addBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(addBtn:withActionInGSButtonVC:)]) {\n        [_delegate addBtn:self.addBtn withActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)configBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(configBtnActionInGSButtonVC:)]) {\n        [_delegate configBtnActionInGSButtonVC:self];\n    }\n}\n\n@end</code></pre>\n<p> With those changes, the code structure will look cleaner and more robust, which will help in its maintainence later on.</p>\n<p> Now, let&#39;s go to the DJIRootViewController.m file and delete the <strong>editButton</strong> IBOutlet, the <strong>resetPointsAction</strong> method, and the <strong>focusMapAction</strong> method. After making those deletions, create an UIView IBOutlet named &quot;topBarView&quot; and link it to the Main.storyboard&#39;s RootViewController&#39;s view, as seen below:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/GSDemo/topBarView.png\" alt=\"topBarView\"></p>\n<p> Then, import the DJIGSButtonViewController.h header file. Create a property of type &quot;DJIGSButtonViewController&quot; named <strong>gsButtonVC</strong> and implement DJIGSButtonViewController&#39;s <strong>DJIGSButtonViewControllerDelegate</strong> protocol within the class, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIRootViewController.h&quot;\n#import &lt;MapKit/MapKit.h&gt;\n#import &lt;CoreLocation/CoreLocation.h&gt;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &quot;DJIMapController.h&quot;\n#import &quot;DJIGSButtonViewController.h&quot;\n#import &quot;DemoUtility.h&quot;\n\n#define kEnterNaviModeFailedAlertTag 1001\n\n@interface DJIRootViewController ()&lt;DJIGSButtonViewControllerDelegate, MKMapViewDelegate, CLLocationManagerDelegate, DJISDKManagerDelegate, DJIFlightControllerDelegate&gt;\n@property (nonatomic, assign)BOOL isEditingPoints;\n@property (nonatomic, strong)DJIGSButtonViewController *gsButtonVC;</code></pre>\n<p>Furthermore, initialize the <strong>gsButtonVC</strong> property in the initUI method and move the original <strong>focusMapAction</strong> method&#39;s content to a new method named <strong>focusMap</strong>, as shown below:</p>\n<pre><code class=\"lang-objc\">self.gsButtonVC = [[DJIGSButtonViewController alloc] initWithNibName:@&quot;DJIGSButtonViewController&quot; bundle:[NSBundle mainBundle]];\n[self.gsButtonVC.view setFrame:CGRectMake(0, self.topBarView.frame.origin.y + self.topBarView.frame.size.height, self.gsButtonVC.view.frame.size.width, self.gsButtonVC.view.frame.size.height)];\nself.gsButtonVC.delegate = self;\n[self.view addSubview:self.gsButtonVC.view];</code></pre>\n<pre><code class=\"lang-objc\">- (void)focusMap\n{\n    if (CLLocationCoordinate2DIsValid(self.droneLocation)) {\n        MKCoordinateRegion region = {0};\n        region.center = self.droneLocation;\n        region.span.latitudeDelta = 0.001;\n        region.span.longitudeDelta = 0.001;\n\n        [self.mapView setRegion:region animated:YES];\n    }\n}</code></pre>\n<p>Finally, implement <strong>DJIGSButtonViewController</strong>&#39;s delegate methods, as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJIGSButtonViewController Delegate Methods\n- (void)stopBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n}\n\n- (void)clearBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    [self.mapController cleanAllPointsWithMapView:self.mapView];\n}\n\n- (void)focusMapBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    [self focusMap];\n}\n\n- (void)configBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n\n}\n\n- (void)startBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n}\n\n- (void)switchToMode:(DJIGSViewMode)mode inGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    if (mode == DJIGSViewMode_EditMode) {\n        [self focusMap];\n    }\n}\n\n- (void)addBtn:(UIButton *)button withActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    if (self.isEditingPoints) {\n        self.isEditingPoints = NO;\n        [button setTitle:@&quot;Add&quot; forState:UIControlStateNormal];\n    }else\n    {\n        self.isEditingPoints = YES;\n        [button setTitle:@&quot;Finished&quot; forState:UIControlStateNormal];\n    }\n}</code></pre>\n<p>In the <strong>switchToMode:inGSButtonVC:</strong> delegate method, we call the <strong>focusMap</strong> method. By doing this, we can focus the map view to the aircraft&#39;s location when the edit button is pressed, making it user friendly by preventing the user from having to zoom in to edit. Moreover, the  <strong>isEditingPoints</strong> property value and the add button title will be updated in the <strong>addBtn:withActionInGSButtonVC</strong> method when the button is pressed. </p>\n<p>Now, let&#39;s build and run the project and try to press the <strong>Edit</strong> and <strong>Back</strong> Buttons. Here are the animation when you press them:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/pressEditBtn.gif\" alt=\"pressEditBtn\"></p>\n<h2 id=\"configuring-djiwaypoint-and-djiwaypointmission\">Configuring DJIWaypoint and DJIWaypointMission</h2>\n<h3 id=\"djiwaypoint\">DJIWaypoint</h3>\n<p>Let&#39;s go to <strong>DJIWaypoint.h</strong> file and check it out. For example, you can use: </p>\n<pre><code class=\"lang-objc\">-(id) initWithCoordinate:(CLLocationCoordinate2D)coordinate;</code></pre>\n<p>to create a waypoint object with a specific coordinate. Once you create a waypoint, you can add a <strong>DJIWaypointAction</strong> to it by calling:</p>\n<pre><code class=\"lang-objc\">-(BOOL) addAction:(DJIWaypointAction*)action;</code></pre>\n<p>Moreover, with waypoints, you have the ability to set the coordinate, altitude, heading and much more. For more details, please check the <strong>DJIWaypoint.h</strong> header file.</p>\n<h3 id=\"djiwaypointmission\">DJIWaypointMission</h3>\n<p>A DJIWaypointMission is used when you want to upload, start and stop a Waypoint Mission. You can add waypoints of type <strong>DJIWaypoint</strong> using the method:</p>\n<pre><code class=\"lang-objc\">- (void)addWaypoint:(DJIWaypoint *_Nonnull)waypoint;</code></pre>\n<p>On the contrary, you can also delete waypoints from a task by using the method: </p>\n<pre><code class=\"lang-objc\">- (void)removeWaypoint:(DJIWaypoint *_Nonnull)waypoint;</code></pre>\n<p> Moreover, you can set the &quot;finishedAction&quot; property which is of <strong>DJIWaypointMissionFinishedAction</strong> enum type to configure what the aircraft does when the task is finished. Finally, you can set the <strong>headingMode</strong> property which is a <strong>DJIWaypointMissionHeadingMode</strong> enum type to configure what the aircraft&#39;s heading is while executing a task. </p>\n<p>For more details, please check the <strong>DJIWaypointMission.h</strong> header file in the DJI Mobile SDK.</p>\n<h3 id=\"creating-the-djiwaypointconfigviewcontroller\">Creating The DJIWaypointConfigViewController</h3>\n<p>For this demo, we will assume that the parameters of each waypoint being added to the map view are the same. </p>\n<p>Now, let&#39;s create a new ViewController that will let the user to set the parameters of waypoints. Go to Xcode’s project navigator, right click on the <strong>GSDemo</strong> folder, select <strong>New File...</strong>, set its subclass to UIViewController, named it &quot;DJIWaypointConfigViewController&quot;, and make sure &quot;Also create XIB file&quot; is selected. Next, open the DJIWaypointConfigViewController.xib file and implement the UI, as you see it below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/wayPointConfigureView.png\" alt=\"wayPointConfig\"></p>\n<p>In the Waypoint Configuration ViewController, we use a UITextField to let the user set the <strong>altitude</strong> property of a DJIWaypoint object. Then, we use two UITextField to let the user set the <strong>maxFlightSpeed</strong> and <strong>autoFlightSpeed</strong> properties of DJIWaypointMission. Next, there are two UISegmentedControls to configure the <strong>finishedAction</strong> property and the <strong>headingMode</strong> property of a DJIWaypointMission object. </p>\n<p>At the bottom, we add two UIButtons for the <strong>Cancel</strong> and <strong>Finish</strong> actions. For more details about the settings, such as frame&#39;s position, frame&#39;s size, and background color of each UI element, please check the DJIWaypointConfigViewController.xib file in the downloaded project source code.</p>\n<p>Now, let&#39;s create IBOutlets and IBActions for each of the UI elements in the DJIWaypointConfigViewController.h file, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@class DJIWaypointConfigViewController;\n\n@protocol DJIWaypointConfigViewControllerDelegate &lt;NSObject&gt;\n\n- (void)cancelBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC;\n- (void)finishBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC;\n\n@end\n\n@interface DJIWaypointConfigViewController : UIViewController\n\n@property (weak, nonatomic) IBOutlet UITextField *altitudeTextField;\n@property (weak, nonatomic) IBOutlet UITextField *autoFlightSpeedTextField;\n@property (weak, nonatomic) IBOutlet UITextField *maxFlightSpeedTextField;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *actionSegmentedControl;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *headingSegmentedControl;\n\n@property (weak, nonatomic) id &lt;DJIWaypointConfigViewControllerDelegate&gt;delegate;\n\n- (IBAction)cancelBtnAction:(id)sender;\n- (IBAction)finishBtnAction:(id)sender;\n\n@end</code></pre>\n<p>Here, we also create two &quot;DJIWaypointConfigViewControllerDelegate&quot; delegate methods that are called when <strong>Cancel</strong> and <strong>Finish</strong> buttons are pressed.</p>\n<p>Next, let&#39;s replace the code in the DJIWaypointConfigViewController.m file with the following code:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIWaypointConfigViewController.h&quot;\n@interface DJIWaypointConfigViewController ()\n@end\n\n@implementation DJIWaypointConfigViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self initUI];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n- (void)initUI\n{\n    self.altitudeTextField.text = @&quot;100&quot;; //Set the altitude to 100\n    self.autoFlightSpeedTextField.text = @&quot;8&quot;; //Set the autoFlightSpeed to 8\n    self.maxFlightSpeedTextField.text = @&quot;10&quot;; //Set the maxFlightSpeed to 10\n    [self.actionSegmentedControl setSelectedSegmentIndex:1]; //Set the finishAction to DJIWaypointMissionFinishedGoHome\n    [self.headingSegmentedControl setSelectedSegmentIndex:0]; //Set the headingMode to DJIWaypointMissionHeadingAuto\n\n}\n\n- (IBAction)cancelBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(cancelBtnActionInDJIWaypointConfigViewController:)]) {\n        [_delegate cancelBtnActionInDJIWaypointConfigViewController:self];\n    }\n}\n\n- (IBAction)finishBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(finishBtnActionInDJIWaypointConfigViewController:)]) {\n        [_delegate finishBtnActionInDJIWaypointConfigViewController:self];\n    }\n}\n\n@end</code></pre>\n<p>In the code above, we create an <strong>initUI</strong> method, which is called in the viewDidload method, to initialize the UI controls with some default data. For example, we set the default text for the <strong>altitudeTextField</strong> to <strong>100</strong>, so there is no need for the user to type in a custom altitude value in the textField when the application is first opened. They will be able to press the <strong>Finish</strong> button right away instead of having to change the settings before they start.</p>\n<h2 id=\"implementing-the-djiwaypoint-mission\">Implementing the DJIWaypoint Mission</h2>\n<h3 id=\"adding-the-djiwaypointconfigviewcontroller-to-djirootviewcontroller\">Adding the DJIWaypointConfigViewController to DJIRootViewController</h3>\n<p>Now,let&#39;s go to DJIRootViewController.m file, add the DJIWaypointConfigViewController.h header file at the top, and create a property of type <strong>DJIWaypointConfigViewController</strong> with the name &quot;waypointConfigVC&quot;. Then, implement the DJIWaypointConfigViewControllerDelegate protocol, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIWaypointConfigViewController.h&quot;\n\n@interface DJIRootViewController ()&lt;DJIGSButtonViewControllerDelegate, DJIWaypointConfigViewControllerDelegate, MKMapViewDelegate, CLLocationManagerDelegate, DJISDKManagerDelegate, DJIFlightControllerDelegate&gt;\n\n@property (nonatomic, assign)BOOL isEditingPoints;\n@property (nonatomic, strong)DJIGSButtonViewController *gsButtonVC;\n@property (nonatomic, strong)DJIWaypointConfigViewController *waypointConfigVC;</code></pre>\n<p>Next, let&#39;s add some code to initialize the <strong>waypointConfigVC</strong> instance variable and set its delegate as &quot;DJIRootViewController&quot; at the bottom of the <strong>initUI</strong> method:</p>\n<pre><code class=\"lang-objc\">-(void) initUI\n{\n    self.modeLabel.text = @&quot;N/A&quot;;\n    self.gpsLabel.text = @&quot;0&quot;;\n    self.vsLabel.text = @&quot;0.0 M/S&quot;;\n    self.hsLabel.text = @&quot;0.0 M/S&quot;;\n    self.altitudeLabel.text = @&quot;0 M&quot;;\n\n    self.gsButtonVC = [[DJIGSButtonViewController alloc] initWithNibName:@&quot;DJIGSButtonViewController&quot; bundle:[NSBundle mainBundle]];\n    [self.gsButtonVC.view setFrame:CGRectMake(0, self.topBarView.frame.origin.y + self.topBarView.frame.size.height, self.gsButtonVC.view.frame.size.width, self.gsButtonVC.view.frame.size.height)];\n    self.gsButtonVC.delegate = self;\n    [self.view addSubview:self.gsButtonVC.view];\n\n    self.waypointConfigVC = [[DJIWaypointConfigViewController alloc] initWithNibName:@&quot;DJIWaypointConfigViewController&quot; bundle:[NSBundle mainBundle]];\n    self.waypointConfigVC.view.alpha = 0;\n\n    self.waypointConfigVC.view.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin|UIViewAutoresizingFlexibleRightMargin|UIViewAutoresizingFlexibleTopMargin|UIViewAutoresizingFlexibleBottomMargin;\n\n    CGFloat configVCOriginX = (CGRectGetWidth(self.view.frame) - CGRectGetWidth(self.waypointConfigVC.view.frame))/2;\n    CGFloat configVCOriginY = CGRectGetHeight(self.topBarView.frame) + CGRectGetMinY(self.topBarView.frame) + 8;\n\n    [self.waypointConfigVC.view setFrame:CGRectMake(configVCOriginX, configVCOriginY, CGRectGetWidth(self.waypointConfigVC.view.frame), CGRectGetHeight(self.waypointConfigVC.view.frame))];\n\n    if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) //Check if it&#39;s using iPad and center the config view\n    {\n        self.waypointConfigVC.view.center = self.view.center;\n    }\n\n    self.waypointConfigVC.delegate = self;\n    [self.view addSubview:self.waypointConfigVC.view];\n\n}</code></pre>\n<p>In the code above, we set the <strong>alpha</strong> property of the <strong>waypointConfigVC</strong>&#39;s view to 0 to initially hide the view. Then, center its location to the center of DJIRootViewController&#39;s view when it runs on iPad.</p>\n<p>Furthermore, implement the <strong>DJIWaypointConfigViewControllerDelegate</strong> methods, as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJIWaypointConfigViewControllerDelegate Methods\n\n- (void)cancelBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC\n{\n    WeakRef(weakSelf);\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 0;\n    }];\n}\n\n- (void)finishBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC\n{\n    WeakRef(weakSelf);\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 0;\n    }];\n\n}</code></pre>\n<p>In the first delegate method, we use a class method from UIView to animate the changing <strong>alpha</strong> value of <strong>waypointConfigVC</strong>&#39;s view:</p>\n<pre><code class=\"lang-objc\">+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void (^)(void))animations NS_AVAILABLE_IOS(4_0);</code></pre>\n<p>In the second delegate method, we do the same thing as we did in the first delegate method.</p>\n<p>Lastly, replace the code in the <strong>configBtnActionInGSButtonVC:</strong> method with the following code to show the <strong>waypointConfigVC</strong>&#39;s view when the user presses the <strong>Config</strong> button:</p>\n<pre><code class=\"lang-objc\">- (void)configBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    WeakRef(weakSelf);\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 1.0;\n    }];\n\n}</code></pre>\n<p>Once that&#39;s done, let&#39;s build and run the project. Try to show the <strong>waypointConfigVC</strong>&#39;s view by pressing the <strong>Edit</strong> button and <strong>Config</strong> button:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/waypointConfigView.png\" alt=\"waypointConfigView\"></p>\n<h3 id=\"handling-the-djiwaypoint-mission\">Handling The DJIWaypoint Mission</h3>\n<p>Now let&#39;s go back to DJIRootViewController.m file. Create a property of type <strong>DJIWaypointMission</strong> and named it as &quot;waypointMission&quot;, similiarly, create a <strong>DJIMissionManager</strong> property and named it as &quot;missionManager&quot; as shown below:</p>\n<pre><code class=\"lang-objc\">@property(nonatomic, strong) DJIWaypointMission* waypointMission;\n@property(nonatomic, strong) DJIMissionManager* missionManager;</code></pre>\n<p>Next, replace the code in <strong>configBtnActionInGSButtonVC</strong> delegate method with the followings:</p>\n<pre><code class=\"lang-objc\">- (void)configBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    WeakRef(weakSelf);\n\n    NSArray* wayPoints = self.mapController.wayPoints;\n    if (wayPoints == nil || wayPoints.count &lt; DJIWaypointMissionMinimumWaypointCount) {\n        ShowMessage(@&quot;No or not enough waypoints for mission&quot;, @&quot;&quot;, nil, @&quot;OK&quot;);\n        return;\n    }\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 1.0;\n    }];\n\n    if (self.waypointMission){\n        [self.waypointMission removeAllWaypoints];\n    }\n    else{\n        self.waypointMission = [[DJIWaypointMission alloc] init];\n    }\n\n    for (int i = 0; i &lt; wayPoints.count; i++) {\n        CLLocation* location = [wayPoints objectAtIndex:i];\n        if (CLLocationCoordinate2DIsValid(location.coordinate)) {\n            DJIWaypoint* waypoint = [[DJIWaypoint alloc] initWithCoordinate:location.coordinate];\n            [self.waypointMission addWaypoint:waypoint];\n        }\n    }\n}</code></pre>\n<p>In the code above, we create a local NSArray variable named <strong>wayPoints</strong> and assign its value as the mapController&#39;s <strong>wayPoints</strong> array. Next, check whether or not the array exists or whether or not it&#39;s empty. If it is empty or does not exist, show a UIAlertView letting the user know there are no waypoints for the mission. </p>\n<p><strong>Important</strong>: For safety, it&#39;s important to add logic to check the GPS satellite count, before the start of the mission. If the satellite count is less than 6, you should prevent the user from starting the waypoint mission and show a warning. Since we are using the DJI PC Simulator here, we are testing the application under a perfect situation, where the GPS satellite count is always 10.</p>\n<p>Next, we use a for loop to get the <strong>CLLocation</strong> for each waypoint from the <strong>wayPoints</strong> array and check if its <strong>coordinate</strong> is valid by using the method:</p>\n<pre><code class=\"lang-objc\">BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord);</code></pre>\n<p>Finally, if the coordinate is valid, we create a waypoint of type <strong>DJIWaypoint</strong> and add it to the <strong>waypointMission</strong>.</p>\n<p>Once that is complete, let&#39;s go to DJIWaypointConfigViewController&#39;s delegate method <strong>finishBtnActionInDJIWaypointConfigViewController</strong> and replace the code inside with the followings:</p>\n<pre><code class=\"lang-objc\">- (void)finishBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC\n{\n    WeakRef(weakSelf);\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 0;\n    }];\n\n    for (int i = 0; i &lt; self.waypointMission.waypointCount; i++) {\n        DJIWaypoint* waypoint = [self.waypointMission getWaypointAtIndex:i];\n        waypoint.altitude = [self.waypointConfigVC.altitudeTextField.text floatValue];\n    }\n\n    self.waypointMission.maxFlightSpeed = [self.waypointConfigVC.maxFlightSpeedTextField.text floatValue];\n    self.waypointMission.autoFlightSpeed = [self.waypointConfigVC.autoFlightSpeedTextField.text floatValue];\n    self.waypointMission.headingMode = (DJIWaypointMissionHeadingMode)self.waypointConfigVC.headingSegmentedControl.selectedSegmentIndex;\n    self.waypointMission.finishedAction = (DJIWaypointMissionFinishedAction)self.waypointConfigVC.actionSegmentedControl.selectedSegmentIndex;\n\n    [self.missionManager prepareMission:self.waypointMission withProgress:^(float progress) {\n        //Do something with progress\n    } withCompletion:^(NSError * _Nullable error) {\n        if (error){\n            NSString* prepareError = [NSString stringWithFormat:@&quot;Prepare Mission failed:%@&quot;, error.description];\n            ShowMessage(@&quot;&quot;, prepareError, nil, @&quot;OK&quot;);\n        }else {\n            ShowMessage(@&quot;&quot;, @&quot;Prepare Mission Finished&quot;, nil, @&quot;OK&quot;);\n        }\n    }];\n}</code></pre>\n<p>Above, we use a for loop to set the <strong>altitude</strong> property of each DJIWaypoint in the <strong>waypointMission</strong> waypoint array based on the settings that are set in the DJIWaypointConfigViewController. After that is complete, we update the &quot;maxFlightSpeed&quot;, &quot;autoFlightSpeed&quot;, &quot;headingMode&quot; and &quot;finishedAction&quot; properties of <strong>waypointMission</strong>. Then we call the <strong>prepareMission</strong> method of DJIMissionManager to prepare the waypoint mission for execution. You can get the preparation progress from the &quot;DJIMissionProgressHandler&quot; block.</p>\n<p>Furthermore, let&#39;s implement <strong>startBtnActionInGSButtonVC</strong> as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)startBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    [self.missionManager startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        if (error){\n            ShowMessage(@&quot;Start Mission Failed&quot;, error.description, nil, @&quot;OK&quot;);\n        }else\n        {\n            ShowMessage(@&quot;&quot;, @&quot;Mission Started&quot;, nil, @&quot;OK&quot;);\n        }\n    }];\n}</code></pre>\n<p>Here, call the <strong>startMissionExecutionWithCompletion</strong> method of DJIMissionManager to start the DJIWaypoint mission! Then create a UIAlertView to display error message when start mission failed.</p>\n<p>Finally, let&#39;s implement the <strong>stopMissionExecutionWithCompletion</strong> method of DJIMissionManager in the <strong>DJIGSButtonViewController</strong> delegate method to stop the waypoint mission, as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)stopBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    [self.missionManager stopMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        if (error){\n            NSString* failedMessage = [NSString stringWithFormat:@&quot;Stop Mission Failed: %@&quot;, error.description];\n            ShowMessage(@&quot;&quot;, failedMessage, nil, @&quot;OK&quot;);\n        }else\n        {\n            ShowMessage(@&quot;&quot;, @&quot;Stop Mission Finished&quot;, nil, @&quot;OK&quot;);\n        }\n    }];\n}</code></pre>\n<h2 id=\"showtime\">Showtime</h2>\n<p>You&#39;ve come a long way in this tutorial, and it&#39;s time to test the whole application.</p>\n<p><strong>Important</strong>: Make sure the battery level of your aircraft is more than 10%, otherwise the waypoint mission may fail!</p>\n<p>Build and run the project to install the application into your mobile device. After that, please connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable. Then, power on the remote controller and the aircraft, in that order. </p>\n<p>Next, press the <strong>Display Simulator</strong> button in the DJI PC Simulator and feel free to type in your current location&#39;s latitude and longitude data into the simulator.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Then connect your mobile device to the remote controller using Apple&#39;s lighting cable and run the application. You may see the following screenshot:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/enterNaviModeFailed.jpg\" alt=\"enterNaviModeFailed\"></p>\n<p>If you encounter this issue, check the solution to this problem in the previous part of this tutorial. Next, let&#39;s come back to the DJI PC Simulator on your PC and press the <strong>Start Simulation</strong> button. A tiny red aircraft will appear on the map in your application, as seen below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/aircraftOnMap1.jpg\" alt=\"aircraftOnMap1\"></p>\n<p>Press the <strong>Edit</strong> button, and the map view will zoom in to the region you are in and will center the aircraft:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/locateTheAircraft.gif\" alt=\"locateAircraft\"></p>\n<p>Next, test the waypoint feature by tapping wherever you&#39;d like on the map view. Wherever you do tap, a waypoint will be added and a purple pin will appear exactly at the location of the waypoint, as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/addWaypoints_Action.gif\" alt=\"addWayPoints\"></p>\n<p>Once you press the <strong>Config</strong> button, the <strong>Waypoint Configuration</strong> view will appear. After you&#39;re satisfied with the changes, press the <strong>Finish</strong> button. The waypoint mission will start to prepare. Then press the <strong>Start</strong> button to start the waypoint mission execution. Now you will should see the aircraft move towards the waypoints you set previously on the map view, as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/startFlying.gif\" alt=\"flyTowards\"></p>\n<p>At the same time, you will be able to see the Inspire 1 take off and start to fly in the DJI PC Simulator.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/takeOff.gif\" alt=\"takeOff\"></p>\n<p>When the waypoint mission finishes, the Inspire 1 will start to go home!</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/goHome.gif\" alt=\"goHome\"> </p>\n<p>The remote controller will start beeping, and the <strong>Go Home</strong> button on the remote controller will start to flash a white light. Let&#39;s take a look at the DJI PC Simulator now:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/GSDemo/landing.gif\" alt=\"landing\"></p>\n<p>The inspire 1 will eventually go home, land, and the beeping from the remote controller will stop. The application will go back to its normal status. If you press the <strong>Clear</strong> button, all the waypoints you previously set will be cleared. During the mission, if you&#39;d ever like to stop the DJIWaypoint mission, you can do so by pressing the <strong>Stop</strong> button.</p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you’ve learned how to setup and use the DJI PC Simulator to test your waypoint mission application, upgrade your aircraft&#39;s firmware to the developer version, use the DJI Mobile SDK to create a simple map view, modify annotations of the map view, show the aircraft on the map view by using GPS data from the DJI PC Simulator. Next, you learned how to configure <strong>DJIWaypoint</strong> parameters, how to add waypoints to <strong>DJIWaypointMission</strong>. Moreover, you learned how to use DJIMissionManager to <strong>prepare</strong>, <strong>start</strong> and <strong>stop</strong> missions. </p>\n<p>   Congratulations! Now that you&#39;ve finished the demo project, you can build on what you&#39;ve learned and start to build your own waypoint mission application. You can improve the method which waypoints are added(such as drawing a line on the map and generating waypoints automatically), play around with the properties of a waypoint (such as heading, etc.), and adding more functionality. In order to make a cool waypoint mission application, you still have a long way to go. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a MapView and Waypoint Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-GSDemo"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue or a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, we will use the Xcode&#39;s &quot;Single View Application&quot; template project to show you how to import DJI iOS SDK and register the application.</p>\n<h2 id=\"downloading-the-sdk\">Downloading the SDK</h2>\n<p>  You can download DJI iOS SDK from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>.</p>\n<h2 id=\"creating-the-xcode-project\">Creating the Xcode Project</h2>\n<p>  Open Xcode, select <strong>File-&gt;New-&gt;Project</strong> to create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/createProject.png\" alt=\"createProject\"></p>\n<p>  Then enter &quot;ImportSDKDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/enterProjectInfo.png\" alt=\"enterProjectInfo\"></p>\n<h2 id=\"importing-the-sdk\">Importing the SDK</h2>\n<p>  Once the project is created, let&#39;s navigate to the &quot;FPVDemo&quot; folder of the project and create a new folder named &quot;Frameworks&quot;. Next copy the <strong>DJISDK.framework</strong>, which you just download from DJI Developer website to this folder.</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/copyFrameworks.png\" alt=\"copyFrameworks\"></p>\n<p>  Next, let&#39;s come back to the Xcode project navigator and right click on the &quot;ImportSDKDemo&quot; and select &quot;Add Files to &quot;ImportSDKDemo&quot;...&quot; to add the &quot;Frameworks&quot; folder to the Xcode Project.  </p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/addFolders.png\" alt=\"addFolders\"></p>\n<p> Once you import the SDK successfully, you should see the following project structure screenshot:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/importSDKFramework.png\" alt=\"importSDKFramework\"> </p>\n<p> Furthermore, let&#39;s select the &quot;ImportSDKDemo&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; to add the &quot;DJISDK.framework&quot; as shown below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/sdkFramework.png\" alt=\"sdkFramework\"></p>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p><strong>1.</strong> In order to enable your app to connect to the MFI remote controller, you must add \n &quot;Supported external accessory protocols&quot; items in the info.plist file, let&#39;s modify it by adding the following content:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/MFIProtocol.png\" alt=\"MFI\"></p>\n<p><strong>2.</strong> Since in iOS 9, App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. You must add <strong>App Transport Security Settings</strong> items in the info.plist file as shown below too:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/appTransportSecurity.png\" alt=\"appTransportSecurity\"></p>\n</blockquote>\n<h2 id=\"activating-the-project\">Activating the Project</h2>\n<p>  Now, let&#39;s go to the &quot;ViewController.m&quot; file and import the &quot;DJISDK.h&quot; header file, then implement the <code>DJISDKManagerDelegate</code> protocol in the class extension part:</p>\n<pre><code class=\"lang-objc\">#import &quot;ViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\n@interface ViewController ()&lt;DJISDKManagerDelegate&gt;\n@end</code></pre>\n<p>  Next, create a new method <code>registerApp</code>, invoke it in the <code>viewDidAppear</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n    [self registerApp];\n}\n\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<p>  In the code above, we invoke the <code>registerApp:withDelegate:</code> method of DJISDKManager to register the application on DJI Server and set &quot;ViewController&quot; as the delegate. Then we call the <code>registerApp</code> method in <code>viewDidAppear:</code> method when the view appear.</p>\n<blockquote>\n<p><strong>Note</strong>: For the <strong>App Key</strong>, you may need to obtain it from the <a href=\"http://developer.dji.com/en/user/apps\" target=\"_blank\">DJI Developer website</a>.  If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p>The <strong>App Key</strong> we generate for you is associated with the Xcode project&#39;s <strong>Bundle Identifier</strong>, so you will not be able to use the same App Key in a different Xcode project. Each project must be submitted individually and will receive a unique App Key.</p>\n</blockquote>\n<p>  Moreover, let&#39;s implement the <code>sdkManagerDidRegisterAppWithError:</code> delegate method to check the registration result:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n       [DJISDKManager startConnectionToProduct];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}\n\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n}</code></pre>\n<p> If you register the app failed, you can check the <strong>error</strong> parameter of the  delegate method to figure out the problem. For more details, please check the <strong>DJISDKRegistrationError</strong> in the &quot;NSError+DJISDK.h&quot; file of DJISDK.</p>\n<p> Finally, build and run the project in Xcode using iOS Simulator. If everything goes well, you should see a &quot;Register App Success!&quot; alert once the application loads. </p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<h2 id=\"where-to-go-from-here-\">Where to go from here?</h2>\n<p>  If you want to learn how to use DJI iOS SDK to create a simple app, please check this tutorial: <a href=\"./FPVDemo.html\">Creating a Camera Application</a>. It’s our introductory tutorial, which guides you through connecting to your aircraft&#39;s camera to displaying a live video feed in your app, through which you can take photos and videos.</p>","meta":{"title":"Importing and Activating DJI SDK in Xcode Project","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-ImportAndActivateSDKInXcode"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>This tutorial is designed for you to gain a basic understanding of the DJI Mobile SDK. It will implement the FPV view and two basic camera functionalities: <strong>Take Photo</strong> and <strong>Record video</strong>.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<p>We use Phantom 3 Professional as an example to make this demo.</p>\n<h2 id=\"downloading-the-sdk\">Downloading the SDK</h2>\n<p>You can download the latest iOS SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads/\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads/\">https://developer.dji.com/mobile-sdk/downloads/</a></a>.</p>\n<p>Minimum Requirement: iOS 8.0 or above.</p>\n<h2 id=\"importing-and-activating-the-sdk\">Importing and Activating the SDK</h2>\n<p>Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;FPVDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s delete the &quot;ViewController.h&quot; and &quot;ViewController.m&quot; files created by Xcode by default. Create a new ViewController named &quot;DJICameraViewController&quot;. </p>\n<p>Now, let&#39;s import the <strong>DJISDK.framework</strong> to it and implement the SDK activation process in the &quot;DJICameraViewController.m&quot; file. If you are not familiar with the process of importing and activating DJI SDK, please check the Github source code and this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h2 id=\"implementing-the-first-person-view\">Implementing the First Person View</h2>\n<h3 id=\"importing-the-videopreviewer\">Importing the VideoPreviewer</h3>\n<p> <strong>1</strong>. We use the <strong>FFMPEG</strong> decoding library (found at <a href=\"http://ffmpeg.org\" target=\"_blank\"><a href=\"http://ffmpeg.org\">http://ffmpeg.org</a></a>) to do software video decoding here. For the hardware video decoding, we provide a <strong>DJIH264Decoder</strong> decoding library. You can find them in the <strong>VideoPreviewer</strong> folder, which you can download it from <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/VideoPreviewer\" target=\"_blank\">DJI iOS SDK Github Repository</a>. Download and copy the entire <strong>VideoPreviewer</strong> folder to your Xcode project&#39;s &quot;Frameworks&quot; folder and then add the &quot;VideoPreviewer.xcodeproj&quot; to the &quot;Frameworks&quot; folder in Xcode project navigator, as shown below:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/FPVDemo/projectNavigator.png\" alt=\"projectNavigator\"></p>\n<blockquote>\n<p>Note: Please Make sure the <strong>VideoPreviewer</strong> folder and <strong>DJISDK.framework</strong> are in the same <strong>Frameworks</strong> folder like this:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/FPVDemo/frameworksFolderStruct.png\" alt=\"frameworksFolderStruct\"></p>\n</blockquote>\n<p> <strong>2</strong>. Next, let&#39;s select the &quot;FPVDemo&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; button to add the &quot;VideoPreviewer.framework&quot; as shown below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/FPVDemo/addFrameworks.png\" alt=\"addFrameworks\">\n  <img src=\"../../images/tutorials-and-samples/iOS/FPVDemo/addFrameworksResult.png\" alt=\"addFrameworksResult\"></p>\n<h3 id=\"working-on-the-djicameraviewcontroller\">Working on the DJICameraViewController</h3>\n<p> <strong>1</strong>. Open Main.storyboard, add a new View Controller and set <strong>DJICameraViewController</strong> as the <strong>Class</strong> for it:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/FPVDemo/rootController.png\" alt=\"rootController\"></p>\n<p>Add a UIView inside the View Controller. Then, add two UIButtons and one UISegmentedControl at the bottom of the View Controller as shown below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/FPVDemo/Storyboard.png\" alt=\"Storyboard\"></p>\n<p>  Go to DJICameraViewController.m file and import the <strong>DJISDK</strong> and <strong>VideoPreviewer</strong> header files. Next implement two delegate protocols and set the IBOutlets and IBActions for the UI we just create in Main.storyboard as shown below:</p>\n<pre><code class=\"lang-objc\">#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n@interface DJICameraViewController ()&lt;DJICameraDelegate, DJISDKManagerDelegate, DJIBaseProductDelegate&gt;\n\n@property (weak, nonatomic) IBOutlet UIButton *recordBtn;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *changeWorkModeSegmentControl;\n@property (weak, nonatomic) IBOutlet UIView *fpvPreviewView;\n\n- (IBAction)captureAction:(id)sender;\n- (IBAction)recordAction:(id)sender;\n- (IBAction)changeWorkModeAction:(id)sender;</code></pre>\n<p> <strong>2</strong>. In the <code>viewDidAppear</code> method, set the <code>fpvPreviewView</code> instance variable as the view of <strong>VideoPreviewer</strong> to show the Video Stream and reset it to nil in the <code>viewWillDisappear</code> method:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n    [[VideoPreviewer instance] setView:self.fpvPreviewView];\n    [self registerApp];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [[VideoPreviewer instance] setView:nil];   \n}</code></pre>\n<p> <strong>3</strong>. Moreover, implement the &quot;DJISDKManagerDelegate&quot; and &quot;DJIBaseProductDelegate&quot; delegate methods to fetch DJICamera object and set its delegate to &quot;self&quot; as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (DJICamera*) fetchCamera {\n\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).camera;\n    }else if ([[DJISDKManager product] isKindOfClass:[DJIHandheld class]]){\n        return ((DJIHandheld *)[DJISDKManager product]).camera;\n    }\n\n    return nil;\n}\n\n#pragma mark DJISDKManagerDelegate Method\n\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    if (newProduct) {\n        [newProduct setDelegate:self];\n        DJICamera* camera = [self fetchCamera];\n        if (camera != nil) {\n            camera.delegate = self;\n        }\n    }\n}\n\n#pragma mark - DJIBaseProductDelegate Method\n\n-(void) componentWithKey:(NSString *)key changedFrom:(DJIBaseComponent *)oldComponent to:(DJIBaseComponent *)newComponent {\n\n    if ([key isEqualToString:DJICameraComponentKey] &amp;&amp; newComponent != nil) {\n        __weak DJICamera* camera = [self fetchCamera];\n        if (camera) {\n            [camera setDelegate:self];\n        }\n    }\n}</code></pre>\n<p>  Firstly, we create the <code>- (DJICamera*) fetchCamera</code> method to fetch the updated DJICamera object. Before we get return the DJICamera object, we need to check if the product object of DJISDKManager is kind of <strong>DJIAircraft</strong> of <strong>DJIHandheld</strong> class. Since the camera component of the aircraft or handheld device may be changed or disconnected, we need to fetch the camera object everytime we want to use it to ensure we get the correct camera object. </p>\n<p>  Next, we invoke the <code>sdkManagerProductDidChangeFrom:to:</code> delegate method to get the <code>newProduct</code> and set the DJIICamera object&#39;s delegate here. This delegate method will invoke when the product connection status changes.</p>\n<p>  Moverover, let&#39;s invoke the <code>componentWithKey:changedFrom:to:</code> delegate method to fetch the camera object and set its delegate too. Since the camera component of the aircraft may change to another type, we should invoke this delegate method to check the component changes too.</p>\n<p> <strong>4</strong>. Lastly, let&#39;s implement the &quot;DJICameraDelegate&quot; method, as shown below:</p>\n<pre><code class=\"lang-objc\">\n#pragma mark - DJICameraDelegate Method\n\n-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size\n{\n    [[VideoPreviewer instance] push:videoBuffer length:(int)size];\n}\n\n-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{\n}</code></pre>\n<p> Here, we use the <code>-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size</code> method to get the live H264 video feed data and send them to the <strong>VideoPreviewer</strong> to decode.</p>\n<p>  Moreover, the <code>-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState</code> method is used to get the camera state from the camera on your aircraft. It will be invoked frequently, so you can update your user interface or camera settings accordingly here.</p>\n<h2 id=\"connecting-to-the-aircraft-or-handheld-device\">Connecting to the Aircraft or Handheld Device</h2>\n<p>After you finish the steps above, you can now connect your mobile device to your DJI Aircraft to use the application, like checking the FPV View. Here are the guidelines:</p>\n<ul>\n<li><p>In order to connect to a DJI Phantom 4, Inspire 1, Phantom 3 Professional, etc:</p>\n<p><strong>1</strong>. First, turn on your remote controller.</p>\n<p><strong>2</strong>. Then, turn on the power of the DJI aircraft.</p>\n<p><strong>3</strong>. Connect your iOS device to the remote controller using the lightning cable.</p>\n<p><strong>4</strong>. Run the application and wait for a few seconds, you will be able to view the live video stream from your aircraft&#39;s camera based on what we&#39;ve finished of the application so far!</p>\n</li>\n<li><p>In order to connect to Phantom 3 Standard, Phantom 3 4K, or OSMO:</p>\n<p><strong>1</strong>. First, turn on your remote controller or OSMO.</p>\n<p><strong>2</strong>. Then, turn on the power of the DJI aircraft. (If you are using Phantom 3 Standard or Phantom 3 4K)</p>\n<p><strong>3</strong>. Search for the WiFi of the aircraft&#39;s remote controller or OSMO and connect your iOS device to it.</p>\n<p><strong>4</strong>. Run the application and wait for a few seconds, you will be able to view the live video stream from your aircraft or OSMO&#39;s camera based on what we&#39;ve finished of the application so far!</p>\n</li>\n</ul>\n<h2 id=\"enjoying-the-first-person-view\">Enjoying the First Person View</h2>\n<p>If you can see the live video stream in the application, congratulations! Let&#39;s move forward.</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/FPVDemo/fpv.jpg\" alt=\"fpv\"></p>\n<h2 id=\"implementing-the-capture-function\">Implementing the Capture function</h2>\n<p>Let&#39;s implement the <code>captureAction</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)captureAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    __weak DJICamera* camera = [self fetchCamera];\n    if (camera) {\n        [camera startShootPhoto:DJICameraShootPhotoModeSingle withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Take Photo Error&quot; withMessage:error.description];\n            }\n        }];\n    }\n}</code></pre>\n<p>In the code above, we invoke the following method of DJICamera to shoot photo.</p>\n<p><code>- (void)startShootPhoto:(DJICameraShootPhotoMode)shootMode withCompletion:(DJICompletionBlock)block;</code></p>\n<p>  Here we set the &quot;shootMode&quot; to <strong>DJICameraShootPhotoModeSingle</strong>. You can check the shoot photo result from the &quot;DJICompletionBlock&quot;.</p>\n<p>  Build and run your project and then try the shoot photo function. If the screen flash after your press the <strong>Capture</strong> button, your capture fuction should work now.</p>\n<h2 id=\"implementing-the-record-function\">Implementing the Record function</h2>\n<h3 id=\"1-switching-camera-mode\">1. Switching Camera Mode</h3>\n<p>   Before we implementing the record function, we need to switch the camera work mode firstly.</p>\n<p>   Let&#39;s check the DJICameraMode enum in <strong>DJICameraSettingsDef.h</strong> file.</p>\n<pre><code class=\"lang-objc\">/**\n *  Camera work modes.\n */\ntypedef NS_ENUM (NSUInteger, DJICameraMode){\n    /**\n     *  Capture mode. In this mode, the user can capture pictures.\n     */\n    DJICameraModeShootPhoto = 0x00,\n    /**\n     *  Record mode. In this mode, the user can record videos.\n     */\n    DJICameraModeRecordVideo = 0x01,\n    /**\n     *  Playback mode. In this mode, the user can preview photos and videos, and\n     *  they can delete files.\n     *\n     *  Not supported by OSMO, Phantom 3 Standard.\n     */\n    DJICameraModePlayback = 0x02,\n    /**\n     *  In this mode, user can download media to Mobile Device.\n     *\n     *  Supported by Phantom 3 Professional, Phantom 3 Advanced, Phantom 3 Standard, X3.\n     */\n    DJICameraModeMediaDownload = 0x03,\n\n    /**\n     *  The camera work mode is unknown.\n     */\n    DJICameraModeUnknown = 0xFF\n};</code></pre>\n<p>   You can see from above that there are 5 types of <strong>DJICameraMode</strong>. Here we use the first two types.</p>\n<p>   Remember we create a UISegment Control in the storyboard? We can update the state of the segmented control when switching between <strong>DJICameraModeShootPhoto</strong> and <strong>DJICameraModeRecordVideo</strong> using the previous delegate method like this:</p>\n<pre><code class=\"lang-objc\">-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{        \n    //Update UISegmented Control&#39;s state\n    if (systemState.mode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.mode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }\n}</code></pre>\n<p> Now we can implement the <code>changeWorkModeAction</code> IBAction method as follows:</p>\n<pre><code class=\"lang-objc\">\n- (IBAction)changeWorkModeAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    UISegmentedControl *segmentControl = (UISegmentedControl *)sender;\n\n    __weak DJICamera* camera = [self fetchCamera];\n\n    if (camera) {\n        if (segmentControl.selectedSegmentIndex == 0) { //Take photo\n            [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [weakSelf showAlertViewWithTitle:@&quot;Set DJICameraModeShootPhoto Failed&quot; withMessage:error.description];\n                }\n            }];\n\n        }else if (segmentControl.selectedSegmentIndex == 1){ //Record video\n            [camera setCameraMode:DJICameraModeRecordVideo withCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [weakSelf showAlertViewWithTitle:@&quot;Set DJICameraModeRecordVideo Failed&quot; withMessage:error.description];\n                }\n\n            }];\n\n        }\n    }\n\n}</code></pre>\n<p> In the code above, we invoke the \n <code>- (void)setCameraMode:(DJICameraMode)mode withCompletion:(DJICompletionBlock)block;</code> method of DJICamera to change the camera mode.  Here we add two UIAlertViews to show warnings when the user set DJICameraMode failed.</p>\n<h3 id=\"2-working-on-the-record-action\">2. Working on the Record Action</h3>\n<p>  Firstly, let&#39;s go to Main.storyboard and drag a UILabel on top of the screen, set up the Autolayout constraints for it and create an IBOutlet named <code>currentRecordTimeLabel</code> in the <strong>DJICameraViewController.m</strong> file.</p>\n<p>  Then add a BOOL variable <code>isRecording</code> in the class extension part of <strong>DJICameraViewController</strong>. Be sure to hide the <code>currentRecordTimeLabel</code> in the <code>viewDidLoad</code> method.</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.currentRecordTimeLabel setHidden:YES];\n}</code></pre>\n<p>We can update the bool value for <code>isRecording</code> and <code>currentRecordTimeLabel</code>&#39;s text value in the following delegate method:</p>\n<pre><code class=\"lang-objc\">\n-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{\n    self.isRecording = systemState.isRecording;\n\n    [self.currentRecordTimeLabel setHidden:!self.isRecording];\n    [self.currentRecordTimeLabel setText:[self formattingSeconds:systemState.currentVideoRecordingTimeInSeconds]];\n\n    if (self.isRecording) {\n        [self.recordBtn setTitle:@&quot;Stop Record&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.recordBtn setTitle:@&quot;Start Record&quot; forState:UIControlStateNormal];\n    }\n\n    //Update UISegmented Control&#39;s state\n    if (systemState.mode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.mode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }   \n}</code></pre>\n<p>   Because the text value of <code>currentRecordingTime</code> is counted in seconds, so we need to convert it to &quot;mm:ss&quot; format like this:</p>\n<pre><code class=\"lang-objc\">- (NSString *)formattingSeconds:(int)seconds\n{\n    NSDate *date = [NSDate dateWithTimeIntervalSince1970:seconds];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    [formatter setDateFormat:@&quot;mm:ss&quot;];\n    [formatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];\n\n    NSString *formattedTimeString = [formatter stringFromDate:date];\n    return formattedTimeString;\n}</code></pre>\n<p>   Next, add the following codes to the <code>recordAction</code> IBAction method as follows:</p>\n<pre><code class=\"lang-objc\">- (IBAction)recordAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    __weak DJICamera* camera = [self fetchCamera];\n    if (camera) {\n\n        if (self.isRecording) {\n            [camera stopRecordVideoWithCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [weakSelf showAlertViewWithTitle:@&quot;Stop Record Video Error&quot; withMessage:error.description];\n                }\n            }];\n\n        }else\n        {\n            [camera startRecordVideoWithCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [weakSelf showAlertViewWithTitle:@&quot;Start Record Video Error&quot; withMessage:error.description];\n                }\n            }];\n        }\n    }\n}</code></pre>\n<p>  In the code above, we implement the <code>startRecordVideoWithCompletion</code> and <code>stopRecordVideoWithCompletion</code> methods of the <strong>DJICamera</strong> class based on the <code>isRecording</code> property value. And show an alertView when an error occurs.</p>\n<p>  Now, let&#39;s build and run the project and check the functions. You can try to play with the <strong>Record</strong> and <strong>Switch Camera WorkMode</strong> functions, if everything goes well, you should see the screenshot like this:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/FPVDemo/record_screenshot.jpg\" alt=\"Screenshot\"></p>\n<p>  Congratulations! Your Aerial FPV iOS app is complete, you can now use this app to control the camera of your Phantom 3 Professional. </p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you’ve learned how to use DJI Mobile SDK to show the FPV View from the aircraft&#39;s camera and control the camera of DJI&#39;s Aircraft to shoot photo and record video. These are the most basic and common features in a typical drone mobile app: <strong>Capture</strong> and <strong>Record</strong>. However, if you want to create a drone app which is more fancy, you still have a long way to go. More advanced features should be implemented, including previewing the photo and video in the SD Card, showing the OSD data of the aircraft and so on. Hope you enjoy this tutorial, and stay tuned for our next one!</p>","meta":{"title":"Creating a Camera Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-FPVDemo"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI Forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use the TapFly and ActiveTrack Missions of DJI iOS SDK to create a cool application for Phantom 4. Also you will get familiar with DJIMissionManager and using the Simulator of DJI Assistant 2 for testing, which is convenient for you to test the missions indoor. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"phantom-4-new-missions\">Phantom 4 New Missions</h2>\n<p>  The Phantom 4 supports the two new TapFly and ActiveTrack missions, which brings you a more autonomous flying experience.</p>\n<h3 id=\"tapfly-mission\">TapFly Mission</h3>\n<p>TapFly Mission is only supported on Phantom 4. Given a coordinate in the live video stream (which can come from a user tap), the aircraft will calculate and fly towards the coordinate&#39;s direction in the real wold. During flight, the aircraft will automatically detect and avoid obstacles.</p>\n<p>During the mission, you can use the remote controller&#39;s yaw stick to adjust the heading of the aircraft, which also adjusts the direction of flight to the new yaw. Using any other stick controls will cancel the mission.</p>\n<p>Here is a <a href=\"https://dn-djidl2.qbox.me/cloud/6949e90958a3e0dbf1175cd9bb1f851a/720.mp4\" target=\"_blank\"> video </a> for you to get the first impression of the TapFly Mission.</p>\n<h3 id=\"activetrack-mission\">ActiveTrack Mission</h3>\n<p>ActiveTrack Mission is only supported on Phantom 4. It allows an aircraft to track a moving subject using the vision system and without a GPS tracker on the subject.</p>\n<p>The main camera is used to track the target, so the gimbal cannot be adjusted during an ActiveTrack mission. During the mission the aircraft can be manually flown with pitch, roll and throttle to move around the subject being tracked.</p>\n<p>Here is a <a href=\"https://dn-djidl2.qbox.me/cloud/4ebc02c536baf850f5a568d8c27743fc/720.mp4\" target=\"_blank\"> video </a> for you to get the first impression of the ActiveTrack Mission.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<h3 id=\"importing-the-framework\">Importing the Framework</h3>\n<p>Now that you know the details of the two new missions of Phantom 4, we can start working on the application.</p>\n<p>Let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;P4Missions&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s import the <strong>DJISDK.framework</strong> to it. If you are not familiar with the process of importing DJI SDK, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h3 id=\"importing-the-videopreviewer\">Importing the VideoPreviewer</h3>\n<p> <strong>1</strong>. We use the <strong>FFMPEG</strong> decoding library (found at <a href=\"http://ffmpeg.org\" target=\"_blank\"><a href=\"http://ffmpeg.org\">http://ffmpeg.org</a></a>) to do software video decoding here. For the hardware video decoding, we provide a <strong>DJIH264Decoder</strong> decoding library. You can find them in the <strong>VideoPreviewer</strong> folder, which you can download it from <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/VideoPreviewer\" target=\"_blank\">DJI iOS SDK Github Repository</a>. Download and copy the entire <strong>VideoPreviewer</strong> folder to your Xcode project&#39;s &quot;Frameworks&quot; folder and then add the &quot;VideoPreviewer.xcodeproj&quot; to the &quot;Frameworks&quot; folder in Xcode project navigator, as shown below:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/projectNavigator.png\" alt=\"projectNavigator\"></p>\n<blockquote>\n<p>Note: Please Make sure the <strong>VideoPreviewer</strong> folder and <strong>DJISDK.framework</strong> are in the same <strong>Frameworks</strong> folder like this:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/frameworksFolderStruct.png\" alt=\"frameworksFolderStruct\"></p>\n</blockquote>\n<p> <strong>2</strong>. Next, let&#39;s select the &quot;P4Missions&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; button to add the &quot;VideoPreviewer.framework&quot; as shown below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/addFrameworks.png\" alt=\"addFrameworks\">\n  <img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/addFrameworksResult.png\" alt=\"addFrameworksResult\"></p>\n<h3 id=\"setup-the-storyboard\">Setup the Storyboard</h3>\n<h4 id=\"1-creating-rootviewcontroller\">1. Creating RootViewController</h4>\n<p>   Now, let&#39;s delete the <strong>ViewController.h</strong> and <strong>ViewController.m</strong> files, which were created by Xcode when you create the project. Then, create a UIView Controller named &quot;<strong>RootViewController</strong>&quot; and set the class of original ViewController object in storyboard to &quot;RootViewController&quot;. Next make the ViewController embed in a Navigation Controller and set it as the Storyboard Entry Point in Main.storyboard. </p>\n<h4 id=\"2-creating-uibuttons\">2. Creating UIButtons</h4>\n<p>   Drag and drop two UIButton objects to the RootViewController and named them as &quot;TapFly Mission&quot; and &quot;ActiveTrack Mission&quot;. Remember to add Auto Layout constraints to the two buttons. Moreover, drag and drop two UIViewController objects from the Object library and place them on the right of the RootViewController.</p>\n<h4 id=\"3-adding-two-viewcontrollers\">3. Adding Two ViewControllers</h4>\n<p>   Control drag from the two buttons to the two new UIViewController objects seperately and choose the &quot;Show&quot; action segue. Here we create two UIViewController classes and named them as &quot;ActiveTrackViewController&quot; and &quot;TapFlyViewController&quot;. Then set the class of the two new UIViewController objects in storyboard as these two classes.</p>\n<h4 id=\"4-setup-statusviewcontroller\">4. Setup StatusViewController</h4>\n<p>   Drag and drop another ViewController object from the Object Library to the right of ActiveTrackViewController in the storyboard. Create another UIViewController class and named it as &quot;StatusViewController&quot;, then set the class name in storyboard too.</p>\n<h4 id=\"5-setup-segues\">5. Setup Segues</h4>\n<p>   Drag two Bar Button Item(Name them as both &quot;Status&quot;) from Object Library and place them on the right side of navigation bar of &quot;ActiveTrackViewController&quot; and &quot;TapFlyViewController&quot; objects in the storyboard. Lastly, control drag from the two &quot;Status&quot; Bar Button to the StatusViewController, and select &quot;Show&quot; action segue.</p>\n<p>Now, let&#39;s check the screenshot of the current storyboard UI:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/storyboardUI.png\" alt=\"storyboardUI\"></p>\n<p>It Looks pretty simple and clear, this will be the workflow of our demo application. </p>\n<h3 id=\"registering-the-application\">Registering the Application</h3>\n<p>After you finish the above steps, let&#39;s register our application. Open the RootViewController.m file and replace it with the following code:</p>\n<pre><code class=\"lang-objc\">#import &quot;RootViewController.h&quot;\n#import &quot;DemoUtility.h&quot;\n\n@interface RootViewController ()&lt;DJISDKManagerDelegate&gt;\n@property (weak, nonatomic) IBOutlet UIButton *tapFlyMissionButton;\n@property (weak, nonatomic) IBOutlet UIButton *activeTrackMissionButton;\n\n@end\n\n@implementation RootViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.title = @&quot;Phantom 4 Missions Demo&quot;;\n    [self registerApp];\n}\n\n- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n#pragma mark Custom Methods\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Please enter your App Key here.&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}\n\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n\n}\n\n#pragma mark DJISDKManagerDelegate Method\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    if (newProduct) {\n        [self.tapFlyMissionButton setEnabled:YES];\n        [self.activeTrackMissionButton setEnabled:YES];\n    }else\n    {\n        [self.tapFlyMissionButton setEnabled:NO];\n        [self.activeTrackMissionButton setEnabled:NO];\n    }\n}\n\n- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    if (error) {\n        NSString* message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n        [self.tapFlyMissionButton setEnabled:NO];\n        [self.activeTrackMissionButton setEnabled:NO];\n        [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n        [DJISDKManager startConnectionToProduct];\n    }\n}\n@end</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Implement the <code>registerApp</code> method and invoke the <code>registerApp:withDelegate:</code> method of DJISDKManager by passing the <strong>App Key</strong> you get when you register the app on DJI Developer website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>2.</strong> Implement the <code>sdkManagerProductDidChangeFrom:to:</code> delegate method to check the connection status and hide or show the two UIButtons.</p>\n<p><strong>3.</strong> Implement the <code>sdkManagerDidRegisterAppWithError:</code> delegate method to check if register app successfully, then invoke the <code>startConnectionToProduct</code> method of DJISDKManager to start a connection to Phantom 4.</p>\n<h2 id=\"coordinate-transformations-for-missions\">Coordinate Transformations for Missions</h2>\n<p>Before we dive into the implementation of two missions, let&#39;s learn something about the special coordinate transformations of them.</p>\n<h3 id=\"tapfly-mission-coordinate-transformation\">TapFly Mission Coordinate Transformation</h3>\n<p>If we check the <strong>DJITapFlyMission.h</strong> file, you can see the following two properties:</p>\n<pre><code class=\"lang-objc\">@property(nonatomic, readonly) DJIVector direction;\n@property(nonatomic, readonly) CGPoint imageLocation;</code></pre>\n<p><strong>1.</strong> The <code>direction</code> property is a DJIVector object, which represents a cartesian vector in 3D space. You can get the actual flying direction of the aircraft using the N-E-D(North-East-Down) coordinate system when the aircraft is executing a TapFly mission.</p>\n<p><strong>2.</strong> The <code>imageLocation</code> property is the image point from the live video stream where the vision system should calculate the flight direction from. The image point is normalized to [0,1] where (0,0) is the top left corner and (1,1) is the bottom right.</p>\n<p>Here is a diagram to show the coordinate transformation of the mission:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyMissionCoordinates.png\" alt=\"tapFlyMissionCoordinate\"></p>\n<p>As the diagram shown above, you can see the process of transformation.</p>\n<ul>\n<li><p>The <code>imageLocationToCalculateDirection</code> property shown above is transformed from TouchPoint (CGPoint) to a Video Stream Coordinate System CGPoint.</p>\n</li>\n<li><p>The <code>direction</code> property shown above belongs to the <strong>N-E-D (North-East-Down) Coordinate System</strong> and will be sent to you by the SDK.</p>\n</li>\n<li><p>The <code>imageLocation</code> property shown above belongs to the <strong>Video Stream Coordinate System</strong> and will be sent to you by the SDK.</p>\n</li>\n</ul>\n<p>So in our demo application, in order to implement the TapFly mission, we should transform the user&#39;s touch location (A CGPoint object) of UIView Coordinate System into the image location (A CGPoint object) of Video Stream Coordination System and pass it to the following <code>imageLocationToCalculateDirection</code> property of DJITapFlyMission:</p>\n<pre><code class=\"lang-objc\">/**\n *  The image point from the video feed where the vision system should calculate the flight direction from. The image point is normalized to [0,1] where (0,0) is the top left corner and (1,1) is the bottom right.\n */\n@property(nonatomic, assign) CGPoint imageLocationToCalculateDirection;</code></pre>\n<h3 id=\"activetrack-mission-coordinate-transformation\">ActiveTrack Mission Coordinate Transformation</h3>\n<p>Next, let&#39;s check the <strong>DJIActiveTrackMission.h</strong> file, you may see the following two properties.</p>\n<pre><code class=\"lang-objc\">@property(nonatomic, readonly) CGRect trackingRect;\n@property(nonatomic, assign) CGRect rect;</code></pre>\n<p><strong>1.</strong> The <code>trackingRect</code> property is a rectangle in the live video stream view image that represents the target being tracked. The rectangle is normalized to [0,1] where (0,0) is the top left of the video preview and (1,1) is the bottom right.</p>\n<p><strong>2.</strong> The <code>rect</code> property is a bounding box for the target. The rectangle is normalized to [0,1] where (0,0) is the top left of the video preview and (1,1) is the bottom right.</p>\n<p>   The <code>size</code> parameter of <code>CGRect</code> can be set to 0 to initialize the mission with a point instead of a rectangle. If the mission is initialized with a point, the vision system will try to recognize object around the point and return the representative rect in the status delegate.</p>\n<p>   Here is a diagram to show the coordinate transformation of the ActiveTrack mission:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/activeTrackMissionCoordinates.png\" alt=\"tapFlyMissionCoordinate\"></p>\n<p>As the diagram shown above, you can see the process of transformation. </p>\n<ul>\n<li>The <code>trackingRect</code> and <code>rect</code> properties shown above belongs to the <strong>Video Stream Coordinate System</strong>.</li>\n</ul>\n<p>So in order to implement the ActiveTrack Mission, we should transform the user&#39;s touch rect (A CGRect object) of UIView Coordinate System into the tracking rect (A CGRect object) of Video Stream Coordination System and pass it to the <code>rect</code> property of DJIActiveTrackMission. The SDK will send you the <code>trackingRect</code> property to update the rectangle on your screen.</p>\n<h2 id=\"implementing-the-tapfly-mission\">Implementing the TapFly Mission</h2>\n<h3 id=\"working-on-the-ui-of-tapflyviewcontroller\">Working on the UI of TapFlyViewController</h3>\n<p>   Now let&#39;s create a new UIView class and name it as &quot;PointingTouchView&quot;. We use this UIView to update and draw the tapping point of the direction which you want the drone to fly towards on the screen.</p>\n<p>   Go back to the TapFlyViewController object in the storyboard. Drag and drop two UIView objects to the view controller and adjust their size to be full screen. Create two IBOutlets for them in the class extension part of TapFlyViewController.m file and connect them between Storyboard and the .m file as shown below:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIView *fpvView;\n@property (weak, nonatomic) IBOutlet PointingTouchView *touchView;</code></pre>\n<p>   Remember to place the fpvView at the bottom, and change the top UIView object&#39;s class to &quot;PointingTouchView&quot;.</p>\n<p>  Next, Drag and drop two UILabel objects, two UIButton objects, a UISwitch object and a UISlider object on top of the View of Tap Fly View Controller and place them on the positions as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyUI.png\" alt=\"activeTrackVC\"></p>\n<p>For more details of the UI customization, please check the Github source code of this demo project. Lastly, create three IBOutlets properties and two IBActions methods for them in the TapFlyViewController.m file as shown below:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIButton* startMissionBtn;\n@property (weak, nonatomic) IBOutlet UIButton* stopMissionBtn;\n@property (weak, nonatomic) IBOutlet UILabel* speedLabel;\n@property (weak, nonatomic) IBOutlet UILabel *horiObstacleAvoidLabel;</code></pre>\n<pre><code class=\"lang-objc\">-(IBAction) onSliderValueChanged:(UISlider*)slider\n{\n}\n\n-(IBAction) onSwitchValueChanged:(UISwitch*)sender\n{\n}\n\n-(IBAction) onStartMissionButtonAction:(UIButton*)sender\n{\n}\n\n-(IBAction) onStopMissionButtonAction:(UIButton*)sender\n{\n}</code></pre>\n<h3 id=\"implementing-the-coordinate-transformation-methods\">Implementing the Coordinate Transformation Methods</h3>\n<p>  Let&#39;s create a useful NSObject class named &quot;DemoUtility&quot;, it contains some useful Macros and Class methods for the demo project. Here is the interface of it:</p>\n<pre><code class=\"lang-objc\">#import &lt;Foundation/Foundation.h&gt;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n#define weakSelf(__TARGET__) __weak typeof(self) __TARGET__=self\n#define weakReturn(__TARGET__) if(__TARGET__==nil)return;\n#define INVALID_POINT CGPointMake(CGFLOAT_MAX, CGFLOAT_MAX)\n\nextern void ShowResult(NSString *format, ...);\n\n@interface DemoUtility : NSObject\n\n/**\n *  Fetch DJI Project&#39;s component Objects.\n */\n+ (DJICamera*) fetchCamera;\n+ (DJIGimbal*) fetchGimbal;\n+ (DJIFlightController *) fetchFlightController;\n\n/**\n *  Help to do the coordinate transformations.\n */\n+ (CGPoint) pointToStreamSpace:(CGPoint)point withView:(UIView *)view;\n+ (CGPoint) pointFromStreamSpace:(CGPoint)point withView:(UIView *)view;\n+ (CGSize) sizeToStreamSpace:(CGSize)size;\n+ (CGSize) sizeFromStreamSpace:(CGSize)size;\n+ (CGRect) rectToStreamSpace:(CGRect)rect withView:(UIView *)view;\n+ (CGRect) rectFromStreamSpace:(CGRect)rect withView:(UIView *)view;\n+ (CGRect) rectWithPoint:(CGPoint)point1 andPoint:(CGPoint)point2;\n\n/**\n *  Returns the string object from related enum values.\n */\n+ (NSString*) stringFromPointingExecutionState:(DJITapFlyMissionExecutionState)state;\n+ (NSString*) stringFromTrackingExecutionState:(DJIActiveTrackMissionExecutionState)state;\n+ (NSString*) stringFromByPassDirection:(DJIBypassDirection)direction;\n\n@end</code></pre>\n<p>It firstly imports the DJISDK and VideoPreviewer header files, then defines several methods to do the mission coordinate transformations.</p>\n<p>Moreover, here are the coordinate transformations class methods&#39; implementations:</p>\n<pre><code class=\"lang-objc\">+ (CGPoint) pointToStreamSpace:(CGPoint)point withView:(UIView *)view\n{\n    VideoPreviewer* previewer = [VideoPreviewer instance];\n    CGRect videoFrame = [previewer frame];\n    CGPoint videoPoint = [previewer convertPoint:point toVideoViewFromView:view];\n    CGPoint normalized = CGPointMake(videoPoint.x/videoFrame.size.width, videoPoint.y/videoFrame.size.height);\n    return normalized;\n}\n\n+ (CGPoint) pointFromStreamSpace:(CGPoint)point withView:(UIView *)view{\n    VideoPreviewer* previewer = [VideoPreviewer instance];\n    CGRect videoFrame = [previewer frame];\n    CGPoint videoPoint = CGPointMake(point.x*videoFrame.size.width, point.y*videoFrame.size.height);\n    return [previewer convertPoint:videoPoint fromVideoViewToView:view];\n}\n\n+ (CGSize) sizeToStreamSpace:(CGSize)size{\n    VideoPreviewer* previewer = [VideoPreviewer instance];\n    CGRect videoFrame = [previewer frame];\n    return CGSizeMake(size.width/videoFrame.size.width, size.height/videoFrame.size.height);\n}\n\n+ (CGSize) sizeFromStreamSpace:(CGSize)size{\n    VideoPreviewer* previewer = [VideoPreviewer instance];\n    CGRect videoFrame = [previewer frame];\n    return CGSizeMake(size.width*videoFrame.size.width, size.height*videoFrame.size.height);\n}\n\n+ (CGRect) rectToStreamSpace:(CGRect)rect withView:(UIView *)view\n{\n    CGPoint origin = [DemoUtility pointToStreamSpace:rect.origin withView:view];\n    CGSize size = [DemoUtility sizeToStreamSpace:rect.size];\n    return CGRectMake(origin.x, origin.y, size.width, size.height);\n}\n\n+ (CGRect) rectFromStreamSpace:(CGRect)rect withView:(UIView *)view\n{\n    CGPoint origin = [DemoUtility pointFromStreamSpace:rect.origin withView:view];\n    CGSize size = [DemoUtility sizeFromStreamSpace:rect.size];\n    return CGRectMake(origin.x, origin.y, size.width, size.height);\n}</code></pre>\n<p>The &quot;StreamSpace&quot; in the above method names means the video stream coordinate system. Those methods include tranformations of CGPoint, CGSize and CGRect, we will use them frequently later. For the remaining implementation of this class, please check the Github Source Code.</p>\n<h3 id=\"working-on-the-pointingtouchview\">Working on the PointingTouchView</h3>\n<p>Now let&#39;s go to PointingTouchView.h file and replace it with the following codes:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@interface PointingTouchView : UIView\n-(void) updatePoint:(CGPoint)point;\n-(void) updatePoint:(CGPoint)point andColor:(UIColor*)color;\n@end</code></pre>\n<p>Here, we create two methods to update the touching point and its color. </p>\n<p>Next, go to the PointingTouchView.m file and replace it with the following codes:</p>\n<pre><code class=\"lang-objc\">#import &quot;PointingTouchView.h&quot;\n#import &quot;DemoUtility.h&quot;\n\n@interface PointingTouchView ()\n\n@property(nonatomic, assign) CGPoint point;\n@property(nonatomic, strong) UIColor* fillColor;\n\n@end\n\n@implementation PointingTouchView\n\n-(void) awakeFromNib\n{\n    [super awakeFromNib];\n\n    self.point = INVALID_POINT;\n    self.fillColor = [[UIColor greenColor] colorWithAlphaComponent:0.5];\n}\n\n-(void) updatePoint:(CGPoint)point\n{\n    if (CGPointEqualToPoint(self.point, point)) {\n        return;\n    }\n\n    self.point = point;\n    [self setNeedsDisplay];\n}\n\n-(void) updatePoint:(CGPoint)point andColor:(UIColor*)color\n{\n    if (CGPointEqualToPoint(self.point, point) &amp;&amp; [self.fillColor isEqual:color]) {\n        return;\n    }\n\n    self.point = point;\n    self.fillColor = color;\n    [self setNeedsDisplay];\n}\n\n-(void) drawRect:(CGRect)rect\n{\n    [super drawRect:rect];\n    if (!CGPointEqualToPoint(self.point, INVALID_POINT)) {\n        CGContextRef context = UIGraphicsGetCurrentContext();\n        UIColor* strokeColor = [UIColor grayColor];\n        CGContextSetStrokeColorWithColor(context, strokeColor.CGColor);\n        UIColor* fillColor = self.fillColor;\n        CGContextSetFillColorWithColor(context, fillColor.CGColor); // Fill Color\n        CGContextSetLineWidth(context, 2.5);// Line width\n        CGContextAddArc(context, self.point.x, self.point.y, 40, 0, 2*M_PI, 0); // Draw a circle with radius 40\n        CGContextDrawPath(context, kCGPathFillStroke);\n    }\n}\n@end</code></pre>\n<p>In the code above, we implement the <code>updatePoint:</code> and <code>updatePoint:andColor:</code> methods to update the <code>point</code> and <code>fillColor</code> instance variables. Moreover, we implement the <code>-(void)drawRect:(CGRect)rect</code> method to draw a circle and fill with color for the touching point on the PointingTouchView. </p>\n<h3 id=\"implementing-the-tapflyviewcontroller\">Implementing the TapFlyViewController</h3>\n<h4 id=\"showing-live-video-stream\">Showing Live Video Stream</h4>\n<p>   In order to show the live video stream in the TapFlyViewController, we should import the following headers and implement the protocols of <code>DJICameraDelegate</code>, <code>DJIMissionManagerDelegate</code> firstly:</p>\n<pre><code class=\"lang-objc\">#import &quot;TapFlyViewController.h&quot;\n#import &quot;PointingTouchView.h&quot;\n#import &quot;DemoUtility.h&quot;\n#import &quot;StatusViewController.h&quot;\n\n@interface TapFlyViewController () &lt;DJICameraDelegate, DJIMissionManagerDelegate&gt;\n\n@end</code></pre>\n<p>  Then, invoke the <code>start</code> instance method of VideoPreviewer, set its view as <code>fpvView</code> property object and set its video stream decoder in the <code>viewWillAppear</code> method. We should also set DJICamera&#39;s delegate as TapFlyViewController in the <code>viewWillAppear</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [[VideoPreviewer instance] setDecoderWithProduct:[DJISDKManager product] andDecoderType:VideoPreviewerDecoderTypeSoftwareDecoder];\n    [[VideoPreviewer instance] setView:self.fpvView];\n\n    [DJIMissionManager sharedInstance].delegate = self;\n\n    DJICamera* camera = [DemoUtility fetchCamera];\n    if (camera) {\n        camera.delegate = self;\n    }\n\n    [[VideoPreviewer instance] start];\n}</code></pre>\n<p>Remember to invoke the <code>unSetView</code> method of VideoPreviewer and set its view to nil in the <code>viewWillDisappear</code> method to remove the previous glView:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [[VideoPreviewer instance] unSetView];\n    [[VideoPreviewer instance] setView:nil];\n}</code></pre>\n<p>Finally, let&#39;s implement the DJICamera&#39;s delegate method to show the live video stream on the <code>fpvView</code>:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJICameraDelegate Method\n-(void) camera:(DJICamera*)camera didReceiveVideoData:(uint8_t*)videoBuffer length:(size_t)length\n{\n    uint8_t* pBuffer = (uint8_t*)malloc(length);\n    memcpy(pBuffer, videoBuffer, length);\n    [[VideoPreviewer instance] push:pBuffer length:(int)length];\n}</code></pre>\n<h4 id=\"working-on-the-tapfly-mission\">Working on the TapFly Mission</h4>\n<h5 id=\"setup-uitapgesturerecognizer\">Setup UITapGestureRecognizer</h5>\n<p>   If we want to recognize the user&#39;s tap gesture on the screen, we need to create a UITapGestureRecognizer instance object in the <code>viewDidLoad</code> method and implement its action selector method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.title = @&quot;TapFly Mission&quot;;\n    UITapGestureRecognizer* tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(onScreenTouched:)];\n    [self.touchView addGestureRecognizer:tapGesture];    \n}</code></pre>\n<pre><code class=\"lang-objc\">-(void) onScreenTouched:(UIGestureRecognizer*)recognizer\n{\n    CGPoint point = [recognizer locationInView:self.touchView];\n    [self.touchView updatePoint:point andColor:[[UIColor greenColor] colorWithAlphaComponent:0.5]];\n\n    point = [DemoUtility pointToStreamSpace:point withView:self.touchView];\n    [self startTapFlyMissionWithPoint:point];\n}</code></pre>\n<p>In the <code>onScreenTouched:</code> method, we firstly get the CGPoint of touch event by invoking the <code>locationInView:</code> method of UIGestureRecognizer. Then we invoke the <code>updatePoint:andColor:</code> method of PointingTouchView to draw the point with green color on the screen. Lastly, we call the <code>pointToStreamSpace:withView:</code> method of DemoUtility to transform the touch point to a Video Stream Coordinate CGPoint object and pass it to the <code>startTapFlyMissionWithPoint</code> method to prepare the TapFly mission.</p>\n<h5 id=\"prepare-and-start-the-mission\">Prepare and Start the Mission</h5>\n<p>Before we start to create the DJITapFlyMission instance object, let&#39;s check the three properties we can set for each DJITapFlyMission:</p>\n<p><strong>1.</strong> AutoFlightSpeed</p>\n<p>You can set the aircraft&#39;s auto flight speed during the mission by setting this property for DJITapFlyMission. The range for it is [1, 10] m/s.</p>\n<p><strong>2.</strong> IsHorizontalObstacleAvoidanceEnabled</p>\n<p>If you want to allow the aircraft to bypass or move around an obstacle by going to the left or right of the obstacle when executing TapFly mission, you can set this property to YES. Otherwise, the aircraft will only go over an obstacle to avoid it.</p>\n<p><strong>3.</strong> ImageLocationToCalculateDirection</p>\n<p>This is where we should pass the coordinate transformation CGPoint property to, we can use the DemoUtility class&#39;s <code>pointToStreamSpace:withView:</code> method to do the coordinate transformation. This property is the image point from the video feed where the vision system should calculate the flight direction from.</p>\n<p>Now, let&#39;s implement the <code>startTapFlyMissionWithPoint:</code> method to prepare and start the TapFly mission as shown below:</p>\n<pre><code class=\"lang-objc\">-(void) startTapFlyMissionWithPoint:(CGPoint)point\n{\n    DJITapFlyMission* tapFlyMission = [[DJITapFlyMission alloc] init];\n    tapFlyMission.imageLocationToCalculateDirection = point;\n    tapFlyMission.autoFlightSpeed = self.speed;\n    tapFlyMission.isHorizontalObstacleAvoidanceEnabled = self.isHorizontalObstacleAvoidanceEnabled;\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] prepareMission:tapFlyMission withProgress:nil withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            weakReturn(target);\n            [target.touchView updatePoint:INVALID_POINT];\n            ShowResult(@&quot;Prepare Mission Error:%@&quot;, error.localizedDescription);\n        }\n        else\n        {\n            [target shouldShowStartMissionButton:YES];\n        }\n    }];\n}\n\n//Should Show StartMissionButton and hide StopMissionButton\n- (void) shouldShowStartMissionButton:(BOOL)show\n{\n    if (show) {\n        self.startMissionBtn.hidden = NO;\n        self.stopMissionBtn.hidden = YES;\n    }else\n    {\n        self.startMissionBtn.hidden = YES;\n        self.stopMissionBtn.hidden = NO;\n    }\n}</code></pre>\n<p>In the code above, we create an DJITapFlyMission instance object and pass the three properties to it. Then we invoke the <code>prepareMission:withProgress:withCompletion:</code> method of DJIMissionManager to prepare the mission. Once the mission is prepared successfully, we invoke the <code>showStartButton</code> method to show the Start Mission button for the user. Otherwise, invoke the <code>updatePoint</code> method of PointingTouchView by passing a  INVALID_POINT to remove the circle drawing on the view.</p>\n<p>Let&#39;s continue to implement the <code>onStartMissionButtonAction:</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onStartMissionButtonAction:(UIButton*)sender\n{\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n            ShowResult(@&quot;Start Mission:%@&quot;, error.localizedDescription);\n            if (!error) {\n                weakReturn(target);\n                [target shouldShowStartMissionButton:NO];\n            }else\n            {\n                ShowResult(@&quot;StartMission Failed: %@&quot;, error.description);\n            }\n    }];\n}</code></pre>\n<p>If we start the TapFly mission successfully, invoke the <code>shouldShowStartMissionButton:</code> method to hide the startMissionBtn and show the stopMissionBtn.</p>\n<p>During the TapFly mission execution, we can also implement the DJIMissionManagerDelegate methods to check the status. Let&#39;s set the DJIMissionManager&#39;s delegate as TapFlyViewController in the <code>viewWillAppear</code> method, and implement the following two delegate methods:</p>\n<pre><code class=\"lang-objc\">- (void)missionManager:(DJIMissionManager *_Nonnull)manager didFinishMissionExecution:(NSError *_Nullable)error\n{\n    ShowResult(@&quot;Mission Finished:%@&quot;, error.localizedDescription);\n    [self.touchView updatePoint:INVALID_POINT];\n    [self hideMissionControlButton];\n    self.isMissionRunning = NO;\n}\n\n- (void)missionManager:(DJIMissionManager *_Nonnull)manager missionProgressStatus:(DJIMissionProgressStatus *_Nonnull)missionProgress\n{\n    if ([missionProgress isKindOfClass:[DJITapFlyMissionStatus class]]) {\n        self.isMissionRunning = YES;\n        DJITapFlyMissionStatus* status = (DJITapFlyMissionStatus*)missionProgress;\n        CGPoint point = status.imageLocation;\n        point.x = point.x * self.fpvView.frame.size.width;\n        point.y = point.y * self.fpvView.frame.size.height;\n        if (CGPointEqualToPoint(point, CGPointZero)) {\n            point = INVALID_POINT;\n        }\n        if (status.executionState == DJITapFlyMissionExecutionStateExecuting) {\n            [self.touchView updatePoint:point andColor:[[UIColor greenColor] colorWithAlphaComponent:0.5]];\n            [self shouldShowStartMissionButton:NO];\n        }\n        else if (status.executionState == DJITapFlyMissionExecutionStateCannotExecute)\n        {\n            [self.touchView updatePoint:point andColor:[[UIColor redColor] colorWithAlphaComponent:0.5]];\n            [self shouldShowStartMissionButton:NO];\n        }\n\n        NSLog(@&quot;Direction:{%f, %f, %f} ExecState:%d&quot;, status.direction.x, status.direction.y, status.direction.z, (int)status.executionState);\n\n        [self.logString appendFormat:@&quot;Execution State:%@\\n&quot;, [DemoUtility stringFromPointingExecutionState:status.executionState]];\n        [self.logString appendFormat:@&quot;ByPass Direction:%@\\n&quot;, [DemoUtility stringFromByPassDirection:status.bypassDirection]];\n        [self.logString appendFormat:@&quot;Direction:{%f, %f, %f}\\n&quot;, status.direction.x, status.direction.y, status.direction.z];\n        [self.logString appendFormat:@&quot;View Point:{%f, %f}\\n&quot;, point.x, point.y];\n        [self.logString appendFormat:@&quot;Error:%@&quot;, status.error.localizedDescription];\n    }\n}</code></pre>\n<p>The first delegate method will be invoked when the mission finish executing. We can reset the UI and clear the circle drawing on the screen here.</p>\n<p>For the second delegate method, firstly, we need to check if the missionProgress is the <code>DJITapFlyMissionStatus</code> class. Then, we can get the <code>imageLocation</code> from it and transform it back to iOS UIView Coordinate System CGPoint object. With CGPoint object, we can update the circle&#39;s position and color drawing on the screen based on the <code>executionState</code>. Lastly, we can update the <code>logString</code> with status info.</p>\n<p>If you want to dynamically set the flight speed of TapFly mission, you can invoke the <code>setAutoFlightSpeed:withCompletion:</code> method of DJITapFlyMission in the <code>onSliderValueChanged:</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onSliderValueChanged:(UISlider*)slider\n{\n    float speed = slider.value * 10;\n    self.speed = speed;\n    self.speedLabel.text = [NSString stringWithFormat:@&quot;%0.1fm/s&quot;, speed];\n    if (self.isMissionRunning) {\n        [DJITapFlyMission setAutoFlightSpeed:self.speed withCompletion:^(NSError * _Nullable error) {\n          if(error){        \n            NSLog(@&quot;Set TapFly Auto Flight Speed:%0.1f Error:%@&quot;, speed, error.localizedDescription);\n          }\n        }];\n    }\n}</code></pre>\n<h5 id=\"stop-mission\">Stop Mission</h5>\n<p>Finally, let&#39;s implement the <code>onStopMissionButtonAction:</code> IBAction method to stop the TapFly mission:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onStopMissionButtonAction:(UIButton*)sender\n{\n\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] stopMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        ShowResult(@&quot;Stop Mission:%@&quot;, error.localizedDescription);\n        if (!error) {\n            weakReturn(target);\n            [target hideMissionControlButton];\n            target.isMissionRunning = NO;\n        }\n    }];\n}</code></pre>\n<p>For more implementation details of the TapFlyViewController file, please check the Github source code. </p>\n<p>Now let&#39;s build and run the project, if everything goes well, you should be able to use the TapFly mission of Phantom 4 now.</p>\n<blockquote>\n<p><strong>Important</strong>: Remember to switch the remote controller to <strong>P</strong> mode before you test the TapFly mission.</p>\n</blockquote>\n<p>Here are two gif animations for you to get a better understanding of using the TapFly mission, especially the <strong>Horizontal Obstacle Avoidance</strong> feature:</p>\n<ul>\n<li>Enable Horizontal Obstacle Avoidance</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyMissionHoriGif.gif\" alt=\"tapFlyMissionHoriGif\"></p>\n<p>   In the animation, you can see there are two flat surface obstacles stand towards the Phantom 4. We tap on the right obstacle and ask the Phantom 4 to fly towards it. With the help of the front obstacle sensors, Phantom 4 won&#39;t hit the obstacle and crash. You may notice that we switch on the &quot;Horizontal Obstacle Avoidance Enable&quot; before the TapFly mission start. </p>\n<p>   Press the <strong>GO</strong> button, Phantom 4 will start to fly towards it. When flying close to the obstacle, the Obstacle Sensing System will help to adjust the aircraft&#39;s attitude and fly towards the right side of it. </p>\n<ul>\n<li>Disable Horizontal Obstacle Avoidance</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyMissionUpwardsGif.gif\" alt=\"tapFlyMissionUpwardsGif\"></p>\n<p>   If we switch off the &quot;Horizontal Obstacle Avoidance Enable&quot;, when the Phantom 4 fly close to the obstacle, it will rise to avoid the obstacle and continue to fly towards the origin direction. When you want to stop the mission, just press the <strong>X</strong> button, Phantom 4 will stop immediately and hover there.</p>\n<h2 id=\"implementing-activetrack-mission\">Implementing ActiveTrack Mission</h2>\n<h3 id=\"working-on-the-ui-of-activetrackviewcontroller\">Working on the UI of ActiveTrackViewController</h3>\n<p><strong>1.</strong> Now let&#39;s create a new UIView class and name it as &quot;TrackingRenderView&quot;. We use this UIView to track the user&#39;s UITouch Event and draw the tracking rectangle of the object on it.</p>\n<p><strong>2.</strong> Let&#39;s go back to the ActiveTrackViewController object in the storyboard. Drag and drop two UIView objects to the view controller and adjust their size to be full screen. Create two IBOutlets for them in the class extension part of ActiveTrackViewController.m file and connect them between Storyboard and the .m file as shown below:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIView *fpvView;\n@property (weak, nonatomic) IBOutlet TrackingRenderView *renderView;</code></pre>\n<p>Remember to place the fpvView at the bottom, and change the top UIView object&#39;s class to &quot;TrackingRenderView&quot;.</p>\n<p><strong>3.</strong> Drag and drop a UILabel object, a UIButton object and a UISwitch object on top of the View of Active Track View Controller and place them on the right positions as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/activeTrackUI.png\" alt=\"activeTrackVC\"></p>\n<p>For more details of the UI customization, please check the Github source code of this demo project. Lastly, create two IBOutlet properties and two IBAction methods for them in the ActiveTrackViewController.m file as shown below:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIButton* stopButton;\n@property (weak, nonatomic) IBOutlet UILabel *retreatEnabledLabel;</code></pre>\n<pre><code class=\"lang-objc\">- (IBAction)recommendedConfigButtonAction:(id)sender \n{\n}\n\n- (IBAction) onStopButtonClicked:(id)sender\n{\n}</code></pre>\n<h3 id=\"implementing-the-trackingrenderview\">Implementing the TrackingRenderView</h3>\n<p>Let&#39;s go to TrackingRenderView.h file and replace it with the following codes:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@protocol TrackingRenderViewDelegate &lt;NSObject&gt;\n\n@optional\n\n-(void) renderViewDidTouchAtPoint:(CGPoint)point;\n\n-(void) renderViewDidMoveToPoint:(CGPoint)endPoint fromPoint:(CGPoint)startPoint isFinished:(BOOL)finished;\n\n@end\n\n@interface TrackingRenderView : UIView\n\n@property(nonatomic, weak) id&lt;TrackingRenderViewDelegate&gt; delegate;\n\n@property(nonatomic, assign) CGRect trackingRect;\n\n@property(nonatomic, assign) BOOL isDotLine;\n\n@property(nonatomic, strong) NSString* text;\n\n-(void) updateRect:(CGRect)rect fillColor:(UIColor*)fillColor;\n\n@end</code></pre>\n<p>You can see a few things are happening here:</p>\n<p><strong>1.</strong> Firstly, we create two TrackingRenderViewDelegate methods, they are used to track your single touch event and drawing rectangle touch event. </p>\n<p><strong>2.</strong> We use the <code>trackingRect</code> property to store the updated tracking CGRect of moveing subject and draw it on the TrackingRenderView. The <code>isDottedLine</code> BOOL value is used for drawing dotted line. The <code>text</code> NSString property is used to store and draw text on the TrackingRenderView.</p>\n<p><strong>3.</strong> Lastly, we create the <code>updateRect:fillColor:</code> method to update the tracking rect and fill its color.</p>\n<p>Next, let&#39;s come to the TrackingRenderView.m file and replace it with the following codes:</p>\n<pre><code class=\"lang-objc\">#import &quot;TrackingRenderView.h&quot;\n#define TEXT_RECT_WIDTH (40)\n\n@interface TrackingRenderView ()\n@property(nonatomic, strong) UIColor* fillColor;\n@property(nonatomic, assign) CGPoint startPoint;\n@property(nonatomic, assign) CGPoint endPoint;\n@property(nonatomic, assign) BOOL isMoved;\n@end\n\n@implementation TrackingRenderView\n#pragma mark - UIResponder Methods\n\n- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event\n{\n    self.isMoved = NO;\n    self.startPoint = [[touches anyObject] locationInView:self];\n}\n\n- (void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event\n{\n    self.isMoved = YES;\n    self.endPoint = [[touches anyObject] locationInView:self];\n    if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(renderViewDidMoveToPoint:fromPoint:isFinished:)]) {\n        [self.delegate renderViewDidMoveToPoint:self.endPoint fromPoint:self.startPoint isFinished:NO];\n    }\n}\n\n- (void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event\n{\n    self.endPoint = [[touches anyObject] locationInView:self];\n    if (self.isMoved) {\n        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(renderViewDidMoveToPoint:fromPoint:isFinished:)]) {\n            [self.delegate renderViewDidMoveToPoint:self.endPoint fromPoint:self.startPoint isFinished:YES];\n        }\n    }\n    else\n    {\n        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(renderViewDidTouchAtPoint:)]) {\n            [self.delegate renderViewDidTouchAtPoint:self.startPoint];\n        }\n    }\n}\n\n- (void)touchesCancelled:(nullable NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event\n{\n    self.endPoint = [[touches anyObject] locationInView:self];\n    if (self.isMoved) {\n        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(renderViewDidMoveToPoint:fromPoint:isFinished:)]) {\n            [self.delegate renderViewDidMoveToPoint:self.endPoint fromPoint:self.startPoint isFinished:YES];\n        }\n    }\n}\n\n-(void) updateRect:(CGRect)rect fillColor:(UIColor*)fillColor\n{\n    if (CGRectEqualToRect(rect, self.trackingRect)) {\n        return;\n    }\n    self.fillColor = fillColor;\n    self.trackingRect = rect;\n    [self setNeedsDisplay];\n}\n\n-(void) setText:(NSString *)text\n{\n    if ([_text isEqualToString:text]) {\n        return;\n    }\n    _text = text;\n    [self setNeedsDisplay];\n}\n\n-(void) drawRect:(CGRect)rect\n{\n    [super drawRect:rect];\n    if (CGRectEqualToRect(self.trackingRect, CGRectNull)) {\n        return;\n    }\n\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    UIColor* strokeColor = [UIColor grayColor];\n    CGContextSetStrokeColorWithColor(context, strokeColor.CGColor);\n    UIColor* fillColor = self.fillColor;\n    CGContextSetFillColorWithColor(context, fillColor.CGColor); //Fill Color\n    CGContextSetLineWidth(context, 1.8); //Width of line\n\n    if (self.isDottedLine) {\n        CGFloat lenghts[] = {10, 10};\n        CGContextSetLineDash(context, 0, lenghts, 2);\n    }\n    CGContextAddRect(context, self.trackingRect);\n    CGContextDrawPath(context, kCGPathFillStroke);\n    if (self.text) {\n        CGFloat origin_x = self.trackingRect.origin.x + 0.5*self.trackingRect.size.width - 0.5* TEXT_RECT_WIDTH;\n        CGFloat origin_y = self.trackingRect.origin.y + 0.5*self.trackingRect.size.height - 0.5* TEXT_RECT_WIDTH;\n        CGRect textRect = CGRectMake(origin_x , origin_y, TEXT_RECT_WIDTH, TEXT_RECT_WIDTH);\n        NSMutableParagraphStyle* paragraphStyle = [[NSParagraphStyle defaultParagraphStyle] mutableCopy];\n        paragraphStyle.lineBreakMode = NSLineBreakByCharWrapping;\n        paragraphStyle.alignment = NSTextAlignmentCenter;\n        UIFont* font = [UIFont boldSystemFontOfSize:35];\n        NSDictionary* dic = @{NSFontAttributeName:font,NSParagraphStyleAttributeName:paragraphStyle,NSForegroundColorAttributeName:[UIColor whiteColor]};\n        [self.text drawInRect:textRect withAttributes:dic];\n    }\n}\n@end</code></pre>\n<p>Here, we implement the four event-handling methods for touches to track user&#39;s multi touch and invoke the related TrackingRenderViewDelegate methods. Also, we implement the <code>-(void)drawRect:(CGRect)rect</code> method to draw the tracking rectangle, dotted line and text on the TrackingRenderView.</p>\n<h3 id=\"implementing-the-activetrackviewcontroller\">Implementing the ActiveTrackViewController</h3>\n<h4 id=\"showing-live-video-stream\">Showing Live Video Stream</h4>\n<p>   In order to show the live video stream of Phantom 4&#39;s camera on the app, let&#39;s come to ActiveTrackViewController.m file and implement its class extension part firstly. Import the following headers and implement the protocols of <code>DJICameraDelegate</code>, <code>DJIMissionManagerDelegate</code> and <code>TrackingRenderViewDelegate</code>:</p>\n<pre><code class=\"lang-objc\">#import &quot;ActiveTrackViewController.h&quot;\n#import &quot;TrackingRenderView.h&quot;\n#import &quot;DemoUtility.h&quot;\n#import &quot;StatusViewController.h&quot;\n\n@interface ActiveTrackViewController () &lt;DJICameraDelegate, DJIMissionManagerDelegate, TrackingRenderViewDelegate&gt;\n\n@end</code></pre>\n<p>  Next, we should invoke the <code>start</code> instance method of VideoPreviewer, set its view as <code>fpvView</code> property object and set its video stream decoder in the <code>viewWillAppear</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [[VideoPreviewer instance] setDecoderWithProduct:[DJISDKManager product] andDecoderType:VideoPreviewerDecoderTypeSoftwareDecoder];\n    [[VideoPreviewer instance] setView:self.fpvView];\n\n    [DJIMissionManager sharedInstance].delegate = self;  \n    DJICamera* camera = [DemoUtility fetchCamera];\n    if (camera) {\n        camera.delegate = self;\n    }\n\n    [[VideoPreviewer instance] start];\n}</code></pre>\n<p>Remember to invoke the <code>unSetView</code> method of VideoPreviewer and set its view to nil in the <code>viewWillDisappear</code> method to remove the previous glView:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [[VideoPreviewer instance] unSetView];\n    [[VideoPreviewer instance] setView:nil];\n}</code></pre>\n<p>Lastly, we should set DJICamera&#39;s delegate as ActiveTrackViewController in the <code>viewWillAppear</code> method and implement the following method to show the live video stream on the <code>fpvView</code>:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJICameraDelegate Method\n-(void) camera:(DJICamera*)camera didReceiveVideoData:(uint8_t*)videoBuffer length:(size_t)length\n{\n    uint8_t* pBuffer = (uint8_t*)malloc(length);\n    memcpy(pBuffer, videoBuffer, length);\n    [[VideoPreviewer instance] push:pBuffer length:(int)length];\n}</code></pre>\n<h4 id=\"setup-activetrack-mission\">Setup ActiveTrack Mission</h4>\n<h5 id=\"prepare-and-start-the-mission\">Prepare and Start the Mission</h5>\n<p>  <strong>1.</strong> The Phantom 4&#39;s ActiveTrack Mission can track both moving subjects and humans.</p>\n<ul>\n<li><p>Track Moving Subjects</p>\n<p>For moving subjests, you need to provide a CGRect struct of tracking rectangle to the DJIActiveTrackMission object&#39;s <code>rect</code> property.</p>\n</li>\n</ul>\n<pre><code class=\"lang-objc\">       DJIActiveTrackMission* mission = [[DJIActiveTrackMission alloc] init];\n       mission.rect = CGRectMake(10, 20, 50, 100);</code></pre>\n<ul>\n<li><p>Track Humans</p>\n<p>For humans, you can either provide a CGRect struct of tracking rectangle or a CGRect stuct with just CGPoint. Like you can tap on the human on your iPhone&#39;s screen.</p>\n</li>\n</ul>\n<pre><code class=\"lang-objc\">       DJIActiveTrackMission* mission = [[DJIActiveTrackMission alloc] init];\n       mission.rect = CGRectMake(10, 20, 0, 0);</code></pre>\n<p><strong>2.</strong> Now, let&#39;s set the TrackingRenderView&#39;s delegate as ActiveTrackViewController in the <code>viewDidLoad</code> method and implement the delegate methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];    \n    self.renderView.delegate = self;\n}</code></pre>\n<pre><code class=\"lang-objc\">#pragma mark TrackingRenderView Delegate Methods\n-(void) renderViewDidTouchAtPoint:(CGPoint)point\n{\n    if (self.isTrackingMissionRunning &amp;&amp; !self.isNeedConfirm) {\n        return;\n    }\n\n    if (self.isNeedConfirm) {\n        NSLog(@&quot;TrackingRect:{%0.1f, %0.1f, %0.1f, %0.1f} Point:{%0.1f, %0.1f}&quot;, self.currentTrackingRect.origin.x, self.currentTrackingRect.origin.y, self.currentTrackingRect.size.width, self.currentTrackingRect.size.height, point.x, point.y);\n        CGRect largeRect = CGRectInset(self.currentTrackingRect, -10, -10);\n        if (CGRectContainsPoint(largeRect, point)) {\n            [DJIActiveTrackMission acceptConfirmationWithCompletion:^(NSError * _Nullable error) {\n                ShowResult(@&quot;Confirm Tracking:%@&quot;, error.localizedDescription);\n            }];\n        }\n        else\n        {\n            [DJIActiveTrackMission rejectConfirmationWithCompletion:^(NSError * _Nullable error) {\n                ShowResult(@&quot;Cancel Tracking:%@&quot;, error.localizedDescription);\n            }];\n        }\n    }\n    else\n    {\n        weakSelf(target);\n        point = [DemoUtility pointToStreamSpace:point withView:self.renderView];\n        DJIActiveTrackMission* mission = [[DJIActiveTrackMission alloc] init];\n        mission.rect = CGRectMake(point.x, point.y, 0, 0);\n        [[DJIMissionManager sharedInstance] prepareMission:mission withProgress:nil withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                ShowResult(@&quot;Prepare Mission Error:%@&quot;, error.localizedDescription);\n                if (error) {\n                    weakReturn(target);\n                    target.renderView.isDottedLine = NO;\n                    [target.renderView updateRect:CGRectNull fillColor:nil];\n                }\n            }\n            else\n            {\n                [[DJIMissionManager sharedInstance] startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n                    ShowResult(@&quot;Start Mission:%@&quot;, error.localizedDescription);\n                    if (error) {\n                        weakReturn(target);\n                        target.renderView.isDottedLine = NO;\n                        [target.renderView updateRect:CGRectNull fillColor:nil];\n                    }\n                }];\n            }\n        }];\n    }\n}\n\n-(void) renderViewDidMoveToPoint:(CGPoint)endPoint fromPoint:(CGPoint)startPoint isFinished:(BOOL)finished\n{\n    if (self.isTrackingMissionRunning) {\n        return;\n    }\n\n    self.renderView.isDottedLine = YES;\n    self.renderView.text = nil;\n    CGRect rect = [DemoUtility rectWithPoint:startPoint andPoint:endPoint];\n    [self.renderView updateRect:rect fillColor:[[UIColor greenColor] colorWithAlphaComponent:0.5]];\n    if (finished) {\n        CGRect rect = [DemoUtility rectWithPoint:startPoint andPoint:endPoint];\n        [self startMissionWithRect:rect];\n    }\n}</code></pre>\n<p>  The <code>renderViewDidTouchAtPoint:</code> delegate method get invoked when you do single touch on the screen, there are two situations for it:</p>\n<ul>\n<li><p>If you draw a tracking rectangle on a moving subject, and the vision system need to confirm it, you can touch the rectangle and invoke the <code>acceptConfirmationWithCompletion:</code> method of the DJIActiveTrackMission class, if you want to reject the confirmation, you can touch outside the rectangle, and invoke the <code>rejectConfirmationWithCompletion:</code> method. </p>\n</li>\n<li><p>If you want to track a human, you can touch the human on the screen. By doing that, you will get a CGPoint from the delegate method and invoke the DemoUtility&#39;s <code>pointToStreamSpace:withView:</code> method to transform the touch CGPoint to a Video Stream Coordinate CGPoint object. Then pass it to the <code>rect</code> property of DJIActiveTrackMission and invoke the following method of DJIMissionManager to prepare the ActiveTrack mission:</p>\n</li>\n</ul>\n<pre><code class=\"lang-objc\">- (void)prepareMission:(DJIMission *_Nonnull)mission withProgress:(DJIMissionProgressHandler)preparationProgress withCompletion:(DJICompletionBlock)completion;</code></pre>\n<p>  Once the mission finish the preparation, you can invoke the following method to start the ActiveTrack mission:</p>\n<pre><code class=\"lang-objc\">- (void)startMissionExecutionWithCompletion:(DJICompletionBlock)completion;</code></pre>\n<p>   Moreover, the <code>renderViewDidMoveToPoint:fromPoint:isFinished:</code> delegate method get invoked when user try to draw a rectangle on the screen to track moving subject. You can get the startPoint and endPoint from the delegate method and invoke the DemoUtility&#39;s <code>rectWithPoint:andPoint:</code> method to convert them to a CGRect object. When you finish drawing the rectangle, invoke the <code>startMissionWithRect:</code> method to start the mission.  </p>\n<p><strong>3.</strong> Let&#39;s implement the <code>startMissionWithRect:</code> method here:</p>\n<pre><code class=\"lang-objc\">-(void) startMissionWithRect:(CGRect)rect\n{\n    CGRect normalizedRect = [DemoUtility rectToStreamSpace:rect withView:self.renderView];\n    weakSelf(target);\n    NSLog(@&quot;Start Mission:{%f, %f, %f, %f}&quot;, normalizedRect.origin.x, normalizedRect.origin.y, normalizedRect.size.width, normalizedRect.size.height);\n    DJIActiveTrackMission* trackMission = [[DJIActiveTrackMission alloc] init];\n    trackMission.rect = normalizedRect;\n    trackMission.isRetreatEnabled = self.isRetreatEnabled;\n    [[DJIMissionManager sharedInstance] prepareMission:trackMission withProgress:nil withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            weakReturn(target);\n            target.renderView.isDottedLine = NO;\n            [target.renderView updateRect:CGRectNull fillColor:nil];\n            target.isTrackingMissionRunning = NO;\n            ShowResult(@&quot;Prepare Error:%@&quot;, error.localizedDescription);\n        }\n        else\n        {\n            [[DJIMissionManager sharedInstance] startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n                ShowResult(@&quot;Start Mission:%@&quot;, error.localizedDescription);\n                if (error) {\n                    weakReturn(target);\n                    target.renderView.isDottedLine = NO;\n                    [target.renderView updateRect:CGRectNull fillColor:nil];\n                    target.isTrackingMissionRunning = NO;\n                }\n            }];\n        }\n    }];\n}</code></pre>\n<p>In the code above, we firstly invoke the <code>rectToStreamSpace:withView:</code> method of DemoUtility to transform the drawing rectangle to a Video Stream coordinate rectangle, call it <code>normalizedRect</code>. Then create the DJIActiveTrackMission instance object and pass the <code>normalizedRect</code> to its <code>rect</code> property. Also, you can set the <code>isRetreatEnabled</code> variable to enable the retreat feature. Here is the details of the retreat feature:</p>\n<pre><code class=\"lang-objc\">/**\n *  YES if the aircraft can retreat (fly backwards) when the target comes toward it. If no, the aircraft will not retreat and instead rotate the gimbal pitch down to track the target as it goes underneath. If the target goes beyond the gimbal&#39;s pitch stop, the target will be lost and the mission will stop. Default is NO.\n */\n@property(nonatomic, assign) BOOL isRetreatEnabled;</code></pre>\n<p>Moreover, invoke the <code>preparMission:withProgress:withCompletion:</code> and <code>startMissionExecutionWithCompletion:</code> methods of DJIMissionManager to start the ActiveTrack Mission.</p>\n<p>Finally, we can invoke the <code>setRecommendedConfigurationWithCompletion:</code> method of DJIActiveTrackMission in the <code>viewWillAppear:</code> method to set the recommended camera and gimbal configuration that optimizes performance for the ActiveTrack Mission in most environments:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n\n    [[VideoPreviewer instance] setDecoderWithProduct:[DJISDKManager product] andDecoderType:VideoPreviewerDecoderTypeSoftwareDecoder];\n    [[VideoPreviewer instance] setView:self.fpvView];\n    [DJIMissionManager sharedInstance].delegate = self;\n    DJICamera* camera = [DemoUtility fetchCamera];\n    if (camera) {\n        camera.delegate = self;\n    }\n    [DJIActiveTrackMission setRecommendedConfigurationWithCompletion:^(NSError * _Nullable error) { \n        if(error){\n                ShowResult(@&quot;Set Recommended Camera Settings:%@&quot;, error.localizedDescription);\n        }\n    }];\n}</code></pre>\n<h5 id=\"djimissionmanagerdelegate-method\">DJIMissionManagerDelegate Method</h5>\n<p>   During the ActiveTrack mission execution, we can use the DJIMissionManagerDelegate methods to update the tracking rectangle on the screen and get the status info of the mission. Let&#39;s implement them as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJIMissionManagerDelegate Methods\n- (void)missionManager:(DJIMissionManager *_Nonnull)manager didFinishMissionExecution:(NSError *_Nullable)error\n{\n    [self.renderView updateRect:CGRectNull fillColor:nil];\n    self.stopButton.hidden = YES;\n    self.isTrackingMissionRunning = NO;\n}\n\n- (void)missionManager:(DJIMissionManager *_Nonnull)manager missionProgressStatus:(DJIMissionProgressStatus *_Nonnull)missionProgress\n{\n    if ([missionProgress isKindOfClass:[DJIActiveTrackMissionStatus class]]) {\n        self.isTrackingMissionRunning = YES;\n        self.stopButton.hidden = NO;\n        DJIActiveTrackMissionStatus* status = (DJIActiveTrackMissionStatus*)missionProgress;\n        CGRect rect = [DemoUtility rectFromStreamSpace:status.trackingRect withView:self.renderView];\n        self.currentTrackingRect = rect;\n        if (status.executionState == DJIActiveTrackMissionExecutionStateWaitingForConfirmation) {\n            NSLog(@&quot;Mission Need Confirm...&quot;);\n            self.renderView.text = @&quot;?&quot;;\n            if (!self.isNeedConfirm) {\n                self.isNeedConfirm = YES;\n            }\n        }\n        else if (status.executionState == DJIActiveTrackMissionExecutionStateTargetLost)\n        {\n            NSLog(@&quot;Mission Target Lost...&quot;);\n            self.renderView.isDottedLine = NO;\n            self.renderView.text = nil;\n            self.isNeedConfirm = NO;\n            [self.renderView updateRect:CGRectNull fillColor:nil];\n        }\n        else if (status.executionState == DJIActiveTrackMissionExecutionStateTracking ||\n                 status.executionState == DJIActiveTrackMissionExecutionStateTrackingWithLowConfidence)\n        {\n            self.renderView.isDottedLine = NO;\n            self.renderView.text = nil;\n            self.isNeedConfirm = NO;\n            [self.renderView updateRect:rect fillColor:[[UIColor greenColor] colorWithAlphaComponent:0.5]];\n            NSLog(@&quot;Mission Tracking...&quot;);\n        }\n        else if (status.executionState == DJIActiveTrackMissionExecutionStateCannotContinue)\n        {\n            NSLog(@&quot;Mission Waiting...&quot;);\n            self.renderView.isDottedLine = NO;\n            self.renderView.text = nil;\n            self.isNeedConfirm = NO;\n            [self.renderView updateRect:rect fillColor:[[UIColor redColor] colorWithAlphaComponent:0.5]];\n        }\n\n        [self.logString appendFormat:@&quot;Execution State:%@\\n&quot;, [DemoUtility stringFromTrackingExecutionState:status.executionState]];\n        [self.logString appendFormat:@&quot;trackingRect:{%f, %f, %f, %f}\\n&quot;, status.trackingRect.origin.x, status.trackingRect.origin.y, status.trackingRect.size.width, status.trackingRect.size.height];\n        [self.logString appendFormat:@&quot;Error:%@&quot;, status.error.localizedDescription];\n\n    }\n}</code></pre>\n<p>   In the first delegate method, we invoke the <code>updateRect:fillColor:</code> method of TrackingRenderView to reset the rectangle drawing and reset the related properties.</p>\n<p>   In the second delegate method, we firstly check if the DJIMissionProgressStatus is <code>DJIActiveTrackMissionStatus</code> class. Then we do the <code>executionState</code> checking from the <code>DJIActiveTrackMissionStatus</code> object. There are several executionState as shown below:</p>\n<pre><code class=\"lang-objc\">/**\n *  Current ActiveTrack Mission execution state.\n */\ntypedef NS_ENUM(NSInteger, DJIActiveTrackMissionExecutionState)\n{\n    /**\n     *  The ActiveTrack Mission is tracking a target.\n     */\n    DJIActiveTrackMissionExecutionStateTracking,\n    /**\n     *  The ActiveTrack Mission is tracking a target with low confidence. This is only an indication that either the aircraft will soon ask for confirmation that the target is correct, or may loose tracking the target entirely if confidence doesn&#39;t improve.\n     */\n    DJIActiveTrackMissionExecutionStateTrackingWithLowConfidence,\n    /**\n     * At the start of a mission, when a mission is resumed or anytime the aircraft looses sufficient confidence the target it is tracking, the aircraft will ask for confirmation that it is tracking the correct object. The trackingRect in DJIActiveTrackMissionStatus can be used to see what object the aircraft is tracking. In this state, the aircraft will hover in place, but continue to track the target. The methods `acceptConfirmationWithCompletion:` or `rejectConfirmationWithCompletion` can be used to to confirm or reject the tracking rectangle.\n     */\n    DJIActiveTrackMissionExecutionStateWaitingForConfirmation,\n    /**\n     *  Used when tracking cannot continue for reasons other than low confidence. User returned error to see more details.\n     */\n    DJIActiveTrackMissionExecutionStateCannotContinue,\n    /**\n     *  The tracking target lost.\n     */\n    DJIActiveTrackMissionExecutionStateTargetLost,\n    /**\n     *  Unknown state.\n     */\n    DJIActiveTrackMissionExecutionStateUnknown,\n};</code></pre>\n<p>   In each checking, we update the TrackingRenderView&#39;s rectangle drawing and fill color. Also, we update the <code>logString</code> property with DJIActiveTrackMissionStatus object.</p>\n<h5 id=\"stop-mission\">Stop Mission</h5>\n<p>Finally, let&#39;s implement the <code>stopMissionExecutionWithCompletion:</code> method of DJIMissionManager to stop the ActiveTrack Mission. Replace the method content of the <code>onStopButtonClicked:</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction) onStopButtonClicked:(id)sender\n{\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] stopMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        ShowResult(@&quot;Stop Mission:%@&quot;, error.localizedDescription);\n        if (!error) {\n            weakReturn(target);\n            target.stopButton.hidden = YES;\n            [target.renderView updateRect:CGRectNull fillColor:nil];\n            target.isTrackingMissionRunning = NO;\n        }\n    }];\n}</code></pre>\n<p>In order to show the status log, let&#39;s implement the <code>prepareForSegue:sender:</code> method to pass the <code>logString</code> property to its <code>statusText</code> property.</p>\n<pre><code class=\"lang-objc\">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    StatusViewController *statusVC = (StatusViewController *)segue.destinationViewController;\n    [statusVC setStatusText:self.logString];\n}</code></pre>\n<p>For more implementation details of the ActiveTrackViewController.m file, please check the Github source code. </p>\n<p>Now let&#39;s build and run the project, if everything goes well, you should be able to use the ActiveTrack mission of Phantom 4 now. </p>\n<blockquote>\n<p><strong>Important</strong>: Remember to switch the remote controller to <strong>P</strong> mode before you test the ActiveTrack mission.</p>\n</blockquote>\n<p>Here is a gif animation for you to get a better understanding of using the ActiveTrack mission:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/ActiveTrackMissionGif.gif\" alt=\"ActiveTrackMissionGif\"></p>\n<p>   In the animation, you can see there is a person standing there, you can touch the screen to draw a green rectangle on him. Then the rectangle will turn red and a question mark will appear to ask you for confirmation. You can tap on the rectangle to confirm it or tap outside to reject it. </p>\n<p>   After the confirmation, the ActiveTrack mission starts. The person walks around and the green rectangle will follow it to track its movement. This means that Phantom 4 is now tracking you automatically!</p>\n<p>   Press the <strong>X</strong> button if you want to stop the ActiveTrack mission. By the way, you can try to switch on the &quot;RetreatEnabled&quot; switcher on the bottom right corner of the screen to enable the <strong>Retreat</strong> feature. Once you go towards the Phantom 4, it will fly backwards.</p>\n<h3 id=\"using-the-dji-assistant-2-for-mission-testing\">Using the DJI Assistant 2 for Mission Testing</h3>\n<p>Since most of our developers don&#39;t have a perfect testing environment, like a big indoor space, wide backyard, etc. If we need to go outdoors and bring our latop to debug and test our application everytime, it&#39;s time consuming and not efficient. </p>\n<p>Luckily, we have a new DJI Assistant 2 (Includes the 3D Simulator) for you to test the mission easily on your Mac. The simulator creates a virtual 3D environment from flight data transmitted to the Mac.</p>\n<p>You can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-Assistant-2-Simulator\">Using DJI Assistant 2 Simulator</a> for its basic usage.</p>\n<p>Now you can connect your iPhone which is running the demo application to the remote controller, and start to test the <strong>TapFly</strong> and <strong>ActiveTrack</strong> missions on the simulator of the DJI Assistant 2.  </p>\n<p>Moreover, another good news is you can use the DJI Bridge App to test the application directly on the iOS Simulator! If you are not familiar with the DJI Bridge App, please check the <a href=\"./BridgeAppDemo.html\">DJI Bridge App Tutorial</a>. </p>\n<p>   Let&#39;s go to RootViewController.m file and add a Macro on top of the class extension part as shown below:</p>\n<pre><code class=\"lang-objc\">#define ENTER_DEBUG_MODE 1\n\n@interface RootViewController ()&lt;DJISDKManagerDelegate&gt;\n@property (weak, nonatomic) IBOutlet UIButton *tapFlyMissionButton;\n@property (weak, nonatomic) IBOutlet UIButton *activeTrackMissionButton;\n@end</code></pre>\n<p>  Then modify the DJISDKManagerDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    if (error) {\n        NSString* message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n        [self.tapFlyMissionButton setEnabled:NO];\n        [self.activeTrackMissionButton setEnabled:NO];\n        [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n#if ENTER_DEBUG_MODE\n        [DJISDKManager enterDebugModeWithDebugId:@&quot;192.168.1.106&quot;];\n#else\n        [DJISDKManager startConnectionToProduct];\n#endif\n    }\n}</code></pre>\n<p>  Now, make sure your Mac and your iPhone(Running DJI Bridge App) connect to the same WiFi network, pass the <strong>Debug ID</strong> on the DJI Bridge App to the <code>enterDebugModeWithDebugId:</code> method. Build and run the app on the iOS Simulator with Xcode, control the remote controller to take off the aircraft in the simulator. You can start to test the <strong>TapFly</strong> and <strong>ActiveTrack</strong> mission directly on your Mac now! </p>\n<p>  Here are two screenshots of testing the two missions on your Mac:</p>\n<ul>\n<li>TapFly Mission Test</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyTest.png\" alt=\"setupButton\"></p>\n<ul>\n<li>AciveTrack Mission Test</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/iOS/Phantom4Missions/activeTrackTest.png\" alt=\"setupButton\"></p>\n<h3 id=\"summary\">Summary</h3>\n<p>  Congratulations! You&#39;ve finished the demo project and implement the two cool <strong>TapFly</strong> and <strong>ActiveTrack</strong> missions using DJI Mobile SDK. It&#39;s easy and straightforward. You&#39;ve learned how to use the DJITapFlyMission, DJIActiveTrackMission and DJIMissionManager to implement the features. Also, you know how to setup and use the simulator of DJI Assistant 2 and DJI Bridge App to test the two missions on your Mac easily. </p>\n<p>  But, In order to make a cool <strong>TapFly</strong> and <strong>ActiveTrack</strong> mission application, you still have a long way to go. You can add more necessary features like showing the battery percentage, GPS signal quality, add a checklist like DJI Go app to check the aircraft status before flying, etc. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a TapFly and ActiveTrack Missions Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-Phantom4Missions"},"locale":"cn"}{"content":"<!-- toc -->\n\n<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to build a cool panorama app. With the help of the powerful DJI Mobile SDK and OpenCV libraries, it is actually easy. You will use the Waypoint feature of Intelligent Navigation and Virtual Stick to rotate the aircraft to take photos. The panorama application can be broken down into several simple tasks, all you need to do is to follow the tutorial step by step. Let&#39;s get started!</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/workFlow.png\" alt=\"several tasks\"></p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"implementing-the-fpv\">Implementing the FPV</h2>\n<p><strong>1.</strong> Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;PanoDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s import the <strong>DJISDK.framework</strong> and <strong>VideoPreviewer</strong> to the project. If you are not familiar with the process of importing DJI SDK and VideoPreviewer, please check these two tutorials: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> and <a href=\"./index.html#Implementing-the-First-Person-View\">Creating a Camera Application</a>, for details.</p>\n<p><strong>2.</strong> In the <strong>Main.storyboard</strong>, add a new View Controller called <strong>CaptureViewController</strong> and set it as the root View Controller for the new View Controller you just added in <strong>Main.storyboard</strong>:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/CaptureViewController.png\" alt=\"CaptureViewController\"></p>\n<p><strong>3.</strong> Add a UIView inside the View Controller and set it as an IBOutlet called &quot;<strong>fpvPreviewView</strong>&quot; in the <strong>CaptureViewController.h</strong>:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@interface CaptureViewController : UIViewController\n@property (strong, nonatomic) IBOutlet UIView *fpvPreviewView;\n@end</code></pre>\n<p>Import the <strong>DJISDK</strong> and <strong>VideoPreviewer</strong> header files to <strong>CaptureViewController.m</strong>. Then implement two delegate protocols as shown below:</p>\n<pre><code class=\"lang-objc\">#import &quot;CaptureViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &quot;VideoPreviewer.h&quot;\n\n#define weakSelf(__TARGET__) __weak typeof(self) __TARGET__=self\n#define weakReturn(__TARGET__) if(__TARGET__==nil)return;\n\n@interface CaptureViewController ()&lt;DJICameraDelegate, DJISDKManagerDelegate&gt;{</code></pre>\n<p><strong>4</strong>. In the <strong>viewDidAppear</strong> method, set <strong>fpvPreviewView</strong> instance as a view of <strong>VideoPreviewer</strong> to show the Video Stream, then invoke the <strong>registerApp</strong> method to register the app:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n{\n    [super viewDidLoad];\n    self.title = @&quot;Panorama Demo&quot;;\n}\n\n- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n\n    [[VideoPreviewer instance] setView:self.fpvPreviewView];\n    [self registerApp];\n}\n\n- (void) registerApp {\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<p>Also, implement the DJISDKManagerDelegate methods to do initial setup after register app success. Moreover, in the <code>sdkManagerProductDidChangeFrom</code> method, let&#39;s fetch a camera object and set its delegate and its playbackManager property&#39;s delegate as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n}\n\n- (DJICamera*) fetchCamera {\n\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).camera;\n    }\n    return nil;\n}\n\n#pragma mark DJISDKManagerDelegate Method\n\n- (void)sdkManagerDidRegisterAppWithError:(NSError *)error {\n\n    NSString* message = @&quot;Register App Successfully!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else{\n        NSLog(@&quot;registerAppSuccess&quot;);\n        [DJISDKManager startConnectionToProduct];\n        [[VideoPreviewer instance] start];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n\n}\n\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    __weak DJICamera* camera = [self fetchCamera];\n    if (camera) {\n        [camera setDelegate:self];\n        [camera.playbackManager setDelegate:self];\n    }\n}</code></pre>\n<p> Furthermore, implement the <strong>DJICameraDelegate</strong> methods, as shown below:</p>\n<pre><code class=\"lang-objc\">\n#pragma mark - DJICameraDelegate Method\n-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size\n{\n    uint8_t* pBuffer = (uint8_t*)malloc(size);\n    memcpy(pBuffer, videoBuffer, size);\n    [[VideoPreviewer instance].dataQueue push:pBuffer length:(int)size];\n}\n\n- (void)camera:(DJICamera *)camera didUpdateSystemState:(DJICameraSystemState *)systemState\n{\n}</code></pre>\n<p><strong>5.</strong> Build and run the project on your mobile device, then connect your device to the aircraft. Now you can see view the camera&#39;s video stream on your device.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/viewFPVView.png\" alt=\"ffmpeg\"></p>\n<h2 id=\"rotating-with-virtual-stick\">Rotating with Virtual Stick</h2>\n<p>In order to generate a panorama, you need to take a series of photos from different angles while keeping the center of the drone still. This is easy to do with the gimbal on Inspire 1, but with the Phantom 3 you cannot control the gimbal&#39;s yaw angle using our SDK. Instead we will rotate the entire drone. Here&#39;s the instruction.</p>\n<p><strong>1.</strong> Add a <strong>Capture</strong> button in <strong>Capture View Controller</strong> in <strong>Main.storyboard</strong>. Name its <strong>IBOutlet</strong> as <strong>captureBtn</strong> respectively, and its <strong>IBAction</strong> as <strong>-(IBAction)onCaptureButtonClicked:(id)sender</strong>.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/captureButton.png\" alt=\"Capture button\"></p>\n<p><strong>2.</strong> Next, let&#39;s define the angle for each rotation and invoke the <strong>rotateDroneWithJoystick</strong> method in  <strong>-(IBAction)onCaptureButtonClicked:(id)sender</strong>:</p>\n<pre><code class=\"lang-objc\">#define PHOTO_NUMBER 8\n#define ROTATE_ANGLE 45.0</code></pre>\n<pre><code class=\"lang-objc\">-(IBAction)onCaptureButtonClicked:(id)sender {\n    [self rotateDroneWithJoystick];\n}</code></pre>\n<p>Furthermore, implement the <code>-(DJIFlightController*) fetchFlightController</code> method and configure the DJIFlightController object in the following <strong>DJISDKManagerDelegate</strong> method:</p>\n<pre><code class=\"lang-objc\">\n- (DJIFlightController*) fetchFlightController {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).flightController;\n    }\n    return nil;\n}\n\n- (void)sdkManagerProductDidChangeFrom:(DJIBaseProduct *)oldProduct to:(DJIBaseProduct *)newProduct\n{\n    DJICamera* camera = [self fetchCamera];\n    if (camera) {\n        [camera setDelegate:self];\n        [camera.playbackManager setDelegate:self];\n    }\n\n    DJIFlightController *flightController = [self fetchFlightController];\n    if (flightController) {\n        [flightController setDelegate:self];\n        [flightController setYawControlMode:DJIVirtualStickYawControlModeAngle];\n        [flightController setRollPitchCoordinateSystem:DJIVirtualStickFlightCoordinateSystemGround];\n        [flightController enableVirtualStickControlModeWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                NSLog(@&quot;Enable VirtualStickControlMode Failed&quot;);\n            }\n        }];\n    }\n}</code></pre>\n<p>As the code shown above, we configure the flightController&#39;s <strong>delegate</strong>, and <strong>yawControlMode</strong> properties. Then invoke the <code>enableVirtualStickControlModeWithCompletion</code> method to prepare for the virtual stick control.</p>\n<p><strong>3.</strong> Using the flightController virtual stick api is similar to sending commands using your remote controller. The virtual stick api can be used to directly specify the pitch, roll, yaw and throttle values of the drone and must be called with a certain frequency(Like 10 Hz) determined by the drone&#39;s flight controller, otherwise the flight controller will assume that the connection is lost, and the command may not be executed successfully. Hense, we should use a NSTimer to send virtual stick command in 10Hz as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (void)rotateDroneWithJoystick\n{\n\n   for(int i = 0;i &lt; PHOTO_NUMBER; i++){\n\n     float yawAngle = ROTATE_ANGLE*i;\n\n     if (yawAngle &gt; DJIVirtualStickYawControlMaxAngle) { //Filter the angle between -180 ~ 0, 0 ~ 180\n        yawAngle = yawAngle - 360;\n     }\n\n    NSTimer *timer =  [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(rotateDrone:) userInfo:@{@&quot;YawAngle&quot;:@(yawAngle)} repeats:YES];\n    [timer fire];\n\n    [[NSRunLoop currentRunLoop]addTimer:timer forMode:NSDefaultRunLoopMode];\n    [[NSRunLoop currentRunLoop]runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]];\n\n    [timer invalidate];\n    timer = nil;\n   }\n\n}\n\n- (void)rotateDrone:(NSTimer *)timer\n{\n    NSDictionary *dict = [timer userInfo];\n    float yawAngle = [[dict objectForKey:@&quot;YawAngle&quot;] floatValue];\n\n    DJIFlightController *flightController = [self fetchFlightController];\n\n    DJIVirtualStickFlightControlData vsFlightCtrlData;\n    vsFlightCtrlData.pitch = 0;\n    vsFlightCtrlData.roll = 0;\n    vsFlightCtrlData.verticalThrottle = 0;\n    vsFlightCtrlData.yaw = yawAngle;\n\n    [flightController sendVirtualStickFlightControlData:vsFlightCtrlData withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            NSLog(@&quot;Send FlightControl Data Failed %@&quot;, error.description);\n        }\n    }];\n\n}</code></pre>\n<p>You can set up the virtual stick flight control data by setting a <strong>DJIVirtualStickFlightControlData</strong> structure. As the code shows above, it use a for loop to control the drone to rotate 45 degrees for 8 times, each time the yawAngle will be updated, and assign its value to the corresponding yaw value of <strong>DJIVirtualStickFlightControlData</strong>:</p>\n<pre><code class=\"lang-objc\">- (void)sendVirtualStickFlightControlData:(DJIVirtualStickFlightControlData)controlData withCompletion:(DJICompletionBlock)completion;</code></pre>\n<p><strong>4.</strong> Now try to build and run the app, connect your mobile device to the remote controller, switch the flight mode to <strong>F</strong> (Function) mode, take off the drone and press the <strong>Capture</strong> button. You should see the drone rotates in 360 degrees, 45 degrees each time.</p>\n<p>Here is the gif animation example of using DJI PC Simulator to test this feature:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/virtualStickControl.gif\" alt=\"virtualStickControl\"></p>\n<p>If you are not familiar with the DJI PC Simulator, please check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-PC-Simulator\">DJI PC Simulator Tutorial</a>.</p>\n<h2 id=\"shooting-a-series-of-photos\">Shooting a Series of Photos</h2>\n<p>We can invoke the following DJICamera method to shoot photos:</p>\n<pre><code class=\"lang-objc\">- (void)startShootPhoto:(DJICameraShootPhotoMode)shootMode withCompletion:(DJICompletionBlock)block;</code></pre>\n<p>Let&#39;s implement the <strong>rotateDroneWithJoystick</strong> method as shown below to make the drone shoot photos automatically once it finish 45 degrees&#39; rotation each time:</p>\n<pre><code class=\"lang-objc\">- (void)rotateDroneWithJoystick {\n\n weakSelf(target);\n\n    DJICamera *camera = [target fetchCamera];\n    [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n        weakReturn(target);\n        if (!error) {\n          dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n\n            for(int i = 0;i &lt; PHOTO_NUMBER; i++){\n\n            float yawAngle = ROTATE_ANGLE*i;\n\n            if (yawAngle &gt; DJIVirtualStickYawControlMaxAngle) { //Filter the angle between -180 ~ 0, 0 ~ 180\n               yawAngle = yawAngle - 360;\n             }\n\n            NSTimer *timer =  [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(rotateDrone:) userInfo:@{@&quot;YawAngle&quot;:@(yawAngle)} repeats:YES];\n            [timer fire];\n\n            [[NSRunLoop currentRunLoop]addTimer:timer forMode:NSDefaultRunLoopMode];\n            [[NSRunLoop currentRunLoop]runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]];\n\n            [timer invalidate];\n            timer = nil;\n\n            [camera startShootPhoto:DJICameraShootPhotoModeSingle withCompletion:nil];\n            sleep(2);\n            }\n\n            dispatch_async(dispatch_get_main_queue(), ^{\n            [self showAlertViewWithTitle:@&quot;Capture Photos&quot; withMessage:@&quot;Capture finished&quot;];\n           });\n\n            });\n        }\n    }];\n\n}</code></pre>\n<p>Firstly, we set DJICamera&#39;s <strong>cameraMode</strong> to &quot;DJICameraModeShootPhoto&quot; in case the camera mode is set to other values before we start the 360 degrees panorama shoot photo action using virtual stick.</p>\n<p>Then we should dispatch a new asynchronous thread to execute the virtual stick rotation and shoot photo actions. We use <code>sleep(2)</code> to sleep for 2 seconds between rotating the drone and shooting photo actions here to ensure each action is executed ordered(Shoot photo action may take around 2 seconds to finish). When the for loop finished, we can show an alert view in the main thread to notify the user &quot;Capture finished&quot;.</p>\n<h2 id=\"rotating-gimbal-to-shoot-photos\">Rotating Gimbal to Shoot Photos</h2>\n<p>If you have an Inspire 1, you will benefit from being able to shoot photos without moving the drone, taking advantage of the gimbal&#39;s 360 rotation capabilities. Rotating the gimbal while keeping the drone still in the air means you will have a stable photography platform, which helps you to create a wonderful panorama. Let&#39;s take a look at the implementation.</p>\n<p><strong>1.</strong> let&#39;s implement the <code>- (DJIGimbal*) fetchGimbal</code> method to fetch the gimbal component:</p>\n<pre><code class=\"lang-objc\">- (DJIGimbal*) fetchGimbal {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).gimbal;\n    }\n    return nil;\n}</code></pre>\n<p>It is necessary to reset the gimbal&#39;s position before rotating and  shooting photos, otherwise the gimbal may reach the maximum angle of  yaw axis when rotating 360 degrees. We can call <strong>DJIGimbal</strong>&#39;s <code>resetGimbalWithCompletion</code> method to reset the gimbal&#39;s pitch, roll and yaw back to the origin values. Here is the code: </p>\n<pre><code class=\"lang-objc\">//Reset Gimbal at the beginning\n    DJIGimbal *gimbal = [self fetchGimbal];\n\n    //Reset Gimbal at the beginning\n    [gimbal resetGimbalWithCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            NSLog(@&quot;ResetGimbal Failed: %@&quot;, [NSString stringWithFormat:@&quot;%@&quot;, error.description]);\n        }\n    }];\n    sleep(3);</code></pre>\n<p><strong>2.</strong> Rotate the gimbal clockwise from the origin position to 360 degrees(45 degrees each time), then take photos between each rotation. Let&#39;s implement the <strong>rotateGimbal</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - Rotate Gimbal Methods\n- (void)rotateGimbal {\n\n    DJICamera *camera = [self fetchCamera];\n    weakSelf(target);\n    [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n        weakReturn(target);\n        if (!error) {\n            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                [target executeRotateGimbal];\n            });\n        }\n    }];\n}\n\n- (void)executeRotateGimbal\n{\n\n    DJIGimbal *gimbal = [self fetchGimbal];\n    DJICamera *camera = [self fetchCamera];\n\n    //Reset Gimbal at the beginning\n    [gimbal resetGimbalWithCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            NSLog(@&quot;ResetGimbal Failed: %@&quot;, [NSString stringWithFormat:@&quot;%@&quot;, error.description]);\n        }\n    }];\n    sleep(3);\n\n    //rotate the gimbal clockwise\n    float yawAngle = 0;\n\n    DJIGimbalAngleRotation pitchRotation = {NO, 0, DJIGimbalRotateDirectionClockwise};\n    DJIGimbalAngleRotation rollRotation = {NO, 0, DJIGimbalRotateDirectionClockwise};\n    DJIGimbalAngleRotation yawRotation = {YES, yawAngle, DJIGimbalRotateDirectionClockwise};\n\n    for(int i = 0; i &lt; PHOTO_NUMBER; i++){\n\n        [camera startShootPhoto:DJICameraShootPhotoModeSingle withCompletion:nil];\n        sleep(2);\n\n        yawAngle += ROTATE_ANGLE;\n        yawRotation.angle = yawAngle;\n        [gimbal rotateGimbalWithAngleMode:DJIGimbalAngleModeAbsoluteAngle pitch:pitchRotation roll:rollRotation yaw:yawRotation withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                NSLog(@&quot;Rotate Gimbal Failed: %@&quot;, [NSString stringWithFormat:@&quot;%@&quot;, error.description]);\n            }\n        }];\n        sleep(2);\n\n    }\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [self showAlertViewWithTitle:@&quot;Capture Photos&quot; withMessage:@&quot;Capture finished&quot;];\n    });\n\n}</code></pre>\n<p>As it&#39;s shown above, we set the DJICamera&#39;s cameraMode to <strong>DJICameraModeShootPhoto</strong>, then dispatch a new asynchronous thread to execute the <code>executeRotateGimbal</code> method. Then in the executeRotateGimbal method, reset Gimbal&#39;s position and use a for loop to shoot photo and rotate gimbal 45 degrees each time. When the for loop finished, we can show an alert view in the main thread to notify the user &quot;Capture Photos finished&quot;.</p>\n<p><strong>3.</strong> Rewrite the <strong>onCaptureButtonClicked</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(IBAction)onCaptureButtonClicked:(id)sender {\n   [self rotateGimbal];\n}</code></pre>\n<p>Build and run the app, and try the capture button function of the app without taking off the Inspire 1. You should see the gimbal of Inspire 1 rotating 360 degrees and shoot photos smoothly.</p>\n<h2 id=\"shooting-photos-with-djiwaypointmission\">Shooting Photos with DJIWaypointMission</h2>\n<p><strong>Note: Please make sure the drone&#39;s battery energy percentage is more than 30% when you use DJIWaypointMission</strong></p>\n<p>It seems a bit inconvenient and odd to use <code>sleep(2)</code> between rotating the drone and shooting photos. Shouldn&#39;t there be an easier, more efficient way to implement this? Yes, the DJIWaypointMission is designed for executing series of actions within different waypoints, which is perfect for our application!</p>\n<p><strong>1.</strong> To use the DJIWaypointMission, firstly we should implement the <strong>DJIMissionManagerDelegate</strong> and <strong>DJIFlightControllerDelegate</strong> protocol in the class extension of <strong>CaptureViewController.m</strong> as shown below:</p>\n<pre><code class=\"lang-objc\">@interface CaptureViewController ()&lt;DJICameraDelegate, DJIPlaybackDelegate, DJISDKManagerDelegate, DJIMissionManagerDelegate, DJIFlightControllerDelegate&gt;{\n\n}</code></pre>\n<p>Then declare the following properties for setting up DJIWaypointMission:</p>\n<pre><code class=\"lang-objc\">@property (strong, nonatomic) UIAlertView* prepareMissionProgressAlert;\n@property (nonatomic) bool isMissionStarted;\n@property (atomic) CLLocationCoordinate2D aircraftLocation;\n@property (atomic) double aircraftAltitude;\n@property (atomic) DJIGPSSignalStatus gpsSignalStatus;\n@property (atomic) double aircraftYaw;\n@property (nonatomic, strong) DJIMission* mission;</code></pre>\n<p>Here we create a <strong>prepareMissionProgressAlert</strong> to show the prepare mission progress message. The &quot;aircraftLocation&quot;, &quot;aircraftAltitude&quot;, &quot;gpsSignalStatus&quot; and &quot;aircraftYaw&quot; properties will be updated as the latest flight controller system status of the drone.</p>\n<p>Moreover, initialize the <strong>isMissionStarted</strong> and <strong>aircraftLocation</strong> properties in the ViewDidLoad method:</p>\n<pre><code class=\"lang-objc\">\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.title = @&quot;Panorama Demo&quot;;\n\n    self.isMissionStarted = NO;\n    self.aircraftLocation = kCLLocationCoordinate2DInvalid;\n\n}</code></pre>\n<p><strong>2.</strong> There are three delegate methods need to be implemented, the <strong>DJISDKManagerDelegate</strong>, <strong>DJIMissionManagerDelegate</strong> and <strong>DJIFlightControllerDelegate</strong> methods:</p>\n<pre><code class=\"lang-objc\">#pragma mark DJISDKManagerDelegate Methods\n- (void)sdkManagerProductDidChangeFrom:(DJIBaseProduct *)oldProduct to:(DJIBaseProduct *)newProduct\n{\n    DJICamera* camera = [self fetchCamera];\n    if (camera) {\n        [camera setDelegate:self];\n        [camera.playbackManager setDelegate:self];\n    }\n\n    [[DJIMissionManager sharedInstance] setDelegate:self];\n\n    DJIFlightController *flightController = [self fetchFlightController];\n    if (flightController) {\n        [flightController setDelegate:self];\n        [flightController setYawControlMode:DJIVirtualStickYawControlModeAngle];\n        [flightController setRollPitchCoordinateSystem:DJIVirtualStickFlightCoordinateSystemGround];\n        [flightController enableVirtualStickControlModeWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                NSLog(@&quot;Enable VirtualStickControlMode Failed&quot;);\n            }\n        }];\n    }\n}\n\n#pragma mark - DJIMissionManagerDelegate Methods\n- (void)missionManager:(DJIMissionManager *)manager didFinishMissionExecution:(NSError *)error\n{\n    if (error) {\n        [self showAlertViewWithTitle:@&quot;Mission Execution Failed&quot; withMessage:[NSString stringWithFormat:@&quot;%@&quot;, error.description]];\n    }\n    else {\n\n        if (self.isMissionStarted) {\n            [self showAlertViewWithTitle:@&quot;Intelligent Navigation&quot; withMessage:@&quot;Mission Finished&quot;];\n            self.isMissionStarted = NO;\n        }\n    }\n\n}\n\n- (void)missionManager:(DJIMissionManager *)manager missionProgressStatus:(DJIMissionProgressStatus *)missionProgress\n{\n\n}\n\n#pragma mark - DJIFlightControllerDelegate Method\n- (void)flightController:(DJIFlightController *)fc didUpdateSystemState:(DJIFlightControllerCurrentState *)state\n{\n    self.aircraftLocation = CLLocationCoordinate2DMake(state.aircraftLocation.latitude, state.aircraftLocation.longitude);\n    self.gpsSignalStatus = state.gpsSignalStatus;\n    self.aircraftAltitude = state.altitude;\n    self.aircraftYaw = state.attitude.yaw;\n\n}</code></pre>\n<p>As the code shown above, we set the delegate of DJIMissionManager in the &quot;DJISDKManagerDelegate&quot; method, then notify the user the mission execution result by showing alert views in the &quot;DJIMissionManagerDelegate&quot; method. Lastly, we update the <strong>aircraftLocation</strong>, <strong>gpsSignalStatus</strong>, <strong>aircraftAltitude</strong> and <strong>aircraftYaw</strong> property values in the DJIFlightControllerDelegate method.</p>\n<p><strong>3.</strong> Now let&#39;s initialize the DJIWaypointMission by creating a new method named <code>initializeMission</code> as shown below:</p>\n<pre><code class=\"lang-objc\">- (DJIMission*) initializeMission {\n\n    DJIWaypointMission *mission = [[DJIWaypointMission alloc] init];\n    mission.maxFlightSpeed = 15.0;\n    mission.autoFlightSpeed = 4.0;\n\n    DJIWaypoint *wp1 = [[DJIWaypoint alloc] initWithCoordinate:self.aircraftLocation];\n    wp1.altitude = self.aircraftAltitude;\n\n    for (int i = 0; i &lt; PHOTO_NUMBER ; i++) {\n\n        double rotateAngle = ROTATE_ANGLE*i;\n\n        if (rotateAngle &gt; 180) { //Filter the angle between -180 ~ 0, 0 ~ 180\n            rotateAngle = rotateAngle - 360;\n        }\n\n        DJIWaypointAction *action1 = [[DJIWaypointAction alloc] initWithActionType:DJIWaypointActionTypeShootPhoto param:0];\n        DJIWaypointAction *action2 = [[DJIWaypointAction alloc] initWithActionType:DJIWaypointActionTypeRotateAircraft param:rotateAngle];\n        [wp1 addAction:action1];\n        [wp1 addAction:action2];\n    }\n\n    DJIWaypoint *wp2 = [[DJIWaypoint alloc] initWithCoordinate:self.aircraftLocation];\n    wp2.altitude = self.aircraftAltitude + 1;\n\n    [mission addWaypoint:wp1];\n    [mission addWaypoint:wp2];\n    [mission setFinishedAction:DJIWaypointMissionFinishedNoAction]; //Change the default action of Go Home to None\n\n    return mission;\n}</code></pre>\n<p>In the code above, we create a DJIWaypointMission object firstly and set its <strong>maxFlightSpeed</strong> and <strong>autoFlightSpeed</strong> properties. Then we use a for loop to create 16 <strong>DJIWaypointAction</strong> objects. Each step in the for loop, we create two <strong>DJIWaypointActions</strong>. Set the first waypoint action type as <strong>DJIWaypointActionTypeShootPhoto</strong>, the other waypoint action type as <strong>DJIWaypointActionTypeRotateAircraft</strong> with the appropriate rotate angles. Then add these two waypoint actions to the first DJIWaypoint.</p>\n<p>DJIWaypointMission requires at least two waypoints, and each waypoint must have different physical location, so we create another DJIWaypoint and control the drone to fly upwards 1 meter and take no action. </p>\n<p>Finally, add the two DJIWaypoint to the DJIWaypointMision object and set its <strong>finishAction</strong> type as DJIWaypointMissionFinishedNoAction. If we don&#39;t set the <strong>finishAction</strong> property, when the drone finish the waypoint mission, it will execute the go home command automatically instead of staying at the original position.</p>\n<p><strong>4.</strong> Once it&#39;s finished, let&#39;s create two new methods called <code>- (void)prepareWaypointMission</code> and <code>- (void)startWaypointMission</code> to upload waypoint mission to the drone and start the mission. Here is the code:</p>\n<pre><code class=\"lang-objc\">- (void)prepareWaypointMission {\n\n    self.mission = [self initializeMission];\n    if (self.mission == nil) return; //Initialization failed\n\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] prepareMission:self.mission withProgress:^(float progress) {\n\n        NSString *message = [NSString stringWithFormat:@&quot;Mission Upload %.2f%%&quot; ,progress*100];\n\n        if (target.prepareMissionProgressAlert == nil) {\n            target.prepareMissionProgressAlert = [[UIAlertView alloc] initWithTitle:nil message:message delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];\n            [target.prepareMissionProgressAlert show];\n        }\n        else {\n            [target.prepareMissionProgressAlert setMessage:message];\n        }\n\n        if (progress*100 == 100) {\n            [target.prepareMissionProgressAlert dismissWithClickedButtonIndex:0 animated:YES];\n            target.prepareMissionProgressAlert = nil;\n        }\n\n    } withCompletion:^(NSError * _Nullable error) {\n\n        if (target.prepareMissionProgressAlert) {\n            [target.prepareMissionProgressAlert dismissWithClickedButtonIndex:0 animated:YES];\n            target.prepareMissionProgressAlert = nil;\n        }\n\n        if (error) {\n            [target showAlertViewWithTitle:@&quot;Prepare Mission Failed&quot; withMessage:[NSString stringWithFormat:@&quot;%@&quot;, error.description]];\n        }else\n        {\n            [target showAlertViewWithTitle:@&quot;Prepare Mission Finished&quot; withMessage:nil];\n        }\n\n        [target startWaypointMission];\n    }];\n}\n\n- (void)startWaypointMission {\n\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        weakReturn(target);\n        target.isMissionStarted = YES;\n        if (error) {\n            NSLog(@&quot;Start Mission Failed: %@&quot;, error.description);\n        }\n    }];\n\n}</code></pre>\n<p>In the <code>prepareWaypointMission</code> method, we firstly call the <code>initializeMission</code> method and assign the DJIMission object to the <strong>mission</strong> property. Then we invoke DJIMissionManager&#39;s following method to upload waypoint mission task to the drone:</p>\n<pre><code class=\"lang-objc\">- (void)prepareMission:(DJIMission *_Nonnull)mission withProgress:(DJIMissionProgressHandler)preparationProgress withCompletion:(DJICompletionBlock)completion;</code></pre>\n<p>We can check the mission preparation progress and update the <strong>prepareMissionProgressAlert</strong> message contents in the <strong>preparationProgress</strong> block. Furthermore, notify users the prepare mission result by showing an alertView and call the <code>startWaypointMission</code> method in the completion block to start the waypoint mission.</p>\n<p>In the <code>startWaypointMission</code> method     we call the following method of DJIMissionManager to start the waypoint mission:</p>\n<pre><code class=\"lang-objc\">- (void)startMissionExecutionWithCompletion:(DJICompletionBlock)completion;</code></pre>\n<p><strong>5.</strong> Since the DJIWaypointMission relies on good GPS signal quality, you should check the GPS signal status before executing the waypoint mission. At the same time, you should also check whether the <strong>aircraftLocation</strong> is valid. Let&#39;s implement the  <strong>rotateDroneWithWaypointMission</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)rotateDroneWithWaypointMission {\n    if (CLLocationCoordinate2DIsValid(self.aircraftLocation) &amp;&amp; self.gpsSignalStatus != DJIGPSSignalStatusLevel0 &amp;&amp; self.gpsSignalStatus != DJIGPSSignalStatusLevel1) {\n        [self prepareWaypointMission];\n    }\n    else {\n        [self showAlertViewWithTitle:@&quot;GPS signal weak&quot; withMessage:@&quot;Rotate drone failed&quot;];\n    }\n}</code></pre>\n<p><strong>6.</strong> Lastly, replace the <strong>onCaptureButtonClicked</strong> method with the followings:</p>\n<pre><code class=\"lang-objc\">-(IBAction)onCaptureButtonClicked:(id)sender {\n    [self rotateDroneWithWaypointMission];\n}</code></pre>\n<p>Build and run your code, take off the drone and fly to an appropriate altitude and press the capture button to execute the waypoint mission. You should see the drone start to rotate and shoot photos automatically. </p>\n<p>So far we have three methods to rotate the drone and shoot photos, we had better create an alert view to ask the user to choose which method to control your drone.</p>\n<p>Let&#39;s update the <strong>onCaptureButtonClicked</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(IBAction)onCaptureButtonClicked:(id)sender {\n\n    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&quot;Select Mode&quot; message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;Cancel&quot; otherButtonTitles:@&quot;Rotate Aircraft&quot;, @&quot;Rotate Gimbal&quot;, @&quot;WaypointMission&quot;, nil];\n    alertView.tag = kCaptureModeAlertTag;\n    [alertView show];\n}</code></pre>\n<p>Here we use <strong>kCaptureModeAlertTag</strong> to distinguish the three types of alert views:</p>\n<pre><code class=\"lang-objc\">#define kCaptureModeAlertTag 100</code></pre>\n<p>Implement the <strong>UIAlertView</strong> delegate method:</p>\n<pre><code class=\"lang-objc\">#pragma mark UIAlertView Delegate Methods\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    if (alertView.tag == kCaptureModeAlertTag) {\n        if(buttonIndex == 1){\n            [self rotateDroneWithJoystick];\n        }else if(buttonIndex == 2){\n            [self rotateGimbal];\n        }else if (buttonIndex == 3){\n            [self rotateDroneWithWaypointMission];\n        }\n    }\n}</code></pre>\n<p>Now the user can choose their preferred methods to take 360 degrees Panorama photos.</p>\n<h2 id=\"selecting-and-downloading-photos\">Selecting and Downloading Photos</h2>\n<p>In order to download multiple photos, you should go through a series of playback modes. Firstly, enter <strong>Playback</strong> mode, then enter <strong>Multiple Preview</strong> mode, furthermore enter <strong>Multiple Edit</strong> mode, lastly, select all the photos you just capture, and download them.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/downloadPhotos.png\" alt=\"diagram.png\"></p>\n<p><strong>1.</strong> Add a new <strong>Download</strong> button in the CaptureViewController of Main.storyboard, then create its IBOutlet named <strong>downloadBtn</strong> and IBAction as <strong>-(IBAction)onDownloadButtonClicked:(id)sender</strong> in the CaptureViewController.h file as shown below: </p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/photoDownloadButton.png\" alt=\"Download Button\"></p>\n<p><strong>2.</strong> Add a new variable <strong>selectedPhotoNumber</strong> to record the number of photos selected in the class extension of &quot;CaptureViewController.m&quot; file:</p>\n<pre><code class=\"lang-objc\">   @property (nonatomic, assign) __block int selectedPhotoNumber;</code></pre>\n<p>Now, let&#39;s implement the <strong>DJIPlaybackDelegate</strong> method as shown below to update the selected photo num: </p>\n<pre><code class=\"lang-objc\">- (void)playbackManager:(DJIPlaybackManager *)playbackManager didUpdatePlaybackState:(DJICameraPlaybackState *)playbackState\n{\n    self.selectedPhotoNumber = playbackState.numberOfSelectedFiles;\n}</code></pre>\n<p><strong>3.</strong> Implement the <strong>onDownloadButtonClicked</strong> method to enter playback mode:  </p>\n<pre><code class=\"lang-objc\">-(IBAction)onDownloadButtonClicked:(id)sender {\n\n    weakSelf(target);\n    DJICamera *camera = [self fetchCamera];\n    [camera setCameraMode:DJICameraModePlayback withCompletion:^(NSError * _Nullable error) {\n        weakReturn(target);\n\n        if (error) {\n            NSLog(@&quot;Enter playback mode failed: %@&quot;, error.description);\n        }else {\n            [target selectPhotos];\n        }\n    }];\n}</code></pre>\n<p>Here we set the DJICamera&#39;s cameraMode as <strong>DJICameraModePlayback</strong>. If it succeeded, we can call the <strong>selectPhotos</strong> method to start selecting photos.</p>\n<p><strong>4</strong>. Once it&#39;s done, let&#39;s implement the <code>selectPhotos</code> method to select the latest photos you capture for the panorama:</p>\n<pre><code class=\"lang-objc\">-(void)selectPhotos {\n\n    weakSelf(target);\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n\n        weakReturn(target);\n        DJICamera *camera = [target fetchCamera];\n        [camera.playbackManager enterMultiplePreviewMode];\n        sleep(1);\n        [camera.playbackManager enterMultipleEditMode];\n        sleep(1);\n\n        while (self.selectedPhotoNumber != PHOTO_NUMBER) {\n            [camera.playbackManager selectAllFilesInPage];\n            sleep(1);\n\n            if(self.selectedPhotoNumber &gt; PHOTO_NUMBER){\n                for(int unselectFileIndex = 0; self.selectedPhotoNumber != PHOTO_NUMBER; unselectFileIndex++){\n                    [camera.playbackManager toggleFileSelectionAtIndex:unselectFileIndex];\n                    sleep(1);\n                }\n                break;\n            }\n            else if(self.selectedPhotoNumber &lt; PHOTO_NUMBER) {\n                [camera.playbackManager goToPreviousMultiplePreviewPage];\n                sleep(1);\n            }\n        }\n        [target downloadPhotos];\n    });\n}</code></pre>\n<p>It takes a few seconds for the drone to respond to commands, so you should dispatch an asynchronous thread to send commands and call the <code>sleep()</code> between them in case you freeze the UI interaction of in main thread. As shown in the flow diagram above, you should enter <strong>MultiplePreviewMode</strong> and <strong>MultipleEditMode</strong> before selecting photos. But how do we select the lastest 8 photos for panorama? Here is our strategy:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/selectPhotoDiagram.png\" alt=\"select photo diagram\"></p>\n<p>The default selected photo is the last photo. Select all photos in the last page. If you have selected more photos than you need, you can deselect the extra photos starting from the index 0. If you do not have enough photos selected, just go to previous page and repeat the procedure again until you select the exact number of photos you needed. Here is the gif animation for selecting photos:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/selectMultiPhotos.gif\" alt=\"multiple select photo\"></p>\n<p><strong>5.</strong> After you select all the photos, invoke the <strong>downloadPhotos</strong> method to download all the photos you need.</p>\n<p>Create and implement the <code>-(void)downloadPhotos</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void)downloadPhotos {\n    __block int finishedFileCount = 0;\n    __block NSMutableData* downloadedFileData;\n    __block long totalFileSize;\n    __block NSString* targetFileName;\n\n    self.imageArray=[NSMutableArray new];\n\n    DJICamera *camera = [self fetchCamera];\n    if (camera == nil) return;\n\n    weakSelf(target);\n    [camera.playbackManager downloadSelectedFilesWithPreparation:^(NSString * _Nullable fileName, DJIDownloadFileType fileType, NSUInteger fileSize, BOOL * _Nonnull skip) {\n\n        totalFileSize=(long)fileSize;\n        downloadedFileData=[NSMutableData new];\n        targetFileName=fileName;\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n            weakReturn(target);\n            [target showDownloadProgressAlert];\n            [target.downloadProgressAlert setTitle:[NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, finishedFileCount + 1, PHOTO_NUMBER]];\n            [target.downloadProgressAlert setMessage:[NSString stringWithFormat:@&quot;FileName:%@ FileSize:%0.1fKB Downloaded:0.0KB&quot;, fileName, fileSize / 1024.0]];\n        });\n\n    } process:^(NSData * _Nullable data, NSError * _Nullable error) {\n\n        weakReturn(target);\n        [downloadedFileData appendData:data];\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [target.downloadProgressAlert setMessage:[NSString stringWithFormat:@&quot;FileName:%@ FileSize:%0.1fKB Downloaded:%0.1fKB&quot;, targetFileName, totalFileSize / 1024.0, downloadedFileData.length / 1024.0]];\n        });\n\n    } fileCompletion:^{\n        weakReturn(target);\n        finishedFileCount++;\n\n        UIImage *downloadPhoto=[UIImage imageWithData:downloadedFileData];\n        [target.imageArray addObject:downloadPhoto];\n\n    } overallCompletion:^(NSError * _Nullable error) {\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [target.downloadProgressAlert dismissWithClickedButtonIndex:0 animated:YES];\n            target.downloadProgressAlert = nil;\n\n            if (error) {\n                UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:@&quot;Download failed&quot; message:[NSString stringWithFormat:@&quot;%@&quot;, error.description] delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [alertView show];\n            }else\n            {\n                UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, finishedFileCount, PHOTO_NUMBER] message:@&quot;download finished&quot; delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [alertView show];\n            }\n\n            DJICamera *camera = [target fetchCamera];\n            [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:@&quot;Set CameraMode to ShootPhoto Failed&quot; message:[NSString stringWithFormat:@&quot;%@&quot;, error.description] delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                    [alertView show];\n\n                }\n            }];\n\n        });\n\n    }];\n}\n\n-(void) showDownloadProgressAlert {\n    if (self.downloadProgressAlert == nil) {\n        self.downloadProgressAlert = [[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;&quot; delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];\n        [self.downloadProgressAlert show];\n    }\n}</code></pre>\n<p>In the code above, we firstly add several variables and init the <strong>imageArray</strong> object. Then call the DJIPlaybackManager&#39;s following method to download the selected photos:</p>\n<pre><code class=\"lang-objc\">- (void)downloadSelectedFilesWithPreparation:(DJIFileDownloadPreparingBlock)prepareBlock process:(DJIFileDownloadingBlock)dataBlock fileCompletion:(DJIFileDownloadCompletionBlock)fileCompletionBlock overallCompletion:(DJICompletionBlock)overallCompletionBlock;</code></pre>\n<p>In the <strong>DJIFileDownloadPreparingBlock</strong>, we initialize the &quot;downloadedFileData&quot; and dispatch a main thread to show alertView to user for notifying the current download progress. Then we append the &quot;downloadedFileData&quot; in the <strong>DJIFileDownloadingBlock</strong> and update the &quot;downloadProgressAlert&quot; message with the current process in the main thread. </p>\n<p>In the <strong>DJIFileDownloadCompletionBlock</strong>, we increase the &quot;finishedFileCount&quot; property value and save the downloaded photo image in the <strong>imageArray</strong>. in a local album in the <strong>DJIFileDownloadCompletionBlock</strong>. </p>\n<p>Finally, let&#39;s notify the users the download result by showing UIAlertView in the main thread in the <strong>overallCompletionBlock</strong>. Moreover, set the camera mode back to &quot;DJICameraModeShootPhoto&quot; after the photodownload finished.</p>\n<p>Build and run the code, press the <strong>capture</strong> button to rotate the drone and shoot photos, after it finished, press <strong>download</strong> button to download all the photos shoot. If everything goes well, you should see the following animation:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/downloadMultiPhotos.gif\" alt=\"downloadPhotos\"></p>\n<h2 id=\"using-opencv-to-create-panorama\">Using OpenCV to Create Panorama</h2>\n<h3 id=\"creating-stitching-view\">Creating Stitching View</h3>\n<p>Since we don&#39;t need the FPV view when stitching photos, we can create a new view controller called <strong>StitchingViewController</strong> to generate and present the panorama photo.</p>\n<p><strong>1.</strong> Embed the <strong>CaptureViewController</strong> in a navigation controller and add a new button called <strong>Stitch</strong> on it.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/navigationController.png\" alt=\"EmbedNavigationController\"></p>\n<p>Then create a new view controller called <strong>StitchingViewController</strong> and add it in the <strong>Main.storyboard</strong> correspondingly. Then add a button named <strong>Stitch</strong> in the <strong>CaptureViewController</strong> and set its action segue to show the <strong>StitchingViewController</strong>. Set the segue&#39;s identifier to <strong>Stitching</strong>.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/stitchSegue.png\" alt=\"embed navigation controller\"></p>\n<p><strong>2.</strong> Let&#39;s add an instance variable <strong>imageArray</strong> in the <strong>StitchingViewController.h</strong>:</p>\n<pre><code class=\"lang-objc\">@property (strong,nonatomic) NSMutableArray * imageArray;</code></pre>\n<p>Then add the <strong>prepareForSegue</strong> method to pass the downloaded photos to the next view controller in <strong>CaptureViewController.m</strong>:</p>\n<pre><code class=\"lang-objc\">//Pass the downloaded photos to StitchingViewController\n-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    if([segue.identifier isEqualToString:@&quot;Stitching&quot;]) {\n        [segue.destinationViewController setValue:self.imageArray forKey:@&quot;imageArray&quot;];\n    }\n}</code></pre>\n<p><strong>3.</strong> Add an activity indicator in the <strong>StitchingViewController</strong> in Main.storyboard, set its behavior to <strong>Hides When Stopped</strong>, then set its outlet as <strong>activityIndicator</strong> in the StitchingViewController.h file:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/activityIndicator.png\" alt=\"activity indicator\"></p>\n<h3 id=\"importing-opencv\">Importing OpenCV</h3>\n<p><strong>1.</strong> Build the <strong>opencv2.framework</strong> for iOS. You can check for more details in <a href=\"http://docs.opencv.org/doc/tutorials/introduction/ios_install/ios_install.html\" target=\"_blank\">Installation OpenCV in iOS</a>. If you have any difficulties compiling the source code, you can just download this project and copy the <strong>opencv2.framework</strong>. </p>\n<p><strong>2.</strong> Select the project target, go to <strong>Build Phases</strong> -&gt; <strong>Link Binary With Libraries</strong>. Click the &quot;+&quot; button at the bottom and add  the<strong>AssetsLibrary.framework</strong> library to your project. Click the &quot;+&quot; button, click on <strong>Add others</strong> and navigate to the directory where <strong>opencv2.framework</strong> is located and click open.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/opencvFramework.png\" alt=\"OpenCv framework\"></p>\n<p><strong>3.</strong> Add a PCH file into your project. Go to <strong>Build Setting</strong> -&gt; <strong>Precompile Prefix Header</strong>, set its value <strong>YES</strong>, and set <strong>Prefix Header</strong> to be the location of the PCH file.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/prefixHeader.png\" alt=\"Prefix header\"></p>\n<p>Open your PCH file and add the following lines of code:</p>\n<pre><code class=\"lang-objc\">#ifdef __cplusplus\n    #import &lt;opencv2/opencv.hpp&gt;\n#endif\n\n#ifdef __OBJC__\n    #import &lt;UIKit/UIKit.h&gt;\n    #import &lt;Foundation/Foundation.h&gt;\n#endif</code></pre>\n<p><strong>4.</strong> Build your project. If nothing wrong happens, you may successfully setup the OpenCV library in your Xcode project.</p>\n<h3 id=\"stitching-photos\">Stitching Photos</h3>\n<p><strong>1.</strong> In the OpenCV, all the image processing operations are usually carried out on the Mat structure. However, on iOS, to render an image on screen it has to be an instance of the UIImage class. In order to convert an OpenCV Mat to an UIImage we can use the Core Graphics framework in iOS. Find more details, please check <a href=\"http://docs.opencv.org/doc/tutorials/ios/image_manipulation/image_manipulation.html#opencviosimagemanipulation\" target=\"_blank\">Convert UIImage to cv::Mat</a>. You can define a <strong>OpenCVConversion</strong> class to deal with the conversion issue.</p>\n<p>Let&#39;s implement the <strong>OpenCVConversion.h</strong> file shown as below:</p>\n<pre><code class=\"lang-objc\">@interface OpenCVConversion : NSObject\n\n+ (cv::Mat)cvMatFromUIImage:(UIImage *)image;//convert UIImage to cv::Mat\n+ (cv::Mat)cvMatGrayFromUIImage:(UIImage *)image;//convert UIImage to gray cv::Mat\n+ (cv::Mat)cvMat3FromUIImage:(UIImage *)image; //convert UIImage to cv::Mat without alpha channel\n+(UIImage *)UIImageFromCVMat:(cv::Mat)cvMat;//convert cv::Mat to UIImage\n\n@end</code></pre>\n<p>Next, implement the <strong>OpenCVConversion.mm</strong> file:</p>\n<pre><code class=\"lang-objc\">#import &quot;OpenCVConversion.h&quot;\n\n@implementation OpenCVConversion\n\n+ (cv::Mat)cvMatFromUIImage:(UIImage *)image {\n    CGColorSpaceRef colorSpace = CGImageGetColorSpace(image.CGImage);\n    CGFloat cols = image.size.width;\n    CGFloat rows = image.size.height;\n\n    cv::Mat cvMat(rows, cols, CV_8UC4); // 8 bits per component, 4 channels (color channels + alpha)\n\n    CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,                 // Pointer to  data\n                                                    cols,                       // Width of bitmap\n                                                    rows,                       // Height of bitmap\n                                                    8,                          // Bits per component\n                                                    cvMat.step[0],              // Bytes per row\n                                                    colorSpace,                 // Colorspace\n                                                    kCGImageAlphaNoneSkipLast |\n                                                    kCGBitmapByteOrderDefault); // Bitmap info flags\n\n    CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), image.CGImage);\n    CGContextRelease(contextRef);\n\n    return cvMat;\n}\n\n\n+ (cv::Mat)cvMatGrayFromUIImage:(UIImage *)image {\n    CGColorSpaceRef colorSpace = CGImageGetColorSpace(image.CGImage);\n    CGFloat cols = image.size.width;\n    CGFloat rows = image.size.height;\n\n    cv::Mat cvMat(rows, cols, CV_8UC1); // 8 bits per component, 1 channels\n\n    CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,                 // Pointer to data\n                                                    cols,                       // Width of bitmap\n                                                    rows,                       // Height of bitmap\n                                                    8,                          // Bits per component\n                                                    cvMat.step[0],              // Bytes per row\n                                                    colorSpace,                 // Colorspace\n                                                    kCGImageAlphaNoneSkipLast |\n                                                    kCGBitmapByteOrderDefault); // Bitmap info flags\n\n    CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), image.CGImage);\n    CGContextRelease(contextRef);\n\n    return cvMat;\n}\n\n+ (cv::Mat)cvMat3FromUIImage:(UIImage *)image {\n    cv::Mat result=[self cvMatFromUIImage:image];\n    cv::cvtColor(result, result, CV_RGBA2RGB);\n    return result;\n}\n\n+(UIImage *)UIImageFromCVMat:(cv::Mat)cvMat\n{\n    NSData *data = [NSData dataWithBytes:cvMat.data length:cvMat.elemSize()*cvMat.total()];\n    CGColorSpaceRef colorSpace;\n\n    if (cvMat.elemSize() == 1) {\n        colorSpace = CGColorSpaceCreateDeviceGray();\n    } else {\n        colorSpace = CGColorSpaceCreateDeviceRGB();\n    }\n\n    CGDataProviderRef provider = CGDataProviderCreateWithCFData((__bridge CFDataRef)data);\n\n    // Creating CGImage from cv::Mat\n    CGImageRef imageRef = CGImageCreate(cvMat.cols,                                 //width\n                                        cvMat.rows,                                 //height\n                                        8,                                          //bits per component\n                                        8 * cvMat.elemSize(),                       //bits per pixel\n                                        cvMat.step[0],                            //bytesPerRow\n                                        colorSpace,                                 //colorspace\n                                        kCGImageAlphaNone|kCGBitmapByteOrderDefault,// bitmap info\n                                        provider,                                   //CGDataProviderRef\n                                        NULL,                                       //decode\n                                        false,                                      //should interpolate\n                                        kCGRenderingIntentDefault                   //intent\n                                        );\n\n\n    // Getting UIImage from CGImage\n    UIImage *finalImage = [UIImage imageWithCGImage:imageRef];\n    CGImageRelease(imageRef);\n    CGDataProviderRelease(provider);\n    CGColorSpaceRelease(colorSpace);\n\n    return finalImage;\n}\n\n@end</code></pre>\n<p><strong>2.</strong> In order to call OpenCV functions in objective-C, you should create a header file and a C++ file as the stitching wrapper file. Input a vector of cv::Mat and the reference of cv::Mat. This function will tell whether the stitching is successful and return the stitched cv::Mat through a <strong>result</strong> reference. The code in <strong>StitchingWrapper.h</strong> is shown below.</p>\n<pre><code class=\"lang-cpp\">#ifndef Stitching_Header_h\n#define Stitching_Header_h\n\nbool stitch (const cv::vector &lt;cv::Mat&gt; &amp; images, cv::Mat &amp;result);\n\n#endif</code></pre>\n<p>Then implement the <strong>StitchingWrapper.cpp</strong> file with the following code:</p>\n<pre><code class=\"lang-cpp\">#include &quot;stitchingWrapper.h&quot;\n#include &quot;opencv2/highgui/highgui.hpp&quot;\n#include &quot;opencv2/stitching/stitcher.hpp&quot;\n\nusing namespace cv;\n\nbool stitch (const cv::vector &lt;cv::Mat&gt; &amp; images, cv::Mat &amp;result) {\n    Stitcher stitcher = Stitcher::createDefault(false);\n    Stitcher::Status status = stitcher.stitch(images, result);\n\n    if (status != Stitcher::OK) {\n        return false;\n    }\n    return true;\n}</code></pre>\n<p><strong>3.</strong> Now you can customize your stitching method in the new class called <strong>Stitching</strong>. Here is the class method declaration for stitching implemented in the <strong>Stitching.h</strong> file. Users can input an image array and a reference of cv::Mat, it will return the stitching result:</p>\n<pre><code class=\"lang-objc\">#import &lt;Foundation/Foundation.h&gt;\n\n@interface Stitching : NSObject\n+ (bool) stitchImageWithArray:(NSMutableArray*)imageArray andResult:(cv::Mat &amp;) result;\n@end</code></pre>\n<p>Here is the code for <strong>Stitching.mm</strong> file: </p>\n<pre><code class=\"lang-objc\">#import &quot;Stitching.h&quot;\n#import &quot;StitchingWrapper.h&quot;\n#import &quot;OpenCVConversion.h&quot;\n\n#define COMPRESS_RATIO 0.2\n\n@implementation Stitching\n\n+ (bool) stitchImageWithArray:(NSMutableArray*)imageArray andResult:(cv::Mat &amp;) result {\n\n    NSMutableArray* compressedImageArray =[NSMutableArray new];\n    for(UIImage *rawImage in imageArray){\n        UIImage *compressedImage=[self compressedToRatio:rawImage ratio:COMPRESS_RATIO];\n        [compressedImageArray addObject:compressedImage];\n    }\n    [imageArray removeAllObjects];\n\n\n    if ([compressedImageArray count]==0) {\n        NSLog (@&quot;imageArray is empty&quot;);\n        return false;\n    }\n    cv::vector&lt;cv::Mat&gt; matArray;\n\n    for (id image in compressedImageArray) {\n        if ([image isKindOfClass: [UIImage class]]) {\n            cv::Mat matImage = [OpenCVConversion cvMat3FromUIImage:image];\n            matArray.push_back(matImage);\n        }\n    }\n    NSLog(@&quot;Stitching...&quot;);\n    if(!stitch(matArray, result)){\n        return false;\n    }\n\n    return true;\n}\n\n+ (UIImage *)compressedToRatio:(UIImage *)img ratio:(float)ratio {\n    CGSize compressedSize;\n    compressedSize.width=img.size.width*ratio;\n    compressedSize.height=img.size.height*ratio;\n    UIGraphicsBeginImageContext(compressedSize);\n    [img drawInRect:CGRectMake(0, 0, compressedSize.width, compressedSize.height)];\n    UIImage* compressedImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return compressedImage;\n}\n\n@end</code></pre>\n<p>Because of the limited computing ability and memory storage of mobile devices, we don&#39;t suggest you to process full resolution images, because the stitching process may take a long time or cause run out of memory problem. We call the <code>+ (UIImage *)compressedToRatio:(UIImage *)img ratio:(float)ratio</code> method to reduce the photo width and height by a ratio of <strong>COMPRESS_RATIO</strong>, which reduces the resolution dramatically(COMPRESS_RATIO<sup>2</sup>). Then we convert the images to cv::Mat and push them into cv::vector. Finally, we can call the <strong>stitch</strong> function in the <strong>StitchingWrapper.cpp</strong> file to do the actual stitching work.</p>\n<p><strong>4.</strong> Now add an <strong>UIImageView</strong> in the <strong>Main.storyboard</strong>, set its <strong>Mode</strong> to <strong>Aspect Fit</strong> and create its outlet, called <strong>imageView</strong> in the &quot;StitchingViewController.h&quot; file.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/set_imageView.png\" alt=\"Image View\"></p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/imageView.png\" alt=\"Image View\"></p>\n<p>Replace the <strong>StitchingViewController.mm</strong> with the following code:</p>\n<pre><code class=\"lang-objc\">#import &quot;StitchingViewController.h&quot;\n#import &quot;Stitching.h&quot;\n#import &quot;OpenCVConversion.h&quot;\n\n@implementation StitchingViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    __weak StitchingViewController *weakSelf = self;\n\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        cv::Mat stitchMat;\n        if(![Stitching stitchImageWithArray:_imageArray andResult:stitchMat]) {\n            [weakSelf showAlertWithTitle:@&quot;Stitching&quot; andMessage:@&quot;Stitching failed&quot;];\n            return;\n        }\n\n        cv::Mat cropedMat;\n        if(![Cropping cropWithMat:stitchMat andResult:cropedMat]){\n            [weakSelf showAlertWithTitle:@&quot;Cropping&quot; andMessage:@&quot;cropping failed&quot;];\n            return;\n        }\n\n        UIImage *stitchImage=[OpenCVConversion UIImageFromCVMat:cropedMat];\n        UIImageWriteToSavedPhotosAlbum(stitchImage, nil, nil, nil);\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n\n            [weakSelf showAlertWithTitle:@&quot;Save Photo Success&quot; andMessage:@&quot;Panoroma photo is saved to Album, please check it!&quot;];\n            _imageView.image=stitchImage;\n        });\n    });\n\n}\n\n//show the alert view in main thread\n-(void) showAlertWithTitle:(NSString *)title andMessage:(NSString *)message {\n    dispatch_async(dispatch_get_main_queue(), ^{\n        UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:title message:message delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n        [alertView show];\n        [_activityIndicator stopAnimating];\n    });\n}</code></pre>\n<p>Now download the latest photos and click the <strong>Stitch</strong> button. After a minute you should be able to see an amazing panorama photo!</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/uncropped_pano.PNG\" alt=\"uncropped pano\"></p>\n<h3 id=\"cropping-the-panorama\">Cropping the Panorama</h3>\n<p>So far, you have made an excellent panorama, but the uneven black edges are pretty annoying. Let&#39;s improve our code and make your panorama perfect!</p>\n<p><strong>1.</strong> Let&#39;s create a new class called <strong>Cropping</strong> to deal with the black edges problem.</p>\n<p>Replace the code in <strong>Cropping.h</strong> file with the followings:</p>\n<pre><code class=\"lang-objc\">#import &lt;Foundation/Foundation.h&gt;\n\n@interface Cropping : NSObject\n+ (bool) cropWithMat: (const cv::Mat &amp;)src andResult:(cv::Mat &amp;)dest;\n@end</code></pre>\n<p>Then implementation the <code>+ (bool) cropWithMat: (const cv::Mat &amp;)src andResult:(cv::Mat *)dest</code> method in the <strong>Cropping.mm</strong> file like this:</p>\n<pre><code class=\"lang-objc\">#import &quot;Cropping.h&quot;\n\n#define CUTBLACKTHREASHOLD 0.05\n\n@implementation Cropping\n\n+ (bool) cropWithMat: (const cv::Mat &amp;)src andResult: (cv::Mat &amp;)dest {\n    cv::Mat gray;\n    cvtColor(src, gray, CV_BGR2GRAY);//convert src to gray\n\n    cv::Rect roiRect(0,0,gray.cols,gray.rows); // start as the source image - ROI is the complete SRC-Image\n\n    while (1) {\n        NSLog(@&quot;%d %d %d %d&quot;,roiRect.x,roiRect.y,roiRect.width,roiRect.height);\n\n        bool isTopNotBlack=checkBlackRow(gray, roiRect.y,roiRect);\n        bool isLeftNotBlack=checkBlackColumn(gray, roiRect.x,roiRect);\n        bool isBottomNotBlack=checkBlackRow(gray, roiRect.y+roiRect.height,roiRect);\n        bool isRightNotBlack=checkBlackColumn(gray, roiRect.x+roiRect.width,roiRect);\n\n        if(isTopNotBlack &amp;&amp; isLeftNotBlack &amp;&amp; isBottomNotBlack &amp;&amp; isRightNotBlack) {\n            cv::Mat imageReference = src(roiRect);\n            imageReference.copyTo(dest);\n            return true;\n        }\n        // If not, scale ROI down\n        // if x is increased, width has to be decreased to compensate\n        if(!isLeftNotBlack) {\n            roiRect.x++;\n            roiRect.width--;\n        }\n        // same is valid for y\n        if(!isTopNotBlack) {\n            roiRect.y++;\n            roiRect.height--;\n        }\n        if(!isRightNotBlack) {\n            roiRect.width--;\n        }\n        if(!isBottomNotBlack) {\n            roiRect.height--;\n        }\n        if(roiRect.width &lt;= 0 || roiRect.height &lt;= 0) {\n            return false;\n        }\n    }\n}\n\nbool checkBlackRow(const cv::Mat&amp; roi, int y, const cv::Rect &amp;rect) {\n    int zeroCount = 0;\n    for(int x=rect.x; x&lt;rect.width; x++) {\n        if(roi.at&lt;uchar&gt;(y, x) == 0) {\n            zeroCount++;\n        }\n    }\n    if((zeroCount/(float)roi.cols)&gt;CUTBLACKTHREASHOLD) {\n        return false;\n    }\n    return true;\n}\n\n\nbool checkBlackColumn(const cv::Mat&amp; roi, int x,const cv::Rect &amp;rect) {\n    int zeroCount = 0;\n    for(int y=rect.y; y&lt;rect.height; y++) {\n        if(roi.at&lt;uchar&gt;(y, x) == 0) {\n            zeroCount++;\n        }\n    }\n    if((zeroCount/(float)roi.rows)&gt;CUTBLACKTHREASHOLD) {\n        return false;\n    }\n    return true;\n}\n\n@end</code></pre>\n<p>The <code>bool checkBlackRow(const cv::Mat&amp; roi, int y)</code> function checks whether the number of black pixels in row y is more than <strong>CUTBLACKTHREASHOLD</strong>, while the <code>bool checkBlackColumn(const cv::Mat&amp; roi, int x)</code> method checks the same for column x. These two functions indicate whether the row or column is part of a black edge that we don&#39;t need. </p>\n<p><code>+ (bool) cropWithMat: (const cv::Mat &amp;)src andResult: (cv::Mat &amp;)dest</code> converts the src cv::Mat to gray cv::Mat and initializes the <strong>roiRect</strong> to be the frame of <strong>src</strong> cv::Mat. Then it checks each of the four edges of the <strong>src</strong> Mat in <strong>roiRect</strong>. If an edge is black, it narrows the corresponding edge of <strong>roiRect</strong> and repeats checking and narrowing until none of the edges are black. Finally, it will copy the pixels in the <strong>roiRect</strong> of <strong>src</strong> to <strong>dest</strong> to complete the cropping process shown below.</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/cropping.png\" alt=\"cropping\"></p>\n<p><strong>2.</strong> Rewrite the <strong>Stitching.mm</strong> file as shown below: </p>\n<pre><code class=\"lang-objc\">#import &quot;StitchingViewController.h&quot;\n#import &quot;Stitching.h&quot;\n#import &quot;OpenCVConversion.h&quot;\n#import &quot;Cropping.h&quot;\n\n@implementation StitchingViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    __weak StitchingViewController *weakSelf = self;\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        cv::Mat stitchMat;\n        if(![Stitching stitchImageWithArray:_imageArray andResult:stitchMat]) {\n            [weakSelf showAlertWithTitle:@&quot;Stitching&quot; andMessage:@&quot;Stitching failed&quot;];\n            return;\n        }\n\n        cv::Mat cropedMat;\n        if(![Cropping cropWithMat:stitchMat andResult:cropedMat]){\n            [weakSelf showAlertWithTitle:@&quot;Cropping&quot; andMessage:@&quot;cropping failed&quot;];\n            return;\n        }\n\n        UIImage *stitchImage=[OpenCVConversion UIImageFromCVMat:cropedMat];\n        UIImageWriteToSavedPhotosAlbum(stitchImage, nil, nil, nil);\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n\n            [weakSelf showAlertWithTitle:@&quot;Save Photo Success&quot; andMessage:@&quot;Panoroma photo is saved to Album, please check it!&quot;];\n            _imageView.image=stitchImage;\n        });\n    });\n\n}\n\n//show the alert view in main thread\n-(void) showAlertWithTitle:(NSString *)title andMessage:(NSString *)message {\n    dispatch_async(dispatch_get_main_queue(), ^{\n        UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:title message:message delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n        [alertView show];\n        [_activityIndicator stopAnimating];\n    });\n}\n\n@end</code></pre>\n<p>Build and run the app, shoot a series of photos, download them and stitch them together. You should generat a perfect panorama now! Here is an example:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PanoramaDemo/cropped_pano.PNG\" alt=\"cropped pano\"></p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you’ve learned how to use the Virtual Stick feature and the WaypointMission feature of Intelligent Navigation to control the aircraft to rotate and take photos. Also, you learn how to rotate the gimbal to take panorama photos too. Lastly, we used the OpenCV&#39;s features to stitch and crop photos into a cool panorama!</p>\n<p>   Congratulations! Now that you&#39;ve finished the demo project, you can use what you have learnt to start building your own panorama applications. You can improve the project by showing the aircraft&#39;s flight mode type, current GPS satellite count, vertical and horizontal flight speed and the flight altitude, etc. In order to make an amazing Panorama Application, you still have a long way to go! Good luck, and hope you enjoyed this tutorial!</p>","meta":{"title":"Creating a Panorama Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-PanoramaDemo"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use DJI Mobile SDK to access the media resources in the SD card of the aircraft&#39;s camera. By the end of this tutorial you will have an app that you can use to preview photos, play videos, download or delete files and so on.</p>\n<p>In order for our app to manage photos and videos, however, it must first be able to take and record them. Fortunately, in our previous tutorial <a href=\"./index.html\">Creating a Camera Application</a> we show you how to implement <strong>Capture</strong> and <strong>Record</strong> functions. Make sure you have read through that tutorial first before embarking on this one.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial. </p>\n<p>Let&#39;s get started!</p>\n<h2 id=\"previewing-photos-and-videos\">Previewing Photos and Videos</h2>\n<h3 id=\"1-importing-the-sdk\">1. Importing the SDK</h3>\n<p>Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;PlaybackDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s import the <strong>DJISDK.framework</strong> to it. If you are not familiar with the process of importing and activating DJI SDK, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h3 id=\"2-importing-the-videopreviewer\">2. Importing the VideoPreviewer</h3>\n<p> <strong>1</strong>. We use the <strong>FFMPEG</strong> decoding library (found at <a href=\"http://ffmpeg.org\" target=\"_blank\"><a href=\"http://ffmpeg.org\">http://ffmpeg.org</a></a>) to do software video decoding here. For the hardware video decoding, we provide a <strong>DJIH264Decoder</strong> decoding library. You can find them in the <strong>VideoPreviewer</strong> folder, which you can download it from <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/VideoPreviewer\" target=\"_blank\">DJI iOS SDK Github Repository</a>. Download and copy the entire <strong>VideoPreviewer</strong> folder to your Xcode project&#39;s &quot;Frameworks&quot; folder and then add the &quot;VideoPreviewer.xcodeproj&quot; to the &quot;Frameworks&quot; folder in Xcode project navigator, as shown below:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/projectNavigator.png\" alt=\"projectNavigator\"></p>\n<blockquote>\n<p>Note: Please Make sure the <strong>VideoPreviewer</strong> folder and <strong>DJISDK.framework</strong> are in the same <strong>Frameworks</strong> folder like this:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/frameworksFolderStruct.png\" alt=\"frameworksFolderStruct\"></p>\n</blockquote>\n<p> <strong>2</strong>. Next, let&#39;s select the &quot;PlayBackDemo&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; button to add the &quot;VideoPreviewer.framework&quot; as shown below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/addFrameworks.png\" alt=\"addFrameworks\">\n  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/addFrameworksResult.png\" alt=\"addFrameworksResult\"></p>\n<h3 id=\"3-switching-playback-modes\">3. Switching Playback Modes</h3>\n<p>  Now, let&#39;s delete the <strong>ViewController.h</strong> and <strong>ViewController.m</strong> files, which were created by Xcode when you created the project. Then, create a viewController named &quot;DJIRootViewController&quot; and set it as the <strong>Root View Controller</strong> in Main.storyboard. This demo and its code was written to be used with the iPad, so we&#39;ll have to adjust the User Interface of <strong>Main.storyboard</strong> accordingly. We&#39;ll change the <strong>Root View Controller</strong>&#39;s frame. Let&#39;s set its size to <strong>Freeform</strong> under the <strong>Size</strong> dropdown in the <strong>Simulated Metrics</strong> section. In the view section, change the width to <strong>1024</strong> and height to <strong>768</strong>. Take a look at the changes made below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/freeform.png\" alt=\"freeform\">\n  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/changeSize.png\" alt=\"changeSize\"></p>\n<p>Then, add a UIView inside the <strong>Root View Controller</strong> and set it as an IBOutlet called <strong>fpvPreviewView</strong>. Add two UIButtons and one UISegmentedControl at the bottom of the View Control and set their IBOutlets and IBActions. Here we set three segments in the UISegmentedControl: <strong>Capture</strong>, <strong>Record</strong> and <strong>Playback</strong>. Lastly, drag a UILabel to the top, horizontally center it in the view controller and hide it first.</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/rootViewController.png\" alt=\"RootViewController1\"></p>\n<p> Once that&#39;s done, enter the <strong>DJIRootViewController.m</strong> file and import the <strong>DJISDK</strong> and <strong>VideoPreviewer</strong> header files. Then implement the protocols in the class extension. Next, add the two <strong>UIButtons</strong>, the <strong>UISegmentedControl</strong> and the <strong>UILabel</strong>&#39;s IBOutlet properties. Add a boolean property named &quot;isRecording&quot; to check the record state. Lastly, add the IBAction methods for all the UI controls as below:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIRootViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n@interface DJIRootViewController ()&lt;DJICameraDelegate, DJISDKManagerDelegate, DJIPlaybackDelegate, DJIBaseProductDelegate&gt;\n@property (weak, nonatomic) IBOutlet UIButton *recordBtn;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *changeWorkModeSegmentControl;\n@property (weak, nonatomic) IBOutlet UIView *fpvPreviewView;\n@property (weak, nonatomic) IBOutlet UILabel *currentRecordTimeLabel;\n@property (assign, nonatomic) BOOL isRecording;\n\n- (IBAction)captureAction:(id)sender;\n- (IBAction)recordAction:(id)sender;\n- (IBAction)changeWorkModeAction:(id)sender;</code></pre>\n<p>In the viewDidAppear method, let&#39;s set the <strong>fpvPreviewView</strong> instance as a View of <strong>VideoPreviewer</strong> to show the Video Stream and reset it to nil by calling the cleanVideoPreview method in the viewWillDisappear method. Also, in the viewWillDisappear method, we set camera and its playbackManger property&#39;s delegate to nil. Then create a new method named &quot;registerApp&quot; for app registration.</p>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n    [[VideoPreviewer instance] setView:self.fpvPreviewView];\n    [self registerApp];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n\n    __weak DJICamera* camera = [self fetchCamera];\n    if (camera &amp;&amp; camera.delegate == self) {\n        [camera setDelegate:nil];\n    }    \n\n    if (camera &amp;&amp; camera.playbackManager.delegate == self) {\n        [camera.playbackManager setDelegate:nil];\n    }\n\n    [self cleanVideoPreview];\n}\n\n- (void)cleanVideoPreview {\n    [[VideoPreviewer instance] unSetView];\n\n    if (self.fpvPreviewView != nil) {\n        [self.fpvPreviewView removeFromSuperview];\n        self.fpvPreviewView = nil;\n    }\n}\n\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<p>Also, implement the DJISDKManagerDelegate methods to do initial setup after register app success. Moreover, in the <code>sdkManagerProductDidChangeFrom</code> method, let&#39;s fetch a camera object and set its delegate and its playbackManager property&#39;s delegate as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (DJICamera*) fetchCamera {\n\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).camera;\n    }\n    return nil;\n}\n\n#pragma mark DJISDKManagerDelegate Method\n\n- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n        [DJISDKManager startConnectionToProduct];\n        [[VideoPreviewer instance] start];\n    }\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}\n\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    if (newProduct) {\n        [newProduct setDelegate:self];\n        DJICamera* camera = [self fetchCamera];\n        if (camera != nil) {\n            camera.delegate = self;\n            camera.playbackManager.delegate = self;\n        }\n    }\n}</code></pre>\n<p>  Furthermore, implement the <strong>DJICameraDelegate</strong> methods, as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (NSString *)formattingSeconds:(int)seconds\n{\n    NSDate *date = [NSDate dateWithTimeIntervalSince1970:seconds];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    [formatter setDateFormat:@&quot;mm:ss&quot;];\n    [formatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];\n\n    NSString *formattedTimeString = [formatter stringFromDate:date];\n    return formattedTimeString;\n}\n\n#pragma mark - DJICameraDelegate\n- (void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size\n{\n    [[VideoPreviewer instance] push:videoBuffer length:(int)size];\n}\n\n- (void)camera:(DJICamera *)camera didUpdateSystemState:(DJICameraSystemState *)systemState\n{   \n\n    //Update currentRecordTimeLabel State\n    self.isRecording = systemState.isRecording;\n    [self.currentRecordTimeLabel setHidden:!self.isRecording];\n    [self.currentRecordTimeLabel setText:[self formattingSeconds:systemState.currentVideoRecordingTimeInSeconds]];\n\n    //Update recordBtn State\n    if (self.isRecording) {\n        [self.recordBtn setTitle:@&quot;Stop Record&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.recordBtn setTitle:@&quot;Start Record&quot; forState:UIControlStateNormal];\n    }\n\n    //Update UISegmented Control&#39;s state\n    if (systemState.mode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.mode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }else if (systemState.mode == DJICameraModePlayback){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:2];\n    }\n}</code></pre>\n<p>  Lastly, implement the IBAction methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)captureAction:(id)sender {\n\n    __weak DJIRootViewController *weakSelf = self;\n    __weak DJICamera *camera = [self fetchCamera];\n\n    [camera startShootPhoto:DJICameraShootPhotoModeSingle withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Take Photo Error&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n            [errorAlert show];\n        }\n    }];\n\n}\n\n- (IBAction)recordAction:(id)sender {\n\n    __weak DJIRootViewController *weakSelf = self;\n    __weak DJICamera *camera = [self fetchCamera];\n\n    if (self.isRecording) {\n        [camera stopRecordVideoWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Stop Record Error&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n        }];\n\n    }else\n    {\n        [camera startRecordVideoWithCompletion:^(NSError * _Nullable error) {\n\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Start Record Error&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n        }];\n    }\n}\n\n- (IBAction)changeWorkModeAction:(id)sender {\n\n    __weak DJIRootViewController *weakSelf = self;\n    __weak DJICamera *camera = [self fetchCamera];\n\n    UISegmentedControl *segmentControl = (UISegmentedControl *)sender;\n    if (segmentControl.selectedSegmentIndex == 0) { //CaptureMode\n\n        [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Set CameraWorkModeCapture Failed&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n\n        }];\n\n    }else if (segmentControl.selectedSegmentIndex == 1){ //RecordMode\n\n        [camera setCameraMode:DJICameraModeRecordVideo withCompletion:^(NSError * _Nullable error) {\n\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Set CameraWorkModeRecord Failed&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n\n        }];\n\n    }else if (segmentControl.selectedSegmentIndex == 2){  //PlaybackMode\n\n        [camera setCameraMode:DJICameraModePlayback withCompletion:^(NSError * _Nullable error) {\n\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Set CameraWorkModePlayback Failed&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n        }];\n    }\n}</code></pre>\n<p>  As you can see, we have implemented the <strong>Playback</strong> work mode method, just call the <strong>setCameraMode</strong> method of the <strong>DJICamera</strong> class and pass the <strong>DJICameraModePlayback</strong> value to it. Show an alertView in case there is any error.</p>\n<p>  For now, build and run the project in Xcode. You might got a warning of not implementing the <strong>DJIPlaybackDelegate</strong> method, please ignore it for now, we will implement it in the next part. </p>\n<p>  Try to use the <strong>Capture</strong> and <strong>Record</strong> feature to take photos and record videos. Then switch the <strong>Camera Mode</strong> by tapping on the UISegmentControl, switch to <strong>Playback</strong> mode to see if you can see the last photo you took or the last video you recorded. Here is a screenshot of what your playback mode should look like:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/singlePreview.jpg\" alt=\"singlePreview\"></p>\n<h3 id=\"4-previewing-single-files\">4. Previewing Single Files</h3>\n<p>We can switch to the <strong>Playback</strong> mode now. Let&#39;s add two <strong>UISwipeGestureRecognizer</strong>s to preview the previous and the next media files in the SD Card.</p>\n<p>Open the <strong>DJIRootViewController.m</strong> file, create two properties of <strong>UISwipeGestureRecognizer</strong> and name them <strong>swipeLeftGesture</strong> and <strong>swipeRightGesture</strong> in the class extension. Then initialize them in the <strong>initData</strong> method as follows:</p>\n<pre><code class=\"lang-objc\">\n- (void)viewDidLoad {\n    [super viewDidLoad];    \n    [self initData];\n}\n\n- (void)initData\n{\n\n    self.swipeLeftGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeLeftGestureAction:)];\n    self.swipeLeftGesture.direction = UISwipeGestureRecognizerDirectionLeft;\n    self.swipeRightGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeRightGestureAction:)];\n    self.swipeRightGesture.direction = UISwipeGestureRecognizerDirectionRight;\n\n    [self.view addGestureRecognizer:self.swipeLeftGesture];\n    [self.view addGestureRecognizer:self.swipeRightGesture];\n}</code></pre>\n<p>Implement the gesture action selector methods:</p>\n<pre><code class=\"lang-objc\">- (void)swipeLeftGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n     __weak DJICamera* camera = [self fetchCamera];\n     [camera.playbackManager goToNextSinglePreviewPage];\n}\n\n- (void)swipeRightGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n     __weak DJICamera* camera = [self fetchCamera];\n     [camera.playbackManager goToPreviousSinglePreviewPage];\n}</code></pre>\n<p>The above code uses the <strong>goToNextSinglePreviewPage</strong> and <strong>goToPreviousSinglePreviewPage</strong> methods of DJICamera&#39;s playbackManager to preview the next and previous files. Since there are two types of the media files in the SD Card, <strong>Photo</strong> and <strong>Video</strong>, we&#39;ll have to implement video playback feature as well.</p>\n<p>Open <strong>Main.storyboard</strong>, drag a UIView object and position it on the top of the viewController, then drag a UIButton to the view you just added as subview and named <strong>Stop</strong>. Next, drag a UIButton object to the center of the viewController, set its image as &quot;playVideo&quot;(You can get this image file from the project source code, in the Images.xcassets folder).</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/playbackButtons.jpg\" alt=\"playbackButtons\"></p>\n<p> Here we hide the <strong>Stop</strong> and the <strong>playVideo</strong> buttons. Now let&#39;s go to <strong>DJIRootViewController.m</strong> and create IBOutlets and IBActions for the newly added UIs:</p>\n<pre><code class=\"lang-objc\">@property (nonatomic, strong) IBOutlet UIView* playbackBtnsView;\n@property (weak, nonatomic) IBOutlet UIButton *playVideoBtn;\n\n- (IBAction)playVideoBtnAction:(id)sender;\n- (IBAction)stopVideoBtnAction:(id)sender;</code></pre>\n<p>Moreover, before implementing the IBAction methods, we&#39;ll add two new properties of the DJICameraSystemState class and the DJICameraPlaybackState class and named them as <strong>cameraSystemState</strong> and <strong>cameraPlaybackState</strong> respectively in the class extension as shown below:</p>\n<pre><code class=\"lang-objc\">@property (strong, nonatomic) DJICameraSystemState* cameraSystemState;\n@property (strong, nonatomic) DJICameraPlaybackState* cameraPlaybackState;</code></pre>\n<p>These properties are used to save the current camera system state and the playback state. Let&#39;s update the <strong>cameraSystemState</strong> property value and hide the <strong>playbackBtnsView</strong> based on <strong>DJICameraSystemState</strong>&#39;s mode in the <code>- (void)camera:(DJICamera *)camera didUpdateSystemState:(DJICameraSystemState *)systemState</code> delegate method:</p>\n<pre><code class=\"lang-objc\">-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{\n    self.cameraSystemState = systemState; //Update camera system state\n\n    //Update currentRecordTimeLabel State\n    self.isRecording = systemState.isRecording;\n    [self.currentRecordTimeLabel setHidden:!self.isRecording];\n    [self.currentRecordTimeLabel setText:[self formattingSeconds:systemState.currentVideoRecordingTimeInSeconds]];\n\n    //Update playbackBtnsView state\n    BOOL isPlayback = (systemState.mode == DJICameraModePlayback) || (systemState.mode == DJICameraModeMediaDownload);\n    self.playbackBtnsView.hidden = !isPlayback;\n\n    //Update recordBtn State\n    if (self.isRecording) {\n        [self.recordBtn setTitle:@&quot;Stop Record&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.recordBtn setTitle:@&quot;Start Record&quot; forState:UIControlStateNormal];\n    }\n\n    //Update UISegmented Control&#39;s state\n    if (systemState.mode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.mode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }else if (systemState.mode == DJICameraModePlayback){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:2];\n    }\n}</code></pre>\n<p>Additionally, implement the <code>- (void)playbackManager:(DJIPlaybackManager *)playbackManager didUpdatePlaybackState:(DJICameraPlaybackState *)playbackState</code> delegate method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)playbackManager:(DJIPlaybackManager *)playbackManager didUpdatePlaybackState:(DJICameraPlaybackState *)playbackState\n{\n    if (self.cameraSystemState.mode == DJICameraModePlayback) {   \n        self.cameraPlaybackState = playbackState;\n        [self updateUIWithPlaybackState:playbackState];\n\n    }else\n    {\n        [self.playVideoBtn setHidden:YES];\n    }\n}\n\n- (void)updateUIWithPlaybackState:(DJICameraPlaybackState *)playbackState\n{\n    if (playbackState.playbackMode == DJICameraPlaybackModeSingleFilePreview) {\n        if (playbackState.mediaFileType == DJICameraPlaybackFileFormatJPEG || playbackState.mediaFileType == DJICameraPlaybackFileFormatRAWDNG) { //Photo Type            \n            [self.playVideoBtn setHidden:YES];\n        }else if (playbackState.mediaFileType == DJICameraPlaybackFileFormatVIDEO) //Video Type\n        {\n            [self.playVideoBtn setHidden:NO];\n        }\n    }else if (playbackState.playbackMode == DJICameraPlaybackModeSingleVideoPlaybackStart)                \n    { //Playing Video\n        [self.playVideoBtn setHidden:YES];\n    }else if (playbackState.playbackMode == DJICameraPlaybackModeMultipleFilesPreview){\n        [self.playVideoBtn setHidden:YES];\n    }\n}</code></pre>\n<p>As you can see, we have updated the <strong>cameraPlaybackState</strong> property&#39;s value in the <code>- (void)playbackManager:(DJIPlaybackManager *)playbackManager didUpdatePlaybackState:(DJICameraPlaybackState *)playbackState</code> delegate method, and have also updated the <strong>playVideoBtn</strong>&#39;s hidden state based on the DJICameraSystemState&#39;s <strong>mode</strong> and the DJICameraPlaybackState&#39;s <strong>playbackMode</strong>.</p>\n<p>Finally, we can implement the <strong>IBAction</strong> methods as follows:</p>\n<pre><code class=\"lang-objc\">- (IBAction)playVideoBtnAction:(id)sender {\n    __weak DJICamera *camera = [self fetchCamera];\n    if (self.cameraPlaybackState.mediaFileType == DJICameraPlaybackFileFormatVIDEO) {\n        [camera.playbackManager startVideoPlayback];\n    }\n}\n\n- (IBAction)stopVideoBtnAction:(id)sender {\n    __weak DJICamera *camera = [self fetchCamera];\n    if (self.cameraPlaybackState.mediaFileType == DJICameraPlaybackFileFormatVIDEO) {\n        if (self.cameraPlaybackState.videoPlayProgress &gt; 0) {\n            [camera.playbackManager stopVideoPlayback];\n        }\n    }\n}</code></pre>\n<p>In the <strong>playVideoBtnAction</strong> and <strong>stopVideoBtnAction</strong> methods, we check if the media type is video, then call the <strong>startVideoPlayback</strong> and the <strong>stopVideoPlayback</strong> methods of the <strong>DJICamera</strong>&#39;s playbackManager to start and stop playing the video. </p>\n<p>Once it&#39;s done, build and run the project. Try swiping left and right in playbackMode to navigate through your photos and videos. If you see the play button at the center of the screen, press it to play the video.</p>\n<p>Playing your video through the playback app:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/playVideo.gif\" alt=\"playVideo\"></p>\n<h3 id=\"5-previewing-multiple-files\">5. Previewing Multiple Files</h3>\n<p>Before we move forward, let&#39;s explain the <strong>Playback mode</strong>. There are multiple playback modes in the camera, and we can check the <strong>DJICameraPlaybackMode</strong> enum type in the <strong>DJICameraPlaybackState.h</strong> file as follows:</p>\n<pre><code class=\"lang-objc\">/**\n *  A playback mode represents a task that the Playback manager is executing.\n */\ntypedef NS_ENUM (uint8_t, DJICameraPlaybackMode){\n    /**\n     *  Single file preview\n     */\n    DJICameraPlaybackModeSingleFilePreview = 0x00,\n    /**\n     *  Single photo zoomed\n     */\n    DJICameraPlaybackModeSinglePhotoZoomMode = 0x01,\n    /**\n     *  Single video play start\n     */\n    DJICameraPlaybackModeSingleVideoPlaybackStart = 0x02,\n    /**\n     *  Single video play pause\n     */\n    DJICameraPlaybackModeSingleVideoPlaybackPause = 0x03,\n    /**\n     *  Multiple file edit\n     */\n    DJICameraPlaybackModeMultipleFilesEdit = 0x04,\n    /**\n     *  Multiple file preview\n     */\n    DJICameraPlaybackModeMultipleFilesPreview = 0x05,\n    /**\n     *  Download file\n     */\n    DJICameraPlaybackModeDownload = 0x06,\n    /**\n     *  Unknown mode\n     */\n    DJICameraPlaybackModeUnknown = 0xFF,\n};</code></pre>\n<p>As shown in the code above, we can preview files in two ways: <strong>Single Preview</strong> and <strong>Multiple Preview</strong>. We can also zoom into out of photos, play videos, delete photos and videos and even download them. </p>\n<p>We will learn how to preview multiple files here. Here is what <strong>Multiple Preview</strong> looks like:</p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/multiplePreview.jpg\" alt=\"multiplePreview\"></p>\n<p>You can preview at most eight files at the same time. Since the preview images are shown in the <strong>fpvPreviewView</strong>, you cannot interact with them yet. Let&#39;s add buttons and swipe gestures to interact with them.</p>\n<p>First, we will create a new file named &quot;DJIPlaybackMultiSelectViewController&quot;, which will be a subclass of UIViewController. Make sure the check box for <strong>Also create XIB file</strong> is selected when creating the file. Then open the DJIPlaybackMultiSelectViewController.xib file and, under the <strong>Size</strong> dropdown in the <strong>Simulated Metrics</strong> section, set its size to <strong>Freeform</strong> . In the view section, change the width to &quot;1024&quot; and height to &quot;768&quot;. Take a look at the changes made below:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/freeform.png\" alt=\"freeform\">\n  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/changeSize.png\" alt=\"changeSize\"></p>\n<p>Then drag a <strong>UIView</strong> object to the viewController as subview and set its name to <strong>Buttons View</strong>. Next set its frame as follows:</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/buttonsViewFrame.png\" alt=\"buttonsViewFrame\"></p>\n<p>Moreover, drag eight <strong>UIButton</strong> objects to the <strong>Buttons View</strong> as subviews and position them as follows(You can check the demo project&#39;s <strong>DJIPlaybackMultiSelectViewController.xib</strong> file to get the details on how to setup these buttons&#39;s frame):</p>\n<p>  <img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/buttonsView.png\" alt=\"buttonsView\"></p>\n<p>These buttons represent eight media files when you are in the <strong>Multiple Preview Mode</strong>. Pressing any of these buttons will enter <strong>Single Preview Mode</strong>. </p>\n<p>Now let&#39;s open the <strong>DJIPlaybackMultiSelectViewController.h</strong> file and create two block properties as follows:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@interface DJIPlaybackMultiSelectViewController : UIViewController\n\n@property (copy, nonatomic) void (^selectItemBtnAction)(int index);\n@property (copy, nonatomic) void (^swipeGestureAction)(UISwipeGestureRecognizerDirection direction);\n\n@end</code></pre>\n<p>The first block is used to check the selected button action with index, the second one is used to check the swipe gesture action.</p>\n<p>Then go to DJIPlaybackMultiSelectViewController.m file and create four UISwipeGestureRecognizer properties to represent the <strong>left</strong>, <strong>right</strong>, <strong>up</strong> and <strong>down</strong> swipe gestures. Additionally, create eight IBAction methods and link them to the UIButton objects in the DJIPlaybackMultiSelectViewController.xib file:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIPlaybackMultiSelectViewController.h&quot;\n\n@interface DJIPlaybackMultiSelectViewController()\n\n@property(nonatomic, strong) UISwipeGestureRecognizer *swipeLeftGesture;\n@property(nonatomic, strong) UISwipeGestureRecognizer *swipeRightGesture;\n@property(nonatomic, strong) UISwipeGestureRecognizer *swipeUpGesture;\n@property(nonatomic, strong) UISwipeGestureRecognizer *swipeDownGesture;\n\n- (IBAction)selectFirstItemBtnAction:(id)sender;\n- (IBAction)selectSecondItemBtnAction:(id)sender;\n- (IBAction)selectThirdItemBtnAction:(id)sender;\n- (IBAction)selectFourthItemBtnAction:(id)sender;\n- (IBAction)selectFifthItemBtnAction:(id)sender;\n- (IBAction)selectSixthItemBtnAction:(id)sender;\n- (IBAction)selectSeventhItemBtnAction:(id)sender;\n- (IBAction)selectEighthItemBtnAction:(id)sender;\n\n@end</code></pre>\n<p>Init the swipe gestures properties in the viewDidLoad method and implement the action methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.swipeLeftGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeLeftGestureAction:)];\n    self.swipeLeftGesture.direction = UISwipeGestureRecognizerDirectionLeft;\n    self.swipeRightGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeRightGestureAction:)];\n    self.swipeRightGesture.direction = UISwipeGestureRecognizerDirectionRight;\n    self.swipeUpGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeUpGestureAction:)];\n    self.swipeUpGesture.direction = UISwipeGestureRecognizerDirectionUp;\n    self.swipeDownGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeDownGestureAction:)];\n    self.swipeDownGesture.direction = UISwipeGestureRecognizerDirectionDown;\n\n    [self.view addGestureRecognizer:self.swipeLeftGesture];\n    [self.view addGestureRecognizer:self.swipeRightGesture];\n    [self.view addGestureRecognizer:self.swipeUpGesture];\n    [self.view addGestureRecognizer:self.swipeDownGesture];\n\n}\n\n#pragma mark UIGestureAction Methods\n- (void)swipeLeftGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n    if (self.swipeGestureAction) {\n        self.swipeGestureAction(UISwipeGestureRecognizerDirectionLeft);\n    }\n}\n\n- (void)swipeRightGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n    if (self.swipeGestureAction) {\n        self.swipeGestureAction(UISwipeGestureRecognizerDirectionRight);\n    }\n}\n\n- (void)swipeUpGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n    if (self.swipeGestureAction) {\n        self.swipeGestureAction(UISwipeGestureRecognizerDirectionUp);\n    }\n}\n\n- (void)swipeDownGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n    if (self.swipeGestureAction) {\n        self.swipeGestureAction(UISwipeGestureRecognizerDirectionDown);\n    }\n}</code></pre>\n<p>These four swipe gestures are for single and multiple files preview. Swipe left or right to preview files in <strong>Single Preview Mode</strong>, swipe up or down to preview files in <strong>Multiple Preview Mode</strong>. We invoke the <strong>swipeGestureAction</strong> block inside the swipe action method with a <strong>UISwipeGestureRecognizerDirection</strong> value.</p>\n<p>Next, implement the IBAction methods for the eight UIButtons as follows:</p>\n<pre><code class=\"lang-objc\">#pragma mark UIButton Action Methods\n- (IBAction)selectFirstItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(0);\n    }\n}\n\n- (IBAction)selectSecondItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(1);\n    }\n}\n\n- (IBAction)selectThirdItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(2);\n    }\n}\n\n- (IBAction)selectFourthItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(3);\n    }\n}\n\n- (IBAction)selectFifthItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(4);\n    }\n}\n\n- (IBAction)selectSixthItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(5);\n    }\n}\n\n- (IBAction)selectSeventhItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(6);\n    }\n}\n\n- (IBAction)selectEighthItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(7);\n    }\n}</code></pre>\n<p>We invoke the <strong>selectItemBtnAction</strong> block inside the IBAction methods with related button index. The index starts from 0 here because the file index counted in Playback Multiple Preview Mode starts from 0.</p>\n<p>Now, go back to <strong>DJIRootViewController.m</strong> file. Since we have added the swipe left and swipe right gestures in the DJIPlaybackMultiSelectViewController.m file, let&#39;s delete the <strong>swipeLeftGesture</strong> and <strong>swipeRightGesture</strong> properties and their related codes in the DJIRootViewController.m file to refactor the code structure. </p>\n<p>Then import the DJIPlaybackMultiSelectViewController.h header file and create a property of DJIPlaybackMultiSelectViewController named <strong>playbackMultiSelectVC</strong>. Next, we create a new method named <strong>initPlaybackMultiSelectVC</strong> and implement it in the <strong>viewDidLoad</strong> method:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self initData];\n    [self initPlaybackMultiSelectVC];\n\n}\n\n- (void)initPlaybackMultiSelectVC\n{\n    self.playbackMultiSelectVC = [[DJIPlaybackMultiSelectViewController alloc] initWithNibName:@&quot;DJIPlaybackMultiSelectViewController&quot; bundle:[NSBundle mainBundle]];\n    [self.playbackMultiSelectVC.view setFrame:self.view.frame];\n    [self.view insertSubview:self.playbackMultiSelectVC.view aboveSubview:self.fpvPreviewView];\n\n    __weak DJIRootViewController *weakSelf = self;\n    [self.playbackMultiSelectVC setSelectItemBtnAction:^(int index) {\n\n        __weak DJICamera* camera = [weakSelf fetchCamera];\n        if (weakSelf.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesPreview) {\n            [camera.playbackManager enterSinglePreviewModeWithIndex:index];\n        }else if (weakSelf.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit){\n            [camera.playbackManager toggleFileSelectionAtIndex:index];\n        }\n    }];\n\n    [self.playbackMultiSelectVC setSwipeGestureAction:^(UISwipeGestureRecognizerDirection direction) {\n\n        __weak DJICamera* camera = [weakSelf fetchCamera];\n\n        if (weakSelf.cameraPlaybackState.playbackMode == DJICameraPlaybackModeSingleFilePreview) {\n\n            if (direction == UISwipeGestureRecognizerDirectionLeft) {\n                [camera.playbackManager goToNextSinglePreviewPage];\n            }else if (direction == UISwipeGestureRecognizerDirectionRight){\n                [camera.playbackManager goToPreviousSinglePreviewPage];\n            }\n\n        }else if(weakSelf.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesPreview){\n\n            if (direction == UISwipeGestureRecognizerDirectionUp) {\n                [camera.playbackManager goToNextMultiplePreviewPage];\n            }else if (direction == UISwipeGestureRecognizerDirectionDown){\n                [camera.playbackManager goToPreviousMultiplePreviewPage];\n            }\n        }\n    }];\n}</code></pre>\n<p>So in the <strong>initPlaybackMultiSelectVC</strong> method, we init the <strong>playbackMultiSelectVC</strong> property first, and then we invoke the <strong>selectItemBtnAction</strong> block&#39;s setter method and implement the <strong>toggleFileSelectionAtIndex</strong> method of the <strong>DJICamera</strong>&#39;s playbackManager with selected index. This way, we can switch to Single Preview Mode from Multiple Preview Mode. </p>\n<p>Furthermore, we invoke the <strong>swipeGestureAction</strong> block&#39;s setter method and implement the preview files feature based on the <strong>UISwipeGestureRecognizerDirection</strong> value.</p>\n<p>Once this is done, go to <strong>Main.storyboard</strong> and drag a <strong>UIButton</strong> object to the <strong>playbackBtnsView</strong> as subView, naming it as <strong>Multi Pre</strong> and positioning it as follows:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/multiPreBtn.jpg\" alt=\"multiPreBtn\"></p>\n<p>Finally, create an IBAction method named <strong>multiPreviewButtonClicked</strong> and link it to the above UIButton in the <strong>Main.storyboard</strong>. Implement the method as shown below to enter Multiple Preview Mode:</p>\n<pre><code class=\"lang-objc\">- (IBAction)multiPreviewButtonClicked:(id)sender {\n\n    __weak DJICamera *camera = [self fetchCamera];\n    [camera.playbackManager enterMultiplePreviewMode];\n\n}</code></pre>\n<p>Let&#39;s build and run the project and try to enter Multiple Preview Mode. Use the swipe up and down gestures to preview files. Switch to the Single Preview Mode by pressing any of the eight preview images. Here is a screenshot:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/multiPre.jpg\" alt=\"multiPre\"></p>\n<h2 id=\"deleting-photos-and-videos\">Deleting Photos and Videos</h2>\n<p>You can now preview photos and videos in Single Preview Mode and Multiple Preview Mode. But what if you want to delete a file you don&#39;t like? Let&#39;s implement the delete files feature!</p>\n<p>Go to Main.storyboard and drag three UIButtons to the <strong>playbackBtnsView</strong> as subviews and named them <strong>Select</strong>, <strong>Select All</strong> and <strong>Delete</strong>. We hide the &quot;Select&quot; and &quot;Select All&quot; buttons here. Then go to the <strong>DJIRootViewController.m</strong> file and create two IBOutlets for the &quot;Select&quot; and &quot;Select All&quot; buttons, and also the three IBAction methods for the three buttons as follows:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIButton *selectBtn;\n@property (weak, nonatomic) IBOutlet UIButton *selectAllBtn;\n\n- (IBAction)selectButtonAction:(id)sender;\n- (IBAction)deleteButtonAction:(id)sender;\n- (IBAction)selectAllBtnAction:(id)sender;</code></pre>\n<p>Next, implement the IBAction methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)selectButtonAction:(id)sender {\n    __weak DJICamera *camera = [self fetchCamera];\n    if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit) {\n        [camera.playbackManager exitMultipleEditMode];\n    }else\n    {\n        [camera.playbackManager enterMultipleEditMode];\n    }\n}\n\n- (IBAction)selectAllBtnAction:(id)sender {\n    __weak DJICamera *camera = [self fetchCamera];\n    if (self.cameraPlaybackState.isAllFilesInPageSelected) {\n        [camera.playbackManager unselectAllFilesInPage];\n    }\n    else\n    {\n        [camera.playbackManager selectAllFilesInPage];\n    }\n}</code></pre>\n<p>The above code implements the selectButtonAction method to enter and exit MultipleEditMode by calling the <strong>exitMultipleEditMode</strong> and <strong>enterMultipleEditMode</strong> methods of DJICamera&#39;s playbackManager. Then in selectAllBtnAction IBAction method, we use an if statement to check if all the files in the page are selected and invoke the <strong>selectAllFilesInPage</strong> and <strong>unselectAllFilesInPage</strong> methods of DJICamera&#39;s playbackManager.</p>\n<p>Moreover, update the <strong>selectBtn</strong> and <strong>selectAllBtn</strong> buttons&#39; hidden values in the following method:</p>\n<pre><code class=\"lang-objc\">\n- (void)updateUIWithPlaybackState:(DJICameraPlaybackState *)playbackState\n{\n    if (playbackState.playbackMode == DJICameraPlaybackModeSingleFilePreview) {\n\n        [self.selectBtn setHidden:YES];\n        [self.selectAllBtn setHidden:YES];\n\n        if (playbackState.mediaFileType == DJICameraPlaybackFileFormatJPEG || playbackState.mediaFileType == DJICameraPlaybackFileFormatRAWDNG) { //Photo Type\n\n           [self.playVideoBtn setHidden:YES];\n\n        }else if (playbackState.mediaFileType == DJICameraPlaybackFileFormatVIDEO) //Video Type    {\n           [self.playVideoBtn setHidden:NO];\n        }\n\n     }else if (playbackState.playbackMode == DJICameraPlaybackModeSingleVideoPlaybackStart){ //Playing Video\n\n        [self.selectBtn setHidden:YES];\n        [self.selectAllBtn setHidden:YES];\n        [self.playVideoBtn setHidden:YES];\n\n     }else if (playbackState.playbackMode == DJICameraPlaybackModeMultipleFilesPreview){\n\n        [self.selectBtn setHidden:NO];\n        [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        [self.selectAllBtn setHidden:NO];\n        [self.playVideoBtn setHidden:YES];\n\n     }else if (playbackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit){\n\n        [self.selectBtn setHidden:NO];\n        [self.selectBtn setTitle:@&quot;Cancel&quot; forState:UIControlStateNormal];\n        [self.selectAllBtn setHidden:NO];\n        [self.playVideoBtn setHidden:YES];\n\n     }   \n}</code></pre>\n<p>Before implementing the <strong>deleteButtonAction</strong> method, let&#39;s create two new properties in the class extension as follows:</p>\n<pre><code class=\"lang-objc\">@property (strong, nonatomic) UIAlertView* statusAlertView;\n@property (assign, nonatomic) int selectedFileCount;</code></pre>\n<p>Here, we create an <strong>int</strong> property named <strong>selectedFileCount</strong> to count the number of files currently selected in the Multiple Preview Mode. We also create a <strong>UIAlertView</strong> property named as <strong>statusAlertView</strong> to show alerts when deleting files.</p>\n<p>Create the following three methods to <strong>show</strong>, <strong>dismiss</strong> and <strong>update</strong> the alertView:</p>\n<pre><code class=\"lang-objc\">-(void) showStatusAlertView\n{\n    if (self.statusAlertView == nil) {\n        self.statusAlertView = [[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;&quot; delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];\n        [self.statusAlertView show];\n    }\n}\n\n-(void) dismissStatusAlertView\n{\n    if (self.statusAlertView) {\n        [self.statusAlertView dismissWithClickedButtonIndex:0 animated:YES];\n        self.statusAlertView = nil;\n    }       \n}\n\n- (void)updateStatusAlertContentWithTitle:(NSString *)title message:(NSString *)message shouldDismissAfterDelay:(BOOL)dismiss\n{\n    if (self.statusAlertView) {\n        [self.statusAlertView setTitle:title];\n        [self.statusAlertView setMessage:message];\n\n        if (dismiss) {\n            [self performSelector:@selector(dismissStatusAlertView) withObject:nil afterDelay:2.0];\n        }\n    }   \n}</code></pre>\n<p>Furthermore, implement the <strong>deleteButtonAction</strong> action method as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)deleteButtonAction:(id)sender {\n\n    self.selectedFileCount = self.cameraPlaybackState.numberOfSelectedFiles;\n\n    if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit) {\n\n        if (self.selectedFileCount == 0) {\n            [self showStatusAlertView];\n            [self updateStatusAlertContentWithTitle:@&quot;Please select files to delete!&quot; message:@&quot;&quot; shouldDismissAfterDelay:YES];\n            return;\n        }else\n        {\n            NSString *title;\n            if (self.selectedFileCount == 1) {\n                title = @&quot;Delete Selected File?&quot;;\n            }else\n            {\n                title = @&quot;Delete Selected Files?&quot;;\n            }\n            UIAlertView *deleteAllSelFilesAlert = [[UIAlertView alloc] initWithTitle:title message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;NO&quot; otherButtonTitles:@&quot;YES&quot;, nil];\n            deleteAllSelFilesAlert.tag = kDeleteAllSelFileAlertTag;\n            [deleteAllSelFilesAlert show];\n        }\n\n    }else if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeSingleFilePreview){\n\n        UIAlertView *deleteCurrentFileAlert = [[UIAlertView alloc] initWithTitle:@&quot;Delete The Current File?&quot; message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;NO&quot; otherButtonTitles:@&quot;YES&quot;, nil];\n        deleteCurrentFileAlert.tag = kDeleteCurrentFileAlertTag;\n        [deleteCurrentFileAlert show];   \n    }\n\n}</code></pre>\n<p>The above code updates the <strong>selectedFileCount</strong> property value with <strong>cameraPlaybackState</strong>&#39;s &quot;numberOfSelectedFiles&quot; value. It then checks the <strong>playbackMode</strong> value of cameraPlaybackState to show alertViews in the &quot;DJICameraPlaybackModeMultipleFilesEdit&quot; and &quot;DJICameraPlaybackModeSingleFilePreview&quot; mode. Here we use macro definition for the UIAlertView&#39;s tag property:</p>\n<pre><code class=\"lang-objc\">#define kDeleteAllSelFileAlertTag 100\n#define kDeleteCurrentFileAlertTag 101</code></pre>\n<p>Finally, let&#39;s implement the UIAlertView delegate method as follows to call the <strong>deleteAllSelectedFiles</strong> and <strong>deleteCurrentPreviewFile</strong> methods of DJICamera&#39;s playbackManager to delete files and update selectBtn&#39;s title:</p>\n<pre><code class=\"lang-objc\">#pragma mark UIAlertView Delegate Method\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    if (alertView.tag == kDeleteAllSelFileAlertTag) {\n        if (buttonIndex == 1) {\n            [self.camera deleteAllSelectedFiles];\n            [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        }\n    }else if (alertView.tag == kDeleteCurrentFileAlertTag){\n        if (buttonIndex == 1) {\n            [self.camera deleteCurrentPreviewFile];\n            [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        }   \n    }\n}</code></pre>\n<p>Build and run the project, and try the select multiple files, delete single and multiple files features. Here&#39;s what it should look like:</p>\n<ul>\n<li>Deleting a Single File:</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/deleteSingleFile.gif\" alt=\"deleteSingleFile\"></p>\n<ul>\n<li>Deleting Multiple Files:</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/deleteMultiFiles.gif\" alt=\"deleteMultiFiles\"></p>\n<h2 id=\"downloading-and-saving-photos\">Downloading And Saving Photos</h2>\n<h3 id=\"1-downloading-photos\">1. Downloading Photos</h3>\n<p>Let&#39;s implement the download photo feature now. First, go to the <strong>Main.storyboard</strong> file and drag a <strong>UIButton</strong> object to the <strong>playbackBtnsView</strong> and name it &quot;Download&quot;. Then position it as shown below:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/download.jpg\" alt=\"download\"></p>\n<p>Then go to <strong>DJIRootViewController.m</strong> file and create the following property objects and IBAction methods in the class extension:</p>\n<pre><code class=\"lang-objc\">@property (strong, nonatomic) NSMutableData *downloadedImageData;\n@property (strong, nonatomic) NSTimer *updateImageDownloadTimer;\n@property (strong, nonatomic) NSError *downloadImageError;\n@property (strong, nonatomic) NSString* targetFileName;\n@property (assign, nonatomic) long totalFileSize;\n@property (assign, nonatomic) long currentDownloadSize;\n@property (assign, nonatomic) int downloadedFileCount;\n\n- (IBAction)downloadButtonAction:(id)sender;</code></pre>\n<p>Lets briefly explain what each of these properties is for.</p>\n<ul>\n<li><strong>downloadedImageData</strong> is used to store the downloaded image&#39;s <strong>NSData</strong></li>\n<li><strong>updateImageDownloadTimer</strong> is used to update the download progress status</li>\n<li><strong>downloadImageError</strong> is for NSError storage</li>\n<li><strong>targetFileName</strong> is used to store the current downloaded image file name</li>\n<li><strong>totalFileSize</strong> is for storing the total file size of each downloading image</li>\n<li><strong>currentDownloadSize</strong> is used to store the downloaded size of the image</li>\n<li><strong>downloadedFileCount</strong> is used to store the downloaded file count</li>\n</ul>\n<p>Let&#39;s init the <strong>downloadedImageData</strong> property in the <strong>initData</strong> method as follows:</p>\n<pre><code class=\"lang-objc\">- (void)initData\n{\n    self.downloadedImageData = [NSMutableData data];\n}</code></pre>\n<p>Before moving forward, we need to first explain the following method in <strong>DJICamera</strong> class:</p>\n<pre><code class=\"lang-objc\">/**\n *  Downloads the selected files. When this method is called. The dataBlock gets called continuously until all the data is downloaded.\n *  The prepare and completion blocks are called once for each file being downloaded. In the prepareBlock, you can get the forthcoming file&#39;s info, like file name, file size, etc.\n *\n *  If an error occurs before the downloading of any files, only the overallCompletionBlock will be called with an error returned.\n *  If an error occurs during the downloading of a file, both dataBlock and overallCompletionBlock will be called with an error returned.\n *\n *  @param prepareBlock         Callback to prepare each file for download.\n *  @param dataBlock            Callback while a file is downloading. The dataBlock can be called multiple times for a file.\n *  @param fileCompletionBlock  Callback after each file have been downloaded.\n *  @param finishBlock          Callback after the downloading is finished.\n */\n- (void)downloadSelectedFilesWithPreparation:(DJIFileDownloadPreparingBlock)prepareBlock process:(DJIFileDownloadingBlock)dataBlock fileCompletion:(DJIFileDownloadCompletionBlock)fileCompletionBlock overallCompletion:(DJICompletionBlock)overallCompletionBlock;</code></pre>\n<p>This method has three params, the first param <strong>prepareBlock</strong> is a file download preparing block. You can do some download initialization work here like showing an alertView to clarify the download file&#39;s file name, file size, etc. The second param <strong>dataBlock</strong> is a download data update block, you can append the downloaded data here and increase the downloaded size data. The third param <strong>fileCompletionBlock</strong> is a file download completion block, you can save the current downloaded image to the Photo Album here. The last param <strong>overallCompletionBlock</strong> is an overal file download completion block.</p>\n<p><strong>Important</strong>: We cannot update the download file status UI in the <strong>dataBlock</strong> block, since it will slow down the file download speed. So we should use the <strong>downloadedImageData</strong> property to append downloaded data and use the <strong>updateImageDownloadTimer</strong> to update the UI.</p>\n<p>So let&#39;s create three new methods here to set up the <strong>updateImageDownloadTimer</strong>:</p>\n<pre><code class=\"lang-objc\">- (void)updateDownloadProgress:(NSTimer *)updatedTimer\n{\n    if (self.downloadImageError) {\n\n        [self stopTimer];\n        [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        [self updateStatusAlertContentWithTitle:@&quot;Download Error&quot; message:[NSString stringWithFormat:@&quot;%@&quot;, self.downloadImageError] shouldDismissAfterDelay:YES];\n\n    }\n    else\n    {\n        NSString *title = [NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, self.downloadedFileCount + 1, self.selectedFileCount];\n        NSString *message = [NSString stringWithFormat:@&quot;FileName:%@, FileSize:%0.1fKB, Downloaded:%0.1fKB&quot;, self.targetFileName, self.totalFileSize / 1024.0, self.currentDownloadSize / 1024.0];\n        [self updateStatusAlertContentWithTitle:title message:message shouldDismissAfterDelay:NO];\n    }\n\n}\n\n- (void)startUpdateTimer\n{\n    if (self.updateImageDownloadTimer == nil) {\n        self.updateImageDownloadTimer = [NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(updateDownloadProgress:) userInfo:nil repeats:YES];\n    }\n}\n\n- (void)stopTimer\n{\n    if (self.updateImageDownloadTimer != nil) {\n        [self.updateImageDownloadTimer invalidate];\n        self.updateImageDownloadTimer = nil;\n    }\n}</code></pre>\n<p>As you can see, we use the startUpdateTimer and stopTimer methods to start and stop the <strong>updateImageDownloadTimer</strong>. Then we implement the <strong>updateDownloadProgress</strong> selector method to update the <strong>statusAlertView</strong>&#39;s title and message value.</p>\n<p>Next, create a new method name <strong>resetDownloadData</strong> to reset all the download related property values:</p>\n<pre><code class=\"lang-objc\">- (void)resetDownloadData\n{\n    self.downloadImageError = nil;\n    self.totalFileSize = 0;\n    self.currentDownloadSize = 0;\n    self.downloadedFileCount = 0;\n\n    [self.downloadedImageData setData:[NSData dataWithBytes:NULL length:0]];\n}</code></pre>\n<p>Furthermore, define two UIAlertView constant tag objects, implement the <strong>downloadButtonAction</strong> method and improve the UIAlertView Delegate Method with the following code:</p>\n<pre><code class=\"lang-objc\">\n#define kDownloadAllSelFileAlertTag 102\n#define kDownloadCurrentFileAlertTag 103\n\n- (IBAction)downloadButtonAction:(id)sender {\n\n    self.selectedFileCount = self.cameraPlaybackState.numberOfSelectedFiles;\n\n    if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit) {\n\n        if (self.selectedFileCount == 0) {\n            [self showStatusAlertView];\n            [self updateStatusAlertContentWithTitle:@&quot;Please select files to Download!&quot; message:@&quot;&quot; shouldDismissAfterDelay:YES];\n            return;\n        }else\n        {\n            NSString *title;\n            if (self.selectedFileCount == 1) {\n                title = @&quot;Download Selected File?&quot;;\n            }else\n            {\n                title = @&quot;Download Selected Files?&quot;;\n            }\n            UIAlertView *downloadSelFileAlert = [[UIAlertView alloc] initWithTitle:title message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;NO&quot; otherButtonTitles:@&quot;YES&quot;, nil];\n            downloadSelFileAlert.tag = kDownloadAllSelFileAlertTag;\n            [downloadSelFileAlert show];\n        }\n\n    }else if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeSingleFilePreview){\n\n        UIAlertView *downloadCurrentFileAlert = [[UIAlertView alloc] initWithTitle:@&quot;Download The Current File?&quot; message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;NO&quot; otherButtonTitles:@&quot;YES&quot;, nil];\n        downloadCurrentFileAlert.tag = kDownloadCurrentFileAlertTag;\n        [downloadCurrentFileAlert show];\n    }\n}\n\n#pragma mark UIAlertView Delegate Method\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    __weak DJICamera* camera = [self fetchCamera];\n\n    if (alertView.tag == kDeleteAllSelFileAlertTag) {\n\n        if (buttonIndex == 1) {\n            [camera.playbackManager deleteAllSelectedFiles];\n            [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        }\n\n    }else if (alertView.tag == kDeleteCurrentFileAlertTag){\n\n        if (buttonIndex == 1) {\n            [camera.playbackManager deleteCurrentPreviewFile];\n            [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        }\n\n    }else if (alertView.tag == kDownloadAllSelFileAlertTag){\n\n        if (buttonIndex == 1) {\n            [self downloadFiles];\n        }\n\n    }else if (alertView.tag == kDownloadCurrentFileAlertTag){\n\n        if (buttonIndex == 1) {\n            [self downloadFiles];\n        }\n    }\n\n}</code></pre>\n<p>In <strong>downloadButtonAction</strong> method, we update the <strong>statusAlertView</strong>&#39;s title and message. And create two new <strong>UIAlertView</strong>s to ask users for permission to download files based on the <strong>cameraPlaybackState</strong>&#39;s <strong>playbackMode</strong> value. Finally, in the UIAlertView delegate method, we just implement the <strong>downloadFiles</strong> method once the <strong>OK</strong> button of alertView is pressed. </p>\n<p>Lastly, implement the <strong>downloadFiles</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void) downloadFiles\n{\n    [self resetDownloadData];\n\n    if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeSingleFilePreview) {\n        self.selectedFileCount = 1;\n    }\n\n    __weak DJIRootViewController *weakSelf = self;\n    __weak DJICamera *camera = [self fetchCamera];\n\n    [camera.playbackManager downloadSelectedFilesWithPreparation:^(NSString * _Nullable fileName, DJIDownloadFileType fileType, NSUInteger fileSize, BOOL * _Nonnull skip) {\n\n        [weakSelf startUpdateTimer];\n        weakSelf.totalFileSize = (long)fileSize;\n        weakSelf.targetFileName = fileName;\n\n        [weakSelf showStatusAlertView];\n        NSString *title = [NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, weakSelf.downloadedFileCount + 1, self.selectedFileCount];\n        NSString *message = [NSString stringWithFormat:@&quot;FileName:%@, FileSize:%0.1fKB, Downloaded:0.0KB&quot;, fileName, weakSelf.totalFileSize / 1024.0];\n        [weakSelf updateStatusAlertContentWithTitle:title message:message shouldDismissAfterDelay:NO];\n\n    } process:^(NSData * _Nullable data, NSError * _Nullable error) {\n\n        /**\n         *  Important: Don&#39;t update Download Progress UI here, it will slow down the download file speed.\n         */\n\n        if (data) {\n            [weakSelf.downloadedImageData appendData:data];\n            weakSelf.currentDownloadSize += data.length;\n        }\n        weakSelf.downloadImageError = error;\n\n    } fileCompletion:^{\n\n        NSLog(@&quot;Completed Download&quot;);\n        weakSelf.downloadedFileCount++;\n\n        UIImage *downloadImage = [[UIImage alloc] initWithData:self.downloadedImageData];\n\n        [weakSelf.downloadedImageData setData:[NSData dataWithBytes:NULL length:0]]; //Reset DownloadedImageData when download one file finished\n        weakSelf.currentDownloadSize = 0.0f; //Reset currentDownloadSize when download one file finished\n\n        NSString *title = [NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, weakSelf.downloadedFileCount, weakSelf.selectedFileCount];\n        [weakSelf updateStatusAlertContentWithTitle:title message:@&quot;Completed&quot; shouldDismissAfterDelay:YES];\n\n    } overallCompletion:^(NSError * _Nullable error) {\n\n        NSLog(@&quot;DownloadFiles Error %@&quot;, error.description);\n    }];\n\n}</code></pre>\n<p>In this method, we call the <strong>resetDownloadData</strong> method to reset data first. We check if the playbackMode is <strong>DJICameraPlaybackModeSingleFilePreview</strong> and update the <strong>selectedFileCount</strong> variable&#39;s value. Then we call the following method of the <strong>DJICamera</strong>&#39;s playbackManager:</p>\n<pre><code class=\"lang-objc\">- (void)downloadSelectedFilesWithPreparation:(DJIFileDownloadPreparingBlock)prepareBlock process:(DJIFileDownloadingBlock)dataBlock fileCompletion:(DJIFileDownloadCompletionBlock)fileCompletionBlock overallCompletion:(DJICompletionBlock)overallCompletionBlock;</code></pre>\n<p>In the first block prepareBlock, we call the <strong>startUpdateTimer</strong> method to start updateImageDownloadTimer. Then, we update the <strong>totalFileSize</strong> and <strong>targetFileName</strong> variables. Next, we show statusAlertView and update its title and message with the download image info.</p>\n<p>In the second block dataBlock, we append the <strong>downloadedImageData</strong> with the downloaded image data and update the <strong>currentDownloadSize</strong> and <strong>downloadImageError</strong> variables&#39; values.</p>\n<p>In the third block completion, we increase the <strong>downloadedFileCount</strong> variable. We then create an UIImage object with <strong>downloadedImageData</strong>. Next, we reset downloadedImageData&#39;s data and currentDownloadSize&#39;s value. Moreover, we update <strong>statusAlertView</strong> with the image download info. </p>\n<h3 id=\"2-saving-downloaded-photos-to-photo-album\">2. Saving downloaded photos to Photo Album</h3>\n<p>Now, we have implemented the download photos features, but if we want to save the downloaded photos to the iOS Photo Album?</p>\n<p>To do this, we will create a new property of NSMutableArray class and name it <strong>downloadedImageArray</strong> and initialize it in the <strong>initData</strong> method, also resetting it in the <strong>resetDownloadData</strong> method as follows:</p>\n<pre><code class=\"lang-objc\">- (void)initData\n{\n    self.downloadedImageData = [NSMutableData data];\n    self.downloadedImageArray = [NSMutableArray array];\n}\n\n- (void)resetDownloadData\n{\n    self.downloadImageError = nil;\n    self.totalFileSize = 0;\n    self.currentDownloadSize = 0;\n    self.downloadedFileCount = 0;\n\n    [self.downloadedImageData setData:[NSData dataWithBytes:NULL length:0]];\n    [self.downloadedImageArray removeAllObjects];\n}</code></pre>\n<p>Once that&#39;s done, let&#39;s add two new methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)saveDownloadImage\n{\n    if (self.downloadedImageArray &amp;&amp; self.downloadedImageArray.count &gt; 0)\n    {\n        UIImage *image = [self.downloadedImageArray lastObject];\n        UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);\n        [self.downloadedImageArray removeLastObject];\n    }\n}\n\n- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo\n{\n\n    if (error != NULL)\n    {\n        // Show message when image saved failed\n        [self updateStatusAlertContentWithTitle:@&quot;Save Image Failed!&quot; message:[NSString stringWithFormat:@&quot;%@&quot;, error] shouldDismissAfterDelay:NO];\n    }\n    else\n    {\n        // Show message when image successfully saved\n        if (self.downloadedImageArray)\n        {\n            [self saveDownloadImage];\n\n            if (self.downloadedImageArray.count == 0)\n            {\n                [self updateStatusAlertContentWithTitle:@&quot;Stored to Photos Album&quot; message:@&quot;&quot; shouldDismissAfterDelay:YES];\n            }\n\n        }       \n    }\n\n}</code></pre>\n<p>In the saveDownloadImage method, we check if <strong>downloadedImageArray</strong> is empty and get its last UIImage, assigning it to the <strong>image</strong> variable. Then we use the <strong>UIImageWriteToSavedPhotosAlbum()</strong> method to save the image to the Photo Album and remove the last object from the downloadedImageArray.</p>\n<p>Next, in the selector method, we check if an error has occurred and invoke the <strong>saveDownloadImage</strong> method until the <strong>downloadedImageArray</strong> is empty. At the same time, we update the <strong>statusAlertView</strong> with related titles and messages.</p>\n<p>At the end, add the downloaded image object to downloadedImageArray, and call the stopTimer method and the saveDownloadImage method in the <strong>fileCompletionBlock</strong> block of the <strong>downloadFiles</strong> method:</p>\n<pre><code class=\"lang-objc\">\nfileCompletion:^{\n\n        NSLog(@&quot;Completed Download&quot;);\n        weakSelf.downloadedFileCount++;\n\n        UIImage *downloadImage = [[UIImage alloc] initWithData:self.downloadedImageData];\n        if (downloadImage) {\n            [weakSelf.downloadedImageArray addObject:downloadImage];\n        }\n\n        [weakSelf.downloadedImageData setData:[NSData dataWithBytes:NULL length:0]]; //Reset DownloadedImageData when download one file finished\n        weakSelf.currentDownloadSize = 0.0f; //Reset currentDownloadSize when download one file finished\n\n        NSString *title = [NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, weakSelf.downloadedFileCount, weakSelf.selectedFileCount];\n        [weakSelf updateStatusAlertContentWithTitle:title message:@&quot;Completed&quot; shouldDismissAfterDelay:YES];\n\n        if (weakSelf.downloadedFileCount == weakSelf.selectedFileCount) { //Downloaded all the selected files\n            [weakSelf stopTimer];\n            [weakSelf.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n            [weakSelf saveDownloadImage];\n        }\n\n    } overallCompletion:^(NSError * _Nullable error) {\n\n        NSLog(@&quot;DownloadFiles Error %@&quot;, error.description);\n    }];</code></pre>\n<p>Let&#39;s build and run the project. Try to download photos in Single Preview Mode and Multiple Preview Mode. Once it&#39;s finished, go to the Photo Album to check if the downloaded photos exist:</p>\n<ul>\n<li>Selecting files and downloading them:</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/downloadFiles1.gif\" alt=\"downloadFiles1\"></p>\n<ul>\n<li>Download completion and photos being saved to the Photo Album:</li>\n</ul>\n<p><img src=\"../../images/tutorials-and-samples/iOS/PlaybackDemo/downloadFiles2.gif\" alt=\"downloadFiles2\"></p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you have learned how to preview photos and videos in Single Preview Mode and Multiple Preview Mode, how to enter multiple edit mode and select files for deleting. You also learned how to download and save photos to the iOS Photo Album. Hope you enjoy it!</p>","meta":{"title":"Creating a Photo and Video Playback Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-PlaybackDemo"},"locale":"cn"}{"content":"<!-- toc -->\n\n<p>This tutorial is designed for you to obtain a better understanding of the DJI Remote Logger Tool. It will teach you how to use it for showing application log messages on a simple webpage.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>  In order to use the DJI Remote Logger Tool, you should have two parts: <strong>DJI iOS Mobile SDK</strong> and <strong>Server Script</strong>. The remote logger feature is integrated inside the SDK, you can use this feature in your application directly. For the server part, there are two connection modes showing below:</p>\n<h3 id=\"http-mode\">HTTP Mode</h3>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/httpModeFinalOne.png\" alt=\"httpMode\"></p>\n<p>You can connect your iOS device and Mac to the same WiFi network or connect to a local wireless connection created on your Mac too. This would be helpful when you test your application outside without internet connection.</p>\n<h3 id=\"localhost-mode\">Localhost Mode</h3>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/localHostModeFinal.png\" alt=\"localHostMode\"></p>\n<p>If you don&#39;t have iOS device, you can use your Xcode Simulator too. Using the url string like <strong><a href=\"http://localhost:4567\">http://localhost:4567</a></strong> can work well with the server script.</p>\n<h2 id=\"setup-and-run-the-server\">Setup and Run the Server</h2>\n<p>  You can get the server script from the <strong>Server</strong> folder from the <strong>Github Page</strong>. Please follow the steps below to setup the server:</p>\n<ol>\n<li>Open your terminal app and go to the Server folder</li>\n<li>Run bash script with the command: <code>./run_log_server.bash</code></li>\n<li>Open the webpage with the address shown in the command line</li>\n</ol>\n<p>If everything goes well, you should see something similar to the following screenshots:</p>\n<hr>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/commandline.png\" alt=\"localHostMode\"></p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/webpageView.png\" alt=\"webpage\"></p>\n<hr>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<h5 id=\"-1-lack-of-command-line-developer-tools\"><strong>1.</strong> Lack of command line developer tools</h5>\n<p>If you meet the following error, you may need to install the command line developer tools:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/xcodeSelectInstall.jpg\" alt=\"xcodeSelectInstall\"></p>\n<p>Run this command: <code>xcode-select -install</code>, then you will see the following dialog:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/xcodeSelect.png\" alt=\"xcodeSelect\"></p>\n<p>After installing it, try <code>./run_log_server.bash</code> command again. Problem should be solved.</p>\n<h5 id=\"-2-lack-of-ruby-install\"><strong>2.</strong> Lack of Ruby install</h5>\n<p>If you meet the following error, you may need to install ruby:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/installRuby.png\" alt=\"installRuby\"></p>\n<p>Run this command: <code>sudo brew install ruby</code>, after installing ruby successfully, try <code>./run_log_server.bash</code> command again. Problem should be solved.</p>\n<p>For other issues, please check the two problems above.</p>\n<h2 id=\"download-and-import-the-sdk\">Download and Import the SDK</h2>\n<p>You can download the iOS SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads\">https://developer.dji.com/mobile-sdk/downloads</a></a>.</p>\n<p>If you are not familiar with importing the SDK to your Xcode project, please check this tutorial on Github: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a></p>\n<h2 id=\"enable-remote-logging\">Enable Remote Logging</h2>\n<p><strong>1.</strong> Implement the <strong>DJISDKManagerDelegate</strong> protocol method in the ViewController.m file&#39;s extension part. Then create a new method named <strong>registerApp</strong> and invoke it in the viewDidAppear method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    [self registerApp];    \n}</code></pre>\n<blockquote>\n<p><strong>Note:</strong> If you don&#39;t know how to apply as a DJI developer and get the App Key, please refer to the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n</blockquote>\n<p><strong>2</strong>. Next, let&#39;s implement the DJISDKManagerDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        [DJISDKManager enableRemoteLoggingWithDeviceID:@&quot;Enter Device ID Here&quot; logServerURLString:@&quot;Enter URL Here&quot;];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}</code></pre>\n<p>The delegate method above gets called when the app is registered. If the registration is successful, we can call the <code>+(void) enableRemoteLoggingWithDeviceID: (NSString * _Nullable) deviceID logServerURLString: (NSString*) url;</code> class method of <strong>DJISDKManager</strong> to enable remote logging feature of the SDK by passing the <strong>deviceID</strong> parameter and <strong>url</strong> parameter, which you can get from the server script command line. </p>\n<blockquote>\n<p><strong>Note:</strong> </p>\n<p><strong>1.</strong> The <strong>deviceID</strong> is used to distinguish different iOS devices. You can show log messages from different iOS devices on the same webpage.</p>\n<p><strong>2.</strong> The <strong>url</strong> is shown in the command line like this:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/webUrl.png\" alt=\"webUrl\"></p>\n</blockquote>\n<p><strong>3</strong>. Build and run the project in Xcode. If everything is OK, you will see a &quot;Register App Successed!&quot; alert once the application loads. </p>\n<h2 id=\"show-log-message-on-webpage\">Show Log Message on Webpage</h2>\n<p>   Go to Main.storyboard and drag a UIButton to the center of the view, name it &quot;Log SDK Version&quot; and create an IBAction method, named <code>- (IBAction)logSDKVersionButtonAction:(id)sender</code> for it in the ViewController.m file. Implement the IBAction method shown as below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)logSDKVersionButtonAction:(id)sender {\n   DJILogDebug(@&quot;SDK Version: %@&quot;, [DJISDKManager getSDKVersion]);\n}</code></pre>\n<p>   In the code above, we use <strong>DJILogDebug</strong> Macro to show SDK&#39;s version info. There are five types of log Macros, you can use them for different purposes:</p>\n<ul>\n<li>DJILogError( )</li>\n<li>DJILogWarn( )</li>\n<li>DJILogInfo( )</li>\n<li>DJILogDebug( )</li>\n<li>DJILogVerbose( )</li>\n</ul>\n<p>Finally, build and run the project, press the button, you may be able to see the SDK version log message on the webpage like the followings:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/screenshot.png\" alt=\"appScreenshot\"></p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/webpageLog.png\" alt=\"webpageLog\"></p>\n<blockquote>\n<p><strong>Note</strong>: If you cannot see the logs on webpage and got the log message in the Xcode Console like this: \n<img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/consoleLog.png\" alt=\"consoleLog\"></p>\n<p>You can solve this issue by adding the following item, &quot;App Transport Security Settings&quot; in the <strong>Info.plist</strong> file and modify the &quot;Allow Arbitrary Loads&quot; BOOL value to YES:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/appTransport.png\" alt=\"appTransport\"></p>\n</blockquote>\n<p> Furthermore, the DJI Remote Logger Tool supports multiple iOS devices logging, you can assign different Device IDs for different iOS devices in the <code>+(void)enableRemoteLoggingWithDeviceID:logServerURLString:</code> class method of DJISDKManager.</p>\n<p> Also you can use url content filter for specific device&#39;s log like this: \n  <code>http://10.81.9.167:4567/?filter=113</code>. </p>\n<p> <img src=\"../../images/tutorials-and-samples/iOS/RemoteLoggerDemo/multipleDevices.png\" alt=\"multipleDevices\"></p>\n<h3 id=\"summary\">Summary</h3>\n<p>  Congratulations! You&#39;ve learned how to use DJI Remote Logger Tool to show log messages of your application using DJI Mobile SDK. With DJI Remote Logger Tool, you can developer and debug your application with DJI Mobile SDK more efficiently. Hope you enjoy this tutorial, Thanks!</p>","meta":{"title":"DJI Remote Logger Tutorial","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/DJIRemoteLoggerDemo"},"locale":"cn"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI Forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use the DJISimulator in your Xcode project using DJI Mobile SDK. With the help of Virtual Stick control, you can input Virtual Stick flight control data and check the changes of simulator state in real time.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<p>We use Phantom 4 as an example to make this demo.</p>\n<p>Let&#39;s get started!</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>DJISimulator is used to control the aircraft in a simulated environment based on the virtual stick input. The simulated aircraft state information will also be displayed on the screen.</p>\n<p>You can use the <code>DJISimulator</code> class in <code>DJIFlightController</code> to control the simulation. It allows both manual and automated flights to be simulated without actually flying the aircraft.</p>\n<p>Additionally, simulator initialization, monitoring and termination can be controlled directly through the SDK allowing for application development in continuous integration environments.</p>\n<h2 id=\"implementing-the-ui-of-the-application\">Implementing the UI of the Application</h2>\n<h3 id=\"importing-sdk-and-register-application\">Importing SDK and Register Application</h3>\n<p>Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;DJISimulatorDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s delete the <strong>ViewController.h</strong> and <strong>ViewController.m</strong> files, which were created by Xcode when you create the project. Then create a UIView Controller named <strong>RootViewController</strong> and set the class of original ViewController object in storyboard to &quot;RootViewController&quot;.</p>\n<p>Next, let&#39;s import the DJISDK.framework to the project and implement the registration process in the <strong>RootViewController</strong>. If you are not familiar with the process of importing and activating DJI SDK, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h3 id=\"working-on-the-ui-of-application\">Working on the UI of Application</h3>\n<h4 id=\"creating-the-ui-of-rootviewcontroller\">Creating the UI of RootViewController</h4>\n<p>Let&#39;s open the &quot;Main.storyboard&quot; and make the <strong>RootViewController</strong> embed in a Navigation Controller and set it as the Storyboard Entry Point. Next, drag and drop two UILabel objects to the RootViewController and named them as &quot;Product Connection Status&quot; and &quot;Model: Not Available&quot;. Moreover, drag and drop a UIButton object and place under the two UILabels, named it as &quot;Open&quot;, then set its background image as &quot;btn.png&quot; file, which you can get it from the Github Sample Project. Lastly, setup the UI elements&#39; auto layout to support multiple device screen size.</p>\n<h4 id=\"creating-the-ui-of-djisimulatorviewcontroller\">Creating the UI of DJISimulatorViewController</h4>\n<p>Drag and drop another ViewController object from the Object Library to the right of <strong>RootViewController</strong> in the storyboard. Then create another UIViewController class file in the navigator and named it as &quot;DJISimulatorViewController&quot;, then set the class name in storyboard too.</p>\n<p>Furthermore, drag and drop 5 UIButton objects and place them on top, named them from the left to right as &quot;EnterVirtualStickControl&quot;, &quot;ExitVirtualStickControl&quot;, &quot;Start Simulator&quot;, &quot;Takeoff&quot; and &quot;Land&quot;. Make sure they are place inside a UIView object as subviews. Next, drag and drop a UILabel and place it under the 5 UIButton objects, named it as &quot;Simulator State&quot;. </p>\n<p>Lastly, place two UIImageView objects inside a UIView (Label it as &quot;VirtualStick Left&quot;) as subviews, and set their images as &quot;stick_base.png&quot; and &quot;stick_normal.png&quot;, which you can get them from the Github sample project. Now, the left joystick&#39;s UI has setuped. Similiarly, let&#39;s make the right joystick&#39;s UI in the same way. </p>\n<p>For more detail configurations of storyboard, please check the Github sample project. If everything goes well, you should see the following screenshot:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/SimulatorDemo/simulatorStoryboard.png\" alt=\"\"></p>\n<h2 id=\"working-on-rootviewcontroller\">Working on RootViewController</h2>\n<p>Let&#39;s open RootViewController.m file and create IBOutlets properties to link the UI elements in storyboard. Then add the following method to update the two UILabel objects&#39; content when product connection update: </p>\n<pre><code class=\"lang-objc\">-(void) updateStatusBasedOn:(DJIBaseProduct* )newConnectedProduct {\n    if (newConnectedProduct){\n        self.connectStatusLabel.text = NSLocalizedString(@&quot;Status: Product Connected&quot;, @&quot;&quot;);\n        self.modelNameLabel.text = [NSString stringWithFormat:NSLocalizedString(@&quot;Model: \\%@&quot;, @&quot;&quot;),newConnectedProduct.model];\n        self.modelNameLabel.hidden = NO;\n\n    }else {\n        self.connectStatusLabel.text = NSLocalizedString(@&quot;Status: Product Not Connected&quot;, @&quot;&quot;);\n        self.modelNameLabel.text = NSLocalizedString(@&quot;Model: Unknown&quot;, @&quot;&quot;);\n    }\n}</code></pre>\n<p>Next, invoke the above method at the end of both the <code>viewDidAppear</code> method and <code>sdkManagerProductDidChangeFrom:to:</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    ...\n\n    if(self.product){\n        [self updateStatusBasedOn:self.product];\n    }\n}</code></pre>\n<pre><code class=\"lang-objc\">- (void)sdkManagerProductDidChangeFrom:(DJIBaseProduct *)oldProduct to:(DJIBaseProduct *)newProduct\n{\n    ...\n\n    [self updateStatusBasedOn:newProduct];\n}</code></pre>\n<p>For more details of the implementation of RootViewController, please check the Github sample project.</p>\n<h2 id=\"implementing-virtualstickview\">Implementing VirtualStickView</h2>\n<p>In order to input some simulated data, like <code>pitch</code>, <code>roll</code>, <code>yaw</code> and <code>verticalThrottle</code>, you will need a virtual stick control. In our previous step, we have finished the UI of the virtual stick, let&#39;s work on the implementation.</p>\n<p>We implement the virtual stick control base on an open source Github project <a href=\"https://github.com/pyzhangxiang/joystick-ios\" target=\"_blank\">joystick_ios</a>, now create a new UIView class and named it as <strong>VirtualStickView</strong>. You can check the same class files in the Github Sample Project for implementation details, here we just explain the notification logic.</p>\n<p>The following method will be invoked in <code>touchEvent:</code>, <code>touchesEnded:withEvent:</code>, <code>touchesCancelled:withEvent:</code> and <code>onUpdateTimerTicked:</code> methods in VirtualStickView.m file:</p>\n<pre><code class=\"lang-objc\">- (void)notifyDir:(CGPoint)dir\n{\n    NSValue *vdir = [NSValue valueWithCGPoint:dir];\n    NSDictionary *userInfo = [NSDictionary dictionaryWithObjectsAndKeys:\n                              vdir, @&quot;dir&quot;, nil];\n\n    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];\n    [notificationCenter postNotificationName:@&quot;StickChanged&quot; object:self userInfo:userInfo];\n}</code></pre>\n<p>When you touch on the virtual stick image and drag it around inside the <strong>VirtualStickView</strong>, the NSNotificationCenter will post a notification with the name of &quot;StickChanged&quot; and the location of the current virtual stick, which uses a CGPoint to represent it.</p>\n<h2 id=\"implementing-djisimulatorviewcontroller\">Implementing DJISimulatorViewController</h2>\n<p>Once you finished implementing the VirtualStickView, let&#39;s continue to implement the last <strong>DJISimulatorViewController</strong>. Open the DJISimulatorViewController.m file and import the following header files and create related IBOutlet properties and IBAction methods:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJISimulatorViewController.h&quot;\n#import &quot;VirtualStickView.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\n@interface DJISimulatorViewController ()&lt;DJISimulatorDelegate&gt;\n\n@property(nonatomic, weak) IBOutlet VirtualStickView *joystickLeft;\n@property(nonatomic, weak) IBOutlet VirtualStickView *joystickRight;\n\n@property (weak, nonatomic) IBOutlet UIButton *simulatorButton;\n@property (weak, nonatomic) IBOutlet UILabel *simulatorStateLabel;\n@property (assign, nonatomic) BOOL isSimulatorOn;\n@property (assign, nonatomic) float mXVelocity;\n@property (assign, nonatomic) float mYVelocity;\n@property (assign, nonatomic) float mYaw;\n@property (assign, nonatomic) float mThrottle;\n\n- (IBAction) onEnterVirtualStickControlButtonClicked:(id)sender;\n- (IBAction) onExitVirtualStickControlButtonClicked:(id)sender;\n- (IBAction) onTakeoffButtonClicked:(id)sender;\n- (IBAction) onSimulatorButtonClicked:(id)sender;\n- (IBAction) onLandButtonClicked:(id)sender;\n\n@end</code></pre>\n<p>Here, we first implement the <strong>DJISimulatorDelegate</strong> protocol in the interface. Then create IBOutlet properties for the left and right <code>VirtualStickView</code>, and the <code>simulatorButton</code>, <code>simulatorStateLabel</code>. The <code>isSimulatorOn</code> bool property is used to store the start state of DJISimulator. <code>mXVelocity</code>, <code>mYVelocity</code>, <code>mYaw</code> and <code>mThrottle</code> properties are used to store the <code>DJIVirtualStickFlightControlData</code> struct data of <code>DJIFlightController</code>.</p>\n<p>For the remaining five IBAction methods, they are related to the five UIButtons on top. We can use them to <strong>enter</strong> or <strong>exit</strong> virtual stick, <strong>take off</strong> or <strong>auto land</strong> the aircraft and <strong>start</strong> or <strong>stop</strong> simulator.</p>\n<p>Before we continue to implement the <strong>DJISimulatorViewController</strong>, let&#39;s create the <strong>DemoUtility</strong> class (Inherited from <code>NSObject</code>) to define some common methods:</p>\n<ul>\n<li>DemoUtility.h</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &lt;Foundation/Foundation.h&gt;\n#import &lt;UIKit/UIKit.h&gt;\n\n#define WeakRef(__obj) __weak typeof(self) __obj = self\n#define WeakReturn(__obj) if(__obj ==nil)return;\n\n@class DJIBaseProduct;\n@class DJIAircraft;\n@class DJIGimbal;\n@class DJIFlightController;\n\n@interface DemoUtility : NSObject\n\n+(DJIBaseProduct*) fetchProduct;\n+(DJIAircraft*) fetchAircraft;\n+(DJIFlightController*) fetchFlightController;\n+ (void)showAlertViewWithTitle:(NSString *)title message:(NSString *)message cancelAlertAction:(UIAlertAction*)cancelAlert defaultAlertAction:(UIAlertAction*)defaultAlert viewController:(UIViewController *)viewController;\n\n@end</code></pre>\n<ul>\n<li>DemoUtlity.m</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &quot;DemoUtility.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\n@implementation DemoUtility\n\n+(DJIBaseProduct*) fetchProduct {\n    return [DJISDKManager product];\n}\n\n+(DJIAircraft*) fetchAircraft {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]);\n    }\n    return nil;\n}\n\n+(DJIFlightController*) fetchFlightController {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).flightController;\n    }\n    return nil;\n}\n\n+ (void)showAlertViewWithTitle:(NSString *)title message:(NSString *)message cancelAlertAction:(UIAlertAction*)cancelAlert defaultAlertAction:(UIAlertAction*)defaultAlert viewController:(UIViewController *)viewController{\n\n    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n\n    if (cancelAlert) {\n        [alertController addAction:cancelAlert];\n    }\n    if (defaultAlert) {\n        [alertController addAction: defaultAlert];\n    }\n\n    [viewController presentViewController:alertController animated:YES completion:nil];\n}\n\n@end</code></pre>\n<p>For the <code>fetchProduct</code>, <code>fetchAircraft</code> and <code>fetchFlightController</code> methods, they are used to get the latest DJIBaseProduct, DJIAircraft and DJIFlightController object. For the <code>showAlertViewWithTitle:message: cancelAlertAction:defaultAlertAction:viewController:</code> method, it&#39;s used to show an alertView for our developers.</p>\n<h3 id=\"working-on-the-virtual-stick-control-feature\">Working on the Virtual Stick Control feature</h3>\n<p>Now, let&#39;s come back to the &quot;DJISimulatorViewController.m&quot; file and implement the virtual stick feature. First, we create an NSNotificationCenter variable and invoke the <code>addObserver:selector:name:object:</code> method to observe the &quot;StickChanged&quot; notification, which is post from the <strong>VirtualStickView</strong>. When the notification is post, a selector method <code>onStickChanged:</code> will be invoked to send virtual stick flight control data as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    self.title = @&quot;DJISimulator Demo&quot;;\n\n    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver: self\n                           selector: @selector (onStickChanged:)\n                               name: @&quot;StickChanged&quot;\n                             object: nil];</code></pre>\n<p>Next, implement the <code>onStickChanged:</code> select method and <code>setThrottle:andYaw:</code>, <code>setXVelocity:andYVelocity:</code> methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)onStickChanged:(NSNotification*)notification\n{\n    NSDictionary *dict = [notification userInfo];\n    NSValue *vdir = [dict valueForKey:@&quot;dir&quot;];\n    CGPoint dir = [vdir CGPointValue];\n\n    VirtualStickView* virtualStick = (VirtualStickView*)notification.object;\n    if (joystick) {\n        if (virtualStick == self.virtualStickLeft) {\n            [self setThrottle:dir.y andYaw:dir.x];\n        }\n        else\n        {\n            [self setXVelocity:-dir.y andYVelocity:dir.x];\n        }\n    }\n}\n\n-(void) setThrottle:(float)y andYaw:(float)x\n{\n    self.mThrottle = y * -2;\n    self.mYaw = x * 30;\n\n    [self updateVirtualStick];\n}\n\n-(void) setXVelocity:(float)x andYVelocity:(float)y {\n    self.mXVelocity = x * DJIVirtualStickRollPitchControlMaxVelocity;\n    self.mYVelocity = y * DJIVirtualStickRollPitchControlMaxVelocity;\n    [self updateVirtualStick];\n}\n\n-(void) updateVirtualStick\n{\n    // In rollPitchVelocity mode, the pitch property in DJIVirtualStickFlightControlData represents the Y direction velocity.\n    // The roll property represents the X direction velocity.\n    DJIVirtualStickFlightControlData ctrlData = {0};\n    ctrlData.pitch = self.mYVelocity;\n    ctrlData.roll = self.mXVelocity;\n    ctrlData.yaw = self.mYaw;\n    ctrlData.verticalThrottle = self.mThrottle;\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    if (fc &amp;&amp; fc.isVirtualStickControlModeAvailable) {\n        [fc sendVirtualStickFlightControlData:ctrlData withCompletion:nil];\n    }\n}</code></pre>\n<p>In the code above, we implement the following features:</p>\n<p><strong>1.</strong> In the <code>onStickChanged:</code> method, we get the CGPoint object of the moving virtual stick&#39;s position, cast the notification object to get the <code>VirtualStickView</code> object. Then we invoke the <code>setThrottle:andYaw</code> and <code>setXVelocity:andYVelocity:</code> methods based on the current controlling virtual stick. </p>\n<p><strong>2.</strong> The range of VirtualStickView&#39;s movement is [-1, 1], up and down, left and right. Please check the follow diagram for details:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/SimulatorDemo/virtualStickControl.png\" alt=\"\"></p>\n<p> So the range of <strong>x</strong> and <strong>y</strong> value of <code>dir</code> variable is [-1, 1]. In the <code>setThrottle:andYaw:</code> method, we multiply <code>y</code> by -2 to change the range to [-2, 2] from bottom to top. Then multiply <code>x</code> by 30 to change the range to [-30, 30]. These range are tested by us to achieve a better control experience, you can take them for example. Moreover, you can learn the max and min values of control velocity for throttle and yaw in virtual stick control from the following const variables in <code>DJIFlightController</code>:</p>\n<ul>\n<li>Yaw control</li>\n</ul>\n<pre><code class=\"lang-objc\"> /**\n *  Yaw control angular velocity MAX value is 100 degrees/second.\n */\nDJI_API_EXTERN const float DJIVirtualStickYawControlMaxAngularVelocity;\n/**\n *  Yaw control angular velocity MIN value is -100 degrees/second.\n */\nDJI_API_EXTERN const float DJIVirtualStickYawControlMinAngularVelocity;</code></pre>\n<ul>\n<li>Throttle Control</li>\n</ul>\n<pre><code class=\"lang-objc\"> /**\n *  The vertical control velocity MIN value is -4 m/s in `VirtualStickControlMode`. Positive velocity is up.\n */\nDJI_API_EXTERN const float DJIVirtualStickVerticalControlMinVelocity;\n/**\n *  The vertical control velocity MAX value is 4 m/s in VirtualStickControlMode. Positive velocity is up.\n */\nDJI_API_EXTERN const float DJIVirtualStickVerticalControlMaxVelocity;</code></pre>\n<p>Lastly, invoke the <code>updateVirtualStick</code> method to send the virtual stick control data.</p>\n<p><strong>3.</strong> In the <code>setXVelocity:andYVelocity:</code> method, we multiply the <code>x</code> and <code>y</code> variables with <code>DJIVirtualStickRollPitchControlMaxVelocity</code> to change the range to [-15, 15] for pitch and roll axises velocity control, you can  learn the max and min values of control velocity for roll and pitch in virtual stick control from the following const variables in <code>DJIFlightController</code>:</p>\n<pre><code class=\"lang-objc\">/**\n *  Roll/Pitch control velocity MAX value is 15m/s.\n */\nDJI_API_EXTERN const float DJIVirtualStickRollPitchControlMaxVelocity;\n/**\n *  Roll/Pitch control velocity MIN value is -15m/s.\n */\nDJI_API_EXTERN const float DJIVirtualStickRollPitchControlMinVelocity;</code></pre>\n<p>Then invoke the <code>updateVirtualStick</code> method to send the virtual stick control data.</p>\n<p><strong>4.</strong> In the <code>updateVirtualStick</code> method, we first create and initialize a <code>DJIVirtualStickFlightControlData</code> variable and assign its <code>pitch</code>, <code>roll</code>, <code>yaw</code> and <code>verticalThrottle</code> values with <code>self.mYVelocity</code>, <code>self.mXVelocity</code>, <code>self.mYaw</code> and <code>self.mThrottle</code>. Then invoke the <code>sendVirtualStickFlightControlData:withCompletion:</code> method of DJIFlightController to send the simulated virtual stick control data to the aircraft. </p>\n<p>Once you finished the above step, let&#39;s implement the <strong>Enable Virtual Stick</strong> and <strong>Exit Virtual Stick</strong> IBAction methods:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onEnterVirtualStickControlButtonClicked:(id)sender\n{\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc) {\n        fc.yawControlMode = DJIVirtualStickYawControlModeAngularVelocity;\n        fc.rollPitchControlMode = DJIVirtualStickRollPitchControlModeVelocity;\n\n        [fc enableVirtualStickControlModeWithCompletion:^(NSError *error) {\n            if (error) {\n                [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Enter Virtual Stick Mode: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            }\n            else\n            {\n                [DemoUtility showAlertViewWithTitle:nil message:@&quot;Enter Virtual Stick Mode:Succeeded&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            }\n        }];\n    }\n    else\n    {\n        [DemoUtility showAlertViewWithTitle:nil message:@&quot;Component not exist.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n    }\n}</code></pre>\n<pre><code class=\"lang-objc\">-(IBAction) onExitVirtualStickControlButtonClicked:(id)sender\n{\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc) {\n        [fc disableVirtualStickControlModeWithCompletion:^(NSError * _Nullable error) {\n            if (error){\n                [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Exit Virtual Stick Mode: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            } else{\n                [DemoUtility showAlertViewWithTitle:nil message:@&quot;Exit Virtual Stick Mode:Succeeded&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            }\n        }];\n    }\n    else\n    {\n        [DemoUtility showAlertViewWithTitle:nil message:@&quot;Component not exist.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n    }\n}</code></pre>\n<p>In the <code>onEnterVirtualStickControlButtonClicked:</code> IBAction method, we first assign the <code>yawControlMode</code> and <code>rollPitchControlMode</code> properties of DJIFlightController to <code>DJIVirtualStickYawControlModeAngularVelocity</code> and <code>DJIVirtualStickRollPitchControlModeVelocity</code>. Then invoke the <code>enableVirtualStickControlModeWithCompletion:</code> method of DJIFlightController to enable the virtual stick control. </p>\n<p>Similiarly, in the <code>onExitVirtualStickControlButtonClicked:</code> IBAction method, we invoke the <code>disableVirtualStickControlModeWithCompletion:</code> method of DJIFlightController to disable virtual stick control.</p>\n<h3 id=\"implementing-djisimulator\">Implementing DJISimulator</h3>\n<p>  Before we implement the DJISimulator feature, we may need to update the <code>simulatorButton</code>&#39;s title and hidden state first. Let&#39;s override the <code>viewWillAppear:</code> and <code>viewWillDisappear:</code> methods as shown below:</p>\n<pre><code class=\"lang-objc\">-(void)viewWillAppear:(BOOL)animated {\n\n    [super viewWillAppear:animated];\n\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    if (fc &amp;&amp; fc.simulator) {\n        self.isSimulatorOn = fc.simulator.isSimulatorStarted;\n        [self updateSimulatorUI];\n\n        [fc.simulator addObserver:self forKeyPath:@&quot;isSimulatorStarted&quot; options:NSKeyValueObservingOptionNew context:nil];\n        [fc.simulator setDelegate:self];\n    }\n}\n\n-(void)viewWillDisappear:(BOOL)animated {\n\n    [super viewWillDisappear:animated];\n\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    if (fc &amp;&amp; fc.simulator) {\n        [fc.simulator removeObserver:self forKeyPath:@&quot;isSimulatorStarted&quot;];\n        [fc.simulator setDelegate:nil];\n    }\n}\n\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context {\n    if ([keyPath isEqualToString:@&quot;isSimulatorStarted&quot;]) {\n        self.isSimulatorOn = [[change objectForKey:NSKeyValueChangeNewKey] boolValue];\n        [self updateSimulatorUI];\n    }\n}\n\n-(void) updateSimulatorUI {\n    if (!self.isSimulatorOn) {\n        [self.simulatorButton setTitle:@&quot;Start Simulator&quot; forState:UIControlStateNormal];\n        [self.simulatorStateLabel setHidden:YES];\n    }\n    else {\n        [self.simulatorButton setTitle:@&quot;Stop Simulator&quot; forState:UIControlStateNormal];\n    }\n}</code></pre>\n<p>In the <code>viewWillAppear:</code> method, we first fetch the DJIFlightController object and update the <code>isSimulatorOn</code> variable, then invoke the <code>updateSimulatorUI</code> method to update the <code>simulatorButton</code> label. Furthermore, we use KVO here to observe the changes of <code>isSimulatorStarted</code> variable value of <code>DJISimulator</code>. Then set the delegate of the DJIFlightController&#39;s DJISimulator to self(DJISimulatorViewController).</p>\n<p>Next in the <code>viewWillDisappear:</code> method, we fetch the latest DJIFlightController object, then remove the observer of <code>isSimulatorStarted</code>, and set the delegate of DJISimulator to nil. </p>\n<p>Moreover, in the NSKeyValueObserving method, we fetch and update the latest <code>isSimulatorOn</code> property and invoke the <code>updateSimulatorUI</code> method to update the <code>simulatorButton</code>.</p>\n<p>Now, let&#39;s implement the <code>onSimulatorButtonClicked:</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)onSimulatorButtonClicked:(id)sender {\n\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc &amp;&amp; fc.simulator) {\n        if (!self.isSimulatorOn) {\n            // The initial aircraft&#39;s position in the simulator.\n            CLLocationCoordinate2D location = CLLocationCoordinate2DMake(22, 113);\n            [fc.simulator startSimulatorWithLocation:location updateFrequency:20 GPSSatellitesNumber:10 withCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Start simulator error: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n                } else {\n                    [DemoUtility showAlertViewWithTitle:nil message:@&quot;Start Simulator succeeded.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n                }\n            }];\n        }\n        else {\n            [fc.simulator stopSimulatorWithCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Stop simulator error: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n                } else {\n                    [DemoUtility showAlertViewWithTitle:nil message:@&quot;Stop Simulator succeeded.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n                }\n            }];\n        }\n    }\n}</code></pre>\n<p>In the code above, we first check if the simulator is started, if not, then create an initial aircraft location with CLLocationCoordinate2DMake(22, 113). Next invoke the <code>startSimulatorWithLocation:updateFrequency:GPSSatellitesNumber:withCompletion:</code> method of <code>DJISimulator</code> with the frequency of 20 and GPS satellite number of 10 to start the simulator. For more details of this method, please check the following method&#39;s inline documentations:</p>\n<pre><code class=\"lang-objc\">/**\n *  Start simulator. Will result in error if simulation is already started.\n *\n *  @param location     Simulator coordinate latitude and longitude in degrees.\n *  @param frequency    Aircraft simulator state push frequency in Hz with range [2, 150]. A setting of 10 Hz will result in delegate method being called, 10 times per second.\n *  @param number       The initial number of GPS satellites with range [0, 20].\n *  @param block        The Completion block.\n */\n- (void)startSimulatorWithLocation:(CLLocationCoordinate2D)location updateFrequency:(NSUInteger)frequency GPSSatellitesNumber:(NSUInteger)number withCompletion:(DJICompletionBlock)block;</code></pre>\n<p>if the simulator has already started, we can invoke the <code>stopSimulatorWithCompletion:</code> method of DJISimulator to stop the simulator.</p>\n<p>Lastly, let&#39;s implement the DJI Simulator delegate method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void)simulator:(DJISimulator *)simulator updateSimulatorState:(DJISimulatorState *)state {\n    [self.simulatorStateLabel setHidden:NO];\n    self.simulatorStateLabel.text = [NSString stringWithFormat:@&quot;Yaw: %0.2f Pitch: %0.2f, Roll: %0.2f\\n PosX: %0.2f PosY: %0.2f PosZ: %0.2f&quot;, state.yaw, state.pitch, state.roll, state.positionX, state.positionY, state.positionZ];\n}</code></pre>\n<p>This delegate method will be invoked when the simulator state is updated. We can update the <code>simulatorStateLabel</code>&#39;s hidden state and its text content here.</p>\n<h3 id=\"working-on-takeoff-and-autolanding-features\">Working on Takeoff and AutoLanding features</h3>\n<p>In order to simulate the aircraft&#39;s flight behaviour in a simulated environment, we will implement the take off and auto landing features here in the following two IBAction methods:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onTakeoffButtonClicked:(id)sender\n{\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc) {\n        [fc takeoffWithCompletion:^(NSError *error) {\n            if (error) {\n                [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Takeoff: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n            } else {\n                [DemoUtility showAlertViewWithTitle:nil message:@&quot;Takeoff Success.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n            }\n        }];\n    }\n    else\n    {\n        [DemoUtility showAlertViewWithTitle:nil message:@&quot;Component not exist.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n    }\n}\n\n- (IBAction)onLandButtonClicked:(id)sender {\n\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc) {\n        [fc autoLandingWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;AutoLand : %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n            } else {\n                [DemoUtility showAlertViewWithTitle:nil message:@&quot;AutoLand Succeeded.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            }\n        }];\n    }\n    else\n    {\n        [DemoUtility showAlertViewWithTitle:nil message:@&quot;Component not exist.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n    }\n}</code></pre>\n<p>In the <code>onTakeoffButtonClicked:</code> IBAction method, we invoke the <code>takeoffWithCompletion:</code> method of DJIFlightController to send the take off command to the aircraft. Similiarly, in the <code>onLandButtonClicked:</code> IBAction method, we invoke the <code>autoLandingWithCompletion:</code> method to send the auto landing command. It&#39;s just that simple and easy.</p>\n<p>We have gone through a long way so far, now, let&#39;s build and run the project, connect the demo application to  your Phantom 4 (Please check the <a href=\"../application-development-workflow/workflow-run.html\">Run Application</a> for more details) and check all the features we have implemented so far. </p>\n<p>If everything goes well, you should see something similiar to the following gif animation:</p>\n<p><img src=\"../../images/tutorials-and-samples/iOS/SimulatorDemo/simulatorAnimation.gif\" alt=\"\"></p>\n<ul>\n<li>If the demo application is connected with Phantom 4 successfully, you should see the <code>connectButton</code> button is available to press and the <code>connectStatusLabel</code> and <code>modelNameLabel</code> show the correct infos.</li>\n<li>Press <strong>Open</strong> and enter the simulator demo page, press <strong>EnterVirtualStickControl</strong> button to enable virtual stick control, then press &quot;Start Simulator&quot; to start the simulator.</li>\n<li>Moreover, press the <strong>Takeoff</strong> button to send take off command to the aircraft, if the command executes successfully, you should see the <strong>PosZ</strong> value start to change, means that the aircraft is rising.</li>\n<li>Now you can drag the left and right virtual stick controls to simulate the flight behavious.</li>\n<li>Lastly, press the &quot;Land&quot; button to make the aircraft start auto landing, once it finish, you may notice the <strong>PosZ</strong> value become &quot;0.00&quot;. Press the &quot;Stop Simulator&quot; button to stop the simulator and then press &quot;ExitVirtualStickControl&quot; to disable the virtual stick control.</li>\n</ul>\n<h3 id=\"summary\">Summary</h3>\n<p>In this tutorial, you&#39;ve learned how to use the DJISimulator feature to simulate aircraft&#39;s flight behaviour in a simulated environment based on the virtual stick control input and show the changes of simulator state(Yaw,Pitch,Roll,PosX,PosY and PosZ) in real time. Also you&#39;ve learned how to use Virtual Stick control to send virtual stick flight control data to the aircraft.</p>\n<p>This demo is a simple demonstration of using DJISimulator, to have a better user experience, you can create a 3D simulated environment using 3D game engine like <a href=\"https://unity3d.com\" target=\"_blank\"> Unity3D </a> or <a href=\"http://cocos3d.org\" target=\"_blank\"> Cocos3D </a> to show the simulated data and aircraft flight behavious inside your mobile application (Like the Flight Simulator in DJI Go app)!  </p>\n<p>Furthermore, the DJISimulator allows for automated testing in continous integration environment(Like <a href=\"https://jenkins.io\" target=\"_blank\"> Jenkins </a>), it would help your DJI-SDK based application testing process. Good luck, and hope you enjoyed this tutorial!</p>","meta":{"title":"DJI Simulator Tutorial","version":"v3.2","date":"2016-07-13T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-SimulatorDemo"},"locale":"cn"}{"content":"<h2 id=\"register-as-a-dji-developer\">Register as a DJI Developer</h2>\n<p>Register for a DJI Developer account here: <a href=\"http://developer.dji.com/register\" target=\"_blank\"><a href=\"http://developer.dji.com/register\">http://developer.dji.com/register</a></a>.</p>\n<p>During the registration process, email information and a credit card or phone number will need to be supplied to verify registration. Any credit card information given will only be used for verification and will not be charged.</p>\n<p>This guide assumes Xcode version 7.3 above and Android Studio version 2.1.1.</p>\n<h2 id=\"generate-an-app-key\">Generate an App Key</h2>\n<p>Every application needs a unique App Key to initialize the SDK.</p>\n<p>To create an App Key for an application:</p>\n<p>Go to the DJI developer <a href=\"http://developer.dji.com/en/user/apps\" target=\"_blank\">User Center</a></p>\n<ul>\n<li>Select the &quot;Apps&quot; tab on the left.</li>\n<li>Select the &quot;Create App&quot; button on the right.</li>\n<li><p>Enter the name, platform, package identifier, category and description of the application.</p>\n<ul>\n<li>For iOS, the package identifier is the <a href=\"http://developer.dji.com/en/user/mobile-sdk/ios-configuration\" target=\"_blank\">Bundle Identifier</a>.</li>\n<li>For Android, the package identifier is the <a href=\"http://developer.dji.com/en/user/mobile-sdk/android-configuration/\" target=\"_blank\">Package Name</a>.</li>\n</ul>\n</li>\n<li><p>An application activation email will be sent to complete App Key generation.</p>\n</li>\n<li>The App Key will appear in the user center, and can be copied and pasted into the application.</li>\n</ul>\n<h2 id=\"ios-sample-app\">iOS Sample App</h2>\n<p>The SDK doesn&#39;t need to be downloaded to run the iOS sample application as it&#39;s already included in the project.</p>\n<h3 id=\"ios-sample-code-setup\">iOS Sample Code Setup</h3>\n<p>Download or clone the iOS Sample Github Project from: <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS\" target=\"_blank\"><a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS\">https://github.com/dji-sdk/Mobile-SDK-iOS</a></a>.</p>\n<p>The sample code includes both an Objective C sample project and a Swift Sample project.</p>\n<p>To run the sample code, an <a href=\"#generate-an-app-key\">App Key</a> needs to be generated and inserted into the source files.</p>\n<h4 id=\"objective-c-app-key-setup\">Objective C App Key Setup</h4>\n<p>Navigate to the <strong>ObjcSampleCode</strong> folder and open the <strong>DJISdkDemo.xcodeproj</strong> project in Xcode.</p>\n<ul>\n<li><p>Change the <a href=\"http://developer.dji.com/en/user/mobile-sdk/ios-configuration\" target=\"_blank\">Bundle Identifier</a> to a unique identifier and use it to generate an <a href=\"#generate-an-app-key\">App Key</a>.</p>\n</li>\n<li><p>Paste the generated App Key string into the <code>appKey</code> variable definition in <strong>DJIRootViewController.m</strong>:</p>\n</li>\n</ul>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    //Register App with App Key\n    NSString* appKey = @&quot;&quot;; //TODO: Please enter your App Key here\n\n    if ([appKey length] == 0) {\n        ShowResult(@&quot;Please enter your app key.&quot;);\n    }\n    else\n    {\n        [DJISDKManager registerApp:appKey withDelegate:self];\n    }\n\n    [self initUI];\n}</code></pre>\n<h4 id=\"swift-app-key-setup\">Swift App Key Setup</h4>\n<p>Navigate to the <strong>DJISDKSwiftDemo</strong> folder and open the <strong>DJISDKSwiftDemo.xcodeproj</strong> project in Xcode.</p>\n<ul>\n<li><p>Change the <a href=\"http://developer.dji.com/en/user/mobile-sdk/ios-configuration\" target=\"_blank\">Bundle Identifier</a> to a unique identifier and use it to generate an <a href=\"#generate-an-app-key\">App Key</a>.</p>\n</li>\n<li><p>Paste the generated App Key string into the <code>APP_KEY</code> variable definition in <strong>StartupViewController.swift</strong>:</p>\n</li>\n</ul>\n<pre><code class=\"lang-swift\">let APP_KEY = &quot;&quot;//TODO: Please enter App Key Here\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    if(APP_KEY.isEmpty){\n        showAlert(&quot;Please enter your app key.&quot;)\n    }else\n    {\n        DJISDKManager.registerApp(APP_KEY, withDelegate: self)\n    }\n\n    initUI();\n}</code></pre>\n<h2 id=\"android-sample-app\">Android Sample App</h2>\n<p>The SDK doesn&#39;t need to be downloaded to run the Android sample application as it&#39;s already included in the project.</p>\n<h3 id=\"android-sample-code-setup\">Android Sample Code Setup</h3>\n<p>Download or clone the Android Sample Github Project from: <a href=\"https://github.com/dji-sdk/Mobile-SDK-Android\" target=\"_blank\"><a href=\"https://github.com/dji-sdk/Mobile-SDK-Android\">https://github.com/dji-sdk/Mobile-SDK-Android</a></a>.</p>\n<p>Open the project in Android Studio and paste the generated <a href=\"#generate-an-app-key\">App Key</a> string into <code>android:value</code> in the &quot;com.dji.sdk.API_KEY&quot; meda-data element in the &quot;AndroidManifest.xml&quot; file.</p>\n<pre><code class=\"lang-xml\">&lt;!--\n    ADD API_KEY HERE and make sure you\n    are connected to the Internet before\n    the app is launched\n--&gt;\n&lt;meta-data\n    android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;&quot; /&gt;</code></pre>\n<h2 id=\"run-the-sample-app\">Run the Sample App</h2>\n<p>Compile the sample application to the Android or iOS Mobile Device. Then the Mobile Device can be connected to the DJI product to run the Sample App.</p>\n<p>For Aircraft that use Lightbridge as the wireless link between the Remote Controller and the Aircraft, the Mobile Device is connected to the product by USB.</p>\n<p>For Aircraft or products that use WiFi as a wireless link, the Mobile Device is connected to the product by WiFi.</p>\n<h4 id=\"usb-connection-procedure\">USB Connection Procedure</h4>\n<p><em>Phantom 4, Phantom 3 Professional, Phantom 3 Advanced, Inspire series, M100, M600:</em></p>\n<p>Turn on the Remote Controller.</p>\n<ul>\n<li>Turn on the Aircraft and wait until the Remote Controller has connected with the Aircraft.</li>\n<li>Connect iOS/Android Mobile Device to the Remote Controller using a <strong>Lightning</strong> (iOS) or <strong>USB</strong> (Android) cable.</li>\n<li>Run Sample App on the Mobile Device.</li>\n</ul>\n<blockquote>\n<p><strong>Notes:</strong> </p>\n<p>If you are using an Android Device, please make sure your DJI Remote Controller supports <a href=\"https://source.android.com/devices/accessories/protocol.html\" target=\"_blank\">AOA</a> before you test the Sample app. You can upgrade your DJI Remote Controller to the latest firmware and check if there is a dialog pops up when you connect the app to it like this:</p>\n<p><img src=\"../../images/quick-start/android_dialog.png\" alt=\"dialog\"></p>\n<p>To learn how to change the default app for USB accessory, please check these two FAQs: <a href=\"../faq/index.html#How-do-I-reset-the-default-app-behavior-for-a-USB-Accessory-DJI-Product-on-Android-devices\">Android Device</a>, <a href=\"../faq/index.html#How-do-I-reset-the-default-app-behavior-for-a-USB-Accessory-DJI-Product-on-Samsung-devices\">Samsung Device</a>.</p>\n</blockquote>\n<h4 id=\"wifi-connection-procedure\">WiFi Connection Procedure</h4>\n<p><em>Phantom 3 Standard, Phantom 3 4K:</em></p>\n<p>Turn on the Remote Controller.  </p>\n<ul>\n<li>Connect Mobile Device to the WiFi network created by the Remote Controller.</li>\n<li>Turn on the Aircraft and wait until the Remote Controller has connected with the Aircraft.</li>\n<li>Run Sample App on the Mobile Device.</li>\n</ul>\n<p><em>Osmo:</em></p>\n<p>Turn on the Osmo.  </p>\n<ul>\n<li>Connect Mobile Device to the WiFi network created by the Osmo.</li>\n<li>Run Sample App on Mobile Device.</li>\n</ul>","meta":{"title":"Run Sample Application","date":"2016-06-24T00:00:00.000Z"},"locale":"cn"}{"content":"<h2 id=\"table-of-contents\">Table of Contents</h2>\n<p><strong>Getting Started</strong></p>\n<ul>\n<li><a href=\"#how-can-i-become-a-dji-developer\">How can I become a DJI Developer?</a></li>\n<li><a href=\"#where-are-the-dji-mobile-sdk-resources\">Where are the DJI Mobile SDK Resources?</a></li>\n<li><a href=\"#are-there-any-tutorials-for-the-dji-mobile-sdk\">Are there any tutorials for the DJI Mobile SDK?</a></li>\n<li><a href=\"#where-can-i-get-the-dji-sdk-api-reference\">Where can I get the DJI SDK API Reference?</a></li>\n<li><a href=\"#if-i-have-questions-where-can-i-get-help\">If I have questions, where can I get help?</a></li>\n<li><a href=\"#how-can-i-import-and-activate-the-dji-mobile-sdk-in-my-own-project\">How can I import and activate the DJI Mobile SDK in my own project?</a></li>\n<li><a href=\"#why-does-application-registration-fail\">Why does application registration fail?</a></li>\n</ul>\n<p><strong>Product Related</strong></p>\n<ul>\n<li><a href=\"#can-i-access-sd-card-data-without-an-sd-card-reader\">Can I access SD card data without an SD card reader?</a></li>\n<li><a href=\"#how-can-i-update-my-dji-aircraft-or-osmo-s-firmware\">How can I update my DJI Aircraft or OSMO&#39;s firmware?</a></li>\n<li><a href=\"#how-can-i-unlock-travel-mode-for-inspire-1\">How can I Unlock Travel Mode for Inspire 1?</a></li>\n<li><a href=\"#how-do-i-link-the-remote-controller-to-an-aircraft\">How do I link the Remote Controller to an aircraft?</a></li>\n</ul>\n<p><strong>General SDK</strong></p>\n<ul>\n<li><a href=\"#does-the-dji-mobile-sdk-give-access-to-all-the-functionality-in-the-dji-go-app\">Does the DJI Mobile SDK give access to all the functionality in the DJI GO App?</a></li>\n<li><a href=\"#is-a-flight-simulator-available-to-test-applications\">Is a flight simulator available to test applications?</a></li>\n<li><a href=\"#why-can-t-i-use-the-existing-simulator-for-the-phantom-4\">Why can’t I use the existing simulator for the Phantom 4?</a></li>\n<li><a href=\"#what-path-does-the-aircraft-take-in-a-curved-waypoint-mission\">What path does the aircraft take in a curved waypoint mission?</a></li>\n<li><a href=\"#why-does-yaw-rotation-cause-the-drone-to-drift-when-using-virtual-stick-apis\">Why does yaw rotation cause the drone to drift when using Virtual Stick APIs?</a></li>\n<li><a href=\"#Does-DJIWaypointMission-allow-only-one-waypoint\">Does DJIWaypointMission allow only one waypoint?</a></li>\n</ul>\n<p><strong>Android</strong></p>\n<ul>\n<li><a href=\"#how-can-i-run-the-android-sdk-sample-code\">How can I run the Android SDK Sample Code</a></li>\n<li><a href=\"#how-do-i-reset-the-default-app-behavior-for-a-usb-accessory-dji-product-on-android-devices\">How do I reset the default app behavior for a USB Accessory  (DJI Product) on Android devices?</a></li>\n<li><a href=\"#how-do-i-reset-the-default-app-behavior-for-a-usb-accessory-dji-product-on-android-devices\">How do I reset the default app behavior for a USB Accessory  (DJI Product) on Samsung devices?</a></li>\n<li><a href=\"#why-does-my-application-crash-when-i-run-on-android-6-0-marshmallow\">Why does my application crash when I run on Android 6.0 Marshmallow？</a></li>\n<li><a href=\"#why-can-t-my-android-application-connect-to-a-dji-product-when-using-the-dji-mobile-sdk-3-2-1-and-android-6-0-marshmallow-with-targetsdkversion-23\">Why can&#39;t my Android application connect to a DJI Product when using the DJI Mobile SDK 3.2.1 and Android 6.0 Marshmallow with targetSdkVersion 23?</a></li>\n</ul>\n<p><strong>iOS</strong></p>\n<ul>\n<li><a href=\"#does-dji-ios-sdk-support-cocoapods\">Does DJI iOS SDK Support CocoaPods?</a></li>\n<li><a href=\"#enabling-bitcode-in-xcode-7-doesn-t-work-for-dji-ios-sdk-sample-code-how-can-i-fix-it\">Enabling Bitcode in Xcode 7 doesn&#39;t work for DJI iOS SDK Sample Code, How can I fix it?</a></li>\n<li><a href=\"#does-dji-ios-sdk-support-swift-any-swift-sample-code\">Does DJI iOS SDK support Swift? Any Swift Sample Code?</a></li>\n<li><a href=\"#what-is-the-dji-remote-logger\">What is the DJI Remote Logger?</a></li>\n<li><a href=\"#will-my-application-work-with-phantom-3-and-inspire-1-if-supported-external-accessory-protocols-is-removed-from-info-plist\">Will my application work with Phantom 3 and Inspire 1 if &quot;Supported external accessory protocols&quot; is removed from info.plist?</a></li>\n</ul>\n<h2 id=\"getting-started\">Getting Started</h2>\n<h3 id=\"how-can-i-become-a-dji-developer-\">How can I become a DJI Developer?</h3>\n<p>Becoming a DJI developer is easy. Please see <a href=\"../application-development-workflow/workflow-register.html\">here</a> for details.</p>\n<h3 id=\"where-are-the-dji-mobile-sdk-resources-\">Where are the DJI Mobile SDK Resources?</h3>\n<p>All <a href=\"http://developer.dji.com/mobile-sdk/documentation\" target=\"_blank\"> documentation </a> can be found on the DJI developer website.</p>\n<p>The SDK can be downloaded from the <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"> website </a>. </p>\n<p>All sample code referenced in the tutorials is available on <a href=\"https://github.com/dji-sdk\" target=\"_blank\"> Github </a>.</p>\n<h3 id=\"are-there-any-tutorials-for-the-dji-mobile-sdk-\">Are there any tutorials for the DJI Mobile SDK?</h3>\n<p>Several tutorials for <a href=\"../android-tutorials/index.html\">Android</a> and <a href=\"../ios-tutorials/index.html\">iOS</a> are available. </p>\n<h3 id=\"where-can-i-get-the-dji-sdk-api-reference-\">Where can I get the DJI SDK API Reference?</h3>\n<ul>\n<li><p><a href=\"http://developer.dji.com/mobile-sdk/documentation/\" target=\"_blank\">iOS API Reference</a></p>\n</li>\n<li><p><a href=\"http://developer.dji.com/mobile-sdk/documentation/android\" target=\"_blank\">Android API Reference</a></p>\n</li>\n</ul>\n<h3 id=\"if-i-have-questions-where-can-i-get-help-\">If I have questions, where can I get help?</h3>\n<p>You can use the following methods to get help:</p>\n<ul>\n<li><p>StackOverFlow </p>\n<p>Post questions in StackOverFlow with DJI SDK tag: <a href=\"http://stackoverflow.com/questions/tagged/dji-sdk\" target=\"_blank\">dji-sdk</a></p>\n</li>\n<li><p>DJI SDK Forum</p>\n<p><a href=\"http://forum.dev.dji.com/forum-90-1.html\" target=\"_blank\"><a href=\"http://forum.dev.dji.com/forum-90-1.html\">http://forum.dev.dji.com/forum-90-1.html</a></a></p>\n</li>\n<li><p>Github Issues</p>\n<p><a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/issues\" target=\"_blank\">iOS Github Issues</a></p>\n<p><a href=\"https://github.com/dji-sdk/Mobile-SDK-Android/issues\" target=\"_blank\">Android Github Issues</a></p>\n</li>\n<li><p>Send Email</p>\n<p>If you prefer email, please send to <a href=\"&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x64;&#101;&#118;&#x40;&#x64;&#x6a;&#x69;&#x2e;&#x63;&#111;&#x6d;\">&#x64;&#101;&#118;&#x40;&#x64;&#x6a;&#x69;&#x2e;&#x63;&#111;&#x6d;</a> for help.</p>\n</li>\n</ul>\n<h3 id=\"how-can-i-import-and-activate-the-dji-mobile-sdk-in-my-own-project-\">How can I import and activate the DJI Mobile SDK in my own project?</h3>\n<p>The following two links from the documentation can help here:</p>\n<ul>\n<li><p><a href=\"../application-development-workflow/workflow-integrate.html#xcode-project-integration\">Xcode Project Integration</a></p>\n</li>\n<li><p><a href=\"../application-development-workflow/workflow-integrate.html#android-studio-project-integration\">Android Studio Project Integration</a></p>\n</li>\n</ul>\n<h3 id=\"why-does-application-registration-fail-\">Why does application registration fail?</h3>\n<p>The first time the application is initialized after installation, it connects to a DJI Server to verify it&#39;s authorized to use the DJI Mobile SDK by sending the Application Key. This process is called registration. Reasons for why it might fail include:</p>\n<ul>\n<li>Application needs internet connectivity the first time it is run after installation (successful registration is locally cached, so internet connectivity is not required after the first initialization).</li>\n<li>App key is incorrect. Check in the <a href=\"https://developer.dji.com/user/apps/#all\" target=\"_blank\"> User Center </a> to confirm the application key, or <a href=\"../quick-start/index.html#generate-an-app-key\">create</a> one if it hasn&#39;t been created yet.</li>\n<li>Bundle Identifier (iOS) or Package Name (Android) isn&#39;t the same as the one associated with the App Key. See how to <a href=\"../quick-start/index.html#generate-an-app-key\">create</a> an application key and associate it with the correct application identifier.</li>\n</ul>\n<h2 id=\"product-related\">Product Related</h2>\n<h3 id=\"can-i-access-sd-card-data-without-an-sd-card-reader-\">Can I access SD card data without an SD card reader?</h3>\n<p>Yes, you can use a USB cable to connect between DJI Products and your computer to access the SD card data directly. Each product&#39;s manual illustrates the location of the USB port on the product.</p>\n<h3 id=\"how-can-i-update-my-dji-aircraft-or-osmo-s-firmware-\">How can I update my DJI Aircraft or OSMO&#39;s firmware?</h3>\n<p>Each product&#39;s web page at <a href=\"http://www.dji.com\" target=\"_blank\">www.dji.com</a> has a firmware installation manual in the <strong>Downloads</strong> section.</p>\n<h3 id=\"how-can-i-unlock-travel-mode-for-inspire-1-\">How can I Unlock Travel Mode for Inspire 1?</h3>\n<p>The aircraft is in Travel Mode during delivery. In this mode, the landing gear is half way between the retracted (up) and deployed (down) state. The landing gear needs to be deployed to attach a camera. Follow these steps to deploy the landing gear (put the aircraft in Landing Mode):</p>\n<ol>\n<li>Place the Inspire on a flat surface clear of any obstructions (the propellors do not need to be installed).</li>\n<li>Insert the battery into the battery compartment.</li>\n<li>Power on the Remote Controller and the Inspire.</li>\n<li>Toggle the Transformation Switch up and down at least four times.</li>\n<li>The aircraft body will slowly raise as the landing gear deploys.</li>\n<li><p>Power off the aircraft.</p>\n<p><img src=\"../images/faq/unlockTravelMode_en.png\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Note:</strong> </p>\n<ul>\n<li>If you have purchased the dual remote controller version, you must use the Master remote controller to deactivate Travel Mode. </li>\n<li>Be sure to remove the camera from the aircraft before switch from Landing Mode to Travel Mode. </li>\n<li>The ultrasonic sensor underneath the aircraft is used to determine when the landing gear is at the right position. Smooth reflective surfaces will work better than rough, sound-absorbing surfaces (e.g. carpet). </li>\n</ul>\n</blockquote>\n<h3 id=\"how-do-i-link-the-remote-controller-to-an-aircraft-\">How do I link the Remote Controller to an aircraft?</h3>\n<p>The remote controller is linked to your aircraft before delivery. Linking is only required when using a remote controller with an aircraft it did not ship with for the first time. Follow these steps to link a new remote controller:</p>\n<ol>\n<li>Turn on the remote controller and connect to the mobile device. Launch the DJI GO app.</li>\n<li>Turn on the aircraft.</li>\n<li><p>Enter “Remote Controller Settings” and tap “Linking Remote Controller” button as shown below.</p>\n<p><img src=\"../images/faq/linkingRC1_en.png\" alt=\"\"></p>\n</li>\n<li><p>The remote controller is ready to link. The Remote Controller Status Indicator blinks blue and a beep is\nemitted.</p>\n<p><img src=\"../images/faq/linkingRC2_en.png\" alt=\"\"></p>\n</li>\n<li><p>Locate the linking button on the side of the aircraft. The figures below show the Phantom 3, Phantom 4 and Inspire button positions. The M100 and M600 positions can be found in their respective manuals. Press the link button to start linking. The Remote Controller Status Indicator LED will display a solid green once the remote controller is successfully linked to the aircraft.</p>\n</li>\n<li><p>Phantom 3 Series</p>\n<p><img src=\"../images/faq/linkButton_Phantom_en.png\" alt=\"\"></p>\n</li>\n<li><p>Phantom 4</p>\n<p><img src=\"../images/faq/linkButton_Phantom4.png\" alt=\"\"></p>\n</li>\n<li><p>Inspire Series</p>\n<p><img src=\"../images/faq/linkButton_inspire1.png\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Note:</strong> The remote controller will un-link itself from an aircraft if a new remote controller is linked to the same aircraft.</p>\n</blockquote>\n<h2 id=\"general-sdk\">General SDK</h2>\n<h3 id=\"does-the-dji-mobile-sdk-give-access-to-all-the-functionality-in-the-dji-go-app-\">Does the DJI Mobile SDK give access to all the functionality in the DJI GO App?</h3>\n<p>Almost all of the functionality found in DJI GO is exposed in the Mobile SDK.  </p>\n<h3 id=\"is-a-flight-simulator-available-to-test-applications-\">Is a flight simulator available to test applications?</h3>\n<p>Yes, a flight simulator is available for all products and can be used both as visual verification that flight behavior is correct, and as an automated tool for CI systems.</p>\n<p><a href=\"../application-development-workflow/workflow-testing.html\">Documentation</a> describing setup and use of the simulator.</p>\n<!-- plus a tutorial ([iOS](TODO), [Android](TODO) are available to get you started. -->\n\n<h3 id=\"why-can-t-i-use-the-existing-simulator-for-the-phantom-4-\">Why can’t I use the existing simulator for the Phantom 4?</h3>\n<p>The Phantom 4 uses a different simulator application compared to Phantom 3, Inspire and Matrice series of aircraft. </p>\n<p>The Phantom 4 simulator can be downloaded from <a href=\"http://www.dji.com/product/phantom-4/info#downloads\" target=\"_blank\">here</a> and an explanation of how to use it can be found <a href=\"../application-development-workflow/workflow.html#DJI-Assistant-2-Simulator\">here</a>.</p>\n<h3 id=\"what-path-does-the-aircraft-take-in-a-curved-waypoint-mission-\">What path does the aircraft take in a curved waypoint mission?</h3>\n<p>Waypoint missions have two flight path modes:</p>\n<ol>\n<li>Aircraft flies from waypoint to waypoint</li>\n<li>Aircraft flies a curved path where the waypoints define the curve, but the aircraft doesn&#39;t necessarily fly through the waypoint.</li>\n</ol>\n<p>The curve is formed using a quadratic Bezier curve. The corner radius defines the start point of the Bezier curve.</p>\n<ul>\n<li>Consider three waypoints W0, W1, W2 where the curve is defined for W1.</li>\n<li>P0 and P2 are the start and end points of the Bezier curve defined by P0,P1,P2</li>\n<li>d01 is the cornerRadiusInMeters.</li>\n</ul>\n<html><img src=\"../images/faq/waypointCurveDiagram.png\" width=50%></html>\n\n<h3 id=\"why-does-yaw-rotation-cause-the-drone-to-drift-when-using-virtual-stick-apis-\">Why does yaw rotation cause the drone to drift when using Virtual Stick APIs?</h3>\n<p>This is a firmware bug. Virtual stick yaw angle can be set with either angle or angular velocity commands. This behavior is seen when using angle mode. As a temporary workaround, angular velocity can be used instead.</p>\n<p><strong>iOS:</strong></p>\n<pre><code class=\"lang-objc\">\nDJIFlightController *flightController = ...; //Get the flightController instance\n\nflightController.yawControlMode = DJIVirtualStickYawControlModeAngularVelocity;\nflightController.rollPitchControlMode = DJIVirtualStickRollPitchControlModeAngle;\nflightController.verticalControlMode = DJIVirtualStickVerticalControlModeVelocity;\n...\n//Invoke the &quot;sendVirtualStickFlightControlData:withCompletion:&quot; method of DJIFlightController\n...</code></pre>\n<p><strong>Android:</strong></p>\n<pre><code class=\"lang-java\">\nDJIFlightController flightController = ...; //Get the flightController instance\n\nflightController.setYawControlMode(DJIFlightControllerDataType.DJIVirtualStickYawControlMode.AngularVelocity);\n\nflightController.setRollPitchControlMode(DJIFlightControllerDataType.DJIVirtualStickRollPitchControlMode.Angle);\n            flightController.setVerticalControlMode(DJIFlightControllerDataType.DJIVirtualStickVerticalControlMode.Velocity);         \n\n...\n//Invoke the &quot;sendVirtualStickFlightControlData()&quot; method of DJIFlightController</code></pre>\n<p>When yaw is controlled by angular velocity, the aircraft&#39;s yaw position can be controlled precisely by using a <a href=\"https://en.wikipedia.org/wiki/PID_controller\">PID controller algorithm</a>.  </p>\n<h3 id=\"does-djiwaypointmission-allow-only-one-waypoint-\">Does DJIWaypointMission allow only one waypoint?</h3>\n<p>No, the minimum number of waypoints allowed in a DJIWaypointMission is 2.</p>\n<h2 id=\"android\">Android</h2>\n<h3 id=\"how-can-i-run-the-android-sdk-sample-code-\">How can I run the Android SDK Sample Code?</h3>\n<p>The following tutorial can help here: <a href=\"../android-tutorials/index.html\">Running DJI SDK Sample Code in Android Studio</a>.</p>\n<h3 id=\"how-do-i-reset-the-default-app-behavior-for-a-usb-accessory-dji-product-on-android-devices-\">How do I reset the default app behavior for a USB Accessory  (DJI Product) on Android devices?</h3>\n<p>DJI Products that connect to Android mobile devices over USB do so through the AOA (Android Open Accessory) protocol. DJI GO, and DJI Mobile SDK applications support this protocol. When a USB accessory (DJI Product) is connected to the Android mobile device, Android will automatically open the application which supports it, or has been designated the default application for that accessory.</p>\n<p>If there is more than one application that supports the accessory, and no application has been designated as the default, then the user will be given an option for which application to open. Usually, the user will also be able to select whether the application should only be opened for this connection, or should be considered the default application going forward.</p>\n<p>Once an application is tied as the default application to an accessory, no other applications will be able to use that accessory. For example, if DJI GO is the default application, then no other SDK based application will work the DJI products.</p>\n<p>To solve this, the default behavior needs to be removed for the accessory. For example, if the DJI GO is the default application, navigate in Android to <strong>Settings-&gt;Apps-&gt;DJI GO-&gt;Open by default</strong> and you should see a similar screen to this:</p>\n<p> <img src=\"../images/faq/defaultApp_nexus6_001.jpg\" alt=\"\"></p>\n<p>Click on the <strong>CLEAR DEFAULTS</strong> button. </p>\n<p>If you want to change the default application from DJI GO to the SDK-based app, make sure both applications are completely terminated. Then, after clearing defaults as above, reconnect the remote controller and Android should ask which application to open and whether to make it default or not.</p>\n<h3 id=\"how-do-i-reset-the-default-app-behavior-for-a-usb-accessory-dji-product-on-samsung-devices-\">How do I reset the default app behavior for a USB Accessory  (DJI Product) on Samsung devices?</h3>\n<p>DJI Products that connect to Android mobile devices over USB do so through the AOA (Android Open Accessory) protocol. DJI GO, and DJI Mobile SDK applications support this protocol. When a USB accessory (DJI Product) is connected to the Android mobile device, Android will automatically open the application which supports it, or has been designated the default application for that accessory.</p>\n<p>If there is more than one application that supports the accessory, and no application has been designated as the default, then the user will be given an option for which application to open. Usually, the user will also be able to select whether the application should only be opened for this connection, or should be considered the default application going forward. <strong>However, some Samsung devices do not give this additional option, and will instead make the selected application the default application.</strong></p>\n<p>Once an application is tied as the default application to an accessory, no other applications will be able to use that accessory. For example, if DJI GO is the default application, then no other SDK based application will work the DJI products.</p>\n<p>To solve this, the default behavior needs to be removed for the accessory. For example, if the DJI GO is the default application, navigate in Android to <strong>Settings-&gt;Apps-&gt;DJI GO-&gt;Set as default</strong> and you should see a similar screen to this:</p>\n<p> <img src=\"../images/faq/samsung_clearDefaults.png\" alt=\"\"></p>\n<p>Click on the <strong>CLEAR DEFAULTS</strong> button. The next time the DJI product is connected to the mobile device, the user will be given the option to select the application to open with it.</p>\n<h3 id=\"why-does-my-application-crash-when-i-run-on-android-6-0-marshmallow-\">Why does my application crash when I run on Android 6.0 Marshmallow?</h3>\n<p>  Please update your application‘s Android SDK to the latest 3.2.2 version. You can download it from <a href=\"https://developer.dji.com/mobile-sdk/downloads/\"> here </a>. </p>\n<p>  For more details, please check the <a href=\"../application-development-workflow/workflow-integrate.html#Android-Studio-Project-Integration\">Importing and Activating DJI SDK in Android Studio Project</a> tutorial.</p>\n<h3 id=\"why-can-t-my-android-application-connect-to-a-dji-product-when-using-the-dji-mobile-sdk-3-2-1-and-android-6-0-marshmallow-with-targetsdkversion-23-\">Why can&#39;t my Android application connect to a DJI Product when using the DJI Mobile SDK 3.2.1 and Android 6.0 Marshmallow with targetSdkVersion 23?</h3>\n<p> <a href=\"https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html\" target=\"_blank\"> Runtime Permissions </a> are a new feature of Android 6.0.</p>\n<p>  You can add the following code to request permissions before you connect to the internet to register your application to use the DJI SDK:</p>\n<pre><code class=\"lang-java\">  // When the compile and target version is higher than 22, request the following permissions at runtime.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.VIBRATE,\n                            Manifest.permission.INTERNET, Manifest.permission.ACCESS_WIFI_STATE,\n                            Manifest.permission.WAKE_LOCK, Manifest.permission.ACCESS_COARSE_LOCATION,\n                            Manifest.permission.ACCESS_NETWORK_STATE, Manifest.permission.ACCESS_FINE_LOCATION,\n                            Manifest.permission.CHANGE_WIFI_STATE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,\n                            Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SYSTEM_ALERT_WINDOW,\n                            Manifest.permission.READ_PHONE_STATE,\n                    }\n                    , 1);\n        }</code></pre>\n<p> Then build and run your application, press &quot;Allow&quot; in the permission request alert as shown below:</p>\n<p> <img src=\"../images/faq/requestPermissions.png\" alt=\"requestPermission\"></p>\n<p> After restarting the application, it should now. This process only needs to be completed once.  </p>\n<h2 id=\"ios\">iOS</h2>\n<h3 id=\"does-dji-ios-sdk-support-cocoapods-\">Does DJI iOS SDK Support CocoaPods?</h3>\n<p>Yes, DJI iOS SDK supports CocoaPods. You can check this link for details: <a href=\"https://cocoapods.org/pods/DJI-SDK-iOS\" target=\"_blank\"><a href=\"https://cocoapods.org/pods/DJI-SDK-iOS\">https://cocoapods.org/pods/DJI-SDK-iOS</a></a>.</p>\n<h3 id=\"enabling-bitcode-in-xcode-7-doesn-t-work-for-dji-ios-sdk-sample-code-how-can-i-fix-it-\">Enabling Bitcode in Xcode 7 doesn&#39;t work for DJI iOS SDK Sample Code, How can I fix it?</h3>\n<p>We have a temporary way to enable bitcode in the <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS\" target=\"_blank\">iOS Sample Project</a>:</p>\n<ol>\n<li>Enable bitcode for both demo project and VideoPreviewer project. </li>\n<li>Remove &quot;Other Linker Flags&quot; in VideoPreviewer. </li>\n</ol>\n<p>Then you can compile the demo with bitcode enabled to your mobile device. However, there will be error when compiling the demo with this setting to the iPhone simulator. So if you want to debug your application on the iPhone simulator, please use the original setting. We will keep looking for a better way to do this.</p>\n<h3 id=\"does-dji-ios-sdk-support-swift-any-swift-sample-code-\">Does DJI iOS SDK support Swift? Any Swift Sample Code?</h3>\n<p>Yes, the DJI Mobile SDK for iOS does support Swift. Swift sample code is available <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/SwiftSampleCode\" target=\"_blank\"> here</a>.</p>\n<h3 id=\"what-is-the-dji-remote-logger-\">What is the DJI Remote Logger?</h3>\n<p>The DJI Remote Logger allows iOS applications to log remotely. Field testing is critical in application development, and remote logging allows simple ways to log events in real time to a remote server. For more details, see the <a href=\"../ios-tutorials/RemoteLoggerDemo.html\">DJI Remote Logger Tutorial</a>.</p>\n<h3 id=\"will-my-application-work-with-dji-aircraft-if-supported-external-accessory-protocols-is-removed-from-info-plist-\">Will my application work with DJI Aircraft if &quot;Supported external accessory protocols&quot; is removed from info.plist?</h3>\n<p>If the connection between mobile device and DJI Aircraft is USB, the “Supported external accessory protocols” must be added and will enable your SDK-based Application to connect to the MFI compatible remote controller of the DJI Aircraft. For WiFi connection product, like Phantom 4K, this setting is not necessary to be added to info.plist file.</p>","meta":{"title":"DJI Mobile SDK FAQ","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"how-to-capture-a-picture\">How to Capture a Picture</h2>\n<p>To understand the photography concepts of exposure, aperture, shutter, ISO and focal length it can be useful to consider how a picture is captured.</p>\n<h3 id=\"capture-light\">Capture Light</h3>\n<p>When light is incident on an object, it will usually scatter or reflect in all directions. </p>\n<html><img src=\"../images/camera-concepts/IncidentLightSingleSource.gif\" width=100%></html>\n\n<p>The animation shows just two incident light beams on an object, effectively illuminating two features. In reality light is incident on the entire object, with all light from all features being scattered into space. A single point in space in front of the object will receive light from all features it can see - overlaid on each other. However the simplification of just a few object features being illuminated is easier to visualize. </p>\n<p>Therefore with the exception of active light sources (like a light bulb, computer display or the sun), seeing an object means seeing the light reflected from it. </p>\n<p>To capture a picture, a device that is sensitive to and can record light is needed (a light sensor). In digital cameras, this device is a rectangular piece of silicon that has a grid of light detectors on it. Each light detector records how much light is incident on it, and is a single pixel in your final picture.</p>\n<p>However, if you just put the sensor next to the object you want to capture a picture of, you won&#39;t recognize the resulting picture. As each pixel can see each feature of the object, then each pixel will almost look the same. </p>\n<p>The image becomes a constant color of all light combined:</p>\n<html><img src=\"../images/camera-concepts/SensorInFrontOfTree.gif\" width=100%></html>\n\n<h3 id=\"resolve-the-image\">Resolve the Image</h3>\n<p>To resolve the image, it is required that light from each feature of the scene only hit one small part of the sensor, or one pixel. This can be achieved by covering the sensor and putting a small hole or <strong>aperture</strong> in the cover to let light through.</p>\n<html><img src=\"../images/camera-concepts/IntroduceAperture.gif\" width=100%></html>\n\n<p>Now, each pixel of the sensor, sees a different part of the scene, and therefore the picture will be completely recognizable, though also upside down.</p>\n<p>When very small, the aperture restricts the amount of light hitting the sensor to a minimum, but also lets the camera capture the entire scene in focus, as each pixel can only see a small part (feature) of the scene.</p>\n<h3 id=\"capture-time\">Capture Time</h3>\n<p>If the camera or the scene moves a little bit, the features will be captured by a different pixel. This spreading of the features over multiple pixels will start to blur the image, and significant movement will once again make the picture completely unrecognizable.</p>\n<p>Therefore, the sensor can only be exposed to the scene for a short period of time. The shorter this period of time, the less chance the image will be blurred, as the less relative motion the scene or camera will have.</p>\n<p>Between the sensor and the aperture is a <strong>shutter</strong>. The shutter is normally shut, blocking all light to the sensor. It will momentarily open and close, exposing the sensor to the light from the scene for a brief period of time. </p>\n<p>Light sensitive material, a shutter and a small aperture is all that&#39;s required to capture an image and is the basis of a simple camera.</p>\n<h3 id=\"exposure\">Exposure</h3>\n<p>As mentioned previously, each pixel of the sensor is a light detector. The more light that the pixel is exposed to, the brighter the pixel will be in the resulting picture. A picture that is too dark, means the sensor has been exposed to too little light, and often is called an under exposed picture. A picture that is too light, is often called over exposed. </p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td><img src=\"../images/camera-concepts/CameraExposure_f8_s250_iso200_85mm.jpg\" width=260></td>\n    <td><img src=\"../images/camera-concepts/CameraExposure_f8_s250_iso800_85mm.jpg\" width=260></td>\n        <td><img src=\"../images/camera-concepts/CameraExposure_f8_s250_iso3600_85mm.jpg\" width=260></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\">Under Exposed </td>\n    <td align=\"center\">Good Exposure </td>\n    <td align=\"center\">Over Exposed </td>\n  </tr>\n</table>\n</html>\n\n<p>One of the keys to a great, recognizable picture is to get the <strong>exposure</strong> just right. Not too dark, not too light. If the shutter is opened and closed very quickly, the aperture is very small and the scene is not well lit, then each pixel will only be exposed to a small amount of light and the resulting picture may be under exposed. </p>\n<p>Exposure is usually described in <strong>stops</strong>, which is a relative measure where <strong>one stop describes a doubling or halving of light</strong>. Increasing the exposure by <strong>one stop</strong> is achieved by doubling the amount of light on the sensor. </p>\n<p>Thinking about exposure in stops is convenient when using different methods to control the exposure. Doubling the light (increasing the exposure by one stop) with method A can be compensated for by halving the light (decreasing the exposure by one stop) with method B.</p>\n<p>So, how can exposure be changed?</p>\n<h3 id=\"shutter-speed\">Shutter Speed</h3>\n<p>How long the shutter stays open controls how much light is incident on the sensor in time. Therefore a slower (longer) shutter speed will increase the exposure while a faster (shorter) shutter speed will decrease the exposure. </p>\n<p>While a slower shutter speed will increase exposure, the trade-off is potential blur in the image due to scene or camera movement. The two pictures below have fast moving (propellors) and slow moving (aircraft body) features. The image of the propellors blur when there is a slow shutter speed, and are sharp when there is a fast shutter speed.</p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td width=50%><img src=\"../images/camera-concepts/ShutterSpeed_f5.6_s8000_iso11400_85mm.jpg\" width=400></td>\n    <td width=50%><img src=\"../images/camera-concepts/CameraExposure_f8_s250_iso800_85mm.jpg\" width=400></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\"><p>Shutter speed 1/8000s<br><font size=1>Aperture: f/8, ISO: 11400</p></td>\n    <td align=\"center\"><p>Shutter speed 1/250s<br><font size=1>Aperture: f/8, ISO: 800</p></td>\n  </tr>\n</table>\n</html>\n\n<p>&gt;</p>\n<blockquote>\n<p><strong>Note:</strong> Changing the shutter speed by itself also changes the exposure. To make both images have the same exposure, another exposure control method (ISO) was changed to compensate. ISO is described in the next section.</p>\n</blockquote>\n<p>Shutter speed is usually measured in seconds. As an example, DJI&#39;s Zenmuse X5 camera has a shutter speed range of 1/8000 seconds (fast) to 8 seconds (slow).</p>\n<p>If the shutter is open for twice the amount of time, then exposure is doubled. Therefore doubling or halving shutter speed is the equivalent of increasing or decreasing the exposure by one stop.</p>\n<h3 id=\"iso\">ISO</h3>\n<p>Another way to increase exposure is to amplify the light detector reading on the sensor (effectively increase the light detector sensitivity). As the reading is amplified, the resulting pixel brightness will increase, and therefore exposure increases.</p>\n<p>However, the light detector reading is never perfect. Electronics have a small amount of noise in them which will make small changes to the reading. Sometimes the reading will be a little brighter than it should be, other times a little darker. If the light reading is much stronger than the noise changes, then the noise (small fluctuations in exposure between adjacent pixels) won&#39;t be noticeable. However, as the light reading becomes weaker, then the noise fluctuations will become obvious. </p>\n<p>Any amplification will not just amplify low light detector readings, but also amplify the noise in the readings, making these exposure fluctuations obvious.</p>\n<p>This is especially the case for an image of a smooth, simple surface. Instead of all the pixels being the same exposure, they will all be a little different, which will result in a grainy effect (as you can now distinguish each pixel). </p>\n<p>Pixel amplification is called <strong>ISO</strong>. Increasing ISO will increase exposure, but will also make the noise in the image more noticeable resulting in grainy pictures. Typically ISO is set as low as possible to achieve the cleanest image and is used to increase exposure as a last resort. </p>\n<p>In the two pictures above (demonstrating shutter speed difference), the ISO was used to compensate for the change in exposure from the shutter. If you zoom in on the images, the noise in the high ISO image is noticeable, especially on the blue background.</p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td width=50%><img src=\"../images/camera-concepts/ISO_f5.6_s8000_iso11400_85mm.jpg\" width=400></td>\n    <td width=50%><img src=\"../images/camera-concepts/ISO_f8_s250_iso800_85mm.jpg\" width=400></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\"><p>ISO 11400<br><font size=1>Aperture: f/8, Shutter: 1/8000s</p></td>\n    <td align=\"center\"><p>ISO 800<br><font size=1>Aperture: f/8, Shutter: 1/250s</p></td>\n  </tr>\n</table>\n</html>\n\n<blockquote>\n<p><strong>Note:</strong> All concepts here apply to both greyscale (monochrome) and color sensors. A color sensor is simply a greyscale sensor that has a color filter in front of it. The color filter is a film with a grid of filters that line up with each pixel. Each filter will only let through one color of light: red, green or blue. The light detector or pixel behind each filter is then only detecting the strength of the light with the specific color and can be thought of as a red, green or blue pixel.</p>\n<p>If a picture is taken of a black scene, then the result should be very little red, green and blue light detected. If the exposure of the image is increased using amplification (ISO), then the red, green and blue pixels will all get brighter, but to slightly different levels. This means the combination of red, green, blue pixels will no longer be black, but instead be slightly red, green or blue depending on which pixel had more additive noise. </p>\n</blockquote>\n<p>As an example of ISO, DJI&#39;s Zenmuse X5 has an ISO range from 100 (low noise) to 25600 (high noise). The ISO number is proportional to the amount of light the sensor is exposed to. Doubling the ISO is the same as increasing the exposure by one stop.</p>\n<h3 id=\"aperture\">Aperture</h3>\n<p>Another way to increase exposure is to increase the aperture. </p>\n<p>Aperture is usually described with f-numbers (also called f-stops) where f/1.4 is a large aperture and f/22 is a small aperture.</p>\n<ul>\n<li>The f-number (N) is formally the ratio of the lens <a href=\"#field-of-view-and-focal-length\">focal length</a> (f) to aperture diameter (D): N=f/D </li>\n<li>Customarily it is written as f/N (which is the equation above rearranged) and describes the diameter of the lens </li>\n<li>To double the amount of light, the aperture area must be doubled </li>\n<li>As the aperture is a circle, doubling the aperture area increases the diameter by 1.414 (square root of 2) </li>\n<li>Therefore to change an aperture by one exposure stop, the f-number is changed by 1.414 </li>\n<li>D is inversely proportional to N, thus a larger N will describe a smaller D </li>\n<li>Compared to an aperture of f/1.4, f/2 is an aperture of half the area (f/1.4*1.414) and therefore one stop smaller.</li>\n</ul>\n<p>However as shown <a href=\"#resolve-the-image\">previously</a>, as the aperture increases each pixel will see more than one feature in the scene, causing the picture to be increasingly out of focus.  </p>\n<p>A lens can be used to bring parts of the scene back into focus. </p>\n<html><img src=\"../images/camera-concepts/LensOnAperture.gif\" width=100%></html>\n\n<blockquote>\n<p><strong>Note:</strong> This is a simplification. There are many lenses in a modern camera system many of which are between the aperture and sensor. However, the described concepts are the same between simple and more complex systems.</p>\n</blockquote>\n<p>Lenses however can only focus light from a fixed distance in front of it, to a fixed distance behind it. Light coming from a different distance in front of it, will focus at a different distance behind it. When a lens is used to bring a feature into focus, features at different distances to the camera will be out of focus.</p>\n<html><img src=\"../images/camera-concepts/LensDemonstrator.gif\" width=100%></html>\n\n\n<p>Features that are in focus have more light incident on the lens and then redirected to the pixel. Features that are out of focus have light spread over more pixels. Therefore a larger aperture increases the exposure of the picture.</p>\n<p>The difference in focus between features at different distances from the camera is known as <strong>Depth of Field</strong>. Features in a picture captured with a shallow depth of field become strongly out of focus (more blurred) as they change in distance from the camera. Conversely, a picture captured with a deep depth of field will have the same features more in focus.</p>\n<p>The two images below show differences in depth of field caused by changing aperture. An M600 is flying in front of a tree. The large f/1.4 aperture creates a depth of field so shallow, that not only is the background strongly out of focus compared to the M600, but some features of the M600 that are closer to or further from the focus plane (front battery) are also slightly out of focus. </p>\n<p>The smaller f/16 aperture image background is significantly more in focus.</p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td width=50%><img src=\"../images/camera-concepts/DOF_f1.4_s1000_iso100_85mm.jpg\" width=400></td>\n    <td width=50%><img src=\"../images/camera-concepts/DOF_f16_s1000_iso10000_85mm.jpg\" width=400></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\"><p>Shallow Depth of Field<br>Aperture: f/1.4<br><font size=1>Shutter: 1/1000s, ISO 100</p></td>\n    <td align=\"center\"><p>Deep Depth of Field<br>Aperture: f/16<br><font size=1>Shutter: 1/1000s, ISO: 10000</p></td>\n  </tr>\n</table>\n</html>\n\n<p>Depth of field can be used to highlight the subject of an image. It is easier to distinguish the M600 from the background when the background is out of focus. On the other hand, if the camera is being used to computationally map a scene with many features at different distances, it would be more appropriate to have the entire image in focus (smaller aperture, deeper depth of field).</p>\n<p>As an example, DJI&#39;s Zenmuse X5 has an aperture adjustable from f/1.7 (large) to f/16 (small). This is a range of 6 1/3 exposure stops.</p>\n<h2 id=\"trade-off-between-aperture-shutter-iso\">Trade-off Between Aperture, Shutter, ISO</h2>\n<p><a href=\"#aperture\">Aperture</a>, <a href=\"#shutter-speed\">shutter speed</a> and <a href=\"#iso\">ISO</a> need to balanced to achieve a good exposure. However, when each is used to change exposure, depth of field, sharpness, and noise in the picture change.</p>\n<p>The diagram below illustrates the effect of changing aperture, shutter and ISO and how it impacts exposure and the resulting picture.</p>\n<html><img src=\"../images/camera-concepts/ExposureTradeoff.png\"></html>\n\n<p>To understand this trade off better, it can be useful to consider several examples.</p>\n<p><strong>Example 1: A well lit, stationary scene.</strong>\nThe camera receives lots of light from the scene, and underexposure is not a problem. One way to approach this is:</p>\n<ul>\n<li><strong>Aperture</strong>: Either shallow or deep depth of field can be selected. Any change in exposure can be compensated for by the shutter as the scene is stationary.</li>\n<li><strong>ISO</strong>: Can be set to minimum setting. Shutter will do all exposure compensation, so can minimize noise.</li>\n<li><strong>Shutter</strong>: The scene is stationary, so both fast and slow shutter speeds will result in a sharp picture. Shutter is simply used to get the correct exposure.</li>\n</ul>\n<p><strong>Example 2: Poorly lit scene with moving features. Sharp picture with in focus features at different distances to the camera desired.</strong> This example might require a compromise in the desired depth of field, sharpness or noise in the image. The &quot;poorly lit&quot;, &quot;moving features&quot;, &quot;sharp picture&quot;, &quot;features at different depths in focus&quot; requirements compete with each other. Increasing the exposure to compensate for &quot;poorly lit&quot; will make capturing sharp moving features in focus more difficult. One way to approach this where the noise in the image is the most compromised:</p>\n<ul>\n<li><strong>Shutter</strong>: Set quick enough to make moving features sharp, but no quicker so the exposure can be maximized. </li>\n<li><strong>Aperture</strong>: As large as possible that allows a depth of field that captures the desired features sufficiently in focus.</li>\n<li><strong>ISO</strong>: Finally the ISO is increased to get the correct exposure.</li>\n</ul>\n<p><strong>Example 3: Well lit scene of flowing water. A picture that captures the movement of water by letting it blur is desired.</strong> This example might be difficult as it will be easy to overexpose the image. One way to approach it is:</p>\n<ul>\n<li><strong>ISO</strong>: Set as low as possible to reduce noise and exposure.</li>\n<li><strong>Aperture</strong>: Set as small as possible to reduce exposure. As a consequence all stationary features in the scene will be in focus.</li>\n<li><strong>Shutter</strong>: Normally, a slow shutter would be desired to blur the movement, but as aperture and ISO have already been set to minimize exposure, there will only be one shutter speed that gives correct exposure. If the scene is very well lit, the blurring of water might not be significant.</li>\n</ul>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Note:</strong> To control over exposure and use a slower shutter speed, a neutral density (ND) filter that reduces exposure by several stops could be used on the camera lens.</p>\n</blockquote>\n<p><strong>Example 4: Picture taken with correct exposure, but shutter too slow.</strong> Scene motion is blurred in the picture as the shutter speed is too slow. One way to take the next picture is:</p>\n<ul>\n<li><strong>Shutter</strong>: Halve the shutter speed, effectively decreasing the exposure by one stop.</li>\n<li><strong>Aperture</strong>: Increase the aperture by 1 stop, to compensate for exposure. This assumes depth of field is not a concern.</li>\n<li><strong>ISO</strong>: No change.</li>\n</ul>\n<p>As a final example, consider three pictures with similar exposure taken with different combinations of aperture, ISO and shutter speed.</p>\n<html>\n<table class=\"table-pictures\">\n  <tr>\n    <td><img src=\"../images/camera-concepts/Tradeoff_f8_s80_iso100.jpg\" width=260></td>\n    <td><img src=\"../images/camera-concepts/Tradeoff_f2_s8000_iso640.jpg\" width=260></td>\n        <td><img src=\"../images/camera-concepts/Tradeoff_f8_s8000_iso12800.jpg\" width=260></td>\n  </tr>\n  <tr valign=\"top\">\n    <td align=\"center\"><p><b>Aperture f/8</b> - Everything in Focus<br><b>Shutter 1/80s</b> - Propellors Blur<br><b>ISO 100</b> - Low Noise</p></td>\n    <td align=\"center\"><p><b>Aperture f/2</b> - Some features blurred<br><b>Shutter 1/8000s</b> - Propellors Sharp<br><b>ISO 640</b> - Relatively Low Noise</p></td>\n    <td align=\"center\"><p><b>Aperture f/8</b> - Everything in Focus<br><b>Shutter 1/8000s</b> - Propellors Sharp<br><b>ISO 12800</b> - High Noise</p></td>\n  </tr>\n</table>\n</html>\n\n<p>Calculating the difference in exposure for aperture, shutter and ISO for the second and third image relative to the first shows that all images should be approximately the same exposure (with the third being the brightest).</p>\n<html>\n<table class=\"table-exposure\">\n<tr>\n  <td align=\"center\" width=10%> <b>Image </b></td>\n  <td align=\"center\" width=30%> <b>1</b> </td>\n  <td align=\"center\" width=30%> <b>2</b> </td>\n  <td align=\"center\" width=30%> <b>3</b> </td>\n</tr>\n<tr>\n  <td align=\"center\"> <b>Aperture </b></th>\n  <td align=\"center\"><p> f/8</p></td>\n   <td align=\"center\"><p> Increase 4 stops <br><font size=1 color=\"#BBBBBB\">f/8-&gt;f/2</p></td>\n  <td align=\"center\"><p> No change to exposure<br><font size=1 color=\"#BBBBBB\">f/8-&gt;f/8 </p></td>\n</tr>\n<tr>\n  <td align=\"center\"> <b>Shutter </b></td>\n  <td align=\"center\"><p> 1/80s</p></td>\n  <td align=\"center\"><p> Decrease 6<sup>2</sup>&frasl;<sub>3</sub> stops<br><font size=1 color=\"#BBBBBB\">1/80s-&gt;1/8000s</p></td>\n<td align=\"center\"><p> Decrease 6<sup>2</sup>&frasl;<sub>3</sub> stops<br><font size=1 color=\"#BBBBBB\">1/80s-&gt;1/8000s</p></td>\n</tr>\n<tr>\n  <td align=\"center\"> <b>ISO </b></td>\n   <td align=\"center\"><p> 100</p></td>\n   <td align=\"center\"><p> Increase 2<sup>2</sup>&frasl;<sub>3</sub> stops<br><font size=1 color=\"#BBBBBB\">100-&gt;640</p></td>\n   <td align=\"center\"><p>Increase 7 stops<br><font size=1 color=\"#BBBBBB\">100-&gt;12800</p></td>\n</tr>\n<tr>\n  <td align=\"center\"> <b>Total Change</b></td>\n   <td align=\"center\"><p> - </p></td>\n   <td align=\"center\"><p> 0 Stops </p></td>\n   <td align=\"center\"><p> Exposure increased by <sup>1</sup>&frasl;<sub>3</sub> stops </p></td>\n</tr>\n</table>\n</html>\n\n<h2 id=\"field-of-view-and-focal-length\">Field of View and Focal Length</h2>\n<p>The <strong>field of view</strong> defines the extent of a scene a camera can capture and is measured in degrees. A larger field of view sees a larger portion of the scene, while a smaller field of view sees a smaller (but more detailed) portion of the scene. A telephoto lens with high zoom factor is a lens with a narrow field of view.</p>\n<p><html><img src=\"../images/camera-concepts/FieldOfView.png\"></p>\n<p>The distance between a lens and its focal plane (the sensor is at the focal plane) is called the <strong>focal length</strong>. The focal length is directly related to field of view. As the focal length increases, the field of view decreases (and zoom factor increases). </p>\n<p>In the below diagram, a lens is moved away from the sensor, increasing the focal length. When the focal length is small, the two highlighted features are captured near the middle of the sensor. As the focal length increases, the field of view narrows and the same features spread further apart on the sensor, effectively zooming into a smaller part of the scene. </p>\n<p>Focal length is related to field of view based on sensor size. The diagram above also shows a smaller sensor will have a narrower field of view. Focal lengths are commonly referenced to a full frame sensor (35mm sensor).</p>\n<p><html><img src=\"../images/camera-concepts/FocalLength.gif\" width = 100%></p>\n<p>As an example, DJI&#39;s Zenmuse X3 camera has a diagonal field of view of 94&deg;, which is equivalent to a 20mm focal length when using a 35mm sensor. Note, the X3 sensor is smaller than 35mm, and so the physical focal length is also smaller. </p>\n<p>A diagonal field of view can be deconstructed to its horizontal and vertical components by using the aspect ratio of the sensor. X3 has a 4000x3000 pixel sensor, and so the horizontal and vertical field of views are 84&deg; and 62&deg; respectively.</p>","meta":{"title":"Camera Exposure","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>AirLink describes the wireless link between aircraft, remote controllers, handheld cameras and mobile devices.</p>\n<p>There are three types of wireless links used in DJI products:</p>\n<ul>\n<li>WiFi</li>\n<li>Lightbridge</li>\n<li>Auxiliary</li>\n</ul>\n<p>Wireless communication links provide great flexibility, but also have limitations. The link will degrade as obstacles come between the devices communicating wirelessly, as the separation between devices increases, and as interference with other communication links increases.</p>\n<p>A table detailing the type of wireless link for all aircraft products can be found in the <a href=\"./product_introduction.html#remote-controller\">Product Introduction</a>.</p>\n<p>Osmo is not included in this table and uses the WiFi wireless link between itself and mobile device.</p>\n<h2 id=\"wifi\">WiFi</h2>\n<p>WiFi is used as the wireless communication link for both aircraft and handheld camera products. In the case of aircraft, the remote controller acts as a WiFi access point (AP) and the aircraft and mobile device join it as clients. Similarly for Osmo, the mobile device joins the Osmo AP as a client.</p>\n<p>Aspects of the wireless link that can customized include:</p>\n<ul>\n<li>SSID</li>\n<li>Password</li>\n<li>WiFi Frequency Band (Osmo Only)</li>\n</ul>\n<h2 id=\"lightbridge\">Lightbridge</h2>\n<p>Lightbridge has been developed by DJI specifically for long range, robust aerial communication in the 2.4 GHz band, and is used as the link between remote controller and aircraft. It provides significantly more range than WiFi, with up to 5 km communication in some products.</p>\n<p>Lightbridge has 8 selectable channels. Channel selection can either be done manually, or left to the radio to determine what channel has the least interference. Data rate and channel quality can be measured to understand how channel is performing.</p>\n<p>Some remote controllers with Lightbridge wireless links also have a secondary video port. This port can be used to send the live stream in HDMI or SDI format to an external device.</p>\n<h3 id=\"lightbridge-accessory\">Lightbridge Accessory</h3>\n<p>DJI also has a stand alone accessory product <a href=\"http://www.dji.com/product/lightbridge-2\" target=\"_blank\">Lightbridge 2</a> that can be integrated into airframes such as the S1000. This product consists of a module that mounts on the aircraft, and a remote controller for ground control. The purpose of the product is to relay remote control commands to the aircraft, and relay telemetry and video data to the remote controller. </p>\n<p>The accessory provides two additional features in the live video stream compared to ready-to-fly systems using Lightbridge technology:</p>\n<ul>\n<li>Multiple video inputs on the aircraft can be combined into a picture in picture live video stream</li>\n<li>An on-screen-display (OSD) mode overlays aircraft attitude information onto the live video stream</li>\n</ul>\n<h4 id=\"picture-in-picture\">Picture in Picture</h4>\n<p>The accessory provides several video inputs to accommodate an FPV (first person view) camera and a DJI HD camera and gimbal integration (like the Zenmuse X3 or X5). HDMI and AV ports are available for the FPV camera, and a HD gimbal port is available HD camera and gimbal integrations. </p>\n<p>The video streams from both cameras can be combined into a single live stream with one stream inside the other in <strong>picture in picture</strong> or <strong>PIP</strong> mode. In this mode, one camera video is placed as a thumbnail in the video from the other camera. </p>\n<p><img src=\"../images/component-guide/lightbridge_PIP.png\" alt=\"PIP\"></p>\n<h4 id=\"osd-on-screen-display\">OSD - On Screen Display</h4>\n<p>OSD is when real time aircraft state information (like altitude, attitude etc.) is overlaid on the live video stream. Using OSD can greatly simplify an FPV application as there is less need to process and display aircraft state through the application.</p>\n<h2 id=\"auxiliary\">Auxiliary</h2>\n<p>WiFi and Auxiliary wireless links are used simultaneously between aircraft and remote controllers. The auxiliary link is a low bandwidth, but very robust link that carries control information critical to aircraft operation only. The WiFi link is higher bandwidth but is less robust and therefore carries application information and the live video stream.</p>","meta":{"title":"AirLink","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Smart batteries provide the energy required to run the products. Together with the flight controller, the smart battery can estimate remaining flight time and provide warnings when low battery thresholds are crossed. Batteries are easily swapped between flights, extending product use considerably.</p>\n<h2 id=\"battery-parameters\">Battery Parameters</h2>\n<p>Two important battery parameters are the amount of energy it can store when fully charged, and the amount of energy it currently has remaining. The remaining energy changes as energy is drawn from the battery during product operation and can be considered an instantaneous parameter. The amount of energy it can store when fully charged can be considered a lifetime parameter and due to battery chemistry reduces over time as the battery is cycled (discharged then charged). </p>\n<p>Therefore as the battery ages, it will store less energy and hence total expected product use time (e.g. flight time) is reduced. Battery <strong>lifetime</strong> is typically defined as the number of cycles it can experience before its full charge energy is 80% of its full charge energy when new. </p>\n<h3 id=\"instantaneous-parameters\">Instantaneous Parameters</h3>\n<p>Instantaneous battery parameters such as remaining energy, voltage and current can be used to predict remaining flight time or product use. Remaining energy is described in milliamp hours. A battery with 1000 mAh remaining will be able to provide 1000 mA for one hour before running out of energy. Examining the instantaneous current being drawn from the battery can be a predictor for how long a battery will last.</p>\n<h3 id=\"lifetime-parameters\">Lifetime Parameters</h3>\n<p>Lifetime parameters such as total number of cycles (or discharges), full charge energy and remaining life time can be used to determine when a battery should be replaced. Applications often require a minimum amount of flight time to be economically efficient, a keeping track of battery lifetime parameters can help determine when to replace batteries.</p>\n<h2 id=\"battery-aggregation\">Battery Aggregation</h2>\n<p>Products requiring multiple batteries such as the M600 provide both parameters for single batteries, as well as for the aggregation. This aggregation is useful as a summary for how the multi-battery system is performing.</p>\n<p>A multi-battery system is as strong as its weakest link. Therefore for most efficiency, it&#39;s important to make sure all batteries in the system are performing similarly. </p>","meta":{"title":"Smart Battery","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>The camera captures photos and videos. Many different modes of operation, resolutions, frame rates, exposure settings, picture settings and file types can be selected. Cameras have local storage to hold the media which will typically be an SD card, and in some cases an SSD (solid state drive). </p>\n<p>This guide covers the large array of settings, modes and functionality provided by DJI cameras. A more general description of camera concepts can be found <a href=\"./camera_concepts.html\">here</a>.</p>\n<h2 id=\"operation-work-modes\">Operation (Work) Modes</h2>\n<p>DJI cameras have several modes of operation:</p>\n<ul>\n<li>Still image capture</li>\n<li>Video capture</li>\n<li>Playback</li>\n<li>Media Manager</li>\n</ul>\n<p>The camera can only operate in one mode at any one time. For example, media download cannot happen during image capture.</p>\n<h5 id=\"still-image-capture-modes\">Still Image Capture Modes</h5>\n<p>There are several ways to capture a still image with DJI cameras. </p>\n<ul>\n<li><strong>Single</strong>: Takes a single picture every time the <code>shootPhoto</code> command is given.</li>\n<li><strong>Burst</strong>: Takes a small burst of photos every time the <code>shootPhoto</code> command is given. This can be useful for capturing action scenes.</li>\n<li><strong>HDR</strong>: Takes a high dynamic range photo. This results in several photos with different exposure levels being taken and then combined into one photo. The different exposure levels increase contrast in both dark and light areas, and therefore the dynamic range of the photo.</li>\n<li><strong>AEB (Auto Exposure Bracketing)</strong>: Captures multiple photos at different exposure levels and saves them separately every time the <code>shootPhoto</code> command is given.</li>\n<li><strong>Interval</strong>: The camera will take photos at a predetermined time interval (for example every 5 seconds) for either a set number of shots, or indefinitely.</li>\n<li><strong>Timelapse</strong>: The camera will take photos at a predetermined time interval and then combine the photos into a time lapse video.</li>\n</ul>\n<h5 id=\"quick-view\">Quick View</h5>\n<p>After a still image is captured, some cameras can be configured to display the captured image for a short period of time. By default, this is turned off, but a quick view for a set duration can be configured.</p>\n<h2 id=\"image-quality-resolution-and-frame-rate\">Image Quality, Resolution and Frame Rate</h2>\n<h5 id=\"video-resolution-and-frame-rate\">Video Resolution and Frame Rate</h5>\n<p>DJI Cameras typically support video resolutions of 1280x720 (720p), 1920x1080 (1080p), 2704x1520, 3840x2160 and 4096x2160 (4K). </p>\n<p>Resolution will determine the maximum frame rate able to be captured. The combinations of resolution and frame rate can be queried directly in the SDK, but typically choosing 4K resolution will limit the frame rate to 24/25 fps. Some cameras support up to 120 fps, but only at 1080p resolutions.</p>\n<h5 id=\"still-image-resolution-and-aspect-ratio\">Still Image Resolution and Aspect Ratio</h5>\n<p>DJI Cameras have a fixed still image resolution. On some cameras the aspect ratio can be changed between 4:3 and 16:9. Keep in mind that a 16:9 picture is simply a cropped version of a 4:3 image, as the sensor&#39;s aspect ratio is 4:3.</p>\n<h5 id=\"compression\">Compression</h5>\n<p>All of DJI&#39;s cameras support compression for both still images and videos. Some cameras also support uncompressed (RAW) file formats.</p>\n<p>The trade-off between capturing RAW and compressed images is:</p>\n<table id=\"t01\">\n  <thead>\n    <tr>\n      <th colspan=\"4\">RAW vs Compressed</th>\n    </tr>\n    <tr>\n      <th width=180>Metric</th>\n      <th width=100>Raw</th>\n      <th width=100>Compressed</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Image Quality</th>\n      <td>Higher</td>\n      <td>Lower</td><br>      <td>Compression algorithms are lossy. On small screens this is sometimes not noticeable, but on larger prints, or when capturing scenes with high contrast and color, the difference is more noticeable.</td>\n    </tr>\n    <tr>\n      <td>Post Processing Quality</td>\n      <td>Higher</td><br>      <td>Lower</td>\n      <td>RAW images use more bits to describe each pixel. This translates to more brightness levels making exposure compensation easier. In a color image where each color is represented by the brightness of a red, green and blue pixel, it also means there are more colors, making white balance adjustments easier.</td>\n    </tr>\n    <tr>\n      <td>Post Processing Necessity</td>\n      <td>More Often</td><br>      <td>Less Often</td>\n      <td>When exposure and white balance are fine, compressed images will usually require less post processing. If nothing else, to share a RAW image it usually needs to be compressed to a more common file format.</td>\n    </tr>\n    <tr>\n      <td>Compatibility with Media Viewers and Editors</td>\n      <td>Fewer</td><br>      <td>More</td>\n      <td>Most cameras use different uncompressed image formats making them less likely to be supported by all media viewing and editing programs.</td>\n    </tr>\n    <tr>\n      <td>File Size</td>\n      <td>High</td><br>      <td>Low</td>\n      <td>Lower file sizes makes storing and sharing media much easier.</td>\n    </tr>\n    <tr>\n      <td>Time Between Shots</td>\n      <td>Longer</td><br>      <td>Shorter</td>\n      <td>It takes a longer time to process and save a RAW image compared to JPEG. On fixed interval shooting, the difference can be as large as 2s minimum interval for JPEG and 10s for RAW.</td>\n    </tr>\n\n  </tbody>\n</table>\n\n\n<p>For still images, DIJ cameras typically support JPEG (compressed) and DNG (RAW). Cameras can also capture in JPEG + RAW, saving two images for each shot.</p>\n<p>For video, only the Zenmuse X5 RAW supports capturing raw video. RAW video files are so large, the camera has a solid state drive (SSD). All cameras support compressed formats MP4 (MPEG – 4 AVC) and MOV (H.264).</p>\n<h5 id=\"photo-quality\">Photo Quality</h5>\n<p>As a JPEG image is compressed increased, it&#39;s file size and image quality reduces. Quality options of <strong>Normal</strong>, <strong>Fine</strong> and <strong>Excellent</strong> are available for users and developers to choose the right balance for their application.</p>\n<h2 id=\"exposure-options\">Exposure Options</h2>\n<p>Getting the exposure right is important to capture a great, recognizable picture. Under exposed (too dark) or over exposed (too light) pictures will lack detail of the subject. The concepts behind exposure, aperture, shutter, ISO, stops, field of view and depth of field are described and compared in detail in <a href=\"./camera_concepts.html\">Camera Concepts</a>.</p>\n<h5 id=\"shutter-speed\">Shutter Speed</h5>\n<p>The time the camera shutter exposes the camera sensor to light is described by the <strong>Shutter Speed</strong>. DJI cameras typically have shutter speeds from 1/8000 s to 8 s. Faster shutter speeds can capture moving features in a scene sharply, but will expose the sensor to less light.</p>\n<p>The shutter speed should not be set slower than the video frame rate when the camera recording video. For example, if the video frame rate is 30 fps, the shutter speed must be &lt;= 1/30 s.</p>\n<h5 id=\"iso\">ISO</h5>\n<p>ISO relates to the amount of amplification applied to each pixel. Higher ISO will increase amplification and therefore exposure, but will also increase noise in the picture. Higher ISO is effectively making the camera more sensitive to light, and is useful when trying to capture darker scenes. </p>\n<p>Different DJI cameras have different ISO ranges. The Zenmuse X5 has an ISO range of 100-25600.</p>\n<h5 id=\"aperture\">Aperture</h5>\n<p>The camera aperture controls how large the <strong>window</strong> the sensor can see the world through. Increasing the aperture will increase the amount of light incident on the camera, and therefore increase the exposure. It will also make the depth of field shallower. A shallower depth of field will mean that features at different distances to the camera will be more out of focus. This can create a great effect if trying to highlight the subject (in focus foreground, blurred background), but can be challenging if trying to capture both the foreground and background in focus.</p>\n<p>Aperture is measured in f-numbers or f-stops, where the numbers relate to the aperture diameter. A doubling of aperture area, is equivalent to multiplying the diameter by 1.414 (square root of 2), and increases the exposure by one stop.</p>\n<p>Cameras on the Phantom series of products have fixed aperture lenses (e.g. f/2.8). The Zenmuse X5 has an aperture range of f/1.7 to f/16.</p>\n<h5 id=\"exposure-mode\">Exposure Mode</h5>\n<p>There are 4 exposure modes available that vary with how exposure is automatically or manually adjusted.</p>\n<ol>\n<li><strong>Program</strong>: The camera automatically adjusts shutter, aperture (if available) and ISO automatically to find the best exposure. On cameras with adjustable aperture, ISO can either be set manually, or automatically based on preference.</li>\n<li><strong>Shutter Priority</strong>: Allows manual setting of the shutter speed. Aperture and ISO are automatically adjusted to find the best exposure. On cameras with adjustable aperture, ISO can either be set manually, or automatically based on preference. This mode is useful when trying to control the sharpness of a scene with moving features.</li>\n<li><strong>Aperture Priority</strong>: Allows manual setting of the aperture. Shutter speed and ISO are automatically adjusted to find the best exposure. On cameras with adjustable aperture, ISO can either be set manually, or automatically based on preference. This mode is useful when trying to control the depth of field of a scene.</li>\n<li><strong>Manual</strong>: ISO, aperture and shutter speed are all manually set. The <code>exposureCompensation</code> property can be monitored to understand how many stops away the picture is from good exposure.</li>\n</ol>\n<p>Camera Concepts contains a <a href=\"./camera_concepts.html#trade-off-between-aperture-shutter-iso\">description</a> and several examples on what to consider when setting aperture, shutter speed and ISO to get good exposure.</p>\n<h5 id=\"exposure-compensation\">Exposure Compensation</h5>\n<p>In the Program, Aperture Priority and Shutter Priority exposure modes, the exposure compensation value changes the exposure target the camera is using to calculate correct exposure and is set by the user. This can be used to capture darker or lighter images.</p>\n<p>In the Manual exposure mode, this value is reported from the camera and reports how much the exposure needs to be compensated for to get to what the camera thinks is the correct exposure. </p>\n<h5 id=\"ae-auto-exposure-metering\">AE (Auto Exposure) Metering</h5>\n<p>Exposure is measured by the camera by examining (metering) the pixels in an image. Metering can be set to either the whole image, or just part of the image (the center position or a custom position). This allows scenes that have a high dynamic range of light to be captured with the desired parts having correct exposure.</p>\n<h5 id=\"ae-auto-exposure-lock\">AE (Auto Exposure) Lock</h5>\n<p>If exposure is being calculated automatically, shutter, aperture and ISO settings might be changing dynamically. AELock allows a freeze of exposure setting changes without needing to change the exposure mode. This can be used to automatically set the exposure of a subject in a scene before moving the camera to frame the subject in a more interesting way (without the exposure changing).</p>\n<h2 id=\"picture-settings\">Picture Settings</h2>\n<h5 id=\"white-balance-and-color-temperature\">White Balance and Color Temperature</h5>\n<p>The color of the light (also known as color temperature) illuminating a scene determines the color of the captured image. A fluorescent white light will be cooler (have more blue than light) than light from the sun, and so a scene illuminated with a fluorescent light will look cooler. An outside scene and inside scene can be adjusted to have more similar colors if the white balance of the pictures are adjusted. If the white balance is adjusted so the white and grey colors in different pictures look similar, then the other colors in the pictures should also be similar.</p>\n<p>The DJI SDK offers several color temperature and white balance related settings:</p>\n<ul>\n<li>Auto white balance</li>\n<li>Preset white balance (e.g. sunny, cloudy, fluorescent etc)</li>\n<li>Custom color temperature</li>\n</ul>\n<p>Another way to adjust the color temperature is to capture the image in RAW format and change the color temperature in post processing.</p>\n<h5 id=\"anti-flicker\">Anti-Flicker</h5>\n<p>Light sources that flicker due to the frequency of their power source (50 Hz or 60 Hz) can sometime look weird when captured on video. The camera detects these oscillations in a light source and will try to only capture an image when the flicker&#39;s effect on the exposure or color is minimal.</p>\n<p>The setting can either be manually selected, or put in automatic mode.</p>\n<h5 id=\"sharpness\">Sharpness</h5>\n<p>The sharpness of an image describes how well defined details in the image are.</p>\n<p>The sharpness of an image is dependent on many factors including the shutter speed, lens design and manufacturing quality, aperture, focal length, distance from the image center and the sensor (number of pixels and anti-aliasing filter).</p>\n<p>A picture can be further sharpened or softened using high and low pass filters on the image. Sharpening the image will highlight changes in brightness, and emphasize details. Sharpening will therefore also increase the noise as noise is seen as small changes in brightness.</p>\n<p>In comparison, softening an image will reduce changes in brightness, reduce noise, but also make finer details harder to see. </p>\n<p>DJI cameras offer three sharpness settings: <strong>Standard</strong>, <strong>Hard</strong> and <strong>Soft</strong>.</p>\n<h5 id=\"contrast\">Contrast</h5>\n<p>Contrast is the difference or gradient of color and brightness. The larger the difference, the higher the contrast. Increasing the contrast of an image can make it more vivid, but can also reduce the amount of detail.</p>\n<p>DJI cameras offer three contrast settings: <strong>Standard</strong>, <strong>Hard</strong> and <strong>Soft</strong>.</p>\n<h5 id=\"hue-and-saturation\">Hue and Saturation</h5>\n<p>Hue is another word for a pure color. Saturation is the amount of grey in the color. A lower saturation has more grey in the color, and makes it look duller. Higher saturation decreases the grey in a color, making it more pure.</p>\n<p>Hue and saturation can be seen on a color wheel.</p>\n<html><img src=\"../images/component-guide/camera-colorwheel.png\" width=30%></html>\n\n<p>The outside of the color wheel has complete color saturation, and is the hue. The center of the color wheel is grey, and is no saturation.</p>\n<p>Camera hue and saturation can both be adjusted. Adjusting the hue of an image will adjust the tint. Adjusting the saturation will make the image more or less grey. Images with high saturation can be very vivid, but also look false. </p>\n<h5 id=\"digital-filter\">Digital Filter</h5>\n<p>DJI cameras include several built-in filters that allow for interesting and creative effects. Many filters are available, some of which are <strong>Oil Painting</strong>, <strong>Water Color</strong>, and <strong>Art</strong>.</p>\n<h2 id=\"lens-and-focus\">Lens and Focus</h2>\n<p>Most DJI cameras come with a fixed lens, fixed aperture and fixed focus at infinity.</p>\n<p>The Zenmuse X5 camera however has a variable aperture, variable focus and the ability to swap lenses between DJI and third party options.</p>\n<p>DJI cameras with variable focus allow both manual and automatic focusing. When in automatic mode, the camera will calculate focus from an area in the image, which can be set through the SDK.</p>\n<p>Manual focusing is achieved by programmatically (or physically) setting the focus ring value.</p>\n<p>For some lenses, the minimum focus ring value (which corresponds with infinity focus) varies slightly between models and units. Therefore, when using a lens for the first time, a calibration needs to be done:</p>\n<ul>\n<li>Set focus mode to auto</li>\n<li>Point the camera at distant scene</li>\n<li>Ensure the focus target area is pointing at features &gt;30m away</li>\n<li>Let the camera auto focus</li>\n<li>Read the minimum focus ring value</li>\n</ul>\n<p>This focus ring value can be tied to the serial number of the camera for future reference.</p>\n<h2 id=\"live-video-feed\">Live Video Feed</h2>\n<p>Developers can get live H.264 video data from Camera using the Mobile SDK. The H.264 is a video coding format that is currently one of the most commonly used formats for compression, and distribution of video content. </p>\n<p>Even though most cameras can capture in 1080p or 4K, the live video stream is typically 720p to conserve wireless bandwidth. The live video stream is highly dependent on the quality of the wireless link. Wireless systems are complex, with many variables contributing to overall quality, however generally as the transmission distance increases, or obstacles start to occlude the signal, video quality can deteriorate rapidly.</p>\n<h2 id=\"playback-manager\">Playback Manager</h2>\n<p>DJI cameras support a media playback mode. The live video stream is replaced with a media preview stream. Commands can be sent to the camera to:</p>\n<ul>\n<li>View single previews or as pages of smaller thumbnails</li>\n<li>Navigate single and page previews</li>\n<li>Select and deselect files</li>\n<li>Delete files</li>\n<li>Play/pause/stop video previews</li>\n<li>Download Files</li>\n</ul>\n<h2 id=\"media-manager\">Media Manager</h2>\n<p>Media manager is used to interact with the file system on the SD card.\nBy using the media manager, metadata for all the multimedia files can be read, and files can be downloaded or deleted.</p>\n<p>During media download, the live video feed is paused so all wireless bandwidth can be dedicated to transferring files.</p>\n<h2 id=\"media\">Media</h2>\n<h5 id=\"storage\">Storage</h5>\n<p>DJI Cameras typically use SD cards to store photos and videos. Depending on whether Class 10 or UHS-1 Micro SD cards of up to 64 GB are required to accommodate the video bandwidths of the various cameras.</p>\n<p>The Zenmuse X5 RAW also has a 512 GB solid state drive (SSD) to record video. 4K RAW video data rates can peak at 2.4 Gbps compared to 60 Mbps for MP4 or MOV.</p>\n<p>SD Cards are either located on the camera itself, or the gimbal the camera is integrated into.</p>\n<h5 id=\"file-index\">File Index</h5>\n<p>There are two file index modes for storing media: <strong>Reset</strong> and <strong>Sequence</strong>. </p>\n<p><strong>Reset mode</strong>: The camera will reset the newest file&#39;s index to be one larger than the largest number of photos taken on the SD card.</p>\n<p><strong>Sequence mode</strong>, the camera will set the newest file&#39;s index to the larger of either the maximum number of photos taken on the SD card or the camera. </p>","meta":{"title":"Camera","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>The flight controller is an onboard computer that combines control information from the pilot with sensor information to adjust the thrust at each propellor and fly the aircraft as desired.</p>\n<p>The flight controller is responsible for:</p>\n<ul>\n<li>Flight control including motor control, taking off and landing, manual flight modes</li>\n<li>Aircraft state information such as attitude, position, speed</li>\n<li>Sensor sub components such as compasses, IMUs, and positioning systems.</li>\n<li>Aircraft sub components such as the landing gear</li>\n<li>Flight limitation systems such as No Fly Zones and the GEO System</li>\n<li>Aircraft flight simulation for testing and debugging</li>\n</ul>\n<p>A general description of fundamental flight control concepts can be found <a href=\"./flightController_concepts.html\">here</a>.</p>\n<h2 id=\"state\">State</h2>\n<p>The flight controller provides detailed state information at up to 10 Hz including:</p>\n<ul>\n<li>Aircraft position, velocity and altitude</li>\n<li>Remaining Battery and Flight time information</li>\n<li>Home location</li>\n<li>Sensor information (compass, IMU, Satellite positioning)</li>\n<li>Return home status</li>\n<li>Whether motors are on and aircraft is flying or not</li>\n<li>Flight limitation and GEO system information</li>\n</ul>\n<h2 id=\"flying\">Flying</h2>\n<h3 id=\"motor-control\">Motor Control</h3>\n<p>Motors can be turned on and off through APIs in the DJI Mobile SDK. Motors can only be turned off when the aircraft is not flying. Motors will not turn on if there are IMU or Compass calibration errors, or if the IMU is still pre-heating.</p>\n<h3 id=\"beginning-and-ending-flights\">Beginning and Ending Flights</h3>\n<p>Aircraft take-off and landing can be automated through APIs in the DJI Mobile SDK. Takeoff is considered complete when the aircraft is hovering 1.2 meters (4 feet) above the ground. Automatic take-off can only be initiated when the motors are off.</p>\n<p>When a automated land command is sent, the aircraft will descend at it&#39;s current position and land.</p>\n<h3 id=\"flight-control\">Flight Control</h3>\n<p>Aircraft flight can be controlled in several ways:</p>\n<ul>\n<li><strong>Manually</strong>: Remote controller control sticks can be manipulated by the user</li>\n<li><strong><a href=\"./component-guide-missions.html\">Missions</a></strong>: Simple high level flight automation</li>\n<li><strong><a href=\"#virtual-sticks\">Virtual Sticks</a></strong>: Stick commands can be sent using DJI Mobile SDK APIs that simulate manual flight. </li>\n</ul>\n<h3 id=\"flight-orientation\">Flight Orientation</h3>\n<p>The remote controller control sticks can be used to move the aircraft forward, backwards, left and right. However, if the direction of the aircraft isn&#39;t obvious, it can be difficult to control the aircraft predictably from pilot&#39;s perspective on the ground.</p>\n<p>Several flight orientation modes are available to make flying easier:</p>\n<ul>\n<li><strong>Course Lock</strong>: The aircraft moves relative to a locked course heading.</li>\n<li><strong>Home Lock</strong>: The aircraft moves relative radially to the Home Point.</li>\n<li><strong>Aircraft Heading</strong>: The aircraft moves relative to the front of the aircraft.</li>\n</ul>\n<p>More details are described in <a href=\"./flightController_concepts.html#ioc-intelligent-orientation-control\">Flight Control Concepts</a>.</p>\n<h3 id=\"flight-limitation\">Flight Limitation</h3>\n<p>Maximum aircraft altitude and distance from home location can be used to limit the area an aircraft can fly in. The DJI Mobile SDK provides APIs that allow developers to query and change these limitations.</p>\n<h3 id=\"geospatial-environment-online-geo-\">Geospatial Environment Online (GEO)</h3>\n<p>The <a href=\"http://www.dji.com/flysafe/geo-system\" target=\"_blank\">GEO system</a> is a best-in-class geospatial information system that provides drone operators with information that will help them make smart decisions about where and when to fly. It combines up-to-date airspace information, a warning and flight-restriction system, a mechanism for <a href=\"http://www.dji.com/flysafe/geo-system/unlock\" target=\"_blank\"> unlocking </a> (self-authorizing) drone flights in locations where flight is permitted under certain conditions, and a minimally-invasive accountability mechanism for these decisions.</p>\n<h2 id=\"sensors\">Sensors</h2>\n<p>The Flight controller manages several sub components of the aircraft including sensors and landing gear.</p>\n<h3 id=\"compass\">Compass</h3>\n<p>The compass measures magnetic field direction and is used to determine the heading of the aircraft relative to North. The compass sometimes needs to be calibrated if flying near magnetic interference. Compass calibration will require the user to rotate the aircraft vertically and horizontally through the azimuth. Products with multiple compasses (like the Phantom 4) will have their compass state fused into one compass class for simplicity.</p>\n<h3 id=\"imu-inertial-measurement-unit\">IMU - Inertial Measurement Unit</h3>\n<p>The IMU contains an accelerometer and gyroscope to measure linear acceleration and angular velocity. The IMU is a sensitive system that is dependent on temperature and sometimes requires recalibration. Preheating is done automatically by the aircraft, and its status can be monitored in the flight controller state data. Calibration can be initiated by DJI Mobile SDK APIs when required.</p>\n<p>Some products have more than one IMU for redundancy. The Phantom 4 has two IMUs, while the M600 can accommodate up to three.</p>\n<h3 id=\"rtk-positioning-system\">RTK Positioning System</h3>\n<p>DJI Products come with built-in consumer satellite positioning systems that use GPS and GLONASS satellite constellations. Consumer grade satellite positioning can have position errors of several meters.</p>\n<p>The DJI DRTK positioning system is an accessory compatible with the M600 and A3 flight controller that allows centimeter level positioning. DRTK is a real time kinetic satellite positioning system that uses GPS+GLONASS or GPS+Beidou constellations (depending on DRTK model).</p>\n<p>The system requires both a base station and mobile station receiver, which are connected together through a wireless link. The base station receiver is deployed at a known location on the ground, while the mobile station is deployed on the aircraft. Both base station and mobile station will experience similar satellite signal errors at the same time. As the base station is at a known location, it can send real time correction information to the mobile station, resulting in centimeter accurate positing information for the mobile station relative to the base station.</p>\n<p>The mobile station comes with two antennas which can be deployed on opposite sides of the aircraft. As the position of both antennas can be combined into a heading vector that can often be more accurate than compass heading in the environments with high magnetic field interference (like near large metal structures, or high voltage lines).</p>\n<h2 id=\"vision-system-and-intelligent-flight-assistant\">Vision System and Intelligent Flight Assistant</h2>\n<p>Cameras can be used to detect obstacles and accurately determine relative position and velocity. These cameras are typically mounted on the product facing downward for positioning and forward for obstacle detection. They are separate from the main camera used to capture photos and videos.</p>\n<h5 id=\"obstacle-avoidance\">Obstacle Avoidance</h5>\n<p>The Phantom 4 has two forward facing cameras that use stereo vision to determine the depth of the environment. This vision system allows the aircraft to either stop in front of or go around obstacles in its flight path.</p>\n<p>The vision system enables users to fly with increased comfort as there is lower probability they will make a mistake and impact an object. However, limitations of the system still need to be understood to fly safely. Objects that are difficult to detect are those that are small, very narrow, too plain in appearance (visual features can&#39;t be extracted), not in the field of view of both cameras, or too close or too far from the product (see <a href=\"http://www.dji.com/product/phantom-4/info#specs\" target=\"_blank\"> product page </a>) for specifications). </p>\n<h5 id=\"positioning\">Positioning</h5>\n<p>Downward facing cameras can help determine relative position and velocity more accurately than consumer satellite positioning systems. They can also be used to hover in GPS denied environments such as inside buildings.</p>\n<h5 id=\"intelligent-flight-assistant\">Intelligent Flight Assistant</h5>\n<p>The DJI Mobile SDK provides an Intelligent Flight Assistant that gives access to state information of the obstacle avoidance and positioning vision systems.</p>\n<p>In addition, warning and distance information is available to developers for obstacles in front of the aircraft.</p>\n<h2 id=\"landing-gear\">Landing Gear</h2>\n<p>Some products have moveable landing gear that are deployed when landing to protect the camera, but can be raised (retracted) when flying to not impede the camera view. </p>\n<p>Landing gear can be deployed or retracted programmatically or automatically. When automatic, the flight controller will determine when to deploy the landing gear and when to retract it. In situations where a fast landing is required, it is better to programmatically deploy the landing gear so the aircraft doesn&#39;t have to pause at a height close to the ground to trigger the automatic process.</p>\n<h5 id=\"transport-mode\">Transport mode</h5>\n<p>In transport mode, the landing gear will be in the same geometric plane as the aircraft body so it can be easily transported. </p>\n<h2 id=\"flight-time-and-battery-thresholds\">Flight Time and Battery Thresholds</h2>\n<p>Aircraft flight time is determined by total aircraft mass, the available stored (battery) energy on the aircraft, the environment the aircraft is flying in, and how the aircraft is being flown. Flying fast against strong wind with a heavy payload will have a shorter flight time than hovering in no wind with a light payload.</p>\n<p>During a flight, the flight controller and smart battery will work together to estimate the remaining time of the current flight based on data collected during the flight. It will also provide estimates for the the battery percentage required to return home from the current location, or land immediately.</p>\n<p>In addition, two manual battery thresholds can be set that will automate aircraft behavior when the battery is running low. </p>\n<ul>\n<li><strong>Return to home</strong>: The threshold is usually set between 25% and 50%, and will automatically initiate a return to home warning if the threshold is crossed. If no action is taken within 10s, then the aircraft will automatically return home. The return home can be cancelled by pressing the <strong>Return Home</strong> button on the remote controller.</li>\n<li><strong>Land in place</strong>: The threshold is usually set between 10% and 25%, and will immediately land the aircraft if crossed.</li>\n</ul>\n<h2 id=\"returning-home\">Returning Home</h2>\n<p>The aircraft can automatically return-to-home (RTH) in a number of scenarios:</p>\n<ul>\n<li><strong>Smart RTH</strong>: Commanded to by the pilot through the application or the remote controller</li>\n<li><strong>Failsafe RTH</strong>: If the wireless link is lost between the remote controller and aircraft</li>\n<li><strong>Low Battery RTH</strong>: If the battery drops below a threshold that is enough to get home, but not enough to require immediate emergency landing</li>\n</ul>\n<p>When automatically going home, the aircraft will rise to a minimum altitude, fly to the home location (home point) using GPS positioning, then land.</p>\n<p>The home point is automatically set as the location the aircraft first takes off from after power on. After that, the home point can be updated through APIs in the DJI Mobile SDK but is limited to being within 30m of initial take-off location, current aircraft&#39;s location, current mobile location, or current remote controller&#39;s location (for remote controllers with GPS capability).</p>\n<blockquote>\n<p><strong>Note:</strong> If the GPS signal is not sufficient during take-off to record a home location, the home point will be recorded when the GPS signal is strong enough. When taking off in poor satellite signal environments, developers should ensure the home point being set is within the user&#39;s expectations.</p>\n</blockquote>\n<h4 id=\"smart-rth\">Smart RTH</h4>\n<p>Press the <strong>Return Home</strong> button on the remote controller to initiate Smart RTH. The aircraft will then automatically return to the last recorded Home Point. </p>\n<p>The remote controller&#39;s control sticks can be used to change the aircraft&#39;s position to avoid a collision during the Smart RTH process. Press and hold the button once to start the process, and press the button again to terminate the procedure and regain full control of the aircraft.</p>\n<p>Smart RTH can also be initiated and cancelled through the DJI Mobile SDK.</p>\n<h4 id=\"failsafe-rth\">Failsafe RTH</h4>\n<p>If the Home Point was successfully recorded and the compass is functioning normally, Failsafe RTH will be automatically activated if the remote controller signal is lost for more than three seconds. The RTH process may be interrupted and the operator may regain control of the aircraft if the remote controller signal connection is re-established.</p>\n<p>In some missions, it is not desirable to immediately return home when signal connection is lost. Failsafe behavior can be configured using DJI Mobile SDK APIs.</p>\n<h4 id=\"low-battery-rth\">Low Battery RTH</h4>\n<p>When the battery drops below a certain threshold (typically 25% to 50%), the aircraft will request to come home. When it does so, the DJI Mobile SDK APIs that monitor flight controller state will be updated to include this request, and at the same time the remote controller will start beeping.</p>\n<p>The RTH procedure can be cancelled by either pressing the home button on the remote controller, or sending a cancel command through the application using the SDK.</p>\n<h2 id=\"loss-of-wireless-link\">Loss of Wireless Link</h2>\n<p>The wireless connection between the remote controller and aircraft can sometimes be lost when the distance is too great, or obstacles impede the link.</p>\n<p>If the link is lost for 3 seconds, the aircraft will start performing a failsafe behavior. Behavior options include:</p>\n<ul>\n<li>Automatically returning home (see <a href=\"#returning-home\">Returning Home</a>)</li>\n<li>Hovering in position</li>\n<li>Landing in position</li>\n</ul>\n<h2 id=\"onboard-sdk-communication\">Onboard SDK Communication</h2>\n<p>Applications using the DJI Mobile SDK can communicate with DJI Onboard SDK applications deployed on the aircraft over the Lightbridge wireless communication link.</p>\n<p>The DJI Mobile SDK gives developers the ability to detect if an Onboard SDK application is connected to the flight controller, and both send and receive data to it. The size of the data cannot be greater than 100 bytes, and will be sent in 40 byte increments every 14ms.</p>\n<h2 id=\"simulator\">Simulator</h2>\n<p>DJI aircraft flight controllers support a simulation mode for faster, safer development of applications. The flight controller accept control commands, and use them to simulate sensor and state information. Applications can be tested in the simulator first before taking the products into the field.</p>\n<p>The simulator can be started and stopped using the DJI Mobile SDK. Programatic control of the simulator means continuous integration environments can leverage the simulator to do comprehensive application testing every time an application is built.</p>\n<p>A windows application (and for P4 a mac application) can be used to visualize the simulated flight. More details on using the simulator are <a href=\"../application-development-workflow/workflow-testing.html\">here</a>.</p>\n<h2 id=\"virtual-sticks\">Virtual Sticks</h2>\n<p>Virtual stick functions in the DJI Mobile SDK simulate the remote controller&#39;s joysticks, and therefore an aircraft can be automated to fly in any way a human can manually fly it. Compared to missions, this is a more complicated, but flexible way to automate flight.</p>\n<p>The virtual stick APIs have several modes of operation that are important to understand.</p>\n<h3 id=\"coordinate-system\">Coordinate System</h3>\n<p>Either Ground or Body coordinate system can be chosen. All horizontal movement commands (X, Y, pitch, roll) will be relative to the coordinate system.</p>\n<h3 id=\"roll-pitch-control-mode\">Roll Pitch Control Mode</h3>\n<p>Virtual stick commands to move the aircraft horizontally can either be set with X/Y velocities, or roll/pitch angles. Larger roll and pitch angles result in larger Y and X velocities respectively. Roll and pitch angles are always relative to the horizontal. Roll and pitch directions are dependent on the coordinate system, and can be confusing. For convenience a table detailing how the aircraft moves depending on coordinate system and roll pitch control mode is given below. These can all be calculated using the definition of the coordinate systems.</p>\n<table id=\"t01\">\n  <thead>\n    <tr>\n      <th>Coordinate</th>\n      <th>RollPitch Control Mode</th>\n      <th>Aircraft Heading</th>\n      <th>FlightControl Data.Pitch (Positive)</th>\n      <th>FlightControl Data.Pitch (Negative)</th>\n      <th>FlightControl Data.Roll (Positive)</th>\n      <th>FlightControl Data.Roll (Negative)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"2\">Ground</th>\n      <td>Angle</td>\n      <td>North</td><br>      <td>Go South</td>\n      <td>Go North</td>\n      <td>Go East</td><br>      <td>Go West</td>\n    </tr>\n    <tr>\n      <td>Angle</td>\n      <td>East</td><br>      <td>Go South</td>\n      <td>Go North</td>\n      <td>Go East</td><br>      <td>Go West</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">Ground</th>\n      <td>Velocity</td>\n      <td>North</td><br>      <td>Go East</td>\n      <td>Go West</td>\n      <td>Go North</td><br>      <td>Go South</td>\n    </tr>\n    <tr>\n      <td>Velocity</td>\n      <td>East</td><br>      <td>Go East</td>\n      <td>Go West</td>\n      <td>Go North</td><br>      <td>Go South</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">Body</th>\n      <td>Angle</td>\n      <td>North</td><br>      <td>Go South</td>\n      <td>Go North</td>\n      <td>Go East</td><br>      <td>Go West</td>\n    </tr>\n    <tr>\n      <td>Angle</td>\n      <td>East</td><br>      <td>Go West</td>\n      <td>Go East</td>\n      <td>Go South</td><br>      <td>Go North</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">Body</th>\n      <td>Velocity</td>\n      <td>North</td><br>      <td>Go East</td>\n      <td>Go West</td>\n      <td>Go North</td><br>      <td>Go South</td>\n    </tr>\n    <tr>\n      <td> Velocity </td>\n      <td>East</td><br>      <td>Go South</td>\n      <td>Go North</td>\n      <td>Go East</td><br>      <td>Go West</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"yaw-control-mode\">Yaw Control Mode</h3>\n<p>Yaw can be changed by either angle or velocity. Yaw settings are independent of the coordinate system. Positive yaw velocity will always rotate clockwise, and yaw angle is always relative to North.</p>\n<h3 id=\"vertical-throttle-control-mode-\">Vertical Throttle Control Mode:</h3>\n<p>Vertical movement can be achieved either using velocity or position. Position is an altitude relative to the take-off location. Velocity is always relative to the aircraft, and does not follow typical coordinate system convention (positive vertical velocity results in the aircraft ascending). </p>","meta":{"title":"Flight Controller","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Cameras fixed to an aircraft will record images that pitch and roll with the aircraft as it moves. Multi rotor aircraft need to pitch and roll simply to move horizontally, and so getting a stable horizontal shot is not possible.</p>\n<p>A gimbal is used to keep a camera or sensor horizontal when its mount (e.g. aircraft) is moving. The gimbal has three motors controlling rotation in orthogonal axes. The gimbal feeds gyroscope information back to the motor controllers to compensate for rotational movement of the mount.</p>\n<p>In addition to stabilization, the three motors can be used to control the direction the camera is pointing, and can be used to smoothly track a target, or pan a shot. The three axes of rotation are referred to as Pitch, Roll and Yaw, and the gimbal orientation is referred to as its attitude. Explanations of these axes can be found in the <a href=\"./flightController_concepts.html\">Flight Control Concepts</a>.</p>\n<p>Gimbals have mechanical limits (or stops) to their rotation around each axis. When a sensor is mounted on a gimbal, many data and control lines are required to go from mount to sensor. These control lines are usually bundled in a cable assembly or flex circuit, both of which will limit the available rotation of the gimbal. Additionally, gimbals will also limit rotation so cameras cannot see landing gear or the product itself.</p>\n<p>The DJI Mobile SDK gives access to gimbal capabilities, state, and control. Numerous settings are possible with the gimbal that define its work mode and how it compensates for movement.</p>\n<p><img src=\"../images/component-guide/gimbal_intro.png\" alt=\"\"></p>\n<h2 id=\"gimbal-capabilities\">Gimbal Capabilities</h2>\n<p>Gimbal features vary significantly across product lines. Therefore the DJI Mobile SDK provides a dictionary of gimbal capabilities for runtime use. Gimbal capabilities include:</p>\n<ul>\n<li>Which axes are controllable</li>\n<li>Mechanical stops of each axis</li>\n<li>Whether response speeds to manual control are customizable</li>\n<li>Whether <a href=\"#smoothTrack\">SmoothTrack</a> is available and customizable</li>\n<li>Whether <a href=\"#endPoint\">End point</a> settings are available and customizable</li>\n<li>Whether <a href=\"#motor-control\">Motor control</a> settings are available and customizable</li>\n</ul>\n<h2 id=\"work-modes\">Work Modes</h2>\n<p>The gimbal has several work modes that define how the gimbal follows aircraft movement, and how many axes are available for control.</p>\n<ul>\n<li><strong>FPV (First Person View) Mode</strong>: Only pitch is controllable. Yaw and roll will be fixed relative to the product while pitch remains controllable.</li>\n<li><strong>Yaw Follow Mode</strong>: Pitch and roll are controllable. Yaw will follow the products heading.</li>\n<li><strong>Free Mode</strong>: Pitch, roll and yaw are all controllable, meaning the gimbal can move independently of the product&#39;s yaw. In this mode, even if the product yaw changes, the camera will continue pointing in the same world direction. </li>\n</ul>\n<h2 id=\"gimbal-state\">Gimbal State</h2>\n<p>The gimbal component pushes state information back to the Mobile device at up to 10 Hz. State information includes current attitude, calibration state, calibration offsets, work mode, and whether the gimbal is at a mechanical stop.</p>\n<h2 id=\"moving-the-gimbal\">Moving the Gimbal</h2>\n<h3 id=\"custom-control\">Custom Control</h3>\n<p>Through the DJI Mobile SDK, the gimbal can be moved in two ways:</p>\n<ul>\n<li>Move to an angle over a duration</li>\n<li>Move at a speed in a direction</li>\n</ul>\n<p>When using angle mode to rotate the gimbal&#39;s pitch, roll and yaw, the rotation angle of the gimbal can be defined as either <strong>Absolute</strong>(relative to the aircraft heading), or <strong>Relative</strong> (relative to its current angle). </p>\n<p>When using speed to rotate the gimbal&#39;s pitch, roll and yaw, the direction can either be set to clockwise or counter-clockwise.</p>\n<h3 id=\"reset\">Reset</h3>\n<p>The gimbal can be reset, and its pitch, roll and yaw will be set to 0 degrees. The reset position is pointing horizontally and being in the same direction as product heading. </p>\n<p>For X3, X5 and X5R, the pitch doesn&#39;t get set to 0 degrees, but remains at the current pitch.</p>\n<h2 id=\"calibration\">Calibration</h2>\n<p>Gimbals will be automatically calibrated on power up, but can also be calibrated through SDK APIs. Users will see the camera rotate around all three axes for several seconds when the gimbal is calibrating.</p>\n<p>The product should be stationary (not flying, or being held) and horizontal during calibration. For gimbal with adjustable payloads, the payload should be present and <a href=\"#balancing\">balanced</a> before doing a calibration.</p>\n<h3 id=\"fine-tune-roll\">Fine Tune Roll</h3>\n<p>The gimbal roll can be fine tuned with a custom offset. The range for the custom offset is [-10, 10] degrees. If the offset is negative, the gimbal will be fine tuned the specified number of degrees in the counterclockwise direction.</p>\n<h3 id=\"balancing\">Balancing</h3>\n<p>Gimbals that can accommodate custom payloads (like the Ronin MX) require the payload&#39;s center of mass to be at the gimbal&#39;s rotational center. The process of adjusting the payload position to achieve this is called balancing.</p>\n<p>Balancing APIs are provided to initiate balancing tests and return balancing results. A payload needs to be properly balanced before starting gimbal calibration.</p>\n<h2 id=\"osmo-and-ronin-mx-functionality\">Osmo and Ronin-MX Functionality</h2>\n<p>Osmo and Ronin-MX can be used in a handheld configuration, and allow additional customizations to how the gimbal responds to user movement.</p>\n<h3 id=\"smoothtrack\">SmoothTrack</h3>\n<p>SmoothTrack describes how and when the gimbal will compensate for yaw and pitch movement at it&#39;s mount (e.g. Osmo handle). SmoothTrack speed, acceleration and deadband can be customized. The animation below shows the gimbal compensating for handle yaw rotation relatively slowly. Roll is not supported with SmoothTrack as a horizontal image is usually preferred.</p>\n<p> <img src=\"../images/component-guide/osmo_smoothTrack.gif\" alt=\"osmoSmoothTrack\"></p>\n<ul>\n<li><p><strong>SmoothTrack Speed</strong> is the gimbal&#39;s <em>catch-up</em> speed to large mount rotations. A faster speed will be more responsive for tracking fast moving objects, but also produce less smooth video.</p>\n</li>\n<li><p><strong>SmoothTrack Acceleration</strong> determines how closely the gimbal will compensate for handle movement (how quickly it will reach the SmoothTrack speed). A fast acceleration will be more responsive to small handle rotations, and therefore less able to smooth out small unwanted rotations.</p>\n</li>\n<li><p><strong>SmoothTrack Deadband</strong> determines the amount of rotation required before the gimbal starts to compensate. A larger deadband requires more mount movement before the gimbal will start to move. Having a large deadband is useful for when the camera is moving a lot, and the subject is relatively stationary. Smaller deadbands are required if quicker response is needed to mount movement.</p>\n</li>\n</ul>\n<h3 id=\"physical-controller\">Physical Controller</h3>\n<p>The gimbal can be manually moved around the pitch and yaw axes using the joystick on OSMO and the remote controller on Ronin-MX. The joystick and remote controller are physical controllers on the handles of the products.</p>\n<p>The gimbal&#39;s response to the physical controller can be customized using speed, smoothing and deadband settings. The animation below shows the gimbal following movement of the Osmo joystick.</p>\n<p> <img src=\"../images/component-guide/osmo_joystick.gif\" alt=\"osmoJoystick\"></p>\n<ul>\n<li><p><strong>Controller Speed</strong> is the gimbal&#39;s movement speed when controlled with the physical controller. When the controller is at full deflection (displacement), the gimbal will be moving at the controller speed.</p>\n</li>\n<li><p><strong>Controller Smoothing</strong> controls the deceleration of the gimbal when the physical controller deflection reduces. </p>\n</li>\n<li><p><strong>Controller Deadband</strong> determines the amount of deflection required in the physical controller before the gimbal starts to move. </p>\n</li>\n</ul>\n<h3 id=\"selfie\">Selfie</h3>\n<p>The Osmo gimbal can quickly adjust the camera into a selfie position by pressing the trigger three times rapidly. The camera yaw will rotate to 180 degrees (facing the back of the handle), and the pitch will be adjusted to be horizontal.</p>\n<p>Pressing the trigger two times will adjust the camera yaw to 0 degrees, and pitch to be horizontal.</p>\n<p>The DJI Mobile SDK has an API that can toggle between the selfie, and 0 position.</p>\n<h3 id=\"orientation-lock\">Orientation Lock</h3>\n<p>Holding the trigger will lock the camera to it&#39;s current orientation. Any rotation in pitch, roll and yaw of the handle will be compensated for by the gimbal up to the gimbal stops. The below animation illustrates an Osmo in orientation Lock.</p>\n<p><img src=\"../images/component-guide/osmo_lock.gif\" alt=\"osmoLock\"></p>\n<h3 id=\"endpoint\">Endpoint</h3>\n<p>All gimbals have mechanical stops, but the Ronin MX can also have logical stops (Endpoints) that limit rotation when using the physical controller. The DJI Mobile SDK has APIs to enable and set Endpoints in the directions of <strong>PitchUp</strong>, <strong>PitchDown</strong>, <strong>YawLeft</strong> and <strong>YawRight</strong>.</p>\n<h3 id=\"motor-control\">Motor Control</h3>\n<p>For gimbals with adjustable payloads, finer level motor control is useful to compensate for payloads with different masses. The controller is a proportional-integral-derivative (PID) type, and it&#39;s coefficients can all be adjusted.</p>\n<ul>\n<li><strong>Stiffness:</strong> The proportional term of a PID controller</li>\n<li><strong>Strength:</strong> The coefficient for the integral term of a PID controller</li>\n<li><strong>Precontrol:</strong> The coefficient for the derivative term of a PID controller</li>\n<li><strong>Gyro Filtering:</strong> The coefficient for denoising the output</li>\n</ul>\n<h3 id=\"range-extension\">Range Extension</h3>\n<p>Some gimbals have stops in place to prevent the camera from being impeded by the landing gear or other parts of the product when the product is at extreme attitudes. For some applications, it can be useful to extend the range of motion of the gimbal, as long as the developer and user understand that some shots might be compromised.</p>\n<p>Therefore the DJI Mobile SDK provides APIs that enable some axes on some products to have range extensions. The gimbal capability dictionary can be used to determine when range extensions are available.</p>\n<h3 id=\"upright-mode\">Upright Mode</h3>\n<p>The M600 allows the Ronin MX to be mounted on top of the aircraft instead of underneath the aircraft. This is especially useful when doing inspections underneath structures like bridges. The DJI Mobile SDK provides APIs that can set the gimbal upright mode.</p>","meta":{"title":"Gimbal","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Missions can be used to easily automate flight. There are many different mission types that offer different product behavior. Some missions can be uploaded to and managed by the aircraft, while other missions are managed from the mobile device.</p>\n<p>Missions run from the mobile device can offer more complex or customizable behavior, however if the wireless link between remote controller and aircraft is lost then they can be interrupted. In comparison, missions run from the aircraft will be less customizable and be limited by aircraft memory, but be able to continue when there is a loss in the wireless link.</p>\n<h2 id=\"mission-manager\">Mission Manager</h2>\n<p>All missions are managed through the DJI Mobile SDK&#39;s Mission Manager. The Mission Manager provides a consistent execution experience for all missions and allows preparation, starting, pausing, resuming, downloading and ending of missions.</p>\n<h2 id=\"waypoint-mission\">Waypoint Mission</h2>\n<p>A waypoint mission is a series of pre-defined locations (waypoints) the aircraft will fly to. A location is a latitude, longitude and altitude. Aircraft heading and altitude between waypoints can change either gradually or at the waypoint itself. A series of actions (such as take photo) can be executed at each waypoint.</p>\n<p>During the mission, the mission can be manually adjusted using the remote controller control sticks. The mission speed can be sped up, slowed down or even executed in reverse. </p>\n<p><img src=\"../images/component-guide/waypoints.gif\" alt=\"\"></p>\n<p>A Waypoint Mission is uploaded to and executed by the aircraft, but is limited by the amount of storage in the flight controller. Accordingly only 99 waypoints can be executed per mission. Custom Mission can be used to easily queue waypoint missions, in applications that require more than 99 points.</p>\n<h3 id=\"hot-point-mission\">Hot Point Mission</h3>\n<p>In a Hot Point Mission, the aircraft will repeatedly fly circles of a constant radius around a specified point called a Hot Point. Altitude, velocity, the Hot Point location, aircraft heading and flight direction can all be defined as part of the mission.</p>\n<p>Altitude, heading and radius can also be adjusted manually using the remote controller control sticks during the mission.</p>\n<p><img src=\"../images/component-guide/hotPoint.gif\" alt=\"\"></p>\n<h3 id=\"follow-me-mission\">Follow Me Mission</h3>\n<p>In a Follow Me Mission, the aircraft will follow GPS coordinates continually sent to the aircraft maintaining separation and a constant altitude.</p>\n<p>The aircraft will hover in place if it hasn&#39;t received a new GPS coordinate for more than 6 seconds. </p>\n<p><img src=\"../images/component-guide/followMe.gif\" alt=\"followMe\"></p>\n<h3 id=\"activetrack-mission\">ActiveTrack Mission</h3>\n<p>The ActiveTrack Mission allows an aircraft to track a moving subject using the vision system and without a GPS tracker on the subject. </p>\n<ul>\n<li>User defines a rectangle on the live video view that defines the subject to track.</li>\n<li>The rectangle is sent to the aircraft, and which will start to track the object</li>\n<li>The aircraft will send back real-time updates of the rectangle tracking what it thinks is the subject and ask for confirmation it is tracking correctly</li>\n<li>On confirmation, the aircraft will start to move with the subject, following it while tracking</li>\n<li>If the tracking algorithm loses confidence it is tracking the subject correctly the aircraft will return to a hover and ask for confirmation about the subject again</li>\n</ul>\n<p>During the mission, the main camera is used to track the object and so the gimbal cannot be controlled by the user or application. The aircraft can be flown manually with pitch, roll and throttle stick commands from the remote controller to move the aircraft around the subject being tracked.</p>\n<p>ActiveTrack is only supported on the Phantom 4.</p>\n<p><img src=\"../images/component-guide/p4ActiveTrackAni.gif\" alt=\"p4ActiveTrackAni\"></p>\n<h3 id=\"tapfly-mission\">TapFly Mission</h3>\n<p>The TapFly mission flies the aircraft in the direction of a point on the live video stream that the user chooses. The mission is initialized with a position target from the live video stream. The 3D direction of the coordinate is calculated, and the aircraft proceeds to fly in that direction. The aircraft can automatically avoid obstacles when the scene is sufficiently illuminated (more than 300 lux but less than 10,000 lux). The aircraft stops flying in the direction if it reaches its radius limitation, the mission is stopped, the user pulls back on the pitch stick or if it comes to an obstacle it cannot bypass. </p>\n<p>The Remote Controller yaw stick can be used to adjust the heading of the aircraft during mission execution, which also adjusts the direction of flight to the new yaw. Using any other stick controls will cancel the mission.</p>\n<p>TapFly is only supported on the Phantom 4.</p>\n<p><img src=\"../images/component-guide/p4TapFlyAni.gif\" alt=\"p4TapFlyAni\"></p>\n<h3 id=\"panorama-mission\">Panorama Mission</h3>\n<p>The Panorama Mission rotates the camera 180 or 360 degrees while taking photos which can then be downloaded to render a panorama. In full circle mode, 8 photos are taken. In half circle mode, 5 photos are taken. Other commands cannot be sent to the camera until the mission is finished. The Panorama Mission does not support the image stitching feature, so the images must be stitched manually. All the images will be stored on the SD card.</p>\n<p>The Panorama Mission is only supported on OSMO. </p>\n<h3 id=\"custom-mission\">Custom Mission</h3>\n<p>The Custom Mission serializes multiple missions or mission steps. It is an easy way to create complex, rich missions. Each mission step is uploaded to the aircraft at time of execution. Mission steps available are:</p>\n<ul>\n<li>Waypoint Mission</li>\n<li>Follow Me Mission</li>\n<li>Hot Point Mission</li>\n<li>Aircraft Take off</li>\n<li>Aircraft Land</li>\n<li>Goto Waypoint</li>\n<li>Go Home</li>\n<li>Shoot Photo</li>\n<li>Record Video</li>\n<li>Change Aircraft Yaw</li>\n<li>Change Gimbal Attitude</li>\n</ul>","meta":{"title":"Missions","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>The remote controller allows manual flight, gimbal and camera control, and provides a robust wireless control link for aircraft. The mobile device can connect to the remote controller to communicate to the aircraft and receive the live video stream from the camera.</p>\n<p>The remote controller has sticks, wheels, switches and buttons that give control. It has a USB connector for mobile devices, and sometimes additional video output ports to connect with external video equipment.</p>\n<p>In some products, remote controllers can be linked together in a master slave relationship where the master controls aircraft flight and the slave controls the gimbal and camera. This is useful for cinematic applications where the pilot can focus on flying while the camera operator on capturing a good shot.</p>\n<h2 id=\"control-input\">Control Input</h2>\n<p>The diagram below illustrates many of the remote controller sticks, buttons and wheels for the Phantom 4 remote controller. Sticks can be used for controlling flight direction and sometimes gimbal. Wheels are usually used for gimbal control, and buttons for camera control, and returning home.</p>\n<p><img src=\"../images/product-introduction/ComponentsRemoteController.png\" alt=\"\"></p>\n<p>Different products have different remote controllers depending on aircraft features, and so each product&#39;s manual should be reviewed for detailed information on each remote controller.</p>\n<h3 id=\"control-sticks\">Control Sticks</h3>\n<p>The two control sticks (left and right) are typically used for flight control. Moving the left and right stick either horizontally or vertically will control throttle, yaw, pitch and roll. By default, the sticks are mapped to <strong>Mode 2</strong> shown in the table below.</p>\n<p><img src=\"../images/component-guide/remotecontroller-joysticks.png\" alt=\"\"></p>\n<h2 id=\"flight-mode\">Flight Mode</h2>\n<p>DJI aircraft have many flight modes that depend on the remote controller&#39;s <strong>Flight Mode Switch</strong> state, what positioning aids are available, and what the aircraft is doing at the time.</p>\n<p>The Flight Mode Switch can be used to determine whether the aircraft uses positioning aids to maintain position (like GPS), and whether automated flight control using <a href=\"./component-guide-missions.html\">Missions</a> and <a href=\"./component-guide-flightController.html#Virtual-Sticks\">Virtual Sticks</a> is enabled. Therefore the switch can be used to effectively override positioning sensors, and automated flight whenever the pilot needs to.</p>\n<p>Four modes are available (P, S, A, F) of which each product has three to select from. All products except the Phantom 4 use P, A and F. The Phantom 4 uses P, A and S.</p>\n<h3 id=\"p-mode-positioning-\">P-Mode (Positioning)</h3>\n<p>In Positioning Mode, the aircraft uses all positioning aids that are available to fly. These include GPS, the vision positioning system, and the obstacle avoidance system. Positioning systems won&#39;t be available if they are not part of the product, if they&#39;ve been disabled, or if the environment doesn&#39;t allow it (e.g. indoor environments won&#39;t have sufficiently strong GPS signals for the GPS positioning aid to be available).</p>\n<p>For the Phantom 4, advanced features such as Missions, Virtual Sticks and <a href=\"./flightController_concepts.html#ioc-intelligent-orientation-control\">Intelligent Orientation Control</a> are enabled. For all other products, these advanced features are disabled in this mode.</p>\n<p>Therefore, if the pilot needs to override automated flight on a Phantom 4, they should move the flight mode switch out of P-Mode. Alternatively, if they need to override automated flight on other products, they can move the switch into P-Mode.</p>\n<h3 id=\"a-mode-attitude-\">A-Mode (Attitude)</h3>\n<p>In Attitude Mode, the aircraft does not use any positioning aids to fly. Only the barometer is used to track altitude. No advanced features are enabled in this mode.</p>\n<p>For all products, A-Mode can be used to regain manual control from automated flight.</p>\n<p>In A-Mode, GPS is still used to return home automatically assuming a sufficiently strong GPS signal is present, and a home location exists.</p>\n<h3 id=\"f-mode-function-\">F-Mode (Function)</h3>\n<p>In Function Mode, the aircraft uses all positioning aids available (similar to P-Mode) and also enables advanced features such as <a href=\"./component-guide-missions.html\">Missions</a> and <a href=\"./flightController_concepts.html#ioc-intelligent-orientation-control\">Intelligent Orientation Control</a>. Function mode is available in all products except the Phantom 4.</p>\n<p>If manual control needs to be regained by the pilot while executing missions or Virtual Stick commands, the Flight Mode Switch should be moved out of F-Mode.</p>\n<h3 id=\"s-mode-sport-\">S-Mode (Sport)</h3>\n<p>Only available on the Phantom 4, Sport mode uses all positioning aids, adjusts the handling gain values of the aircraft in order to enhance the maneuverability, and increases the maximum flight speed to 20 m/s. The obstacle avoidance system is disabled in S-Mode.</p>\n<p>S-Mode can be used to regain manual control from automated flight.</p>\n<h2 id=\"linking\">Linking</h2>\n<p>Remote controllers are linked to individual aircraft and need to be re-linked if used with a different aircraft. Linking remote controllers with different aircraft that are different product models is possible if the wireless link between aircraft and remote controller is the same. For example, a Phantom 3 Professional remote controller that uses a Lightbridge wireless link will also work with a Phantom 4 aircraft. However, when mixing aircraft and remote controller product models, not all functionality will necessarily be present.</p>\n<p>To link, the remote controller must be put in linking mode (through DJI Go or the DJI Mobile SDK APIs). The remote controller will start beeping and its status LED will blink blue. The link button on the aircraft then needs to be pressed to finish the linking process. For example, the link button on the Phantom 4 is shown below.</p>\n<p><img src=\"../images/component-guide/p4_linkButton.png\" alt=\"p4_linkButton\"></p>\n<p>The linking button is in a different location for each aircraft, and the product manual should be reviewed for specific position.</p>\n<h2 id=\"master-slave-control\">Master/Slave Control</h2>\n<p>Dual remote controllers can be used to simultaneously control some aircraft such as the Inspire 1. The master remote controller communicates directly with the aircraft and controls flight. The slave remote controller receives video from the aircraft, but communicates with the master remote controller to relay gimbal and camera control.</p>\n<p>To operate in this mode, the remote controllers must be put in master or slave mode, and then wirelessly linked together using either DJI Go or the DJI Mobile SDK APIs. </p>\n<h2 id=\"custom-buttons\">Custom Buttons</h2>\n<p>There are two custom buttons on the back of the remote controller. The custom buttons do not communicate with the aircraft, and are only available for mobile applications. Custom button state (whether pressed or not) is available in the DJI Mobile SDK, and so users can use the custom buttons to interact with an application if configured in the application.</p>\n<p>Additionally each custom button can have a unique tag value set to it, which can be used as a way to store unique information on each remote controller.</p>\n<blockquote>\n<p><strong>Note</strong>: Custom button 1 is by default bound with DJI Go in iOS. When the remote controller is connected to the mobile device, and C1 is pressed, a dialog confirming the user wants to enter DJI Go is displayed. On confirmation, DJI Go will load.</p>\n<p>This behavior can be disabled using the DJI Mobile SDK, but developers should inform users of the behavior change so they don&#39;t have an unexpected experience.</p>\n</blockquote>","meta":{"title":"Remote Controller","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Similar to visible light cameras, thermal cameras can capture photos and videos of a scene. </p>\n<h2 id=\"thermal\">Thermal</h2>\n<p>  The following features supported only by thermal imaging cameras.</p>\n<h4 id=\"scene-modes\">Scene Modes</h4>\n<p>  Using scene option to instantly enhance the image. In all modes except Manual and User modes, the DDE, ACE, SSO, brightness and contrast are set automatically to obtain the best result.\n  In User modes, the DDE, brightness and contrast are set automatically to obtain the best results. Any settings that are made in these modes are retained if the scene is changed.\n  In Manual mode, DDE, ACE, SSO, brightness and contrast are set manually.</p>\n<h4 id=\"isotherms\">Isotherms</h4>\n<p>  Isotherms can be used to highlight specific temperature rages. When it&#39;s enabled, only 128 values (0-127) are mapped linearly to temperature. Then three bands 128-175, 176-223 and 224-255 can be mapped to user defined temperatures to highlight them to the user. Using some of the false colour palettes (like RainbowIso) results in a thermal image that is grey scale except for three specific bands highlighted by either reds, blues or greens.</p>\n<p>  Setting the <strong>unit</strong> of the Isotherm ranges is also available, it could be either Celsius or percent. Different units results in different value ranges for Isotherms. </p>\n<p>  Lastly, developers can set the <strong>lower</strong>, <strong>middle</strong> and <strong>upper</strong> threshold values for Isotherm. </p>\n<p>  All temperature values above the upper threshold value will use colors 224-255 from the palatte. Temperature values between the middle and upper Isotherm threshold will be displayed with colors 176-223 from the palette. Temperature values between the lower and middle Isotherm threshold will be displayed with colors 128-175 from the palette.</p>\n<h4 id=\"gain-mode\">Gain Mode</h4>\n<p>There are three gain modes for Thermal: <strong>Auto</strong>, <strong>Low</strong> and <strong>High</strong>.</p>\n<p>For <strong>Auto</strong> gain mode, the camera will automatically select the optimal gain mode according to the temperature range of the image.</p>\n<p>For <strong>Low</strong> gain mode, the camera covers a wider temperature range but is less sensitive to temperature differences.</p>\n<p>For <strong>High</strong> gain mode, the camera covers a smaller temperature range but is more sensitive to temperature differences.</p>\n<p>Low gain mode can be used for scenes with temperatures ranging from -40 to 550 degrees Celsius. For higher contrast, the high gain mode can be used by for temperatures between -25 to 135 degrees Celsius for the 640x512 camera and -25 to 100 degrees Celsius for 324 x 256 camera.</p>\n<h4 id=\"temperaturedata\">TemperatureData</h4>\n<p>  For the XT, the temperature measurement data is the average of the center four pixels of the image. The thermal imaging camera will only update the temperature if the temperature data is enabled.</p>\n<h4 id=\"digital-zoom-scale\">Digital Zoom Scale</h4>\n<p>  Thermal imaging camera is available to adjust the digital zoom. </p>\n<h4 id=\"palletes\">Palletes</h4>\n<p>Each palette is a unique look-up table that maps 8-bit temperature values to different colors. Different palettes can be used to help the user better visualize temperature contrast or specific temperature bands.</p>\n<p>The different colors are used to show various temperatures in the thermal imagery image. The colors are not actually related to wavelengths of light, but rather the grayscale intensity. There are different Palette types for Thermal. It could be WhiteHot, BlackHot, RedHot, GreenHot, etc.</p>","meta":{"title":"Camera","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"coordinate-systems\">Coordinate Systems</h2>\n<p>Description of aircraft movement is dependent on the location and orientation of coordinate axes that make a coordinate system (or frame of reference). Many coordinate systems exist, but the two used in the DJI Mobile SDK are relative to the aircraft body (body frame), and relative to the ground (world frame).</p>\n<h3 id=\"body-coordinate-system\">Body Coordinate System</h3>\n<p>The body coordinate system is relative to the aircraft itself. Three orthogonal axes are defined such that the origin is the center of mass, and the <strong>X</strong> axis is directed through the front of the aircraft and the <strong>Y</strong> axis through the right of the aircraft. Using the <a href=\"https://en.wikipedia.org/wiki/Right-hand_rule\" target=\"_blank\">coordinate right hand rule</a>, the <strong>Z</strong> axis is then through the bottom of the aircraft.</p>\n<p><img src=\"../images/flightController-concepts/xyz_noRedArrows.png\" alt=\"\"></p>\n<p>Aircraft translation in positive X, Y and Z is therefore defined in the Body Coordinate System as forward, right and downward translation respectively.</p>\n<p>Aircraft rotation is also described with these same axes using the <a href=\"https://en.wikipedia.org/wiki/Right-hand_rule\" target=\"_blank\">coordinate right hand rule</a> to define the direction of positive rotation. When describing rotational movement, the X, Y and Z axes are renamed <strong>Roll</strong>, <strong>Pitch</strong> and <strong>Yaw</strong>.</p>\n<p><img src=\"../images/flightController-concepts/altitude.png\" alt=\"\"></p>\n<p>The definition of X, Y, Z, roll, pitch and yaw is consistent with aircraft body coordinate systems, but can sometimes be unintuitive to a developer seeing it for the first time.</p>\n<p>For instance, if the aircraft rotates around the Pitch axis (Y axis) it will move in the X axis direction. Moreover, if the Pitch angle is positive, the direction will be backwards, or in the negative X axis. Care must therefore be taken when using roll, pitch and yaw to move an aircraft.</p>\n<h3 id=\"ground-world-coordinate-system\">Ground (World) Coordinate System</h3>\n<p>A popular ground or world coordinate system used for aircraft aligns the positive <strong>X</strong>, <strong>Y</strong> and <strong>Z</strong> axes with the directions of <strong>North</strong>, <strong>East</strong> and <strong>down</strong>. This convention is called <strong>North-East-Down</strong> or <strong>NED</strong>. </p>\n<p>Positive Z pointing downward can take some getting used to, but it is convenient as X and Y are then consistent with the right hand rule and normal navigation heading angles. A heading angle of 0&deg; will point toward the North, and +90&deg; toward the East.</p>\n<p>The origin for a NED coordinate system is usually a point in the world frame (like take-off location).</p>\n<html><img src=\"../images/flightController-concepts/CoordinateSystemNED.png\" width=200></html>\n\n\n<h2 id=\"attitude-and-flight\">Attitude and Flight</h2>\n<p>The orientation of the aircraft and gimbal is known as its <strong>attitude</strong> and defined by the rotation around the pitch, roll and yaw axes in the body coordinate system. </p>\n<p>Combined with <strong>throttle</strong>, rotating the aircraft in pitch, roll and yaw orients the aircraft and moves it in space.</p>\n<h3 id=\"pitch\">Pitch</h3>\n<p><img src=\"../images/flightController-concepts/pitchAxisGif.gif\" alt=\"\"></p>\n<p>The above diagram shows the aircraft from the side. Pitch measures an object&#39;s rotation about the lateral (Y, pitch) axis. Adjusting the pitch will tilt the aircraft forwards or backwards.</p>\n<p>To pitch forward, the back propellors spin faster and have more thrust than the front propellors. The flight controller automatically balances the thrust on each propellor and so the DJI Mobile SDK simply provides APIs to adjust the velocity along the X axis, or the pitch angle and throttle.</p>\n<h3 id=\"roll\">Roll</h3>\n<p><img src=\"../images/flightController-concepts/rollAxisGif.gif\" alt=\"\"></p>\n<p>The above diagram shows the aircraft from the front. Roll measures an object&#39;s rotation about the longitudinal (X, roll) axis. Adjusting the roll will tilt the aircraft left or right.</p>\n<p>To roll left, the right propellors spin faster and have more thrust than the left propellors. The DJI Mobile SDK provides APIs to adjust the velocity along the Y axis, or the roll angle and throttle to achieve movement.</p>\n<h3 id=\"yaw\">Yaw</h3>\n<p><img src=\"../images/flightController-concepts/yawAxisGif.gif\" alt=\"\"></p>\n<p>The above diagram shows the aircraft from above. Yaw measures an object&#39;s rotation about the vertical (Z, yaw) axis. Adjusting the yaw will change the heading of the aircraft.</p>\n<p>Half of the aircraft&#39;s propellors spin clockwise, while the other half anti-clockwise. When all spin with equal speed, the aircraft heading will be constant. If one half spin faster than the other half, the aircraft will rotate around the yaw axis. The flight controller balances the speed of each propellor and so the DJI SDK simply provides APIs to set the heading.</p>\n<h2 id=\"throttle\">Throttle</h2>\n<p><img src=\"../images/flightController-concepts/throttle.gif\" alt=\"\"></p>\n<p>Throttle controls the aircraft&#39;s average thrust from its propulsion system. When the aircraft is level, adjusting the throttle will move the aircraft up or down as all the thrust is in the vertical direction. However, when the aircraft is not level (has non-zero pitch or roll), the thrust will have a horizontal component, and therefore the aircraft will move horizontally. A larger pitch or roll angle will result in more horizontal thrust and therefore faster horizontal movement.</p>\n<h2 id=\"ioc-intelligent-orientation-control-\">IOC (Intelligent Orientation Control)</h2>\n<p>IOC (referred to as Flight Orientation Mode in the Mobile SDK) defines how the aircraft will interpret horizontal flight commands (forward, backward, left and right).</p>\n<p>By default, the aircraft will fly relative to itself, so a left command causes the aircraft to fly to its left. This makes sense if an aircraft is being piloted from the first person view. However, when the aircraft is being piloted remotely from a fixed location it can be confusing or inconvenient.</p>\n<p>When the pilot can&#39;t determine the heading of the aircraft, then it is hard to predict how the aircraft will move relative to the pilot. If the aircraft is facing the pilot, then from the pilot&#39;s perspective, the aircraft will move right when a left command is issued.</p>\n<p>Therefore <strong>Course Lock</strong> and <strong>Home Lock</strong> orientation modes are provided, which make movement relative to the pilot instead of the aircraft. These orientation modes only work when the remote controller flight mode switch is in &quot;P&quot; for the Phantom 4, and &quot;F&quot; for all other aircraft.</p>\n<h3 id=\"course-lock\">Course Lock</h3>\n<p>The <strong>Course Lock</strong> orientation mode makes the aircraft move relative to a fixed heading. If a heading of 0&deg; (North) is chosen, then no matter the yaw of the aircraft, whenever a left command is given, the aircraft will move West.</p>\n<p>The diagram below illustrates an aircraft that is oriented in the opposite direction of the course lock heading, and shows that when a forward or right command is issued, the aircraft will backwards or left respectively relative to itself.</p>\n<p><img src=\"../images/flightController-concepts/ioc_courseLock_en.png\" alt=\"\"></p>\n<h3 id=\"home-lock\">Home Lock</h3>\n<p>The <strong>Home Lock</strong> orientation mode makes the aircraft move radially relative to the home point. Forward and backwards commands will move the aircraft further from and closer to the home point respectively. Left and right commands will move the aircraft in a circle around the home point at the current radius.</p>\n<p><img src=\"../images/flightController-concepts/ioc_homeLock.png\" alt=\"\"></p>","meta":{"title":"Flight Control","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>The goal of the Mobile SDK Documentation is to give any developer with iOS or Android experience the knowledge and understanding required to create world changing applications using DJI&#39;s technology.</p>\n<p>In addition to detailing how to use the Mobile SDK, this documentation describes and compares the products it can automate and the key technologies available.</p>\n<h3 id=\"get-started-immediately\">Get Started Immediately</h3>\n<p>Developers can <a href=\"../quick-start/index.html\">Run the Sample Application</a> to immediately run code and see how the DJI Mobile SDK can be used. </p>\n<p>One of DJI&#39;s aircraft or handheld cameras will be required to run the sample application.</p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>Most of DJI&#39;s aircraft and handheld cameras can be automated using the DJI Mobile SDK. This section introduces and compares these products, and introduces the Mobile SDK and it&#39;s architecture.</p>\n<ul>\n<li><a href=\"./product_introduction.html\">Hardware Products</a></li>\n<li><a href=\"./mobile_sdk_introduction.html\">Mobile SDK Introduction</a></li>\n<li><a href=\"./sdk_architectural_overview.html\">SDK Architectural Overview</a></li>\n</ul>\n<h3 id=\"concepts-to-understand\">Concepts to Understand</h3>\n<p>DJI products use technologies that not all developers are familiar with. Understanding the concepts of these technologies will make development easier, and allow developers to fully utilize the capability of DJI&#39;s aircraft and handheld cameras.</p>\n<ul>\n<li><a href=\"./flightController_concepts.html\">Flight Control</a></li>\n<li><a href=\"./camera_concepts.html\">Camera Exposure</a></li>\n</ul>\n<h3 id=\"guides\">Guides</h3>\n<p>Guides contain detailed information on product and SDK components. Most of the technologies and terminology used within the SDK is covered in these guides.</p>\n<ul>\n<li><a href=\"./component-guide-flightController.html\">Flight Controller</a></li>\n<li><a href=\"./component-guide-camera.html\">Camera</a></li>\n<li><a href=\"./component-guide-gimbal.html\">Gimbal</a></li>\n<li><a href=\"./component-guide-airlink.html\">AirLink</a></li>\n<li><a href=\"./component-guide-remotecontroller.html\">Remote Controller</a></li>\n<li><a href=\"./component-guide-battery.html\">Smart Battery</a></li>\n<li><a href=\"./component-guide-missions.html\">Missions</a></li>\n<li><a href=\"./sdk-guide-sdkmanager.html\">SDK Manager</a></li>\n</ul>\n<h3 id=\"development-workflow\">Development Workflow</h3>\n<p>From registering as a developer, to deploying an application, this section will take developers through the full development process.</p>\n<ul>\n<li><a href=\"../application-development-workflow/workflow-prerequisits.html\">Prerequisites</a></li>\n<li><a href=\"../application-development-workflow/workflow-register.html\">Register as a DJI Developer &amp; Download SDK</a></li>\n<li><a href=\"../application-development-workflow/workflow-integrate.html\">Integrate SDK into Application</a></li>\n<li><a href=\"../application-development-workflow/workflow-run.html\">Run Application</a></li>\n<li><a href=\"../application-development-workflow/workflow-testing.html\">Testing, Profiling &amp; Debugging</a></li>\n<li><a href=\"../application-development-workflow/workflow-deploy.html\">Deploy</a></li>\n</ul>\n<h3 id=\"tutorials\">Tutorials</h3>\n<p>Several iOS and Android tutorials are provided as examples on how to use the SDK for different applications.</p>\n<p><strong>iOS</strong></p>\n<ul>\n<li><a href=\"../ios-tutorials/index.html\">Camera Application</a></li>\n<li><a href=\"../ios-tutorials/PlaybackDemo.html\">Photo and Video Playback Application</a></li>\n<li><a href=\"../ios-tutorials/GSDemo.html\">MapView and Waypoint Application</a></li>\n<li><a href=\"../ios-tutorials/PanoDemo.html\">Panorama Application</a></li>\n<li><a href=\"../ios-tutorials/P4MissionsDemo.html\">TapFly and ActiveTrack Application</a></li>\n<li><a href=\"../ios-tutorials/BridgeAppDemo.html\">Using the Bridge App</a></li>\n<li><a href=\"../ios-tutorials/RemoteLoggerDemo.html\">Using the Remote Logger</a></li>\n</ul>\n<!-- TODO: Need help to review it before publish\n* [Simulator Application](../ios-tutorials/SimulatorDemo.html)\n-->\n\n<p><strong>Android</strong></p>\n<ul>\n<li><a href=\"../android-tutorials/index.html\">Running DJI SDK Sample Code in Android Studio</a></li>\n<li><a href=\"../android-tutorials/FPVDemo.html\">Camera Application</a></li>\n<li><a href=\"../android-tutorials/GSDemo-Gaode-Map.html\">MapView and Waypoint Application (GaodeMap)</a></li>\n<li><a href=\"../android-tutorials/GSDemo-Google-Map.html\">MapView and Waypoint Application (GoogleMap)</a></li>\n<li><a href=\"../android-tutorials/P4MissionsDemo.html\">TapFly and ActiveTrack Application</a></li>\n</ul>\n<h3 id=\"api-reference\">API Reference</h3>\n<p>Full API descriptions are available for iOS and Android.</p>\n<ul>\n<li><a href=\"https://developer.dji.com/iframe/mobile-sdk-doc/ios/index.html\" target=\"_blank\">iOS API Reference</a></li>\n<li><a href=\"https://developer.dji.com/iframe/mobile-sdk-doc/android/reference/packages.html\" target=\"_blank\">Android API Reference</a></li>\n</ul>\n<h3 id=\"faq\">FAQ</h3>\n<p>Frequently asked questions asked by developers can be found <a href=\"../faq/index.html\">here</a>.</p>","meta":{"title":"Documentation Introduction","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>The DJI Mobile SDK is a software development kit designed to give developers access to the capability of DJI&#39;s aircraft and handheld camera products. The SDK simplifies the application development process by taking care of lower level functionality such as flight stabilization, battery management, signal transmission and communication. This way, the developer does not require a background in robotics or embedded systems and can instead focus on the application the DJI product is being integrated into.</p>\n<p>The SDK includes:</p>\n<ul>\n<li>a library/framework that can be imported into an Android or iOS app that give access to the DJI product</li>\n<li>an aircraft simulator and visualization tool</li>\n<li>debugger and remote logger for iOS</li>\n<li>sample code and tutorials</li>\n<li>this developer guide and API documentation</li>\n</ul>\n<p>This introduction will describe how the SDK connects to the products, what functionality the SDK provides, and an introductory architecture of the SDK.</p>\n<h2 id=\"feature-overview\">Feature Overview</h2>\n<p>Many of DJI&#39;s product features and capabilities are accessible to developers through the SDK. Developers can automate flight, control the camera and gimbal, receive real time video and sensor data, download saved media from the product, and monitor state of the other components.</p>\n<h3 id=\"flight-control\">Flight Control</h3>\n<p>The DJI Mobile SDK allows three ways to control aircraft flight:</p>\n<ul>\n<li><strong>Manually</strong>: User pilots aircraft with remote controller while SDK allows monitoring live video and sensor data. </li>\n<li><strong>Virtual Stick Commands</strong>: SDK allows generation of remote controller stick movements virtually, simulating a pilot.</li>\n<li><strong>Missions</strong>: Convenient, easy to implement high level control of the aircraft. For example, defined flight paths can be executed with a Waypoint mission.</li>\n</ul>\n<p>Virtual stick commands and missions allow simple but powerful automated flight control of DJI aircraft. </p>\n<h3 id=\"camera\">Camera</h3>\n<p>Camera and gimbal functionality is highly programmable and allows:</p>\n<ul>\n<li><strong>Camera mode</strong>: Video and still image capture</li>\n<li><strong>Exposure</strong>: Shutter, ISO, aperture and exposure compensation are all available to customize for maximum flexibility</li>\n<li><strong>Image Parameters</strong>: Aspect ratio, contrast, hue, sharpness, saturation and filters</li>\n<li><strong>Video Parameters</strong>: Resolution and frame rate</li>\n<li><strong>Direction</strong>: Using the gimbal, camera direction and motion can be automated</li>\n</ul>\n<h3 id=\"live-video\">Live Video</h3>\n<p>The live video broadcast by the aircraft of the main camera feed is available through the DJI Mobile SDK. Live video is available even when the camera is capturing images or video to it&#39;s storage media.</p>\n<h3 id=\"sensor-data\">Sensor Data</h3>\n<p>Rich sensor data is available through the SDK. GPS position, compass, barometer, flight velocity and altitude are some of the sensor readings available at up to 10 Hz through the Mobile SDK. </p>\n<h3 id=\"download-media\">Download Media</h3>\n<p>Videos saved to the camera&#39;s storage media (SD card or solid state drive) is accessible to view and download through the DJI Mobile SDK. Both previews and full image data can be accessed.</p>\n<h3 id=\"remote-controller-battery-wireless-link\">Remote Controller, Battery, Wireless Link</h3>\n<p>The remote controller, battery and wireless link can all be accessed through the SDK. Mostly these components provide state information, but some control is also possible.</p>\n<h2 id=\"differences-with-other-sdks\">Differences with Other SDKs</h2>\n<p>Most iOS and Android applications will either create, manipulate and/or visualize data. However applications using DJI&#39;s Mobile SDK can be fundamentally different as they can interact with the world around the user.</p>\n<ul>\n<li><strong>Kinetic Energy</strong>: An aircraft can have a mass of several kilograms and move at speeds of up to 20 m/s. While the ability to programmatically change position is tremendously powerful, it also means an application can potentially damage the product it is controlling, or the environment the product is being controlled in.</li>\n<li><strong>Share Space</strong>: DJI&#39;s aircraft move in space shared by other people, structures and aircraft. DJI provides a geofencing system to prevent aircraft from entering critical space, but developers and users must still understand the local and federal rules of the environment the aircraft moves in.</li>\n<li><strong>Highly Asynchronous</strong>:  Wireless connectively can be unpredictable in challenging wireless environments. Sometimes it can take hundreds of milliseconds for a command to be transferred (assuming it ever does). While many developers are familiar with asynchronous programming techniques in networking, when commands aren&#39;t communicated on a robotic system, behavior in the physical world can be unexpected.</li>\n</ul>\n<p>It is not possible as a developer to predict or programmatically assess the environment a user will operate in. An easy maneuver in an open environment, can be difficult in a confined space. Environments can be dynamic and might be sometimes safe, and other times not. Therefore it is important that both developers and users understand the capabilities and limitations of the products and their controlling applications.</p>\n<h2 id=\"connection-to-application-and-product\">Connection to Application and Product</h2>\n<p>The following diagram illustrates how the DJI Mobile SDK fits into a mobile application, and how it is connected to a DJI aircraft. </p>\n <html><img src=\"../images/mobile-sdk-introduction/SDKBlockDiagram.png\"></html>\n\n<p>&gt;</p>\n<blockquote>\n<p>For a handheld camera product, the Remote Controller is replaced with a Handheld Controller and there is no aircraft or additional wireless link.</p>\n</blockquote>\n<p>A mobile application is built with the DJI Mobile SDK, the platform SDK (iOS or Android) and is run on the Mobile Device (Apple iPhone, iPad, Nexus phone, Nexus tablet etc).</p>\n<p>The mobile device connects to a DJI product either wirelessly with WiFi or through a USB cable depending on the product. For aircraft products, the mobile device connects to the remote controller, which connects wirelessly to the aircraft through another wireless link (for the Phantom 3 Standard, two wireless links connect the remote controller and aircraft). Detailed connectivity for each product is shown below.</p>\n<html>\n\n\n<table class=\"table-pictures\">\n  <tr>\n    <td><img src=\"../images/mobile-sdk-introduction/ConnectionUSB.png\"></td>\n    <td><img src=\"../images/mobile-sdk-introduction/ConnectionWiFi.png\"></td>\n        <td><img src=\"../images/mobile-sdk-introduction/ConnectionOsmo.png\"></td>\n  </tr>\n  <tr valign=\"top\">\n    <td><font color=\"#52545A\" align=\"center\"><p>Phantom 4 </br> Phantom 3 Professional </br> Phantom 3 Advanced </br> Inspire 1 </br> Inspire 1 Pro/Raw </br> Matrice 100 </br> Matrice 600 </br> </p></td>\n    <td><font color=\"#52545A\" align=\"center\"><p>Phantom 3 4K </br> Phantom 3 Standard </p></td>\n    <td><font color=\"#52545A\" align=\"center\"><p>Osmo</p></td>\n  </tr>\n\n</table>\n</html>\n\n<p>Therefore, depending on the product, when a command is sent from the DJI Mobile SDK to an aircraft, the command might pass through several wireless links and cable connections. </p>","meta":{"title":"Mobile SDK Introduction","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>DJI produces small, highly capable, remotely controlled aircraft as well as hand held cameras and stabilizers perfect for both consumer and commercial applications. The products are very accessible being easy to use and affordable, and have a quality and feature set unmatched in the industry.</p>\n<h3 id=\"aircraft\">Aircraft</h3>\n<p>DJI has a range of multi-rotor aircraft that can be automated with the Mobile SDK including the <a href=\"http://www.dji.com/products/phantom\" target=\"_blank\">Phantom series</a>, <a href=\"http://www.dji.com/products/inspire\" target=\"_blank\">Inspire series</a>, <a href=\"http://www.dji.com/product/matrice100\" target=\"_blank\">Matrice 100</a> and <a href=\"http://www.dji.com/product/matrice600\" target=\"_blank\">Matrice 600</a>.</p>\n<p>One of the key features of DJI aircraft is the camera&#39;s ability to stay horizontal no matter how the aircraft is flying. The camera is mounted on a gimbal, which actively compensates for any aircraft rotation, producing clear, beautiful images and videos.</p>\n<p>There are many DJI aircraft to choose from that provide a range of features, performance, size and price. Specific metrics developers and users should be aware of when they consider an aircraft include:</p>\n<ul>\n<li>Flight time</li>\n<li>Size and weight</li>\n<li>Camera specifications (image quality and movement control)</li>\n<li>Swappable cameras</li>\n<li>Obstacle avoidance</li>\n<li>Customizable payloads</li>\n<li>Maximum service ceiling</li>\n<li>Available accessories</li>\n<li>Remote controller features</li>\n<li>Price</li>\n</ul>\n<h3 id=\"handheld-camera\">Handheld Camera</h3>\n<p>DJI&#39;s handheld camera <a href=\"http://www.dji.com/product/osmo\" target=\"_blank\"> Osmo </a> allows users to take smooth, professional videos when the user is moving by integrating DJI&#39;s aircraft camera stabilization gimbal technology onto an easy to carry handle.</p>\n<h3 id=\"stand-alone-components\">Stand Alone Components</h3>\n<p>Two components of the aircraft (flight controller, wireless link) can be used on DJI or third party airframes. Some of these components are supported to a limited degree in the DJI Mobile SDK.</p>\n<h3 id=\"accessories\">Accessories</h3>\n<p>DJI aircraft and handheld cameras are compatible with a number of DJI accessories. Some of these accessories are also supported by the DJI Mobile SDK, meaning the mobile device will be able to interact with the accessory to some degree.</p>\n<h2 id=\"components\">Components</h2>\n<p>Before doing a detailed product comparison it is useful to understand the components of a product and their function.</p>\n<p>All products comprise component modules that provide an important feature or function. An introduction to typical components is below with more details in the <a href=\"./component-guide-flightController.html\">Component Guide</a>.</p>\n<p><img src=\"../images/product-introduction/ComponentsAircraft.png\" alt=\"ComponentsAircraft\"></p>\n<h4 id=\"propulsion\">Propulsion</h4>\n<p>Motor mounted propellors provide vertical thrust. The vertical thrust can be adjusted at each motor to allow the aircraft to hover, rotate, ascend, descend or fly horizontally.</p>\n<h4 id=\"sensors\">Sensors</h4>\n<p>DJI aircraft have a large number of sensors including accelerometers, gyroscopes, compasses, barometers, ultrasonic sensors, cameras and satellite positioning systems. These sensors are used to determine the current and predict the future state of the aircraft and the environment around it.</p>\n<h4 id=\"flight-controller\">Flight Controller</h4>\n<p>The Flight Controller is an onboard computer that couples control information from the pilot with sensor information to adjust the thrust at each propellor and fly the aircraft as desired.</p>\n<h4 id=\"camera\">Camera</h4>\n<p>The camera can record image and video data locally or transfer it wirelessly to an Android or iOS mobile device. Wireless transfer includes the option of a live video stream from the camera. Camera exposure and settings are highly customizable allowing capture of the perfect shot.</p>\n<h4 id=\"gimbal\">Gimbal</h4>\n<p>The gimbal holds the camera and can rotate it around three axes. The rotation can be used to both control the direction the camera points, and provide rotational stabilization when the aircraft is not horizontal. The gimbal is mounted on a damped plate, meaning the camera is both stabilized from lateral vibrations and rotational movement.</p>\n<h4 id=\"vision-obstacle-avoidance-positioning\">Vision Obstacle Avoidance &amp; Positioning</h4>\n<p>Advanced sensors help the aircraft perceive the world around it. Stereo cameras are used to detect obstacles near the product. Downward facing cameras and ultrasonic sensors are used to determine relative ground position providing accurate velocity estimates and stable hover position in GPS denied environments (like indoors).</p>\n<h4 id=\"smart-battery\">Smart Battery</h4>\n<p>Smart batteries provide the energy required to run the system. Together with the flight controller, the smart battery can estimate remaining flight time and provide warnings when low battery thresholds are crossed. Batteries are easily swapped between flights, extending product use considerably.</p>\n<h4 id=\"remote-controller\">Remote Controller</h4>\n<p>The remote controller provides control sticks, buttons, and wheels that give control of the aircraft flight, camera and gimbal. The remote controller maintains a wireless link with the aircraft with some products having up to a 5km range in ideal environments. The <strong>Flight Mode Switch</strong> on the remote controller can be used to switch between manual and automated flight.</p>\n<p><img src=\"../images/product-introduction/ComponentsRemoteController.png\" alt=\"ComponentsRemoteController\"></p>\n<h4 id=\"mobile-device\">Mobile Device</h4>\n<p>An Android or iOS device can be connected to the remote controller through either USB or WiFi to give an augmented flight experience showing the live camera feed, and showing aircraft state information. Using the Mobile SDK, the mobile device can also be used to control the aircraft.</p>\n<h4 id=\"handheld-controller\">Handheld Controller</h4>\n<p>The handheld controller provides a joystick and buttons for that give control of the camera and gimbal. The handheld controller connects to the mobile device through a WiFi access point inside the handle.</p>\n<p><img src=\"../images/product-introduction/ComponentsHandheld.png\" alt=\"ComponentsHandheld\"></p>\n<h2 id=\"supported-products\">Supported Products</h2>\n<p>Below is a table listing the aircraft, handheld cameras and stand alone components supported by the DJI Mobile SDK.</p>\n<html><table class=\"table-product-accessories\">\n  <thead>\n    <tr>\n      <th colspan=\"4\">Products and Accessories</th>\n    </tr>\n    <tr>\n      <th>Category</th>\n      <th>Product</th>\n      <th>Cameras</th>\n      <th>SDK Supported Accessories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"9\">Aircraft</th>\n      <td>Phantom 4</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Phantom 3 Professional</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Phantom 3 4K</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Phantom 3 Advanced</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Phantom 3 Standard</td>\n      <td>Fixed</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Inspire 1</td>\n      <td>X3, X5, X5R, XT</td><br>      <td> Focus </td>\n    </tr>\n    <tr>\n      <td>Inspire 1 Pro/Raw</td>\n      <td>X3, X5, X5R, XT</td><br>      <td> Focus </td>\n    </tr>\n    <tr>\n      <td>Matrice 100</td>\n      <td>X3, X5, X5R, XT</td><br>      <td> N1 Video Encoder, Focus </td>\n    </tr>\n    <tr>\n      <td>Matrice 600</td>\n      <td>X3, X5, X5R, XT</td><br>      <td> DRTK, Ronin MX, N1 Video Encoder, Focus </td>\n    </tr>\n    <tr>\n      <td>Handheld Camera</th>\n      <td>Osmo</td>\n      <td>X3, X5, X5R</td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">Components</th>\n      <td>Lightbridge 2 with A2</td>\n      <td> — </td><br>      <td> — </td>\n    </tr>\n    <tr>\n      <td>Lightbridge 2 with A3</td>\n      <td> X3, X5, X5R </td><br>      <td> — </td>\n    </tr>\n  </tbody>\n</table></html>\n\n<p>Detailed specifications are listed on each product&#39;s webpage <strong>specs</strong> section at <a href=\"http://www.dji.com\" target=\"_blank\">www.dji.com</a>.</p>\n<h2 id=\"product-comparison\">Product Comparison</h2>\n<h3 id=\"aircraft-comparison\">Aircraft Comparison</h3>\n<p>Some defining product features that distinguish aircraft series are:</p>\n<h3 id=\"phantom\">Phantom</h3>\n<ul>\n<li>Small and portable</li>\n<li>Easiest to use</li>\n<li>Phantom 4 includes:<ul>\n<li>Built in obstacle avoidance</li>\n<li>Advanced vision features like being able to track a moving target selected by the user.</li>\n<li>A <strong>sport flight mode</strong> for a more dynamic flying experience</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"inspire\">Inspire</h3>\n<ul>\n<li>Swappable cameras</li>\n<li>Cameras with larger sensors, aperture and focus control</li>\n<li>Thermal camera available</li>\n<li>Gimbal can rotate camera completely through the horizontal (640&deg;)</li>\n<li>Landing gear can raise out of the camera&#39;s field of view\n<img src=\"../images/product-introduction/inspire_landingGearRaised.gif\" alt=\"InspireRaised\"></li>\n<li>Remote controller has embedded GPS</li>\n</ul>\n<h3 id=\"matrice\">Matrice</h3>\n<ul>\n<li>Industrial and developer platform</li>\n<li>Highly customizable, with up to 6 kg payloads supported</li>\n<li>Payloads can communicate with the flight controller directly through a serial port and the DJI Onboard SDK</li>\n<li>Mechanical mounting features</li>\n<li>Can use same cameras as Inspire series</li>\n<li><p>Additional accessories including</p>\n<ul>\n<li><a href=\"http://www.dji.com/product/matrice600\" target=\"_blank\"> DRTK </a> - cm precision positioning</li>\n<li><a href=\"http://www.dji.com/product/guidance\" target=\"_blank\"> Guidance </a> - 5 direction stereo camera and ultrasonic sensor module</li>\n<li><a href=\"http://www.dji.com/product/ronin-mx\" target=\"_blank\"> Ronin MX </a> - Gimbal that can support custom payloads up to 4.5 kg</li>\n</ul>\n</li>\n</ul>\n<p>Aircraft comparison can be difficult due to the large selection of products, features and functionality. A summarized product comparison table is below to introduce the differences between products.</p>\n<html><table class=\"table-product-comparison\">\n <thead>\n  <tr>\n    <th colspan=\"10\">Product Comparison</th>\n  </tr>\n </thead>\n <tbody>\n <tr>\n    <td> </th>\n   <td rowspan=\"2\" width=12%> Phantom 4</th>\n     <td colspan=\"4\">Phantom 3</th>\n     <td colspan=\"2\">Inspire 1</th>\n     <td colspan=\"2\">Matrice </th>\n </tr>\n <tr>\n   <td width=10%> </td>\n   <td width=10%> Professional </td>\n   <td width=10%> 4K </td>\n   <td width=10%> Advanced </td>\n   <td width=10%> Standard </td>\n   <td width=10%> Standard </td>\n   <td width=10%>  Pro/RAW </td>\n   <td width=10%> 100 </td>\n   <td width=10%> 600 </td>\n</tr>\n<tr>\n   <td> <p> Propellors </p></td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>4 </td>\n   <td>6 </td>\n</tr>\n<tr>\n   <td> <p> Flight Time </br><font color=\"#BBBBBB\" size=1>s </p></td> </td>\n   <td>28 </td>\n   <td>23 </td>\n   <td>25 </td>\n   <td>23 </td>\n   <td>25 </td>\n   <td>18<em> </td>\n   <td>15</em> </td>\n   <td>16-40<em> </td>\n   <td>18-40</em> </td>\n</tr>\n<tr>\n   <td> <p> Max Speed </br><font color=\"#BBBBBB\" size=1>m/s </p></td> </td>\n   <td>20 </td>\n   <td>16 </td>\n   <td>16 </td>\n   <td>16 </td>\n   <td>16 </td>\n   <td>22 </td>\n   <td>18 </td>\n   <td>22 </td>\n   <td>18 </td>\n</tr>\n<tr>\n   <td> <p> Camera </p></td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>X3, X5, X5R, XT </td>\n   <td>X3, X5, X5R, XT </td>\n   <td>X3, X5, X5R, XT </td>\n   <td>X3, X5, X5R, XT, Custom with Ronin MX </td>\n</tr>\n<tr>\n   <td> <p> Wireless Range </br> US / EU </br><font color=\"#BBBBBB\" size=1>km </p></td> </td>\n   <td>5 / 3.1 </td>\n   <td>5 / 3.1 </td>\n   <td>1.2 / 0.5 </td>\n   <td>5 / 3.1 </td>\n   <td>1 / 0.5 </td>\n   <td>5 / 3.1 </td>\n   <td>5 / 3.1 </td>\n   <td>5 / 3.1 </td>\n   <td>5 / 3.1 </td>\n</tr>\n<tr>\n   <td> <p> Obstacle Avoidance </p> </td>\n   <td>Front </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>With Guidance </td>\n   <td>With Guidance </td>\n</tr>\n<tr>\n   <td> <p> Vision Positioning </p> </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>- </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>With Guidance </td>\n   <td>With Guidance </td>\n</tr>\n<tr>\n   <td> <p> Max Take-off Mass </br><font color=\"#BBBBBB\" size=1>g</p></td> </td>\n   <td>1380 </td>\n   <td>1280 </td>\n   <td>1280 </td>\n   <td>1280 </td>\n   <td>1216 </td>\n   <td>3000 </td>\n   <td>3500 </td>\n   <td>3600 </td>\n   <td>15100 </td>\n</tr>\n<tr>\n   <td> <p> Max Dimension(Without Propellor) </br><font color=\"#BBBBBB\" size=1>mm </p></td> </td>\n   <td>350 </td>\n   <td>350 </td>\n   <td>350 </td>\n   <td>350 </td>\n   <td>350 </td>\n   <td>581 </td>\n   <td>581 </td>\n   <td>650 </td>\n   <td>1133 </td>\n</tr>\n<tr>\n   <td> <p> Max Service Ceiling </br><font color=\"#BBBBBB\" size=1>m </p></td> </td>\n   <td>6000 </td>\n   <td>6000 </td>\n   <td>6000 </td>\n   <td>6000 </td>\n   <td>6000 </td>\n   <td>4500 </td>\n   <td>4500 </td>\n   <td>4500 </td>\n   <td>2500 </td>\n</tr>\n<tr>\n   <td> <p> Landing Gear </p></td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Fixed </td>\n   <td>Moveable </td>\n   <td>Moveable </td>\n   <td>Fixed </td>\n   <td>Moveable </td>\n</tr>\n<tr>\n   <td> <p> Max Batteries </p></td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>1 </td>\n   <td>2 </td>\n   <td>6 </td>\n</tr>\n<tr>\n   <td> <p> Custom Payload </br><font color=\"#BBBBBB\" size=1>g </p></td> </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>1000 </td>\n   <td>6000 </td>\n</tr>\n<tr>\n   <td><p> Compatible Accessories </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>Guidance, Manifold </td>\n   <td>Guidance, Manifold, DRTK, Ronin MX </td>\n</tr>\n</table>\n</html>\n\n<blockquote>\n<p>Note:</p>\n<ol>\n<li>See <strong>Payload</strong> and <strong>Flight Time</strong> table for more information</li>\n<li>Difference between Inspire vs Inspire Pro:<ul>\n<li>Inspire Pro has more powerful propulsion making it able to lift heavier loads</li>\n<li>Inspire Pro comes with a gimbal mounting bracket able to support the X5 and X5R</li>\n<li>Inspire Pro comes with the X5 as default configuration</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"flight-time\">Flight Time</h3>\n<p>Product flight time is determined by total aircraft mass and the available stored (battery) energy on the aircraft. The available energy is determined by the number of batteries, the battery energy density and the maximum mass the propulsion system can support.</p>\n<h4 id=\"battery-energy-density\">Battery Energy Density</h4>\n<p>DJI provides two series of batteries for the Inspire and Matrice product lines. The TB47 series is the default 99 Wh battery that comes with all aircraft. The TB48 series is a 130 Wh battery. While the TB48 battery has a 10-15% higher energy density, it is less practical as batteries &gt;100 Wh often have transport restrictions.</p>\n<p>Using a battery with a higher energy density will always translate to longer flight time if all else is kept constant. However, as the TB48 battery is a little heavier than the TB47 battery, it is important to remember that its use will restrict the maximum custom payload. This is particularly noticeable on the Matrice series of products when using more than one battery.</p>\n<h4 id=\"using-more-batteries\">Using More Batteries</h4>\n<p>Increasing the number of batteries on a product will:</p>\n<ul>\n<li>Increase the available energy for flight (increasing flight time)</li>\n<li>Increase the aircraft mass and therefore:<ul>\n<li>Decrease flight time</li>\n<li>Decrease the allowable additional payload</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"flight-time-comparison\">Flight Time Comparison</h4>\n<p>To help understand the potential functionality and flight time of different aircraft configurations, a detailed summary of payload and flight times is below:</p>\n<html><table class=\"table-flight-time\" id=\"t03\">\n <thead>\n  <tr>\n    <th colspan=\"9\">Payload &amp; Flight Time</th>\n  </tr>\n  <tr>\n    <td width=20%>Product</td>\n    <td width=10%>Camera</td>\n    <td width=10%>Battery Configuration</td>\n    <td width=10%>Aircraft Mass</td>\n    <td width=10%>Battery Mass</td>\n    <td width=10%>Camera Mass</td>\n    <td width=10%>Payload</td>\n    <td width=10%>Take-off Mass</td>\n    <td width=10%>Flight Time</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">grams</p></td>\n    <td><p><font size=1 color=\"#BBBBBB\">min</p></td>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n    <td rowspan=\"3\">\n    Inspire 1\n    <p><font size=\"1\">Max Take-off Mass: 3000g </br>Compatible with XT, X3</p>\n    </td>\n    <td >X3</td>\n    <td>TB47</td><br>    <td>2118</td><br>    <td>570</td><br>    <td>247</td><br>    <td>0</td><br>    <td>2935</td><br>    <td>18</td><br>  </tr>\n  <tr>\n    <td>X3</td><br>    <td>TB48</td><br>    <td>2118</td><br>    <td>670</td><br>    <td>247</td><br>    <td>0</td><br>    <td>3035</td><br>    <td>21</td><br>  </tr>\n  <tr>\n    <td>XT</td>\n    <td>TB48</td><br>    <td>2118</td><br>    <td>670</td><br>    <td>270</td><br>    <td>0</td><br>    <td>3058</td><br>    <td>21</td><br>  </tr>\n  <tr>\n    <td rowspan=\"4\">\n    Inspire 1 Pro/Raw\n    <p><font size=\"1\">Max Take-off Mass: 3500g</br>Compatible with XT, X3, X5, X5R</p>\n    </td>\n    <td>X5</td>\n    <td>TB47</td><br>    <td>2300</td><br>    <td>570</td><br>    <td>526</td><br>    <td>0</td><br>    <td>3396</td><br>    <td>15</td><br>  </tr>\n  <tr>\n    <td>X5</td>\n    <td>TB48</td><br>    <td>2300</td><br>    <td>670</td><br>    <td>526</td><br>    <td>0</td><br>    <td>3496</td><br>    <td>18</td><br>  </tr>\n  <tr>\n    <td>X5R</td>\n    <td>TB48</td><br>    <td>2300</td><br>    <td>670</td><br>    <td>583</td><br>    <td>0</td><br>    <td>3553</td><br>    <td>18</td><br>  </tr>\n  <tr>\n    <td>XT</td>\n    <td>TB48</td><br>    <td>2300</td><br>    <td>670</td><br>    <td>270</td><br>    <td>0</td><br>    <td>3240</td><br>    <td>20</td><br>  </tr>\n  <tr>\n    <td rowspan=\"11\">\n    Matrice 100\n    <p><font size=\"1\">Max Take-off Mass: 3600g</br>Compatible with XT, X3, X5, X5R, Guidance, Manifold</p>\n    </td>\n    <td align= \"center\">-</td>\n    <td>TB47D</td><br>    <td>1755</td><br>    <td>600</td><br>    <td>0</td><br>    <td>0</td><br>    <td>2355</td><br>    <td>22</td><br>  </tr>\n  <tr>\n    <td align= \"center\">-</td>\n    <td>TB47D</td><br>    <td>1755</td><br>    <td>600</td><br>    <td>0</td><br>    <td>500</td><br>    <td>2855</td><br>    <td>17</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>TB47D</td><br>    <td>1755</td><br>    <td>600</td><br>    <td>0</td><br>    <td>1000</td><br>    <td>3355</td><br>    <td>13</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>TB48D</td><br>    <td>1755</td><br>    <td>676</td><br>    <td>0</td><br>    <td>0</td><br>    <td>2431</td><br>    <td>28</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>TB48D</td><br>    <td>1755</td><br>    <td>676</td><br>    <td>0</td><br>    <td>500</td><br>    <td>2931</td><br>    <td>20</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>TB48D</td><br>    <td>1755</td><br>    <td>676</td><br>    <td>0</td><br>    <td>1000</td><br>    <td>3431</td><br>    <td>16</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>2x TB47D</td><br>    <td>1915</td><br>    <td>1200</td><br>    <td>0</td><br>    <td>0</td><br>    <td>3115</td><br>    <td>33</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>2x TB48D</td><br>    <td>1915</td><br>    <td>1352</td><br>    <td>0</td><br>    <td>0</td><br>    <td>3267</td><br>    <td>40</td>\n  </tr>\n    <tr>\n    <td>X3</td>\n    <td>TB47D</td><br>    <td>1755</td><br>    <td>600</td><br>    <td>247</td><br>    <td>0</td><br>    <td>2602</td><br>    <td>19</td>\n  </tr>\n    <tr>\n    <td>X3</td>\n    <td>TB48D</td><br>    <td>1755</td><br>    <td>676</td><br>    <td>247</td><br>    <td>0</td><br>    <td>2678</td><br>    <td>23</td>\n  </tr>\n    <tr>\n    <td>X3</td>\n    <td>2x TB48D</td><br>    <td>1915</td><br>    <td>1352</td><br>    <td>247</td><br>    <td>0</td><br>    <td>3514</td><br>    <td>33</td>\n  </tr>\n  <tr>\n    <td rowspan=\"4\">\n    Matrice 600\n    <p><font size=\"1\">Max Take-off Mass: 15100g</br>Compatible with XT, X3, X5, X5R, Guidance, Ronin MX, DRTK, Manifold</p>\n    </td>\n    <td align= \"center\">-</td>\n    <td>6x TB47S</td><br>    <td>5530</td><br>    <td>3570</td><br>    <td>0</td><br>    <td>0</td><br>    <td>9100</td><br>    <td>35</td><br>  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>6x TB47S</td><br>    <td>5530</td><br>    <td>3570</td><br>    <td>0</td><br>    <td>6000</td><br>    <td>15100</td><br>    <td>16</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>6x TB48S</td><br>    <td>5530</td><br>    <td>4080</td><br>    <td>0</td><br>    <td>0</td><br>    <td>9610</td><br>    <td>40</td>\n  </tr>\n    <tr>\n    <td align= \"center\">-</td>\n    <td>6x TB48S</td><br>    <td>5530</td><br>    <td>4080</td><br>    <td>0</td><br>    <td>5500</td><br>    <td>15110</td><br>    <td>18</td>\n  </tr>\n </tbody>\n</table></html>\n\n<h3 id=\"camera\">Camera</h3>\n<p>DJI provides several camera configurations. For the Phantom line of products, the cameras are fixed to the product. For the Inspire and Matrice line of products, cameras can be interchanged (Zenmuse X3, X5, X5R, XT).</p>\n<p>The Zenmuse XT is a thermal camera. It&#39;s specifications are difficult to compare directly to other cameras, however it is included in the comparison for it&#39;s mass for payload calculation. More details on the specifications of the Zenmuse XT can be found <a href=\"http://www.dji.com/product/zenmuse-xt/info#specs\" target=\"_blank\"> here </a>.</p>\n<html><table class=\"table-camera-comparison\">\n <thead>\n  <tr>\n    <th colspan=\"10\">Camera Comparison</th>\n  </tr>\n </thead>\n <tbody>\n <tr>\n    <td> </th>\n   <td rowspan=\"2\" width=12%> Phantom 4</th>\n     <td colspan=\"4\">Phantom 3</th>\n     <td colspan=\"4\">Zenmuse</th>\n </tr>\n <tr>\n   <td width=12%> </td>\n   <td width=8%> Professional </td>\n   <td width=9%> 4K </td>\n   <td width=8%> Advanced </td>\n   <td width=8%> Standard </td>\n   <td width=8%> X3 </td>\n   <td width=8%>  X5 </td>\n   <td width=8%> X5R </td>\n   <td width=15%> XT </td>\n</tr>\n<tr>\n   <td><p> Sensor Size </p></td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>1/2.3&quot; </td>\n   <td>4/3&quot; </td>\n   <td>4/3&quot; </td>\n   <td>NA </td>\n</tr>\n<tr>\n   <td><p> Image Pixels </p></td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>12 </td>\n   <td>16 </td>\n   <td>16 </td>\n   <td>0.32 <p><font color=\"#BBBBBB\" size=1>Depending on Model </p></td> </td>\n</tr>\n<tr>\n   <td><p> Max Video Resolution </p></td>\n   <td>4K </td>\n   <td>4K </td>\n   <td>4K </td>\n   <td>2.7K </td>\n   <td>2.7K </td>\n   <td>4K </td>\n   <td>4K </td>\n   <td>4K </td>\n   <td>640x512 <p><font color=\"#BBBBBB\" size=1>Depending on Model </p></td> </td>\n</tr>\n<tr>\n   <td><p> ISO </p></td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-1600 </td>\n   <td>100-25600 </td>\n   <td>100-25600 </td>\n   <td>NA </td>\n</tr>\n<tr>\n   <td><p> Swappable Lens </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>- </td>\n</tr>\n<tr>\n   <td> <p> FOV </br><font color=\"#BBBBBB\" size=1>degrees </p></td> </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>94 </td>\n   <td>72 </td>\n   <td>72 </td>\n   <td>13-90 <p><font color=\"#BBBBBB\" size=1>Fixed. Depending on lens </p></td> </td>\n</tr>\n<tr>\n   <td> <p> Focal Length </br><font color=\"#BBBBBB\" size=1>mm relative to 35mm sensor </p></td> </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>20 </td>\n   <td>30 </td>\n   <td>30 </td>\n   <td>NA </td>\n</tr>\n<tr>\n   <td><p> Aperture </p></td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/2.8 </td>\n   <td>f/1.7-f/16 </td>\n   <td>f/1.7-f/16 </td>\n   <td>f1.25-f/1.4 <p><font color=\"#BBBBBB\" size=1>Fixed. Depending on lens </p></td> </td>\n</tr>\n<tr>\n   <td><p> Focus </p></td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>&amp;#8734 </td>\n   <td>Variable </td>\n   <td>Variable </td>\n   <td>NA </td>\n</tr>\n<tr>\n   <td><p> Controllable Gimbal Pan </br><font color=\"#BBBBBB\" size=1>degrees </p></td> </td>\n   <td>+/- 15</td>\n   <td>0 </td>\n   <td>0 </td>\n   <td>0 </td>\n   <td>0 </td>\n   <td>+/- 180 </td>\n   <td>+/- 180 </td>\n   <td>+/- 180 </td>\n   <td>+/- 180 </td>\n</tr>\n<tr>\n   <td><p> Controllable Gimbal Tilt </br><font color=\"#BBBBBB\" size=1>degrees </p></td> </td>\n   <td>-90 ~ 30</td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n   <td>-90 ~ 30 </td>\n</tr>\n<tr>\n   <td><p> Storage Media </p></td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD </td>\n   <td>Micro SD, SSD </td>\n   <td>Micro SD </td>\n</tr>\n<tr>\n   <td><p> Weight </br><font color=\"#BBBBBB\" size=1>g - with Gimbal </p></td> </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>247 </td>\n   <td>526 </td>\n   <td>583 </td>\n   <td>270 </td>\n</tr>\n</table></html>\n\n<h3 id=\"remote-controller\">Remote Controller</h3>\n<p>Remote controllers will differ in:</p>\n<ul>\n<li>How they connect to a mobile device</li>\n<li>What wireless technology they use to connect with the aircraft</li>\n<li>Whether they have GPS built-in</li>\n<li>If they can output secondary video</li>\n<li>If they can be used in a dual configuration (one flys the aircraft while the other controls the gimbal and camera)</li>\n</ul>\n<p>Remote Controllers that use WiFi to connect to the mobile device will act as a WiFi access point and will need to be joined.</p>\n<html><table class=\"table-remote-comparison\">\n <thead>\n  <tr>\n    <th colspan=\"10\">Remote Controller</th>\n  </tr>\n </thead>\n <tbody>\n <tr>\n    <td> </th>\n   <td rowspan=\"2\" width=12%> Phantom 4</th>\n     <td colspan=\"4\">Phantom 3</th>\n     <td colspan=\"2\">Inspire 1</th>\n     <td colspan=\"2\">Matrice </th>\n </tr>\n <tr>\n   <td width=10%> </td>\n   <td width=10%> Professional </td>\n   <td width=10%> 4K </td>\n   <td width=10%> Advanced </td>\n   <td width=10%> Standard </td>\n   <td width=10%> Standard </td>\n   <td width=10%>  Pro/RAW </td>\n   <td width=10%> 100 </td>\n   <td width=10%> 600 </td>\n</tr>\n<tr>\n   <td><p> Connection to Mobile Device </p></td>\n   <td>USB </td>\n   <td>USB </td>\n   <td>WiFi </td>\n   <td>USB </td>\n   <td>WiFi </td>\n   <td>USB </td>\n   <td>USB </td>\n   <td>USB </td>\n   <td>USB </td>\n</tr>\n<tr>\n   <td><p> Wireless Link Technology </p></td>\n   <td>Lightbridge </td>\n   <td>Lightbridge </td>\n   <td>WiFi, Aux </td>\n   <td>Lightbridge </td>\n   <td>WiFi, Aux </td>\n   <td>Lightbridge </td>\n   <td>Lightbridge </td>\n   <td>Lightbridge </td>\n   <td>Lightbridge </td>\n</tr>\n<tr>\n   <td><p> Supports Dual RC </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>YES </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>YES </td>\n</tr>\n<tr>\n   <td><p> Built-In GPS </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>YES </td>\n   <td>Yes </td>\n   <td>Yes </td>\n   <td>YES </td>\n</tr>\n<tr>\n   <td><p> Secondary Video Output </p></td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>- </td>\n   <td>Mini HDMI </td>\n   <td>Mini HDMI </td>\n   <td>Mini HDMI </td>\n   <td>HDMI, SDI </td>\n</tr>\n</table></html>","meta":{"title":"Hardware Introduction","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>The architecture is designed to be highly extensible. Abstract product and component classes are used so applications can control different products with the same code. Features that are not consistent across all generations of supported products can be queried at runtime, and those that are consistent will simply work.</p>\n<p>For example, the large majority of features of the Phantom and Inspire series of products are consistent. Therefore an application written to support the Phantom 4 will, with the exception of unique Inspire 1 features, fully support the Inspire 1. </p>\n<p>This also means when new products are released, they will already work with existing applications (when that application is rebuilt with the latest SDK that supports the new product). Any new features of the new product will need to be added to the application, but all existing features will not need modification.</p>\n<h2 id=\"hierarchy\">Hierarchy</h2>\n<p>A mobile application accesses the DJI Mobile SDK through several main classes illustrated in the diagram below.</p>\n<html><img src=\"../images/sdk-architectural-overview/Architecture.png\"></html>\n\n<ul>\n<li><strong>SDK Manager</strong>: Manages registration of the SDK, product connection and provides access to the product itself.</li>\n<li><strong>Product</strong>: The aircraft or handheld product, this class holds basic product properties and contains the main product components.</li>\n<li><strong>Component</strong>: Component classes describe the gimbal, camera, flight controller, remote controller and wireless link. The classes provide component control, state information and contain subcomponents.</li>\n<li><strong>Mission</strong>: Classes that describe different missions such as Waypoint and ActiveTrack missions and hold their setup properties and status.</li>\n<li><strong>Mission Manager</strong>: Missions are controlled through the mission manager. It provides control of mission preparation, execution, termination, pausing and resumption as well as provides access to the currently executing mission.</li>\n</ul>\n<h2 id=\"aircraft-product\">Aircraft Product</h2>\n<p>A more detailed description of the aircraft product class is below. The aircraft product holds a number of components and the component holds a number of subcomponents, all of which are accessible when the mobile device is connected to the aircraft through the remote controller (if the SDK registration is successful). If the connection between the remote controller and aircraft is lost, the remote controller object will persist (if the mobile device is still connected to the remote controller), while the product and all remaining components physically on the aircraft will become null.</p>\n<html><img src=\"../images/sdk-architectural-overview/SDKAircraftArchitecture.png\"></html>\n\n<h2 id=\"handheld-product\">Handheld Product</h2>\n<p>The handheld camera product is simpler and has less components than an aircraft. The shared components are treated the same as on an aircraft, and so any code that controls the camera will work on both aircraft and handheld products.</p>\n<html><img src=\"../images/sdk-architectural-overview/SDKHandheldArchitecture.png\"></html> \n\n<h2 id=\"missions\">Missions</h2>\n<p>All missions inherit from DJIMission so they can be handled by the Mission Manager.</p>\n<html><img src=\"../images/sdk-architectural-overview/SDKMissionArchitecture.png\"></html>","meta":{"title":"SDK Architectural Overview","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<h2 id=\"base-product\">Base Product</h2>\n<h3 id=\"components\">Components</h3>\n<p>Each DJI Product has various components. In case of aircraft, it can has flight controller, remote controller, camera, gimbal, battery components. For an handheld device, it can also has a handheld controller component too. Each component inherites from the <strong>DJIBaseComponent</strong> class.\nIt uses an array to store different components of DJI Product.</p>\n<h3 id=\"model-names\">Model Names</h3>\n<p>Each DJIBaseProduct has its model Name, it can be &quot;Inspire 1&quot;, &quot;Osmo&quot;, &quot;Phantom 3 Professional&quot;, etc. You can check the name of the current connected DJI Product by accessing the model name. In case of iOS, you can get the model names list in <strong>DJIAircraft.h</strong> and <strong>DJIHandheld.h</strong> files. In case of Android, you can get the model names list in <strong>DJIBaseProduct.Model</strong> enum. </p>\n<h3 id=\"connectivity-status\">Connectivity Status</h3>\n<p>In case of aircraft, if the aircraft is out of range or turned off, the connectivity status will change to NOT connected. </p>\n<p>In case of handheld device, if the handheld device&#39;s Wi-Fi signal is lost or turn off, or the mobile device disconnected with the handheld device&#39;s Wi-Fi, the connectivity status will chagne to NOT connected.</p>\n<h3 id=\"firmware-package-version\">Firmware Package Version</h3>\n<p>Get the product&#39;s firmware package version. For products except Phantom 4, Internet connection is required and the execution time for this method highly depends on the Internet Status.</p>\n<h2 id=\"sdk-errors\">SDK Errors</h2>\n<p>DJI SDK Errors includes SDK Registration errors, camera errors, flight controller errors, mission errors, etc. Developers can get helps from these error infos when using the SDK.</p>\n<h2 id=\"dji-completion-blocks\">DJI Completion Blocks</h2>\n<p>Every SDK function you call requires a completion block as a parameter, which will be carried out after the aircraft executes the given command(s) or finish the related actions. For some special actions (Like take off, retract landing gear), which will take a peroid of time to finish, the completion block will be called once the actions finish.</p>","meta":{"title":"Base Product","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Application registration to use the DJI Mobile SDK, product connection, debugging and logging services are handled through the SDK manager class <code>DJISDKManager</code>.</p>\n<p>The class also provides the instance of the product connected to the mobile device, from which control, state and components can be accessed.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>Applications need permission to initialize the DJI Mobile SDK. During application development, a unique application key (App Key) needs to be <a href=\"../quick-start/index.html#generate-an-app-key\">generated</a> and included in the source code. When the application is first run, this key will be sent to a DJI server to validate the application can use the SDK. If successful, the result will be locally cached on the mobile device. Every subsequent initialization of the application on the mobile device will check the local cache if there is no connection to the internet.</p>\n<p>Therefore, the first time an application is run on a mobile device, the mobile device will need to have an internet connection. After that, an internet connection will not be required to initialize the DJI Mobile SDK, but connectivity will be used when available to confirm the application still has authorization to control DJI products.</p>\n<p>This process is called registration, and is made available through the SDK Manager. </p>\n<blockquote>\n<p><strong>Note</strong>: Some DJI products use WiFi as the connection between the mobile device and the product. The product is the access point and the mobile device is the client, which means no internet connectivity will exist through the WiFi connection for the mobile device. If using such a product, the first time the application is run should either be when the product is not connected to the mobile device, or the mobile device will need to have a cellular data connection. After the first successful registration, connectivity is not a requirement.</p>\n</blockquote>\n<h2 id=\"product-connection\">Product Connection</h2>\n<p>Once registered, the application can be connected to the product. The class method <code>startConnectionToProduct</code> can be used to initiate the connection between application and product assuming the mobile device is already physically connected to the product (through either USB or WiFi). </p>\n<p>The SDK manager can close the connection when desired. For iOS, the SDK manager can automatically close the connection when the application enters the background if desired.</p>\n<p>Once connected, the SDK manager provides an instance to the connected product. The product instance can be used to control and receive state information about the components of the product.</p>\n<h2 id=\"debug-mode-and-bridge-app\">Debug Mode and Bridge App</h2>\n<p>iOS development requires the mobile device be connected to Xcode directly through USB to use native debugging and profiling tools. As some DJI products use the USB port to connect to the remote controller, this can make application development difficult.</p>\n<p>DJI provides a Bridge App to resolve this. Debug mode can be turned on in the SDK Manager which will reroute all USB communication to WiFi. A second mobile device running the bridge app connects to the remote controller and relays WiFi communication. Alternatively, the iOS simulator can connect to the Bridge App over WiFi if only one mobile device is available.</p>\n<p>The Bridge App is available to download <a href=\"https://github.com/dji-sdk/DJI-Bridge-App\" target=\"_blank\">here</a> and a tutorial for using the Bridge App is <a href=\"../ios-tutorials/BridgeAppDemo.html\">here</a>.</p>\n<h2 id=\"remote-logging\">Remote Logging</h2>\n<p>The SDK Manager also allows iOS applications to log remotely. Field testing is critical in application development, and remote logging allows simple ways to log events in real time to a remote server.</p>\n<p>A tutorial for using remote logging can be found <a href=\"../ios-tutorials/RemoteLoggerDemo.html\">here</a>.</p>","meta":{"title":"SDK Manager","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}{"content":"<p>This tutorial is designed for you to gain a better understanding of the DJI Bridge App. It will teach you how to use it for app debugging by implementing the live video view and two basic camera functionalities: &quot;Take Photo&quot; and &quot;Record video&quot;.</p>\n<p>You can download the <a href=\"https://github.com/dji-sdk/DJI-Bridge-App\" target=\"_blank\">DJI Bridge App Source Code</a>, build and install it on your mobile device.</p>\n<p>You can download the sample project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>The design of the DJI Bridge App is simple. It&#39;s a universal app supports both iPhone and iPad. You can use it to debug app for Phantom 3 Professional, Phantom 3 Advanced, Inspire 1, M100 and other products using USB/MFI connection between RC and your app.</p>\n<h3 id=\"workflow\">Workflow</h3>\n<p><img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/workFlow.png\" alt=\"workflow\"></p>\n<p>As you see above, the Bridge App and the iOS Device or Xcode Simulator should work in the same local network using TCP service to communicate. You can connect them to the same WiFi network or connect to a local wireless connection created on your Mac too. </p>\n<h3 id=\"signal-light\">Signal Light</h3>\n<p>At the top of the screen, there are two signal lights, which represent the connection between the bridge app and the remote controller or your application. When the bridge app connect to the remote controller successfully, the <strong>RC light</strong> will turn green. Similarly, when the bridge app connect to your app successfully, the <strong>App Light</strong> will turn green too.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/toolScreenshot.png\" alt=\"signalLight\"></p>\n<h3 id=\"tcp-connection\">TCP Connection</h3>\n<p>The bridge app uses TCP sockets to communicate with your app. It use <strong>Debug Id</strong> to distinguish between different bridge apps running on different mobile devices.</p>\n<p>TCP connection is stable and supports security network, which means your local network has firewall. The debug ID will change in different IP addresses.</p>\n<p>Now try to open the bridge app, and connect your mobile device to the remote controller using usb cable, you should see the RC Light turn green!</p>\n<blockquote>\n<p><strong>Note</strong>: </p>\n<p><strong>1.</strong> If you connect the bridge app to the RC and the RC light is still red, you may need to restart the app and try again. It should works.</p>\n</blockquote>\n<h3 id=\"link-reset\">Link Reset</h3>\n<p>   If the bridge app cannot connect to your app successfully because of switching your mobile device&#39;s wifi network or other unknown situations, you can press the <strong>Link Reset</strong> button at the bottom to force restart the TCP service to refresh the Debug ID.</p>\n<h2 id=\"download-and-import-the-sdk\">Download and Import the SDK</h2>\n<p>You can download the iOS SDK from here: <a href=\"http://developer.dji.com/en/mobile-sdk/downloads/\" target=\"_blank\"> <a href=\"http://developer.dji.com/en/mobile-sdk/downloads/\">http://developer.dji.com/en/mobile-sdk/downloads/</a> </a></p>\n<p>If you are not familiar with importing the SDK to your Xcode project, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a>.</p>\n<h2 id=\"implement-the-live-video-view\">Implement the Live Video View</h2>\n<p> <strong>1</strong>. We use the <strong>FFMPEG</strong> decoding library (found at <a href=\"http://ffmpeg.org\" target=\"_blank\"><a href=\"http://ffmpeg.org\">http://ffmpeg.org</a></a>) to do software video decoding here. For the hardware video decoding, we provide a <strong>DJIH264Decoder</strong> decoding library. You can find them in the <strong>VideoPreviewer</strong> folder, which you can download it from <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/VideoPreviewer\" target=\"_blank\">DJI iOS SDK Github Repository</a>. Download and copy the entire <strong>VideoPreviewer</strong> folder to your Xcode project&#39;s &quot;Frameworks&quot; folder and then add the &quot;VideoPreviewer.xcodeproj&quot; to the &quot;Frameworks&quot; folder in Xcode project navigator, as shown below:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/projectNavigator.png\" alt=\"projectNavigator\"></p>\n<blockquote>\n<p>Note: Please Make sure the <strong>VideoPreviewer</strong> folder and <strong>DJISDK.framework</strong> are in the same <strong>Frameworks</strong> folder like this:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/frameworksFolderStruct.png\" alt=\"frameworksFolderStruct\"></p>\n</blockquote>\n<p> <strong>2</strong>. Next, let&#39;s select the &quot;FPVDemo&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; button to add the &quot;VideoPreviewer.framework&quot; as shown below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/addFrameworks.png\" alt=\"addFrameworks\">\n  <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/addFrameworksResult.png\" alt=\"addFrameworksResult\"></p>\n<p>  <strong>3</strong>. In Main.storyboard, add a new View Controller and call it <strong>DJICameraViewController</strong>. Set <strong>DJICameraViewController</strong> as the root View Controller for the new View Controller you just added in Main.storyboard:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/cameraViewController.png\" alt=\"rootController\"></p>\n<p>Add a UIView inside the View Controller and set it as an IBOutlet called &quot;<strong>fpvPreviewView</strong>&quot;. Then, add two UIButtons and one UISegmentedControl at the bottom of the View Control and set their IBOutlets and IBActions, as shown below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/mainStoryboard.png\" alt=\"Storyboard\"></p>\n<p>  Go to <strong>DJICameraViewController.m</strong> file and import the <strong>DJISDK</strong> and <strong>VideoPreviewer</strong> header files. Then create a <strong>DJICamera</strong> property and implement its delegate protocol as below:</p>\n<pre><code class=\"lang-objc\">#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n@interface DJICameraViewController ()&lt;DJICameraDelegate&gt;\n\n@property (nonatomic, strong) DJICamera* camera;\n@property (weak, nonatomic) IBOutlet UIButton *recordBtn;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *changeWorkModeSegmentControl;\n@property (weak, nonatomic) IBOutlet UIView *fpvPreviewView;\n@property (weak, nonatomic) IBOutlet UILabel *currentRecordTimeLabel;\n\n- (IBAction)captureAction:(id)sender;\n- (IBAction)recordAction:(id)sender;\n- (IBAction)changeWorkModeAction:(id)sender;</code></pre>\n<p><strong>4</strong>. Implement the DJISDKManagerDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n}\n\n#pragma mark DJISDKManagerDelegate Method\n\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    if ([newProduct isKindOfClass:[DJIAircraft class]]) {\n        DJIAircraft* aircraft = (DJIAircraft*)newProduct;\n        self.camera = aircraft.camera;\n        self.camera.delegate = self;\n    }else if ([newProduct isKindOfClass:[DJIHandheld class]]){\n        DJIHandheld* handheld = (DJIHandheld*)newProduct;\n        self.camera = handheld.camera;\n        self.camera.delegate = self;\n    }\n}</code></pre>\n<p> The delegate method above is called when SDK detect a product. Here we create a <strong>DJIAircraft</strong> instance variable and initialize the DJICamera property variable from it. Similiarly, create a <strong>DJIHandheld</strong> instance variable when the <code>newProduct</code> is kind of <strong>DJIHandheld</strong> class. Then initialize the DJICamera property variable from it to support handheld device.</p>\n<p> Moreover, in the viewWillAppear method, set &quot;fpvPreviewView&quot; instance as a View of VideoPreviewer to show the Video Stream and reset it to nil in the viewWillDisappear method:</p>\n<pre><code class=\"lang-objc\">- (void)viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [[VideoPreviewer instance] setView:self.fpvPreviewView];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [[VideoPreviewer instance] setView:nil];   \n}</code></pre>\n<p>  Lastly, implement the DJICameraDelegate method, as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJICameraDelegate\n\n-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size\n{\n    uint8_t* pBuffer = (uint8_t*)malloc(size);\n    memcpy(pBuffer, videoBuffer, size);\n    [[VideoPreviewer instance].dataQueue push:pBuffer length:(int)size];\n}</code></pre>\n<p>  <code>-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size</code> method is used to send the video stream to <strong>VideoPreviewer</strong> to decode.</p>\n<h2 id=\"enter-debug-mode\">Enter Debug Mode</h2>\n<p><strong>1</strong>. Implement the <strong>DJISDKManagerDelegate</strong> protocol method in the DJICameraViewController.m file&#39;s extension part. Then create a new method named <strong>registerApp</strong> and invoke it in the viewDidAppear method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    [self registerApp];    \n}</code></pre>\n<blockquote>\n<p>Note: If you don&#39;t know how to apply as a DJI developer and get the App Key, please refer to <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n</blockquote>\n<p><strong>2</strong>. Next, let&#39;s implement the DJISDKManagerDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n        [DJISDKManager enterDebugModeWithDebugId:@&quot;Please type in Debug ID of the DJI Bridge app here&quot;];\n        [[VideoPreviewer instance] start];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}</code></pre>\n<p>The delegate method above gets called when the app is registered. If the registration is successful, we can call the <code>+(void) enterDebugModeWithDebugId:(NSString*)debugId;</code> class method of <strong>DJISDKManager</strong> to enter debug mode of the SDK by passing the <strong>Debug Id</strong> parameter, which you can get from <strong>the Bridge App</strong>. Then call the start method of the VideoPreviewer class to start video decoding.</p>\n<p><strong>3</strong>. Build and Run the project in Xcode. If everything is OK, you will see a &quot;Register App Successed!&quot; alert once the application loads. </p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/Screenshot.png\" alt=\"Screenshot\"></p>\n<h2 id=\"debug-live-video-view-on-ios-simulator\">Debug Live Video View on iOS Simulator</h2>\n<p>After you finish the steps above, you can now connect the DJI Bridge app to your aircraft to try debugging the Live Video View on your <strong>iOS Simulator</strong>. Here are the guidelines:</p>\n<p> In order to connect to DJI Inspire 1, Phantom 3 Professional, Phantom 3 Advanced or M100:</p>\n<p>  <strong>1</strong>. First, turn on your remote controller and connect it to the mobile device which is running the DJIBridge app.</p>\n<p>  <strong>2</strong>. Trust the device if an alert asking “Do you trust this device” comes up.</p>\n<p>  <strong>3</strong>. Make sure your mobile device connect to the same WiFi network to your Mac.</p>\n<p>  <strong>4</strong>. Then, turn on the power of the aircraft.</p>\n<p>  <strong>5</strong>. Now build and run the project in Xcode, wait for a few seconds, you will be able to view the live video stream from your aircraft&#39;s camera on your iOS simulator now!</p>\n<p>Here are the screenshots of the bridge app and iOS simulator if everthing goes well:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/workMode.png\" alt=\"TCP\"></p>\n<p><img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/simulator.png\" alt=\"simulator\"></p>\n<blockquote>\n<p><strong>Note:</strong> </p>\n<p><strong>1.</strong> If you cannot see the live video, please check the log message in Xcode&#39;s console and try to move your aircraft around the RC. The live video should show up.</p>\n<p><strong>2.</strong> You may notice that the live video has mosaics. It&#39;s due to the delayed transmission and the software decoding quality of iOS Simulator.</p>\n</blockquote>\n<p>Congratulations! By using the bridge app, you can now debug your app with all the Xcode features, like adding <strong>Breakpoints</strong> in your code, using <strong>Instruments</strong> to profile the app, etc. Let&#39;s move forward.</p>\n<h2 id=\"implement-the-capture-and-record-function\">Implement the Capture and Record function</h2>\n<p>Create a BOOL property variable named <strong>isRecording</strong> in the DJICameraViewController.m file&#39;s extension part and implement the DJICameraDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (NSString *)formattingSeconds:(int)seconds\n{\n    NSDate *date = [NSDate dateWithTimeIntervalSince1970:seconds];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    [formatter setDateFormat:@&quot;mm:ss&quot;];\n    [formatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];\n\n    NSString *formattedTimeString = [formatter stringFromDate:date];\n    return formattedTimeString;\n}\n\n-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{\n    self.isRecording = systemState.isRecording;\n\n    [self.currentRecordTimeLabel setHidden:!self.isRecording];\n    [self.currentRecordTimeLabel setText:[self formattingSeconds:systemState.currentVideoRecordingTimeInSeconds]];\n\n    if (self.isRecording) {\n        [self.recordBtn setTitle:@&quot;Stop Record&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.recordBtn setTitle:@&quot;Start Record&quot; forState:UIControlStateNormal];\n    }\n\n    //Update UISegmented Control&#39;s state\n    if (systemState.workMode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.workMode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }\n\n}</code></pre>\n<p>The delegate method above is used to get the camera state from the camera on your aircraft. It will be called frequently, so you can update your user interface or camera settings accordingly here. We update the <strong>currentRecordTimeLabel</strong>&#39;s text with latest recording time. Then, update the recordBtn&#39;s title with the correct state. Lastly, update the changeWorkModeSegmentControl&#39;s selected index with <strong>systemState</strong>&#39;s workMode value.</p>\n<p>Once you finish it, let&#39;s implement the <strong>captureAction</strong>, <strong>recordAction</strong> and <strong>changeWorkModeAction</strong> IBAction methods, and show an alertView when error occurs as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)captureAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    [self.camera startShootPhoto:DJICameraPhotoShootModeSingle withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            [weakSelf showAlertViewWithTitle:@&quot;Take Photo Error&quot; withMessage:error.description];\n        }\n    }];\n\n}\n\n- (IBAction)recordAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n\n    if (self.isRecording) {\n        [self.camera stopRecordVideoWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Stop Record Video Error&quot; withMessage:error.description];\n            }\n        }];\n    }else\n    {\n        [self.camera startRecordVideoWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Start Record Video Error&quot; withMessage:error.description];\n            }\n        }];\n    }\n\n}\n\n- (IBAction)changeWorkModeAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    UISegmentedControl *segmentControl = (UISegmentedControl *)sender;\n    if (segmentControl.selectedSegmentIndex == 0) { //Take photo\n\n        [self.camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Set DJICameraModeShootPhoto Failed&quot; withMessage:error.description];\n            }\n\n        }];\n\n    }else if (segmentControl.selectedSegmentIndex == 1){ //Record video\n\n        [self.camera setCameraMode:DJICameraModeRecordVideo withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Set DJICameraModeRecordVideo Failed&quot; withMessage:error.description];\n            }\n\n        }];\n\n    }\n\n}</code></pre>\n<p>   Now, we can build and run the project. You can try to play with the <strong>Record</strong> and <strong>Switch Camera WorkMode</strong> functions, if everything is going well, you should see the simulator screenshot like this:</p>\n<p>   <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/record_screenshot.png\" alt=\"Screenshot\"></p>\n<h2 id=\"debug-on-actual-ios-device\">Debug on Actual iOS Device</h2>\n<p>   Currently, we are running the app on <strong>iOS Simulator</strong>. Although the iOS Simulator is extremely useful during app development, when you want to ensure the required functionality and performance of an application, such as App Memory Usage, Hardware usage like Accelerometer, Gyroscope, etc, testing on an actual device is still required. For more difference between iOS Simulator and actual iOS device, please refer to <a href=\"http://bluetubeinc.com/blog/2014/11/ios-simulator-vs-device-testing\" target=\"_blank\"> iOS Simulator Vs. Actual Device Testing </a>.</p>\n<p>   The good thing is DJI Bridge app supports actual iOS device debugging. You can find another iOS device, like an iPhone 6, iPad air 2, etc, and connect it to your Mac. Then build and run the project on it. It should work perfectly the same to the iOS Simulator.</p>\n<h2 id=\"debug-on-dji-product-requires-wifi-connection\">Debug on DJI Product requires WiFI Connection</h2>\n<p>   For the Phantom 3 Standard and OSMO, you cannot use DJI Bridge App to debug your application because they use WiFi to connect between your application and the remote controller or the handheld device.</p>\n<p>   Actually you can work without the DJI Bridge App. Let&#39;s add a Macro named &quot;ENABLE_DEBUG_MODE&quot; above the DJICameraViewController.m file&#39;s extension part as shown below:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJICameraViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n#define ENABLE_DEBUG_MODE 0\n\n@interface DJICameraViewController ()&lt;DJICameraDelegate, DJISDKManagerDelegate&gt;</code></pre>\n<p>  Then go to <code>- (void)sdkManagerDidRegisterAppWithError:(NSError *)error</code> method and replace the code with the following:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n\n#if ENABLE_DEBUG_MODE\n        [DJISDKManager enterDebugModeWithDebugId:@&quot;Please type in Debug ID of the DJI Bridge app here&quot;];\n#else\n        [DJISDKManager startConnectionToProduct];\n#endif\n        [[VideoPreviewer instance] start];\n    }\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}</code></pre>\n<p>   As the code shown above, if you don&#39;t want to use debug mode of the SDK with DJI Bridge app, you can call <code>+ (void)startConnectionToProduct;</code> class method of DJISDKManager instead once the app registration is successful.</p>\n<p>   Finally, connect your Mac, which uses iOS Simulator to debug, or your iOS device&#39;s WiFi network to DJI Product. Build and run the application on your Mac, if everthing goes well, you should see the following screenshot for iOS Simulator:</p>\n<p>   <img src=\"../images/tutorials-and-samples/iOS/BridgeAppDemo/osmoScreenshot.png\" alt=\"Screenshot\"></p>\n<blockquote>\n<p><strong>Notes:</strong></p>\n<p><strong>1.</strong> If it&#39;s the first time to run the application, which isn&#39;t registered before, you may need to connect your Mac or iOS device&#39;s WiFi to the internet and build and run the app for registration. Next time, you can connect their WiFi back to the DJI Product to debug without problems.</p>\n<p><strong>2.</strong> You may notice the video is clear without mosaic. Because the iOS device use hardware decoding for live video, which is better than software decoding.</p>\n</blockquote>\n<h3 id=\"summary\">Summary</h3>\n<p>   Congratulations! You&#39;ve learned how to use DJI Bridge App to debug your application using DJI Mobile SDK. Also, for better understanding, the tutorial shows you how to show the live video view from the DJI Product&#39;s camera and control the camera to take photo and record video too. </p>\n<p>   With DJI Bridge App, you can build your application with DJI Mobile SDK more efficiently. Hope you enjoy this tutorial, Thanks!</p>","meta":{"title":"DJI Bridge App Tutorial","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/DJIBridgeAppDemo"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to implement the DJIWaypoint Mission feature and get familiar with the usages of DJIMissionManager. \nAlso you will know how to setup the DJI PC Simulator, upgrade your Inspire 1, Phantom 3 Professional and Phantom 3 Advanced&#39;s firmware to the lastest version, and how to test the Waypoint Mission API with DJI PC Simulator too. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"setup-the-map-view\">Setup The Map View</h2>\n<h3 id=\"1-importing-the-sdk\">1. Importing the SDK</h3>\n<p>Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;GSDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s import the <strong>DJISDK.framework</strong> to it. If you are not familiar with the process of importing DJI SDK, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h3 id=\"2-creating-the-map-view\">2. Creating the Map View</h3>\n<p>Now, let&#39;s delete the <strong>ViewController.h</strong> and <strong>ViewController.m</strong> files, which were created by Xcode when you created the project. Then, create a viewController named &quot;<strong>DJIRootViewController</strong>&quot; and set it as the <strong>Root View Controller</strong> in Main.storyboard. Moreover, drag a <strong>MKMapView</strong> from Object Library to <strong>DJIRootViewController</strong>, setup its AutoLayout constraints, and set its delegate to <strong>DJIRootViewController</strong>, as seen below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/mkMapView.png\" alt=\"mkMapView\"></p>\n<p>After that, import the <strong>MapKit.framework</strong> to the project and open the &quot;DJIRootViewController.m&quot; file, create an IBOutlet for the MKMapView, name it &quot;<strong>mapView</strong>&quot; and link it to the MKMapView in <strong>Main.storyboard</strong>. Import the following header files and implement MKMapView&#39;s delegate method:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIRootViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;MapKit/MapKit.h&gt;\n\n@interface DJIRootViewController() &lt;MKMapViewDelegate&gt;\n\n@property (weak, nonatomic) IBOutlet MKMapView *mapView;\n\n@end</code></pre>\n<p>Now, let&#39;s build and run the project. If everything is as it should be, you should see the following screenshot:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/mapView.png\" alt=\"mapView\"></p>\n<h3 id=\"3-adding-annotations-to-the-mapview\">3. Adding Annotations to the MapView</h3>\n<p>Currently, the map view is simple. Let&#39;s add something interesting to it. Create a new <strong>NSObject</strong> file named <strong>DJIMapController</strong>, which will be used to deal with the MKAnnotations(or for our purposes, Waypoints) logic on the map. Open the DJIMapController.h file and add the following code to it:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n#import &lt;MapKit/MapKit.h&gt;\n\n@interface DJIMapController : NSObject\n\n@property (strong, nonatomic) NSMutableArray *editPoints;\n\n/**\n *  Add Waypoints in Map View\n */\n- (void)addPoint:(CGPoint)point withMapView:(MKMapView *)mapView;\n\n/**\n *  Clean All Waypoints in Map View\n */\n- (void)cleanAllPointsWithMapView:(MKMapView *)mapView;\n\n/**\n *  Current Edit Points\n *\n *  @return Return an NSArray contains multiple CCLocation objects\n */\n- (NSArray *)wayPoints;\n\n@end</code></pre>\n<p>Here, we create an NSMutableArray called <strong>editPoints</strong> to store waypoint objects and add two methods to implement <strong>Add</strong> and <strong>Remove</strong> waypoints. The last method will be used to return the current waypoint objects on the map in an array.</p>\n<p>Let&#39;s go to the DJIMapController.m file and replace the original code with the following:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIMapController.h&quot;\n\n@implementation DJIMapController\n\n- (instancetype)init\n{\n    if (self = [super init]) {\n        self.editPoints = [[NSMutableArray alloc] init];\n    }\n    return self;\n}\n\n- (void)addPoint:(CGPoint)point withMapView:(MKMapView *)mapView\n{\n    CLLocationCoordinate2D coordinate = [mapView convertPoint:point toCoordinateFromView:mapView];\n    CLLocation *location = [[CLLocation alloc] initWithLatitude:coordinate.latitude longitude:coordinate.longitude];\n    [_editPoints addObject:location];\n    MKPointAnnotation* annotation = [[MKPointAnnotation alloc] init];\n    annotation.coordinate = location.coordinate;\n    [mapView addAnnotation:annotation];\n}\n\n- (void)cleanAllPointsWithMapView:(MKMapView *)mapView\n{\n    [_editPoints removeAllObjects];\n    NSArray* annos = [NSArray arrayWithArray:mapView.annotations];\n    for (int i = 0; i &lt; annos.count; i++) {\n        id&lt;MKAnnotation&gt; ann = [annos objectAtIndex:i];\n        [mapView removeAnnotation:ann];\n    }   \n}\n\n- (NSArray *)wayPoints\n{\n    return self.editPoints;\n}\n\n@end</code></pre>\n<p>First, we initialize the <strong>editPoints</strong> array in the init method, then create MKPointAnnotation objects from CGPoint and add them to our <strong>mapView</strong>, and finally implement the <strong>cleanAllPointsWithMapView</strong> method to clean up the <strong>eidtPoints</strong> array and the annotations on the mapView.</p>\n<p>Go back to the DJIRootViewController.m file, import the DJIMapController.h header file, and create a DJIMapController property named <strong>mapController</strong>. Since we want to add annotation pins by tapping on the map, we also need to create a UITapGestureRecognizer named as <strong>tapGesture</strong>. Lastly, add a UIButton to the DJIRootViewController scene in Main.storyboard, set its IBOutlet name as &quot;<strong>editBtn</strong>&quot;, and add an IBAction method named &quot;<strong>editBtnAction</strong>&quot; for it, as shown below:</p>\n<pre><code class=\"lang-objc\">@property (nonatomic, strong) DJIMapController *mapController;\n@property (nonatomic, strong) UITapGestureRecognizer *tapGesture;\n@property (weak, nonatomic) IBOutlet UIButton *editBtn;\n\n- (IBAction)editBtnAction:(id)sender;</code></pre>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/editButton.png\" alt=\"editButton\"></p>\n<p>Once that is complete, open the DJIRootViewController.m file, initialize the <strong>mapController</strong> and <strong>tapGesture</strong> variables, and add the <strong>tapGesture</strong> to mapView to add waypoints. Furthermore, we need a boolean variable named &quot;<strong>isEditingPoints</strong>&quot; to store the edit waypoint state, which will also change the title of <strong>editBtn</strong> accordingly. Lastly, implement tapGesture&#39;s action method <strong>addWayPoints</strong>, as shown below:</p>\n<pre><code class=\"lang-objc\">@interface DJIRootViewController ()&lt;MKMapViewDelegate&gt;\n@property (weak, nonatomic) IBOutlet MKMapView *mapView;\n@property (nonatomic, assign)BOOL isEditingPoints;\n@end\n\n@implementation DJIRootViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.mapController = [[DJIMapController alloc] init];\n    self.tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(addWaypoints:)];\n    [self.mapView addGestureRecognizer:self.tapGesture];\n\n}\n\n#pragma mark Custom Methods\n\n- (void)addWaypoints:(UITapGestureRecognizer *)tapGesture\n{\n    CGPoint point = [tapGesture locationInView:self.mapView];\n\n    if(tapGesture.state == UIGestureRecognizerStateEnded){\n\n        if (self.isEditingPoints) {\n            [self.mapController addPoint:point withMapView:self.mapView];\n        }\n    }\n}\n\n- (IBAction)editBtnAction:(id)sender {\n\n    if (self.isEditingPoints) {\n        [self.mapController cleanAllPointsWithMapView:self.mapView];\n        [self.editBtn setTitle:@&quot;Edit&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.editBtn setTitle:@&quot;Reset&quot; forState:UIControlStateNormal];\n    }\n\n    self.isEditingPoints = !self.isEditingPoints;\n\n}\n\n#pragma mark MKMapViewDelegate Method\n- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id &lt;MKAnnotation&gt;)annotation\n{\n    if ([annotation isKindOfClass:[MKPointAnnotation class]]) {\n        MKPinAnnotationView* pinView = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@&quot;Pin_Annotation&quot;];\n        pinView.pinColor = MKPinAnnotationColorPurple;\n        return pinView;\n\n    }\n\n    return nil;\n}</code></pre>\n<p>In the above code, we also added an NSNotification observer to check the DJI Mobile SDK&#39;s state, to make sure it was sucessfully registered. At the same time, we implement the <strong>addWaypoints</strong> gesture action by calling DJIMapController&#39;s </p>\n<pre><code> - (void)addPoint:(CGPoint)point withMapView:(MKMapView *)mapView</code></pre>\n<p>method to add waypoints to the map. Next, we implement the IBAction method <strong>editBtn</strong>, which will update the button&#39;s title and clean up waypoints based on the value of <strong>isEditingPoints</strong>. Finally, we implement MKMapViewDelegate&#39;s method to change the pin color to purple.</p>\n<p>When you are done with all the steps above, build and run your project and try to add waypoints on the map. If everything is fine, you will see the following animation:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/addWaypoint.gif\" alt=\"addWaypoint\"></p>\n<h3 id=\"4-focusing-the-mkmapview\">4. Focusing the MKMapView</h3>\n<p>You may be wondering why the map&#39;s location is different from your current location and why it is difficult to find your location on the map. Focusing the map to your current location quickly would be helpful for the application. To implement that feature, we need to use <strong>CLLocationManager</strong>.</p>\n<p>Open the DJIRootViewController.m file and import CoreLocation&#39;s header file. Create a CLLocationManager property named &quot;locationManager&quot;. Then create a CLLocationCoordinate2D property named &quot;userLocation&quot; to store the user&#39;s location data. Next, implement CLLocationManager&#39;s <strong>CLLocationManagerDelegate</strong> protocol in the class, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &lt;DJIRootViewController.h&gt;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;MapKit/MapKit.h&gt;\n#import &lt;CoreLocation/CoreLocation.h&gt;\n\n@interface DJIRootViewController()&lt;MKMapViewDelegate, CLLocationManagerDelegate&gt;\n\n@property (nonatomic, weak) IBOutlet MKMapView *mapView;\n@property (nonatomic, assign)BOOL isEditingPoints;\n@property (nonatomic, strong) CLLocationManager* locationManager;\n@property (nonatomic, assign) CLLocationCoordinate2D userLocation;\n@property (nonatomic, strong) UITapGestureRecognizer *tapGesture;\n@property (nonatomic, weak) IBOutlet UIButton *editBtn;\n\n- (IBAction)editBtnAction:(id)sender;\n- (IBAction)focusMapAction:(id)sender;\n\n@end</code></pre>\n<p>In the code above, we also added a UIButton named &quot;Focus Map&quot; in DJIRootViewController&#39;s scene in Main.storyboard and added an IBAction method named as <strong>focusMapAction</strong>. Here is the screenshot of the scene from Main.storyboard:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/focusMap.png\" alt=\"focusMap\"></p>\n<p>Once you are done, go back to DJIRootViewController.m file and add the following code:</p>\n<pre><code class=\"lang-objc\">- (void)viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [self startUpdateLocation];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [self.locationManager stopUpdatingLocation];\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.userLocation = kCLLocationCoordinate2DInvalid;\n\n    self.mapController = [[DJIMapController alloc] init];\n    self.tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(addWaypoints:)];\n    [self.mapView addGestureRecognizer:self.tapGesture];\n\n}\n\n- (BOOL)prefersStatusBarHidden {\n    return NO;\n}\n\n#pragma mark CLLocation Methods\n-(void) startUpdateLocation\n{\n    if ([CLLocationManager locationServicesEnabled]) {\n        if (self.locationManager == nil) {\n            self.locationManager = [[CLLocationManager alloc] init];\n            self.locationManager.delegate = self;\n            self.locationManager.desiredAccuracy = kCLLocationAccuracyBest;\n            self.locationManager.distanceFilter = 0.1;\n            if ([self.locationManager respondsToSelector:@selector(requestAlwaysAuthorization)]) {\n                [self.locationManager requestAlwaysAuthorization];\n            }\n            [self.locationManager startUpdatingLocation];\n        }\n    }else\n    {\n        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Location Service is not available&quot; message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n        [alert show];\n    }\n}\n\n- (IBAction)focusMapAction:(id)sender {\n{\n    if (CLLocationCoordinate2DIsValid(self.userLocation)) {\n        MKCoordinateRegion region = {0};\n        region.center = self.userLocation;\n        region.span.latitudeDelta = 0.001;\n        region.span.longitudeDelta = 0.001;\n\n        [self.mapView setRegion:region animated:YES];\n    }\n}\n\n#pragma mark - CLLocationManagerDelegate\n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations\n{\n    CLLocation* location = [locations lastObject];\n    self.userLocation = location.coordinate;\n}</code></pre>\n<p>First, we initialize <strong>userLocation</strong> data to kCLLocationCoordinate2DInvalid in the viewDidLoad method. Then we add a new method named as &quot;startUpdateLocation&quot; to initialize <strong>locationManger</strong>, set its properties and start updating location. If the Location Service is not available, we add a UIAlertView to display the warning. The <strong>startUpdateLocation</strong> is called in viewWillAppear method and is stopped in the viewWillDisappear method. Moreover, we need to implement CLLocationManagerDelegate method to update <strong>userLocation</strong> property. Finally, we implement the &quot;focusMapAction&quot; method to focus <strong>mapView</strong> to the user&#39;s current location.</p>\n<p>In iOS8, we must call <strong>locationManager</strong>&#39;s <strong>requestAlwaysAuthorization</strong> first, which was done in <strong>startUpdateLocation</strong> method. </p>\n<p>Next, add a NSLocationAlwaysUsageDescription or NSLocationWhenInUseUsageDescription key to your project’s Info.plist containing the message to be displayed to the user when a UIAlert asking whether or not they want to allow the application to use their location. We set the messages empty here:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/infoPlist.png\" alt=\"infoPlist\"></p>\n<p>It&#39;s time to build and run the project to check the focus map feature. When you launch the app for the first time, a pop up alert asking for your permission to access your location will appear. Select <strong>Allow</strong> and press the <strong>Focus Map</strong> button. If the map view animates to your current location like the following animation, congratulations, you have finished the <strong>Focus Map</strong> feature!</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/focusMap.gif\" alt=\"focusMap\"></p>\n<h3 id=\"5-showing-the-aircraft-on-map-view\">5. Showing the Aircraft on Map View</h3>\n<p>Now, we can focus the mapView to our current location, which is a good start! However, let&#39;s do something more interesting. We&#39;re going to simulate the aircraft&#39;s GPS location using the DJI PC Simulator and show it on our map view.</p>\n<p>You can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-PC-Simulator\">Using DJI PC Simulator</a> for its basic usage. If you want to place the aircraft in your current GPS location on Map View, you can set the latitude and longitude values in the <strong>Simulator Config</strong> to yours. We take the simulator&#39;s initial values in the following example.</p>\n<p>Let&#39;s come back to the code. Create a new subclass of <strong>MKAnnotationView</strong> named &quot;DJIAircraftAnnotationView&quot; and a new subclass of NSObject named <strong>DJIAircraftAnnotation</strong>. Below is the code:</p>\n<ul>\n<li>DJIAircraftAnnotationView.h</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &lt;MapKit/MapKit.h&gt;\n\n@interface DJIAircraftAnnotationView : MKAnnotationView\n\n-(void) updateHeading:(float)heading;\n\n@end</code></pre>\n<ul>\n<li>DJIAircraftAnnotationView.m</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &quot;DJIAircraftAnnotationView.h&quot;\n\n@implementation DJIAircraftAnnotationView\n\n- (instancetype)initWithAnnotation:(id &lt;MKAnnotation&gt;)annotation reuseIdentifier:(NSString *)reuseIdentifier\n{\n    self = [super initWithAnnotation:annotation reuseIdentifier:reuseIdentifier];\n    if (self) {\n        self.enabled = NO;\n        self.draggable = NO;\n        self.image = [UIImage imageNamed:@&quot;aircraft.png&quot;];\n    }\n\n    return self;\n}\n\n-(void) updateHeading:(float)heading\n{\n    self.transform = CGAffineTransformIdentity;\n    self.transform = CGAffineTransformMakeRotation(heading);\n}\n\n@end</code></pre>\n<p>In the code above, we create a MKAnnotationView for the aircraft, add a method named <strong>updateHeading</strong> to change the aircraft&#39;s rotation, and set its image to &quot;aircraft.png&quot;(You can get the image from this tutorial&#39;s demo project.) in the init method. Also, we disable the DJIAircraftAnnotationView&#39;s draggable property. Take a look at the code below:</p>\n<ul>\n<li>DJIAircraftAnnotation.h</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &lt;MapKit/MapKit.h&gt;\n#import &quot;DJIAircraftAnnotationView.h&quot;\n\n@interface DJIAircraftAnnotation : NSObject&lt;MKAnnotation&gt;\n\n@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;\n@property(nonatomic, weak) DJIAircraftAnnotationView* annotationView;\n\n-(id) initWithCoordiante:(CLLocationCoordinate2D)coordinate;\n\n-(void)setCoordinate:(CLLocationCoordinate2D)newCoordinate;\n\n-(void) updateHeading:(float)heading;\n\n@end</code></pre>\n<ul>\n<li>DJIAircraftAnnotation.m</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &quot;DJIAircraftAnnotation.h&quot;\n\n@implementation DJIAircraftAnnotation\n\n-(id) initWithCoordiante:(CLLocationCoordinate2D)coordinate\n{\n    self = [super init];\n    if (self) {\n        _coordinate = coordinate;\n    }   \n    return self;\n}\n\n- (void)setCoordinate:(CLLocationCoordinate2D)newCoordinate\n{\n    _coordinate = newCoordinate;\n}\n\n-(void)updateHeading:(float)heading\n{\n    if (self.annotationView) {\n        [self.annotationView updateHeading:heading];\n    }\n}\n@end</code></pre>\n<p>The <strong>DJIAircraftAnnotation</strong> class implements the <strong>MKAnnotation</strong> protocol. It&#39;s used to store and update a CLLocationCoordinate2D property. Also, we can update DJIAircraftAnnotationView&#39;s heading with the <strong>updateHeading</strong> method.</p>\n<p>Once you&#39;re done with that, open the DJIMapController.h file and import the DJIAircraftAnnotation.h file:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIAircraftAnnotation.h&quot;</code></pre>\n<p>Then create a property of an instance of DJIAircraftAnnotation and name it <strong>aircraftAnnotation</strong>. </p>\n<pre><code class=\"lang-objc\">@property (nonatomic, strong) DJIAircraftAnnotation* aircraftAnnotation;</code></pre>\n<p>Furthermore, add two new methods to update the aircraft&#39;s location and it&#39;s heading on the map.</p>\n<pre><code class=\"lang-objc\">/**\n *  Update Aircraft&#39;s location in Map View\n */\n-(void)updateAircraftLocation:(CLLocationCoordinate2D)location withMapView:(MKMapView *)mapView;\n\n/**\n *  Update Aircraft&#39;s heading in Map View\n */\n-(void)updateAircraftHeading:(float)heading;</code></pre>\n<p>Next, let&#39;s come back to the DJIMapController.m file and implement the two methods we just added:</p>\n<pre><code class=\"lang-objc\">-(void)updateAircraftLocation:(CLLocationCoordinate2D)location withMapView:(MKMapView *)mapView\n{\n    if (self.aircraftAnnotation == nil) {\n        self.aircraftAnnotation = [[DJIAircraftAnnotation alloc] initWithCoordiante:location];\n        [mapView addAnnotation:self.aircraftAnnotation];\n    }\n\n    [self.aircraftAnnotation setCoordinate:location];\n}\n\n-(void)updateAircraftHeading:(float)heading\n{\n    if (self.aircraftAnnotation) {\n        [self.aircraftAnnotation updateHeading:heading];\n    }\n}</code></pre>\n<p>Also, since we don&#39;t want the <strong>aircraftAnnotation</strong> removed by the <strong>cleanAllPointsWithMapView</strong> method in the DJIMapController.m file, we need to modify it, as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)cleanAllPointsWithMapView:(MKMapView *)mapView\n{\n    [_editPoints removeAllObjects];\n    NSArray* annos = [NSArray arrayWithArray:mapView.annotations];\n    for (int i = 0; i &lt; annos.count; i++) {\n        id&lt;MKAnnotation&gt; ann = [annos objectAtIndex:i];\n        if (![ann isEqual:self.aircraftAnnotation]) {\n            [mapView removeAnnotation:ann];\n        }\n\n    }   \n}</code></pre>\n<p>We add an if statement to check if the annotation of the map view is equal to the <strong>aircraftAnnotation</strong> property, and if it is not, we remove it. By doing so, we can prevent the Aircraft&#39;s annotation from being removed.</p>\n<p>To provide a better user experience, we need to add a status view on top of the mapView to show the aircraft&#39;s flight mode type, current GPS satellite count, vertical and horizontal flight speed and the flight altitude. Let&#39;s add the UI in Main.storyboard&#39;s RootViewController Scene, as seen below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/statusView.png\" alt=\"statusView\"></p>\n<p>Once that&#39;s done, open DJIRootViewController.m file, create IBOutlets for the above UI elements and import DJISDK&#39;s header file and implement &quot;DJIFlightControllerDelegate&quot; and &quot;DJISDKManagerDelegate&quot; protocols. Also, we need to create a CLLocationCoordinate2D property named <strong>droneLocation</strong> to record the aircraft&#39;s location, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &lt;DJIRootViewController.h&gt;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;MapKit/MapKit.h&gt;\n#import &lt;CoreLocation/CoreLocation.h&gt;\n\n@interface DJIRootViewController()&lt;MKMapViewDelegate, CLLocationManagerDelegate, DJISDKManagerDelegate, DJIFlightControllerDelegate&gt;\n\n@property(nonatomic, strong) IBOutlet UILabel* modeLabel;\n@property(nonatomic, strong) IBOutlet UILabel* gpsLabel;\n@property(nonatomic, strong) IBOutlet UILabel* hsLabel;\n@property(nonatomic, strong) IBOutlet UILabel* vsLabel;\n@property(nonatomic, strong) IBOutlet UILabel* altitudeLabel;\n\n@property(nonatomic, assign) CLLocationCoordinate2D droneLocation;</code></pre>\n<p>Now, let&#39;s initialize the UI elements&#39; values in a new method called <strong>initUI</strong>. Call the initUI method in the viewDidLoad method. Lastly, create a new method named &quot;registerApp&quot; and invoke it in the viewDidLoad method to register the app as shown below:</p>\n<pre><code class=\"lang-objc\">\n-(void) initUI\n{\n    self.modeLabel.text = @&quot;N/A&quot;;\n    self.gpsLabel.text = @&quot;0&quot;;\n    self.vsLabel.text = @&quot;0.0 M/S&quot;;\n    self.hsLabel.text = @&quot;0.0 M/S&quot;;\n    self.altitudeLabel.text = @&quot;0 M&quot;;\n}\n\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self registerApp];\n    [self initUI];\n    [self initData];\n}\n\n-(void)initData\n{\n    self.userLocation = kCLLocationCoordinate2DInvalid;\n    self.droneLocation = kCLLocationCoordinate2DInvalid;\n\n    self.mapController = [[DJIMapController alloc] init];\n    self.tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(addWaypoints:)];\n    [self.mapView addGestureRecognizer:self.tapGesture];\n\n}</code></pre>\n<p>Next, implement the &quot;DJISDKManagerDelegate&quot; method as follows:</p>\n<pre><code class=\"lang-objc\">\n#pragma mark DJISDKManagerDelegate Methods\n\n- (void)sdkManagerDidRegisterAppWithError:(NSError *_Nullable)error\n{\n    if (error){\n        NSString *registerResult = [NSString stringWithFormat:@&quot;Registration Error:%@&quot;, error.description];\n        ShowMessage(@&quot;Registration Result&quot;, registerResult, nil, @&quot;OK&quot;);\n    }\n    else{\n        [DJISDKManager startConnectionToProduct];\n    }\n}\n\n- (void)sdkManagerProductDidChangeFrom:(DJIBaseProduct *_Nullable)oldProduct to:(DJIBaseProduct *_Nullable)newProduct\n{\n    if (newProduct){\n        DJIFlightController* flightController = [DemoUtility fetchFlightController];\n        if (flightController) {\n            flightController.delegate = self;\n        }\n    }\n    else{\n        ShowMessage(@&quot;Product disconnected&quot;, nil, nil, @&quot;OK&quot;);\n    }\n}</code></pre>\n<p>In the code above, we can implement DJISDKManager&#39;s <strong>sdkManagerDidRegisterAppWithError:</strong> delegate method to check the register status and invoke the DJISDKManager&#39;s &quot;startConnectionToProduct&quot; method to connect to the aircraft. Moreover, the <strong>sdkManagerProductDidChangeFrom:to:</strong> delegate method will be invoked when the product connectivity status changes, so we can set DJIFlightController&#39;s delegate as DJIRootViewController here when product is connected.</p>\n<p>You may notice that there is a &quot;DemoUtility&quot; class here, it&#39;s a class which defines methods that will be used frequently in the project. Let&#39;s implement it now. Create a new NSObject class and named it as &quot;DemoUtility&quot;, replace its .h file and .m file with the followings:</p>\n<pre><code class=\"lang-objc\">#ifndef DemoUtility_h\n#define DemoUtility_h\n#define WeakRef(__obj) __weak typeof(self) __obj = self\n#define WeakReturn(__obj) if(__obj ==nil)return;\n#define DEGREE(x) ((x)*180.0/M_PI)\n#define RADIAN(x) ((x)*M_PI/180.0)\n#endif\n\nextern void ShowMessage(NSString *title, NSString *message, id target, NSString *cancleBtnTitle);\n\n@class DJIFlightController;\n@interface DemoUtility : NSObject\n+(DJIFlightController*) fetchFlightController;\n@end</code></pre>\n<pre><code class=\"lang-objc\">#import &quot;DemoUtility.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\ninline void ShowMessage(NSString *title, NSString *message, id target, NSString *cancleBtnTitle)\n{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title message:message delegate:target cancelButtonTitle:cancleBtnTitle otherButtonTitles:nil];\n        [alert show];\n    });\n}\n\n@implementation DemoUtility\n+(DJIFlightController*) fetchFlightController {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).flightController;\n    }\n    return nil;\n}\n@end</code></pre>\n<p>Then in the <strong>viewWillDisappear</strong> method, we need to invoke the &quot;stopUpdatingLocation&quot; method of CLLocationManager to stop update location as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [self.locationManager stopUpdatingLocation];\n}</code></pre>\n<p>Moreover, update the <strong>focusMapAction</strong> method to set <strong>droneLocation</strong> as the center of the map view&#39;s region, as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)focusMapAction:(id)sender {\n\n    if (CLLocationCoordinate2DIsValid(self.droneLocation)) {\n        MKCoordinateRegion region = {0};\n        region.center = self.droneLocation;\n        region.span.latitudeDelta = 0.001;\n        region.span.longitudeDelta = 0.001;\n        [self.mapView setRegion:region animated:YES];\n    }\n\n}</code></pre>\n<p>Next, We need to modify the <strong>MKMapViewDelegate</strong> method to what is shown below. It will check the annotation variable&#39;s class and set its annotationView as a <strong>DJIAircraftAnnotationView</strong> Class type object:</p>\n<pre><code class=\"lang-objc\">- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id &lt;MKAnnotation&gt;)annotation\n{\n    if ([annotation isKindOfClass:[MKPointAnnotation class]]) {\n        MKPinAnnotationView* pinView = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@&quot;Pin_Annotation&quot;];\n        pinView.pinColor = MKPinAnnotationColorPurple;\n        return pinView;\n\n    }else if ([annotation isKindOfClass:[DJIAircraftAnnotation class]])\n    {\n        DJIAircraftAnnotationView* annoView = [[DJIAircraftAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@&quot;Aircraft_Annotation&quot;];\n        ((DJIAircraftAnnotation*)annotation).annotationView = annoView;\n        return annoView;\n    }\n\n    return nil;\n}</code></pre>\n<p>Furthermore, let&#39;s implement the <strong>DJIFlightControllerDelegate</strong> method:</p>\n<pre><code class=\"lang-objc\">#pragma mark DJIFlightControllerDelegate\n\n- (void)flightController:(DJIFlightController *)fc didUpdateSystemState:(DJIFlightControllerCurrentState *)state\n{\n    self.droneLocation = state.aircraftLocation;\n\n    self.modeLabel.text = state.flightModeString;\n    self.gpsLabel.text = [NSString stringWithFormat:@&quot;%d&quot;, state.satelliteCount];\n    self.vsLabel.text = [NSString stringWithFormat:@&quot;%0.1f M/S&quot;,state.velocityZ];\n    self.hsLabel.text = [NSString stringWithFormat:@&quot;%0.1f M/S&quot;,(sqrtf(state.velocityX*state.velocityX + state.velocityY*state.velocityY))];\n    self.altitudeLabel.text = [NSString stringWithFormat:@&quot;%0.1f M&quot;,state.altitude];\n\n    [self.mapController updateAircraftLocation:self.droneLocation withMapView:self.mapView];\n    double radianYaw = RADIAN(state.attitude.yaw);\n    [self.mapController updateAircraftHeading:radianYaw];\n}</code></pre>\n<p>First, it will update the <strong>droneLocation</strong> with the aircraft&#39;s current location. Next, update the text for the status labels from the DJIFlightControllerCurrentState. Furthermore, update the aircraft&#39;s location and heading by calling the related methods from <strong>DJIMapController</strong>.</p>\n<p>Now, let&#39;s test the application! </p>\n<p>Build and run the project to install the app onto your mobile device. After that, please connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable, and then power on the aircraft and the remote controller. Click Display Simulator. You can type in your current location&#39;s latitude and longitude data in the Simulator Config, if you would like. </p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Then, run the app and connect your mobile device to the remote controller using Apple&#39;s lighting cable. You may see the following screenshot:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/enterNaviModeFailed.jpg\" alt=\"enterNaviModeFailed\"></p>\n<p><strong>Important</strong>: To fix this problem, please switch the Remote Controller&#39;s mode selection to the <strong>F</strong> position (which used to be the A position in the previous version) and press <strong>Retry</strong> button. If the mode selection bar is in the F position when the autopilot is powered on, the user must toggle back and forth between <strong>F</strong> and another position and then press the <strong>Retry</strong> button again.</p>\n<p>You are required to be in the <strong>F</strong> position when using the Intelligent Navigation, Hotpoint and Joystick functions in the DJI Mobile SDK.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/switchFlightMode.png\" alt=\"switchFlightMode\"></p>\n<p>Next, let&#39;s go to the DJI PC Simulator on your PC and press the <strong>Start Simulation</strong> button. If you check the application now, a tiny red aircraft will be shown on the map as seen below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/aircraftOnMap1.jpg\" alt=\"aircraftOnMap1\"></p>\n<p>If you cannot find the aircraft, press the &quot;<strong>Focus Map</strong>&quot; button and the map view will zoom in to center the aircraft on the center of the map view region as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/focusAircraft.gif\" alt=\"focusAircraft\"></p>\n<p>Now, if you press the <strong>Stop Simulation</strong> button on the Simulator Config, the aircraft will disappear on the map, since the simulator stops providing GPS data to the aircraft.</p>\n<h2 id=\"refactoring-the-ui\">Refactoring the UI</h2>\n<p>As you seen, the project&#39;s code structure was simple and not robust. In order to develop it further in this tutorial, it will need to be refactored and we will need to add more UI elements. </p>\n<h3 id=\"1-adding-handling-the-new-uibuttons\">1. Adding &amp; Handling the New UIButtons</h3>\n<p>Firstly, we will create a new file named &quot;DJIGSButtonController&quot;, which will be subclass of <strong>UIViewController</strong>. Make sure the check box saying &quot;Also create XIB file&quot; is selected when creating the file. Then open the DJIGSButtonController.xib file and set its size to <strong>Freeform</strong> under the &quot;Size&quot; dropdown in the <strong>Simulated Metrics</strong> section. In the view section, change the width to &quot;100&quot; and height to &quot;288&quot;. Take a look at the changes made below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/freeform.png\" alt=\"freeform\">\n<img src=\"../images/tutorials-and-samples/iOS/GSDemo/changeFrameSize.png\" alt=\"changeSize\"></p>\n<p>Next, drag eight UIButtons to the view and change their names to &quot;Edit&quot;, &quot;Back&quot;, &quot;Clear&quot;, &quot;Focus Map&quot;, &quot;Start&quot;, &quot;Stop&quot;, &quot;Add&quot; and &quot;Config&quot;. &quot;Edit&quot; will sit on top of &quot;Back&quot;, and &quot;Focus Map&quot; will sit on top of &quot;Add&quot;. Make sure to hide the &quot;Back&quot;, &quot;Clear&quot;, &quot;Start&quot;, &quot;Stop&quot;, &quot;Add&quot; and &quot;Config&quot; buttons.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/gsButtonViews.png\" alt=\"gsButtons\"></p>\n<p> Then add IBOutlets and IBActions for each of the eight buttons in the DJIGSButtonViewController.h file. Also, we will add an Enum named <strong>DJIGSViewMode</strong> with the two different modes the application could be in. Next, we add serveral delegate methods to be implemented by the delegate viewcontroller when IBAction methods for the buttons are trigger. Lastly, add the method <strong>switchToMode:inGSButtonVC:</strong> to update the state of the buttons when the <strong>DJIGSViewMode</strong> changed. Take a look at the code below:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\ntypedef NS_ENUM(NSUInteger, DJIGSViewMode) {\n    DJIGSViewMode_ViewMode,\n    DJIGSViewMode_EditMode,\n};\n\n@class DJIGSButtonViewController;\n\n@protocol DJIGSButtonViewControllerDelegate &lt;NSObject&gt;\n\n- (void)stopBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)clearBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)focusMapBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)startBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)addBtn:(UIButton *)button withActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)configBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n- (void)switchToMode:(DJIGSViewMode)mode inGSButtonVC:(DJIGSButtonViewController *)GSBtnVC;\n\n@end\n\n@interface DJIGSButtonViewController : UIViewController\n\n@property (weak, nonatomic) IBOutlet UIButton *backBtn;\n@property (weak, nonatomic) IBOutlet UIButton *stopBtn;\n@property (weak, nonatomic) IBOutlet UIButton *clearBtn;\n@property (weak, nonatomic) IBOutlet UIButton *focusMapBtn;\n@property (weak, nonatomic) IBOutlet UIButton *editBtn;\n@property (weak, nonatomic) IBOutlet UIButton *startBtn;\n@property (weak, nonatomic) IBOutlet UIButton *addBtn;\n@property (weak, nonatomic) IBOutlet UIButton *configBtn;\n\n@property (assign, nonatomic) DJIGSViewMode mode;\n@property (weak, nonatomic) id &lt;DJIGSButtonViewControllerDelegate&gt; delegate;\n\n- (IBAction)backBtnAction:(id)sender;\n- (IBAction)stopBtnAction:(id)sender;\n- (IBAction)clearBtnAction:(id)sender;\n- (IBAction)focusMapBtnAction:(id)sender;\n- (IBAction)editBtnAction:(id)sender;\n- (IBAction)startBtnAction:(id)sender;\n- (IBAction)addBtnAction:(id)sender;\n- (IBAction)configBtnAction:(id)sender;\n\n@end</code></pre>\n<p> Once you&#39;ve taken care of that, open the DJIGSButtonViewController.m file to replace all the code in the file with the following code:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIGSButtonViewController.h&quot;\n\n@implementation DJIGSButtonViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setMode:DJIGSViewMode_ViewMode];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n#pragma mark - Property Method\n- (void)setMode:(DJIGSViewMode)mode\n{\n    _mode = mode;\n    [_editBtn setHidden:(mode == DJIGSViewMode_EditMode)];\n    [_focusMapBtn setHidden:(mode == DJIGSViewMode_EditMode)];\n    [_backBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_clearBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_startBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_stopBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_addBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n    [_configBtn setHidden:(mode == DJIGSViewMode_ViewMode)];\n}\n\n#pragma mark - IBAction Methods\n\n- (IBAction)backBtnAction:(id)sender {\n    [self setMode:DJIGSViewMode_ViewMode];\n    if ([_delegate respondsToSelector:@selector(switchToMode:inGSButtonVC:)]) {\n        [_delegate switchToMode:self.mode inGSButtonVC:self];\n    }\n}\n\n- (IBAction)stopBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(stopBtnActionInGSButtonVC:)]) {\n        [_delegate stopBtnActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)clearBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(clearBtnActionInGSButtonVC:)]) {\n        [_delegate clearBtnActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)focusMapBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(focusMapBtnActionInGSButtonVC:)]) {\n        [_delegate focusMapBtnActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)editBtnAction:(id)sender {\n    [self setMode:DJIGSViewMode_EditMode];\n    if ([_delegate respondsToSelector:@selector(switchToMode:inGSButtonVC:)]) {\n        [_delegate switchToMode:self.mode inGSButtonVC:self];\n    }\n}\n\n- (IBAction)startBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(startBtnActionInGSButtonVC:)]) {\n        [_delegate startBtnActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)addBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(addBtn:withActionInGSButtonVC:)]) {\n        [_delegate addBtn:self.addBtn withActionInGSButtonVC:self];\n    }\n}\n\n- (IBAction)configBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(configBtnActionInGSButtonVC:)]) {\n        [_delegate configBtnActionInGSButtonVC:self];\n    }\n}\n\n@end</code></pre>\n<p> With those changes, the code structure will look cleaner and more robust, which will help in its maintainence later on.</p>\n<p> Now, let&#39;s go to the DJIRootViewController.m file and delete the <strong>editButton</strong> IBOutlet, the <strong>resetPointsAction</strong> method, and the <strong>focusMapAction</strong> method. After making those deletions, create an UIView IBOutlet named &quot;topBarView&quot; and link it to the Main.storyboard&#39;s RootViewController&#39;s view, as seen below:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/GSDemo/topBarView.png\" alt=\"topBarView\"></p>\n<p> Then, import the DJIGSButtonViewController.h header file. Create a property of type &quot;DJIGSButtonViewController&quot; named <strong>gsButtonVC</strong> and implement DJIGSButtonViewController&#39;s <strong>DJIGSButtonViewControllerDelegate</strong> protocol within the class, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIRootViewController.h&quot;\n#import &lt;MapKit/MapKit.h&gt;\n#import &lt;CoreLocation/CoreLocation.h&gt;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &quot;DJIMapController.h&quot;\n#import &quot;DJIGSButtonViewController.h&quot;\n#import &quot;DemoUtility.h&quot;\n\n#define kEnterNaviModeFailedAlertTag 1001\n\n@interface DJIRootViewController ()&lt;DJIGSButtonViewControllerDelegate, MKMapViewDelegate, CLLocationManagerDelegate, DJISDKManagerDelegate, DJIFlightControllerDelegate&gt;\n@property (nonatomic, assign)BOOL isEditingPoints;\n@property (nonatomic, strong)DJIGSButtonViewController *gsButtonVC;</code></pre>\n<p>Furthermore, initialize the <strong>gsButtonVC</strong> property in the initUI method and move the original <strong>focusMapAction</strong> method&#39;s content to a new method named <strong>focusMap</strong>, as shown below:</p>\n<pre><code class=\"lang-objc\">self.gsButtonVC = [[DJIGSButtonViewController alloc] initWithNibName:@&quot;DJIGSButtonViewController&quot; bundle:[NSBundle mainBundle]];\n[self.gsButtonVC.view setFrame:CGRectMake(0, self.topBarView.frame.origin.y + self.topBarView.frame.size.height, self.gsButtonVC.view.frame.size.width, self.gsButtonVC.view.frame.size.height)];\nself.gsButtonVC.delegate = self;\n[self.view addSubview:self.gsButtonVC.view];</code></pre>\n<pre><code class=\"lang-objc\">- (void)focusMap\n{\n    if (CLLocationCoordinate2DIsValid(self.droneLocation)) {\n        MKCoordinateRegion region = {0};\n        region.center = self.droneLocation;\n        region.span.latitudeDelta = 0.001;\n        region.span.longitudeDelta = 0.001;\n\n        [self.mapView setRegion:region animated:YES];\n    }\n}</code></pre>\n<p>Finally, implement <strong>DJIGSButtonViewController</strong>&#39;s delegate methods, as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJIGSButtonViewController Delegate Methods\n- (void)stopBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n}\n\n- (void)clearBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    [self.mapController cleanAllPointsWithMapView:self.mapView];\n}\n\n- (void)focusMapBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    [self focusMap];\n}\n\n- (void)configBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n\n}\n\n- (void)startBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n}\n\n- (void)switchToMode:(DJIGSViewMode)mode inGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    if (mode == DJIGSViewMode_EditMode) {\n        [self focusMap];\n    }\n}\n\n- (void)addBtn:(UIButton *)button withActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    if (self.isEditingPoints) {\n        self.isEditingPoints = NO;\n        [button setTitle:@&quot;Add&quot; forState:UIControlStateNormal];\n    }else\n    {\n        self.isEditingPoints = YES;\n        [button setTitle:@&quot;Finished&quot; forState:UIControlStateNormal];\n    }\n}</code></pre>\n<p>In the <strong>switchToMode:inGSButtonVC:</strong> delegate method, we call the <strong>focusMap</strong> method. By doing this, we can focus the map view to the aircraft&#39;s location when the edit button is pressed, making it user friendly by preventing the user from having to zoom in to edit. Moreover, the  <strong>isEditingPoints</strong> property value and the add button title will be updated in the <strong>addBtn:withActionInGSButtonVC</strong> method when the button is pressed. </p>\n<p>Now, let&#39;s build and run the project and try to press the <strong>Edit</strong> and <strong>Back</strong> Buttons. Here are the animation when you press them:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/pressEditBtn.gif\" alt=\"pressEditBtn\"></p>\n<h2 id=\"configuring-djiwaypoint-and-djiwaypointmission\">Configuring DJIWaypoint and DJIWaypointMission</h2>\n<h3 id=\"djiwaypoint\">DJIWaypoint</h3>\n<p>Let&#39;s go to <strong>DJIWaypoint.h</strong> file and check it out. For example, you can use: </p>\n<pre><code class=\"lang-objc\">-(id) initWithCoordinate:(CLLocationCoordinate2D)coordinate;</code></pre>\n<p>to create a waypoint object with a specific coordinate. Once you create a waypoint, you can add a <strong>DJIWaypointAction</strong> to it by calling:</p>\n<pre><code class=\"lang-objc\">-(BOOL) addAction:(DJIWaypointAction*)action;</code></pre>\n<p>Moreover, with waypoints, you have the ability to set the coordinate, altitude, heading and much more. For more details, please check the <strong>DJIWaypoint.h</strong> header file.</p>\n<h3 id=\"djiwaypointmission\">DJIWaypointMission</h3>\n<p>A DJIWaypointMission is used when you want to upload, start and stop a Waypoint Mission. You can add waypoints of type <strong>DJIWaypoint</strong> using the method:</p>\n<pre><code class=\"lang-objc\">- (void)addWaypoint:(DJIWaypoint *_Nonnull)waypoint;</code></pre>\n<p>On the contrary, you can also delete waypoints from a task by using the method: </p>\n<pre><code class=\"lang-objc\">- (void)removeWaypoint:(DJIWaypoint *_Nonnull)waypoint;</code></pre>\n<p> Moreover, you can set the &quot;finishedAction&quot; property which is of <strong>DJIWaypointMissionFinishedAction</strong> enum type to configure what the aircraft does when the task is finished. Finally, you can set the <strong>headingMode</strong> property which is a <strong>DJIWaypointMissionHeadingMode</strong> enum type to configure what the aircraft&#39;s heading is while executing a task. </p>\n<p>For more details, please check the <strong>DJIWaypointMission.h</strong> header file in the DJI Mobile SDK.</p>\n<h3 id=\"creating-the-djiwaypointconfigviewcontroller\">Creating The DJIWaypointConfigViewController</h3>\n<p>For this demo, we will assume that the parameters of each waypoint being added to the map view are the same. </p>\n<p>Now, let&#39;s create a new ViewController that will let the user to set the parameters of waypoints. Go to Xcode’s project navigator, right click on the <strong>GSDemo</strong> folder, select <strong>New File...</strong>, set its subclass to UIViewController, named it &quot;DJIWaypointConfigViewController&quot;, and make sure &quot;Also create XIB file&quot; is selected. Next, open the DJIWaypointConfigViewController.xib file and implement the UI, as you see it below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/wayPointConfigureView.png\" alt=\"wayPointConfig\"></p>\n<p>In the Waypoint Configuration ViewController, we use a UITextField to let the user set the <strong>altitude</strong> property of a DJIWaypoint object. Then, we use two UITextField to let the user set the <strong>maxFlightSpeed</strong> and <strong>autoFlightSpeed</strong> properties of DJIWaypointMission. Next, there are two UISegmentedControls to configure the <strong>finishedAction</strong> property and the <strong>headingMode</strong> property of a DJIWaypointMission object. </p>\n<p>At the bottom, we add two UIButtons for the <strong>Cancel</strong> and <strong>Finish</strong> actions. For more details about the settings, such as frame&#39;s position, frame&#39;s size, and background color of each UI element, please check the DJIWaypointConfigViewController.xib file in the downloaded project source code.</p>\n<p>Now, let&#39;s create IBOutlets and IBActions for each of the UI elements in the DJIWaypointConfigViewController.h file, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@class DJIWaypointConfigViewController;\n\n@protocol DJIWaypointConfigViewControllerDelegate &lt;NSObject&gt;\n\n- (void)cancelBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC;\n- (void)finishBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC;\n\n@end\n\n@interface DJIWaypointConfigViewController : UIViewController\n\n@property (weak, nonatomic) IBOutlet UITextField *altitudeTextField;\n@property (weak, nonatomic) IBOutlet UITextField *autoFlightSpeedTextField;\n@property (weak, nonatomic) IBOutlet UITextField *maxFlightSpeedTextField;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *actionSegmentedControl;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *headingSegmentedControl;\n\n@property (weak, nonatomic) id &lt;DJIWaypointConfigViewControllerDelegate&gt;delegate;\n\n- (IBAction)cancelBtnAction:(id)sender;\n- (IBAction)finishBtnAction:(id)sender;\n\n@end</code></pre>\n<p>Here, we also create two &quot;DJIWaypointConfigViewControllerDelegate&quot; delegate methods that are called when <strong>Cancel</strong> and <strong>Finish</strong> buttons are pressed.</p>\n<p>Next, let&#39;s replace the code in the DJIWaypointConfigViewController.m file with the following code:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIWaypointConfigViewController.h&quot;\n@interface DJIWaypointConfigViewController ()\n@end\n\n@implementation DJIWaypointConfigViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self initUI];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n- (void)initUI\n{\n    self.altitudeTextField.text = @&quot;100&quot;; //Set the altitude to 100\n    self.autoFlightSpeedTextField.text = @&quot;8&quot;; //Set the autoFlightSpeed to 8\n    self.maxFlightSpeedTextField.text = @&quot;10&quot;; //Set the maxFlightSpeed to 10\n    [self.actionSegmentedControl setSelectedSegmentIndex:1]; //Set the finishAction to DJIWaypointMissionFinishedGoHome\n    [self.headingSegmentedControl setSelectedSegmentIndex:0]; //Set the headingMode to DJIWaypointMissionHeadingAuto\n\n}\n\n- (IBAction)cancelBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(cancelBtnActionInDJIWaypointConfigViewController:)]) {\n        [_delegate cancelBtnActionInDJIWaypointConfigViewController:self];\n    }\n}\n\n- (IBAction)finishBtnAction:(id)sender {\n    if ([_delegate respondsToSelector:@selector(finishBtnActionInDJIWaypointConfigViewController:)]) {\n        [_delegate finishBtnActionInDJIWaypointConfigViewController:self];\n    }\n}\n\n@end</code></pre>\n<p>In the code above, we create an <strong>initUI</strong> method, which is called in the viewDidload method, to initialize the UI controls with some default data. For example, we set the default text for the <strong>altitudeTextField</strong> to <strong>100</strong>, so there is no need for the user to type in a custom altitude value in the textField when the application is first opened. They will be able to press the <strong>Finish</strong> button right away instead of having to change the settings before they start.</p>\n<h2 id=\"implementing-the-djiwaypoint-mission\">Implementing the DJIWaypoint Mission</h2>\n<h3 id=\"adding-the-djiwaypointconfigviewcontroller-to-djirootviewcontroller\">Adding the DJIWaypointConfigViewController to DJIRootViewController</h3>\n<p>Now,let&#39;s go to DJIRootViewController.m file, add the DJIWaypointConfigViewController.h header file at the top, and create a property of type <strong>DJIWaypointConfigViewController</strong> with the name &quot;waypointConfigVC&quot;. Then, implement the DJIWaypointConfigViewControllerDelegate protocol, as shown below:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIWaypointConfigViewController.h&quot;\n\n@interface DJIRootViewController ()&lt;DJIGSButtonViewControllerDelegate, DJIWaypointConfigViewControllerDelegate, MKMapViewDelegate, CLLocationManagerDelegate, DJISDKManagerDelegate, DJIFlightControllerDelegate&gt;\n\n@property (nonatomic, assign)BOOL isEditingPoints;\n@property (nonatomic, strong)DJIGSButtonViewController *gsButtonVC;\n@property (nonatomic, strong)DJIWaypointConfigViewController *waypointConfigVC;</code></pre>\n<p>Next, let&#39;s add some code to initialize the <strong>waypointConfigVC</strong> instance variable and set its delegate as &quot;DJIRootViewController&quot; at the bottom of the <strong>initUI</strong> method:</p>\n<pre><code class=\"lang-objc\">-(void) initUI\n{\n    self.modeLabel.text = @&quot;N/A&quot;;\n    self.gpsLabel.text = @&quot;0&quot;;\n    self.vsLabel.text = @&quot;0.0 M/S&quot;;\n    self.hsLabel.text = @&quot;0.0 M/S&quot;;\n    self.altitudeLabel.text = @&quot;0 M&quot;;\n\n    self.gsButtonVC = [[DJIGSButtonViewController alloc] initWithNibName:@&quot;DJIGSButtonViewController&quot; bundle:[NSBundle mainBundle]];\n    [self.gsButtonVC.view setFrame:CGRectMake(0, self.topBarView.frame.origin.y + self.topBarView.frame.size.height, self.gsButtonVC.view.frame.size.width, self.gsButtonVC.view.frame.size.height)];\n    self.gsButtonVC.delegate = self;\n    [self.view addSubview:self.gsButtonVC.view];\n\n    self.waypointConfigVC = [[DJIWaypointConfigViewController alloc] initWithNibName:@&quot;DJIWaypointConfigViewController&quot; bundle:[NSBundle mainBundle]];\n    self.waypointConfigVC.view.alpha = 0;\n\n    self.waypointConfigVC.view.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin|UIViewAutoresizingFlexibleRightMargin|UIViewAutoresizingFlexibleTopMargin|UIViewAutoresizingFlexibleBottomMargin;\n\n    CGFloat configVCOriginX = (CGRectGetWidth(self.view.frame) - CGRectGetWidth(self.waypointConfigVC.view.frame))/2;\n    CGFloat configVCOriginY = CGRectGetHeight(self.topBarView.frame) + CGRectGetMinY(self.topBarView.frame) + 8;\n\n    [self.waypointConfigVC.view setFrame:CGRectMake(configVCOriginX, configVCOriginY, CGRectGetWidth(self.waypointConfigVC.view.frame), CGRectGetHeight(self.waypointConfigVC.view.frame))];\n\n    if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) //Check if it&#39;s using iPad and center the config view\n    {\n        self.waypointConfigVC.view.center = self.view.center;\n    }\n\n    self.waypointConfigVC.delegate = self;\n    [self.view addSubview:self.waypointConfigVC.view];\n\n}</code></pre>\n<p>In the code above, we set the <strong>alpha</strong> property of the <strong>waypointConfigVC</strong>&#39;s view to 0 to initially hide the view. Then, center its location to the center of DJIRootViewController&#39;s view when it runs on iPad.</p>\n<p>Furthermore, implement the <strong>DJIWaypointConfigViewControllerDelegate</strong> methods, as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJIWaypointConfigViewControllerDelegate Methods\n\n- (void)cancelBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC\n{\n    WeakRef(weakSelf);\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 0;\n    }];\n}\n\n- (void)finishBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC\n{\n    WeakRef(weakSelf);\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 0;\n    }];\n\n}</code></pre>\n<p>In the first delegate method, we use a class method from UIView to animate the changing <strong>alpha</strong> value of <strong>waypointConfigVC</strong>&#39;s view:</p>\n<pre><code class=\"lang-objc\">+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void (^)(void))animations NS_AVAILABLE_IOS(4_0);</code></pre>\n<p>In the second delegate method, we do the same thing as we did in the first delegate method.</p>\n<p>Lastly, replace the code in the <strong>configBtnActionInGSButtonVC:</strong> method with the following code to show the <strong>waypointConfigVC</strong>&#39;s view when the user presses the <strong>Config</strong> button:</p>\n<pre><code class=\"lang-objc\">- (void)configBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    WeakRef(weakSelf);\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 1.0;\n    }];\n\n}</code></pre>\n<p>Once that&#39;s done, let&#39;s build and run the project. Try to show the <strong>waypointConfigVC</strong>&#39;s view by pressing the <strong>Edit</strong> button and <strong>Config</strong> button:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/waypointConfigView.png\" alt=\"waypointConfigView\"></p>\n<h3 id=\"handling-the-djiwaypoint-mission\">Handling The DJIWaypoint Mission</h3>\n<p>Now let&#39;s go back to DJIRootViewController.m file. Create a property of type <strong>DJIWaypointMission</strong> and named it as &quot;waypointMission&quot;, similiarly, create a <strong>DJIMissionManager</strong> property and named it as &quot;missionManager&quot; as shown below:</p>\n<pre><code class=\"lang-objc\">@property(nonatomic, strong) DJIWaypointMission* waypointMission;\n@property(nonatomic, strong) DJIMissionManager* missionManager;</code></pre>\n<p>Next, replace the code in <strong>configBtnActionInGSButtonVC</strong> delegate method with the followings:</p>\n<pre><code class=\"lang-objc\">- (void)configBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    WeakRef(weakSelf);\n\n    NSArray* wayPoints = self.mapController.wayPoints;\n    if (wayPoints == nil || wayPoints.count &lt; DJIWaypointMissionMinimumWaypointCount) {\n        ShowMessage(@&quot;No or not enough waypoints for mission&quot;, @&quot;&quot;, nil, @&quot;OK&quot;);\n        return;\n    }\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 1.0;\n    }];\n\n    if (self.waypointMission){\n        [self.waypointMission removeAllWaypoints];\n    }\n    else{\n        self.waypointMission = [[DJIWaypointMission alloc] init];\n    }\n\n    for (int i = 0; i &lt; wayPoints.count; i++) {\n        CLLocation* location = [wayPoints objectAtIndex:i];\n        if (CLLocationCoordinate2DIsValid(location.coordinate)) {\n            DJIWaypoint* waypoint = [[DJIWaypoint alloc] initWithCoordinate:location.coordinate];\n            [self.waypointMission addWaypoint:waypoint];\n        }\n    }\n}</code></pre>\n<p>In the code above, we create a local NSArray variable named <strong>wayPoints</strong> and assign its value as the mapController&#39;s <strong>wayPoints</strong> array. Next, check whether or not the array exists or whether or not it&#39;s empty. If it is empty or does not exist, show a UIAlertView letting the user know there are no waypoints for the mission. </p>\n<p><strong>Important</strong>: For safety, it&#39;s important to add logic to check the GPS satellite count, before the start of the mission. If the satellite count is less than 6, you should prevent the user from starting the waypoint mission and show a warning. Since we are using the DJI PC Simulator here, we are testing the application under a perfect situation, where the GPS satellite count is always 10.</p>\n<p>Next, we use a for loop to get the <strong>CLLocation</strong> for each waypoint from the <strong>wayPoints</strong> array and check if its <strong>coordinate</strong> is valid by using the method:</p>\n<pre><code class=\"lang-objc\">BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord);</code></pre>\n<p>Finally, if the coordinate is valid, we create a waypoint of type <strong>DJIWaypoint</strong> and add it to the <strong>waypointMission</strong>.</p>\n<p>Once that is complete, let&#39;s go to DJIWaypointConfigViewController&#39;s delegate method <strong>finishBtnActionInDJIWaypointConfigViewController</strong> and replace the code inside with the followings:</p>\n<pre><code class=\"lang-objc\">- (void)finishBtnActionInDJIWaypointConfigViewController:(DJIWaypointConfigViewController *)waypointConfigVC\n{\n    WeakRef(weakSelf);\n\n    [UIView animateWithDuration:0.25 animations:^{\n        WeakReturn(weakSelf);\n        weakSelf.waypointConfigVC.view.alpha = 0;\n    }];\n\n    for (int i = 0; i &lt; self.waypointMission.waypointCount; i++) {\n        DJIWaypoint* waypoint = [self.waypointMission getWaypointAtIndex:i];\n        waypoint.altitude = [self.waypointConfigVC.altitudeTextField.text floatValue];\n    }\n\n    self.waypointMission.maxFlightSpeed = [self.waypointConfigVC.maxFlightSpeedTextField.text floatValue];\n    self.waypointMission.autoFlightSpeed = [self.waypointConfigVC.autoFlightSpeedTextField.text floatValue];\n    self.waypointMission.headingMode = (DJIWaypointMissionHeadingMode)self.waypointConfigVC.headingSegmentedControl.selectedSegmentIndex;\n    self.waypointMission.finishedAction = (DJIWaypointMissionFinishedAction)self.waypointConfigVC.actionSegmentedControl.selectedSegmentIndex;\n\n    [self.missionManager prepareMission:self.waypointMission withProgress:^(float progress) {\n        //Do something with progress\n    } withCompletion:^(NSError * _Nullable error) {\n        if (error){\n            NSString* prepareError = [NSString stringWithFormat:@&quot;Prepare Mission failed:%@&quot;, error.description];\n            ShowMessage(@&quot;&quot;, prepareError, nil, @&quot;OK&quot;);\n        }else {\n            ShowMessage(@&quot;&quot;, @&quot;Prepare Mission Finished&quot;, nil, @&quot;OK&quot;);\n        }\n    }];\n}</code></pre>\n<p>Above, we use a for loop to set the <strong>altitude</strong> property of each DJIWaypoint in the <strong>waypointMission</strong> waypoint array based on the settings that are set in the DJIWaypointConfigViewController. After that is complete, we update the &quot;maxFlightSpeed&quot;, &quot;autoFlightSpeed&quot;, &quot;headingMode&quot; and &quot;finishedAction&quot; properties of <strong>waypointMission</strong>. Then we call the <strong>prepareMission</strong> method of DJIMissionManager to prepare the waypoint mission for execution. You can get the preparation progress from the &quot;DJIMissionProgressHandler&quot; block.</p>\n<p>Furthermore, let&#39;s implement <strong>startBtnActionInGSButtonVC</strong> as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)startBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    [self.missionManager startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        if (error){\n            ShowMessage(@&quot;Start Mission Failed&quot;, error.description, nil, @&quot;OK&quot;);\n        }else\n        {\n            ShowMessage(@&quot;&quot;, @&quot;Mission Started&quot;, nil, @&quot;OK&quot;);\n        }\n    }];\n}</code></pre>\n<p>Here, call the <strong>startMissionExecutionWithCompletion</strong> method of DJIMissionManager to start the DJIWaypoint mission! Then create a UIAlertView to display error message when start mission failed.</p>\n<p>Finally, let&#39;s implement the <strong>stopMissionExecutionWithCompletion</strong> method of DJIMissionManager in the <strong>DJIGSButtonViewController</strong> delegate method to stop the waypoint mission, as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)stopBtnActionInGSButtonVC:(DJIGSButtonViewController *)GSBtnVC\n{\n    [self.missionManager stopMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        if (error){\n            NSString* failedMessage = [NSString stringWithFormat:@&quot;Stop Mission Failed: %@&quot;, error.description];\n            ShowMessage(@&quot;&quot;, failedMessage, nil, @&quot;OK&quot;);\n        }else\n        {\n            ShowMessage(@&quot;&quot;, @&quot;Stop Mission Finished&quot;, nil, @&quot;OK&quot;);\n        }\n    }];\n}</code></pre>\n<h2 id=\"showtime\">Showtime</h2>\n<p>You&#39;ve come a long way in this tutorial, and it&#39;s time to test the whole application.</p>\n<p><strong>Important</strong>: Make sure the battery level of your aircraft is more than 10%, otherwise the waypoint mission may fail!</p>\n<p>Build and run the project to install the application into your mobile device. After that, please connect the aircraft to your PC or Virtual Machine running Windows via a Micro USB cable. Then, power on the remote controller and the aircraft, in that order. </p>\n<p>Next, press the <strong>Display Simulator</strong> button in the DJI PC Simulator and feel free to type in your current location&#39;s latitude and longitude data into the simulator.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/simulator_preview.png\" alt=\"simulatorPreview\"></p>\n<p>Then connect your mobile device to the remote controller using Apple&#39;s lighting cable and run the application. You may see the following screenshot:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/enterNaviModeFailed.jpg\" alt=\"enterNaviModeFailed\"></p>\n<p>If you encounter this issue, check the solution to this problem in the previous part of this tutorial. Next, let&#39;s come back to the DJI PC Simulator on your PC and press the <strong>Start Simulation</strong> button. A tiny red aircraft will appear on the map in your application, as seen below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/aircraftOnMap1.jpg\" alt=\"aircraftOnMap1\"></p>\n<p>Press the <strong>Edit</strong> button, and the map view will zoom in to the region you are in and will center the aircraft:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/locateTheAircraft.gif\" alt=\"locateAircraft\"></p>\n<p>Next, test the waypoint feature by tapping wherever you&#39;d like on the map view. Wherever you do tap, a waypoint will be added and a purple pin will appear exactly at the location of the waypoint, as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/addWaypoints_Action.gif\" alt=\"addWayPoints\"></p>\n<p>Once you press the <strong>Config</strong> button, the <strong>Waypoint Configuration</strong> view will appear. After you&#39;re satisfied with the changes, press the <strong>Finish</strong> button. The waypoint mission will start to prepare. Then press the <strong>Start</strong> button to start the waypoint mission execution. Now you will should see the aircraft move towards the waypoints you set previously on the map view, as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/startFlying.gif\" alt=\"flyTowards\"></p>\n<p>At the same time, you will be able to see the Inspire 1 take off and start to fly in the DJI PC Simulator.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/takeOff.gif\" alt=\"takeOff\"></p>\n<p>When the waypoint mission finishes, the Inspire 1 will start to go home!</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/goHome.gif\" alt=\"goHome\"> </p>\n<p>The remote controller will start beeping, and the <strong>Go Home</strong> button on the remote controller will start to flash a white light. Let&#39;s take a look at the DJI PC Simulator now:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/GSDemo/landing.gif\" alt=\"landing\"></p>\n<p>The inspire 1 will eventually go home, land, and the beeping from the remote controller will stop. The application will go back to its normal status. If you press the <strong>Clear</strong> button, all the waypoints you previously set will be cleared. During the mission, if you&#39;d ever like to stop the DJIWaypoint mission, you can do so by pressing the <strong>Stop</strong> button.</p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you’ve learned how to setup and use the DJI PC Simulator to test your waypoint mission application, upgrade your aircraft&#39;s firmware to the developer version, use the DJI Mobile SDK to create a simple map view, modify annotations of the map view, show the aircraft on the map view by using GPS data from the DJI PC Simulator. Next, you learned how to configure <strong>DJIWaypoint</strong> parameters, how to add waypoints to <strong>DJIWaypointMission</strong>. Moreover, you learned how to use DJIMissionManager to <strong>prepare</strong>, <strong>start</strong> and <strong>stop</strong> missions. </p>\n<p>   Congratulations! Now that you&#39;ve finished the demo project, you can build on what you&#39;ve learned and start to build your own waypoint mission application. You can improve the method which waypoints are added(such as drawing a line on the map and generating waypoints automatically), play around with the properties of a waypoint (such as heading, etc.), and adding more functionality. In order to make a cool waypoint mission application, you still have a long way to go. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a MapView and Waypoint Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-GSDemo"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue or a post on the DJI forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, we will use the Xcode&#39;s &quot;Single View Application&quot; template project to show you how to import DJI iOS SDK and register the application.</p>\n<h2 id=\"downloading-the-sdk\">Downloading the SDK</h2>\n<p>  You can download DJI iOS SDK from <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\">DJI Developer Website</a>.</p>\n<h2 id=\"creating-the-xcode-project\">Creating the Xcode Project</h2>\n<p>  Open Xcode, select <strong>File-&gt;New-&gt;Project</strong> to create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/createProject.png\" alt=\"createProject\"></p>\n<p>  Then enter &quot;ImportSDKDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/enterProjectInfo.png\" alt=\"enterProjectInfo\"></p>\n<h2 id=\"importing-the-sdk\">Importing the SDK</h2>\n<p>  Once the project is created, let&#39;s navigate to the &quot;FPVDemo&quot; folder of the project and create a new folder named &quot;Frameworks&quot;. Next copy the <strong>DJISDK.framework</strong>, which you just download from DJI Developer website to this folder.</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/copyFrameworks.png\" alt=\"copyFrameworks\"></p>\n<p>  Next, let&#39;s come back to the Xcode project navigator and right click on the &quot;ImportSDKDemo&quot; and select &quot;Add Files to &quot;ImportSDKDemo&quot;...&quot; to add the &quot;Frameworks&quot; folder to the Xcode Project.  </p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/addFolders.png\" alt=\"addFolders\"></p>\n<p> Once you import the SDK successfully, you should see the following project structure screenshot:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/importSDKFramework.png\" alt=\"importSDKFramework\"> </p>\n<p> Furthermore, let&#39;s select the &quot;ImportSDKDemo&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; to add the &quot;DJISDK.framework&quot; as shown below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/sdkFramework.png\" alt=\"sdkFramework\"></p>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p><strong>1.</strong> In order to enable your app to connect to the MFI remote controller, you must add \n &quot;Supported external accessory protocols&quot; items in the info.plist file, let&#39;s modify it by adding the following content:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/MFIProtocol.png\" alt=\"MFI\"></p>\n<p><strong>2.</strong> Since in iOS 9, App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. You must add <strong>App Transport Security Settings</strong> items in the info.plist file as shown below too:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/appTransportSecurity.png\" alt=\"appTransportSecurity\"></p>\n</blockquote>\n<h2 id=\"activating-the-project\">Activating the Project</h2>\n<p>  Now, let&#39;s go to the &quot;ViewController.m&quot; file and import the &quot;DJISDK.h&quot; header file, then implement the <code>DJISDKManagerDelegate</code> protocol in the class extension part:</p>\n<pre><code class=\"lang-objc\">#import &quot;ViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\n@interface ViewController ()&lt;DJISDKManagerDelegate&gt;\n@end</code></pre>\n<p>  Next, create a new method <code>registerApp</code>, invoke it in the <code>viewDidAppear</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n    [self registerApp];\n}\n\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<p>  In the code above, we invoke the <code>registerApp:withDelegate:</code> method of DJISDKManager to register the application on DJI Server and set &quot;ViewController&quot; as the delegate. Then we call the <code>registerApp</code> method in <code>viewDidAppear:</code> method when the view appear.</p>\n<blockquote>\n<p><strong>Note</strong>: For the <strong>App Key</strong>, you may need to obtain it from the <a href=\"http://developer.dji.com/en/user/apps\" target=\"_blank\">DJI Developer website</a>.  If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p>The <strong>App Key</strong> we generate for you is associated with the Xcode project&#39;s <strong>Bundle Identifier</strong>, so you will not be able to use the same App Key in a different Xcode project. Each project must be submitted individually and will receive a unique App Key.</p>\n</blockquote>\n<p>  Moreover, let&#39;s implement the <code>sdkManagerDidRegisterAppWithError:</code> delegate method to check the registration result:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n       [DJISDKManager startConnectionToProduct];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}\n\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n}</code></pre>\n<p> If you register the app failed, you can check the <strong>error</strong> parameter of the  delegate method to figure out the problem. For more details, please check the <strong>DJISDKRegistrationError</strong> in the &quot;NSError+DJISDK.h&quot; file of DJISDK.</p>\n<p> Finally, build and run the project in Xcode using iOS Simulator. If everything goes well, you should see a &quot;Register App Success!&quot; alert once the application loads. </p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/ImportAndActivateSDKInXcode/registerSuccess.png\" alt=\"registerSuccess\"></p>\n<h2 id=\"where-to-go-from-here-\">Where to go from here?</h2>\n<p>  If you want to learn how to use DJI iOS SDK to create a simple app, please check this tutorial: <a href=\"./FPVDemo.html\">Creating a Camera Application</a>. It’s our introductory tutorial, which guides you through connecting to your aircraft&#39;s camera to displaying a live video feed in your app, through which you can take photos and videos.</p>","meta":{"title":"Importing and Activating DJI SDK in Xcode Project","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-ImportAndActivateSDKInXcode"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>This tutorial is designed for you to gain a basic understanding of the DJI Mobile SDK. It will implement the FPV view and two basic camera functionalities: <strong>Take Photo</strong> and <strong>Record video</strong>.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<p>We use Phantom 3 Professional as an example to make this demo.</p>\n<h2 id=\"downloading-the-sdk\">Downloading the SDK</h2>\n<p>You can download the latest iOS SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads/\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads/\">https://developer.dji.com/mobile-sdk/downloads/</a></a>.</p>\n<p>Minimum Requirement: iOS 8.0 or above.</p>\n<h2 id=\"importing-and-activating-the-sdk\">Importing and Activating the SDK</h2>\n<p>Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;FPVDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s delete the &quot;ViewController.h&quot; and &quot;ViewController.m&quot; files created by Xcode by default. Create a new ViewController named &quot;DJICameraViewController&quot;. </p>\n<p>Now, let&#39;s import the <strong>DJISDK.framework</strong> to it and implement the SDK activation process in the &quot;DJICameraViewController.m&quot; file. If you are not familiar with the process of importing and activating DJI SDK, please check the Github source code and this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h2 id=\"implementing-the-first-person-view\">Implementing the First Person View</h2>\n<h3 id=\"importing-the-videopreviewer\">Importing the VideoPreviewer</h3>\n<p> <strong>1</strong>. We use the <strong>FFMPEG</strong> decoding library (found at <a href=\"http://ffmpeg.org\" target=\"_blank\"><a href=\"http://ffmpeg.org\">http://ffmpeg.org</a></a>) to do software video decoding here. For the hardware video decoding, we provide a <strong>DJIH264Decoder</strong> decoding library. You can find them in the <strong>VideoPreviewer</strong> folder, which you can download it from <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/VideoPreviewer\" target=\"_blank\">DJI iOS SDK Github Repository</a>. Download and copy the entire <strong>VideoPreviewer</strong> folder to your Xcode project&#39;s &quot;Frameworks&quot; folder and then add the &quot;VideoPreviewer.xcodeproj&quot; to the &quot;Frameworks&quot; folder in Xcode project navigator, as shown below:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/FPVDemo/projectNavigator.png\" alt=\"projectNavigator\"></p>\n<blockquote>\n<p>Note: Please Make sure the <strong>VideoPreviewer</strong> folder and <strong>DJISDK.framework</strong> are in the same <strong>Frameworks</strong> folder like this:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/FPVDemo/frameworksFolderStruct.png\" alt=\"frameworksFolderStruct\"></p>\n</blockquote>\n<p> <strong>2</strong>. Next, let&#39;s select the &quot;FPVDemo&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; button to add the &quot;VideoPreviewer.framework&quot; as shown below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/FPVDemo/addFrameworks.png\" alt=\"addFrameworks\">\n  <img src=\"../images/tutorials-and-samples/iOS/FPVDemo/addFrameworksResult.png\" alt=\"addFrameworksResult\"></p>\n<h3 id=\"working-on-the-djicameraviewcontroller\">Working on the DJICameraViewController</h3>\n<p> <strong>1</strong>. Open Main.storyboard, add a new View Controller and set <strong>DJICameraViewController</strong> as the <strong>Class</strong> for it:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/FPVDemo/rootController.png\" alt=\"rootController\"></p>\n<p>Add a UIView inside the View Controller. Then, add two UIButtons and one UISegmentedControl at the bottom of the View Controller as shown below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/FPVDemo/Storyboard.png\" alt=\"Storyboard\"></p>\n<p>  Go to DJICameraViewController.m file and import the <strong>DJISDK</strong> and <strong>VideoPreviewer</strong> header files. Next implement two delegate protocols and set the IBOutlets and IBActions for the UI we just create in Main.storyboard as shown below:</p>\n<pre><code class=\"lang-objc\">#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n@interface DJICameraViewController ()&lt;DJICameraDelegate, DJISDKManagerDelegate, DJIBaseProductDelegate&gt;\n\n@property (weak, nonatomic) IBOutlet UIButton *recordBtn;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *changeWorkModeSegmentControl;\n@property (weak, nonatomic) IBOutlet UIView *fpvPreviewView;\n\n- (IBAction)captureAction:(id)sender;\n- (IBAction)recordAction:(id)sender;\n- (IBAction)changeWorkModeAction:(id)sender;</code></pre>\n<p> <strong>2</strong>. In the <code>viewDidAppear</code> method, set the <code>fpvPreviewView</code> instance variable as the view of <strong>VideoPreviewer</strong> to show the Video Stream and reset it to nil in the <code>viewWillDisappear</code> method:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n    [[VideoPreviewer instance] setView:self.fpvPreviewView];\n    [self registerApp];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [[VideoPreviewer instance] setView:nil];   \n}</code></pre>\n<p> <strong>3</strong>. Moreover, implement the &quot;DJISDKManagerDelegate&quot; and &quot;DJIBaseProductDelegate&quot; delegate methods to fetch DJICamera object and set its delegate to &quot;self&quot; as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (DJICamera*) fetchCamera {\n\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).camera;\n    }else if ([[DJISDKManager product] isKindOfClass:[DJIHandheld class]]){\n        return ((DJIHandheld *)[DJISDKManager product]).camera;\n    }\n\n    return nil;\n}\n\n#pragma mark DJISDKManagerDelegate Method\n\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    if (newProduct) {\n        [newProduct setDelegate:self];\n        DJICamera* camera = [self fetchCamera];\n        if (camera != nil) {\n            camera.delegate = self;\n        }\n    }\n}\n\n#pragma mark - DJIBaseProductDelegate Method\n\n-(void) componentWithKey:(NSString *)key changedFrom:(DJIBaseComponent *)oldComponent to:(DJIBaseComponent *)newComponent {\n\n    if ([key isEqualToString:DJICameraComponentKey] &amp;&amp; newComponent != nil) {\n        __weak DJICamera* camera = [self fetchCamera];\n        if (camera) {\n            [camera setDelegate:self];\n        }\n    }\n}</code></pre>\n<p>  Firstly, we create the <code>- (DJICamera*) fetchCamera</code> method to fetch the updated DJICamera object. Before we get return the DJICamera object, we need to check if the product object of DJISDKManager is kind of <strong>DJIAircraft</strong> of <strong>DJIHandheld</strong> class. Since the camera component of the aircraft or handheld device may be changed or disconnected, we need to fetch the camera object everytime we want to use it to ensure we get the correct camera object. </p>\n<p>  Next, we invoke the <code>sdkManagerProductDidChangeFrom:to:</code> delegate method to get the <code>newProduct</code> and set the DJIICamera object&#39;s delegate here. This delegate method will invoke when the product connection status changes.</p>\n<p>  Moverover, let&#39;s invoke the <code>componentWithKey:changedFrom:to:</code> delegate method to fetch the camera object and set its delegate too. Since the camera component of the aircraft may change to another type, we should invoke this delegate method to check the component changes too.</p>\n<p> <strong>4</strong>. Lastly, let&#39;s implement the &quot;DJICameraDelegate&quot; method, as shown below:</p>\n<pre><code class=\"lang-objc\">\n#pragma mark - DJICameraDelegate Method\n\n-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size\n{\n    [[VideoPreviewer instance] push:videoBuffer length:(int)size];\n}\n\n-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{\n}</code></pre>\n<p> Here, we use the <code>-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size</code> method to get the live H264 video feed data and send them to the <strong>VideoPreviewer</strong> to decode.</p>\n<p>  Moreover, the <code>-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState</code> method is used to get the camera state from the camera on your aircraft. It will be invoked frequently, so you can update your user interface or camera settings accordingly here.</p>\n<h2 id=\"connecting-to-the-aircraft-or-handheld-device\">Connecting to the Aircraft or Handheld Device</h2>\n<p>After you finish the steps above, you can now connect your mobile device to your DJI Aircraft to use the application, like checking the FPV View. Here are the guidelines:</p>\n<ul>\n<li><p>In order to connect to a DJI Phantom 4, Inspire 1, Phantom 3 Professional, etc:</p>\n<p><strong>1</strong>. First, turn on your remote controller.</p>\n<p><strong>2</strong>. Then, turn on the power of the DJI aircraft.</p>\n<p><strong>3</strong>. Connect your iOS device to the remote controller using the lightning cable.</p>\n<p><strong>4</strong>. Run the application and wait for a few seconds, you will be able to view the live video stream from your aircraft&#39;s camera based on what we&#39;ve finished of the application so far!</p>\n</li>\n<li><p>In order to connect to Phantom 3 Standard, Phantom 3 4K, or OSMO:</p>\n<p><strong>1</strong>. First, turn on your remote controller or OSMO.</p>\n<p><strong>2</strong>. Then, turn on the power of the DJI aircraft. (If you are using Phantom 3 Standard or Phantom 3 4K)</p>\n<p><strong>3</strong>. Search for the WiFi of the aircraft&#39;s remote controller or OSMO and connect your iOS device to it.</p>\n<p><strong>4</strong>. Run the application and wait for a few seconds, you will be able to view the live video stream from your aircraft or OSMO&#39;s camera based on what we&#39;ve finished of the application so far!</p>\n</li>\n</ul>\n<h2 id=\"enjoying-the-first-person-view\">Enjoying the First Person View</h2>\n<p>If you can see the live video stream in the application, congratulations! Let&#39;s move forward.</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/FPVDemo/fpv.jpg\" alt=\"fpv\"></p>\n<h2 id=\"implementing-the-capture-function\">Implementing the Capture function</h2>\n<p>Let&#39;s implement the <code>captureAction</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)captureAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    __weak DJICamera* camera = [self fetchCamera];\n    if (camera) {\n        [camera startShootPhoto:DJICameraShootPhotoModeSingle withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [weakSelf showAlertViewWithTitle:@&quot;Take Photo Error&quot; withMessage:error.description];\n            }\n        }];\n    }\n}</code></pre>\n<p>In the code above, we invoke the following method of DJICamera to shoot photo.</p>\n<p><code>- (void)startShootPhoto:(DJICameraShootPhotoMode)shootMode withCompletion:(DJICompletionBlock)block;</code></p>\n<p>  Here we set the &quot;shootMode&quot; to <strong>DJICameraShootPhotoModeSingle</strong>. You can check the shoot photo result from the &quot;DJICompletionBlock&quot;.</p>\n<p>  Build and run your project and then try the shoot photo function. If the screen flash after your press the <strong>Capture</strong> button, your capture fuction should work now.</p>\n<h2 id=\"implementing-the-record-function\">Implementing the Record function</h2>\n<h3 id=\"1-switching-camera-mode\">1. Switching Camera Mode</h3>\n<p>   Before we implementing the record function, we need to switch the camera work mode firstly.</p>\n<p>   Let&#39;s check the DJICameraMode enum in <strong>DJICameraSettingsDef.h</strong> file.</p>\n<pre><code class=\"lang-objc\">/**\n *  Camera work modes.\n */\ntypedef NS_ENUM (NSUInteger, DJICameraMode){\n    /**\n     *  Capture mode. In this mode, the user can capture pictures.\n     */\n    DJICameraModeShootPhoto = 0x00,\n    /**\n     *  Record mode. In this mode, the user can record videos.\n     */\n    DJICameraModeRecordVideo = 0x01,\n    /**\n     *  Playback mode. In this mode, the user can preview photos and videos, and\n     *  they can delete files.\n     *\n     *  Not supported by OSMO, Phantom 3 Standard.\n     */\n    DJICameraModePlayback = 0x02,\n    /**\n     *  In this mode, user can download media to Mobile Device.\n     *\n     *  Supported by Phantom 3 Professional, Phantom 3 Advanced, Phantom 3 Standard, X3.\n     */\n    DJICameraModeMediaDownload = 0x03,\n\n    /**\n     *  The camera work mode is unknown.\n     */\n    DJICameraModeUnknown = 0xFF\n};</code></pre>\n<p>   You can see from above that there are 5 types of <strong>DJICameraMode</strong>. Here we use the first two types.</p>\n<p>   Remember we create a UISegment Control in the storyboard? We can update the state of the segmented control when switching between <strong>DJICameraModeShootPhoto</strong> and <strong>DJICameraModeRecordVideo</strong> using the previous delegate method like this:</p>\n<pre><code class=\"lang-objc\">-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{        \n    //Update UISegmented Control&#39;s state\n    if (systemState.mode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.mode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }\n}</code></pre>\n<p> Now we can implement the <code>changeWorkModeAction</code> IBAction method as follows:</p>\n<pre><code class=\"lang-objc\">\n- (IBAction)changeWorkModeAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    UISegmentedControl *segmentControl = (UISegmentedControl *)sender;\n\n    __weak DJICamera* camera = [self fetchCamera];\n\n    if (camera) {\n        if (segmentControl.selectedSegmentIndex == 0) { //Take photo\n            [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [weakSelf showAlertViewWithTitle:@&quot;Set DJICameraModeShootPhoto Failed&quot; withMessage:error.description];\n                }\n            }];\n\n        }else if (segmentControl.selectedSegmentIndex == 1){ //Record video\n            [camera setCameraMode:DJICameraModeRecordVideo withCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [weakSelf showAlertViewWithTitle:@&quot;Set DJICameraModeRecordVideo Failed&quot; withMessage:error.description];\n                }\n\n            }];\n\n        }\n    }\n\n}</code></pre>\n<p> In the code above, we invoke the \n <code>- (void)setCameraMode:(DJICameraMode)mode withCompletion:(DJICompletionBlock)block;</code> method of DJICamera to change the camera mode.  Here we add two UIAlertViews to show warnings when the user set DJICameraMode failed.</p>\n<h3 id=\"2-working-on-the-record-action\">2. Working on the Record Action</h3>\n<p>  Firstly, let&#39;s go to Main.storyboard and drag a UILabel on top of the screen, set up the Autolayout constraints for it and create an IBOutlet named <code>currentRecordTimeLabel</code> in the <strong>DJICameraViewController.m</strong> file.</p>\n<p>  Then add a BOOL variable <code>isRecording</code> in the class extension part of <strong>DJICameraViewController</strong>. Be sure to hide the <code>currentRecordTimeLabel</code> in the <code>viewDidLoad</code> method.</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.currentRecordTimeLabel setHidden:YES];\n}</code></pre>\n<p>We can update the bool value for <code>isRecording</code> and <code>currentRecordTimeLabel</code>&#39;s text value in the following delegate method:</p>\n<pre><code class=\"lang-objc\">\n-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{\n    self.isRecording = systemState.isRecording;\n\n    [self.currentRecordTimeLabel setHidden:!self.isRecording];\n    [self.currentRecordTimeLabel setText:[self formattingSeconds:systemState.currentVideoRecordingTimeInSeconds]];\n\n    if (self.isRecording) {\n        [self.recordBtn setTitle:@&quot;Stop Record&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.recordBtn setTitle:@&quot;Start Record&quot; forState:UIControlStateNormal];\n    }\n\n    //Update UISegmented Control&#39;s state\n    if (systemState.mode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.mode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }   \n}</code></pre>\n<p>   Because the text value of <code>currentRecordingTime</code> is counted in seconds, so we need to convert it to &quot;mm:ss&quot; format like this:</p>\n<pre><code class=\"lang-objc\">- (NSString *)formattingSeconds:(int)seconds\n{\n    NSDate *date = [NSDate dateWithTimeIntervalSince1970:seconds];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    [formatter setDateFormat:@&quot;mm:ss&quot;];\n    [formatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];\n\n    NSString *formattedTimeString = [formatter stringFromDate:date];\n    return formattedTimeString;\n}</code></pre>\n<p>   Next, add the following codes to the <code>recordAction</code> IBAction method as follows:</p>\n<pre><code class=\"lang-objc\">- (IBAction)recordAction:(id)sender {\n\n    __weak DJICameraViewController *weakSelf = self;\n    __weak DJICamera* camera = [self fetchCamera];\n    if (camera) {\n\n        if (self.isRecording) {\n            [camera stopRecordVideoWithCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [weakSelf showAlertViewWithTitle:@&quot;Stop Record Video Error&quot; withMessage:error.description];\n                }\n            }];\n\n        }else\n        {\n            [camera startRecordVideoWithCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [weakSelf showAlertViewWithTitle:@&quot;Start Record Video Error&quot; withMessage:error.description];\n                }\n            }];\n        }\n    }\n}</code></pre>\n<p>  In the code above, we implement the <code>startRecordVideoWithCompletion</code> and <code>stopRecordVideoWithCompletion</code> methods of the <strong>DJICamera</strong> class based on the <code>isRecording</code> property value. And show an alertView when an error occurs.</p>\n<p>  Now, let&#39;s build and run the project and check the functions. You can try to play with the <strong>Record</strong> and <strong>Switch Camera WorkMode</strong> functions, if everything goes well, you should see the screenshot like this:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/FPVDemo/record_screenshot.jpg\" alt=\"Screenshot\"></p>\n<p>  Congratulations! Your Aerial FPV iOS app is complete, you can now use this app to control the camera of your Phantom 3 Professional. </p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you’ve learned how to use DJI Mobile SDK to show the FPV View from the aircraft&#39;s camera and control the camera of DJI&#39;s Aircraft to shoot photo and record video. These are the most basic and common features in a typical drone mobile app: <strong>Capture</strong> and <strong>Record</strong>. However, if you want to create a drone app which is more fancy, you still have a long way to go. More advanced features should be implemented, including previewing the photo and video in the SD Card, showing the OSD data of the aircraft and so on. Hope you enjoy this tutorial, and stay tuned for our next one!</p>","meta":{"title":"Creating a Camera Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-FPVDemo"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI Forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use the TapFly and ActiveTrack Missions of DJI iOS SDK to create a cool application for Phantom 4. Also you will get familiar with DJIMissionManager and using the Simulator of DJI Assistant 2 for testing, which is convenient for you to test the missions indoor. So let&#39;s get started!</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"phantom-4-new-missions\">Phantom 4 New Missions</h2>\n<p>  The Phantom 4 supports the two new TapFly and ActiveTrack missions, which brings you a more autonomous flying experience.</p>\n<h3 id=\"tapfly-mission\">TapFly Mission</h3>\n<p>TapFly Mission is only supported on Phantom 4. Given a coordinate in the live video stream (which can come from a user tap), the aircraft will calculate and fly towards the coordinate&#39;s direction in the real wold. During flight, the aircraft will automatically detect and avoid obstacles.</p>\n<p>During the mission, you can use the remote controller&#39;s yaw stick to adjust the heading of the aircraft, which also adjusts the direction of flight to the new yaw. Using any other stick controls will cancel the mission.</p>\n<p>Here is a <a href=\"https://dn-djidl2.qbox.me/cloud/6949e90958a3e0dbf1175cd9bb1f851a/720.mp4\" target=\"_blank\"> video </a> for you to get the first impression of the TapFly Mission.</p>\n<h3 id=\"activetrack-mission\">ActiveTrack Mission</h3>\n<p>ActiveTrack Mission is only supported on Phantom 4. It allows an aircraft to track a moving subject using the vision system and without a GPS tracker on the subject.</p>\n<p>The main camera is used to track the target, so the gimbal cannot be adjusted during an ActiveTrack mission. During the mission the aircraft can be manually flown with pitch, roll and throttle to move around the subject being tracked.</p>\n<p>Here is a <a href=\"https://dn-djidl2.qbox.me/cloud/4ebc02c536baf850f5a568d8c27743fc/720.mp4\" target=\"_blank\"> video </a> for you to get the first impression of the ActiveTrack Mission.</p>\n<h2 id=\"implementing-the-ui-of-application\">Implementing the UI of Application</h2>\n<h3 id=\"importing-the-framework\">Importing the Framework</h3>\n<p>Now that you know the details of the two new missions of Phantom 4, we can start working on the application.</p>\n<p>Let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;P4Missions&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s import the <strong>DJISDK.framework</strong> to it. If you are not familiar with the process of importing DJI SDK, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h3 id=\"importing-the-videopreviewer\">Importing the VideoPreviewer</h3>\n<p> <strong>1</strong>. We use the <strong>FFMPEG</strong> decoding library (found at <a href=\"http://ffmpeg.org\" target=\"_blank\"><a href=\"http://ffmpeg.org\">http://ffmpeg.org</a></a>) to do software video decoding here. For the hardware video decoding, we provide a <strong>DJIH264Decoder</strong> decoding library. You can find them in the <strong>VideoPreviewer</strong> folder, which you can download it from <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/VideoPreviewer\" target=\"_blank\">DJI iOS SDK Github Repository</a>. Download and copy the entire <strong>VideoPreviewer</strong> folder to your Xcode project&#39;s &quot;Frameworks&quot; folder and then add the &quot;VideoPreviewer.xcodeproj&quot; to the &quot;Frameworks&quot; folder in Xcode project navigator, as shown below:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/projectNavigator.png\" alt=\"projectNavigator\"></p>\n<blockquote>\n<p>Note: Please Make sure the <strong>VideoPreviewer</strong> folder and <strong>DJISDK.framework</strong> are in the same <strong>Frameworks</strong> folder like this:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/frameworksFolderStruct.png\" alt=\"frameworksFolderStruct\"></p>\n</blockquote>\n<p> <strong>2</strong>. Next, let&#39;s select the &quot;P4Missions&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; button to add the &quot;VideoPreviewer.framework&quot; as shown below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/addFrameworks.png\" alt=\"addFrameworks\">\n  <img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/addFrameworksResult.png\" alt=\"addFrameworksResult\"></p>\n<h3 id=\"setup-the-storyboard\">Setup the Storyboard</h3>\n<h4 id=\"1-creating-rootviewcontroller\">1. Creating RootViewController</h4>\n<p>   Now, let&#39;s delete the <strong>ViewController.h</strong> and <strong>ViewController.m</strong> files, which were created by Xcode when you create the project. Then, create a UIView Controller named &quot;<strong>RootViewController</strong>&quot; and set the class of original ViewController object in storyboard to &quot;RootViewController&quot;. Next make the ViewController embed in a Navigation Controller and set it as the Storyboard Entry Point in Main.storyboard. </p>\n<h4 id=\"2-creating-uibuttons\">2. Creating UIButtons</h4>\n<p>   Drag and drop two UIButton objects to the RootViewController and named them as &quot;TapFly Mission&quot; and &quot;ActiveTrack Mission&quot;. Remember to add Auto Layout constraints to the two buttons. Moreover, drag and drop two UIViewController objects from the Object library and place them on the right of the RootViewController.</p>\n<h4 id=\"3-adding-two-viewcontrollers\">3. Adding Two ViewControllers</h4>\n<p>   Control drag from the two buttons to the two new UIViewController objects seperately and choose the &quot;Show&quot; action segue. Here we create two UIViewController classes and named them as &quot;ActiveTrackViewController&quot; and &quot;TapFlyViewController&quot;. Then set the class of the two new UIViewController objects in storyboard as these two classes.</p>\n<h4 id=\"4-setup-statusviewcontroller\">4. Setup StatusViewController</h4>\n<p>   Drag and drop another ViewController object from the Object Library to the right of ActiveTrackViewController in the storyboard. Create another UIViewController class and named it as &quot;StatusViewController&quot;, then set the class name in storyboard too.</p>\n<h4 id=\"5-setup-segues\">5. Setup Segues</h4>\n<p>   Drag two Bar Button Item(Name them as both &quot;Status&quot;) from Object Library and place them on the right side of navigation bar of &quot;ActiveTrackViewController&quot; and &quot;TapFlyViewController&quot; objects in the storyboard. Lastly, control drag from the two &quot;Status&quot; Bar Button to the StatusViewController, and select &quot;Show&quot; action segue.</p>\n<p>Now, let&#39;s check the screenshot of the current storyboard UI:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/storyboardUI.png\" alt=\"storyboardUI\"></p>\n<p>It Looks pretty simple and clear, this will be the workflow of our demo application. </p>\n<h3 id=\"registering-the-application\">Registering the Application</h3>\n<p>After you finish the above steps, let&#39;s register our application. Open the RootViewController.m file and replace it with the following code:</p>\n<pre><code class=\"lang-objc\">#import &quot;RootViewController.h&quot;\n#import &quot;DemoUtility.h&quot;\n\n@interface RootViewController ()&lt;DJISDKManagerDelegate&gt;\n@property (weak, nonatomic) IBOutlet UIButton *tapFlyMissionButton;\n@property (weak, nonatomic) IBOutlet UIButton *activeTrackMissionButton;\n\n@end\n\n@implementation RootViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.title = @&quot;Phantom 4 Missions Demo&quot;;\n    [self registerApp];\n}\n\n- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n#pragma mark Custom Methods\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Please enter your App Key here.&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}\n\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n\n}\n\n#pragma mark DJISDKManagerDelegate Method\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    if (newProduct) {\n        [self.tapFlyMissionButton setEnabled:YES];\n        [self.activeTrackMissionButton setEnabled:YES];\n    }else\n    {\n        [self.tapFlyMissionButton setEnabled:NO];\n        [self.activeTrackMissionButton setEnabled:NO];\n    }\n}\n\n- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    if (error) {\n        NSString* message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n        [self.tapFlyMissionButton setEnabled:NO];\n        [self.activeTrackMissionButton setEnabled:NO];\n        [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n        [DJISDKManager startConnectionToProduct];\n    }\n}\n@end</code></pre>\n<p>In the code shown above, we implement the following features:</p>\n<p><strong>1.</strong> Implement the <code>registerApp</code> method and invoke the <code>registerApp:withDelegate:</code> method of DJISDKManager by passing the <strong>App Key</strong> you get when you register the app on DJI Developer website. If you are not familiar with the App Key, please check the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n<p><strong>2.</strong> Implement the <code>sdkManagerProductDidChangeFrom:to:</code> delegate method to check the connection status and hide or show the two UIButtons.</p>\n<p><strong>3.</strong> Implement the <code>sdkManagerDidRegisterAppWithError:</code> delegate method to check if register app successfully, then invoke the <code>startConnectionToProduct</code> method of DJISDKManager to start a connection to Phantom 4.</p>\n<h2 id=\"coordinate-transformations-for-missions\">Coordinate Transformations for Missions</h2>\n<p>Before we dive into the implementation of two missions, let&#39;s learn something about the special coordinate transformations of them.</p>\n<h3 id=\"tapfly-mission-coordinate-transformation\">TapFly Mission Coordinate Transformation</h3>\n<p>If we check the <strong>DJITapFlyMission.h</strong> file, you can see the following two properties:</p>\n<pre><code class=\"lang-objc\">@property(nonatomic, readonly) DJIVector direction;\n@property(nonatomic, readonly) CGPoint imageLocation;</code></pre>\n<p><strong>1.</strong> The <code>direction</code> property is a DJIVector object, which represents a cartesian vector in 3D space. You can get the actual flying direction of the aircraft using the N-E-D(North-East-Down) coordinate system when the aircraft is executing a TapFly mission.</p>\n<p><strong>2.</strong> The <code>imageLocation</code> property is the image point from the live video stream where the vision system should calculate the flight direction from. The image point is normalized to [0,1] where (0,0) is the top left corner and (1,1) is the bottom right.</p>\n<p>Here is a diagram to show the coordinate transformation of the mission:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyMissionCoordinates.png\" alt=\"tapFlyMissionCoordinate\"></p>\n<p>As the diagram shown above, you can see the process of transformation.</p>\n<ul>\n<li><p>The <code>imageLocationToCalculateDirection</code> property shown above is transformed from TouchPoint (CGPoint) to a Video Stream Coordinate System CGPoint.</p>\n</li>\n<li><p>The <code>direction</code> property shown above belongs to the <strong>N-E-D (North-East-Down) Coordinate System</strong> and will be sent to you by the SDK.</p>\n</li>\n<li><p>The <code>imageLocation</code> property shown above belongs to the <strong>Video Stream Coordinate System</strong> and will be sent to you by the SDK.</p>\n</li>\n</ul>\n<p>So in our demo application, in order to implement the TapFly mission, we should transform the user&#39;s touch location (A CGPoint object) of UIView Coordinate System into the image location (A CGPoint object) of Video Stream Coordination System and pass it to the following <code>imageLocationToCalculateDirection</code> property of DJITapFlyMission:</p>\n<pre><code class=\"lang-objc\">/**\n *  The image point from the video feed where the vision system should calculate the flight direction from. The image point is normalized to [0,1] where (0,0) is the top left corner and (1,1) is the bottom right.\n */\n@property(nonatomic, assign) CGPoint imageLocationToCalculateDirection;</code></pre>\n<h3 id=\"activetrack-mission-coordinate-transformation\">ActiveTrack Mission Coordinate Transformation</h3>\n<p>Next, let&#39;s check the <strong>DJIActiveTrackMission.h</strong> file, you may see the following two properties.</p>\n<pre><code class=\"lang-objc\">@property(nonatomic, readonly) CGRect trackingRect;\n@property(nonatomic, assign) CGRect rect;</code></pre>\n<p><strong>1.</strong> The <code>trackingRect</code> property is a rectangle in the live video stream view image that represents the target being tracked. The rectangle is normalized to [0,1] where (0,0) is the top left of the video preview and (1,1) is the bottom right.</p>\n<p><strong>2.</strong> The <code>rect</code> property is a bounding box for the target. The rectangle is normalized to [0,1] where (0,0) is the top left of the video preview and (1,1) is the bottom right.</p>\n<p>   The <code>size</code> parameter of <code>CGRect</code> can be set to 0 to initialize the mission with a point instead of a rectangle. If the mission is initialized with a point, the vision system will try to recognize object around the point and return the representative rect in the status delegate.</p>\n<p>   Here is a diagram to show the coordinate transformation of the ActiveTrack mission:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/activeTrackMissionCoordinates.png\" alt=\"tapFlyMissionCoordinate\"></p>\n<p>As the diagram shown above, you can see the process of transformation. </p>\n<ul>\n<li>The <code>trackingRect</code> and <code>rect</code> properties shown above belongs to the <strong>Video Stream Coordinate System</strong>.</li>\n</ul>\n<p>So in order to implement the ActiveTrack Mission, we should transform the user&#39;s touch rect (A CGRect object) of UIView Coordinate System into the tracking rect (A CGRect object) of Video Stream Coordination System and pass it to the <code>rect</code> property of DJIActiveTrackMission. The SDK will send you the <code>trackingRect</code> property to update the rectangle on your screen.</p>\n<h2 id=\"implementing-the-tapfly-mission\">Implementing the TapFly Mission</h2>\n<h3 id=\"working-on-the-ui-of-tapflyviewcontroller\">Working on the UI of TapFlyViewController</h3>\n<p>   Now let&#39;s create a new UIView class and name it as &quot;PointingTouchView&quot;. We use this UIView to update and draw the tapping point of the direction which you want the drone to fly towards on the screen.</p>\n<p>   Go back to the TapFlyViewController object in the storyboard. Drag and drop two UIView objects to the view controller and adjust their size to be full screen. Create two IBOutlets for them in the class extension part of TapFlyViewController.m file and connect them between Storyboard and the .m file as shown below:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIView *fpvView;\n@property (weak, nonatomic) IBOutlet PointingTouchView *touchView;</code></pre>\n<p>   Remember to place the fpvView at the bottom, and change the top UIView object&#39;s class to &quot;PointingTouchView&quot;.</p>\n<p>  Next, Drag and drop two UILabel objects, two UIButton objects, a UISwitch object and a UISlider object on top of the View of Tap Fly View Controller and place them on the positions as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyUI.png\" alt=\"activeTrackVC\"></p>\n<p>For more details of the UI customization, please check the Github source code of this demo project. Lastly, create three IBOutlets properties and two IBActions methods for them in the TapFlyViewController.m file as shown below:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIButton* startMissionBtn;\n@property (weak, nonatomic) IBOutlet UIButton* stopMissionBtn;\n@property (weak, nonatomic) IBOutlet UILabel* speedLabel;\n@property (weak, nonatomic) IBOutlet UILabel *horiObstacleAvoidLabel;</code></pre>\n<pre><code class=\"lang-objc\">-(IBAction) onSliderValueChanged:(UISlider*)slider\n{\n}\n\n-(IBAction) onSwitchValueChanged:(UISwitch*)sender\n{\n}\n\n-(IBAction) onStartMissionButtonAction:(UIButton*)sender\n{\n}\n\n-(IBAction) onStopMissionButtonAction:(UIButton*)sender\n{\n}</code></pre>\n<h3 id=\"implementing-the-coordinate-transformation-methods\">Implementing the Coordinate Transformation Methods</h3>\n<p>  Let&#39;s create a useful NSObject class named &quot;DemoUtility&quot;, it contains some useful Macros and Class methods for the demo project. Here is the interface of it:</p>\n<pre><code class=\"lang-objc\">#import &lt;Foundation/Foundation.h&gt;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n#define weakSelf(__TARGET__) __weak typeof(self) __TARGET__=self\n#define weakReturn(__TARGET__) if(__TARGET__==nil)return;\n#define INVALID_POINT CGPointMake(CGFLOAT_MAX, CGFLOAT_MAX)\n\nextern void ShowResult(NSString *format, ...);\n\n@interface DemoUtility : NSObject\n\n/**\n *  Fetch DJI Project&#39;s component Objects.\n */\n+ (DJICamera*) fetchCamera;\n+ (DJIGimbal*) fetchGimbal;\n+ (DJIFlightController *) fetchFlightController;\n\n/**\n *  Help to do the coordinate transformations.\n */\n+ (CGPoint) pointToStreamSpace:(CGPoint)point withView:(UIView *)view;\n+ (CGPoint) pointFromStreamSpace:(CGPoint)point withView:(UIView *)view;\n+ (CGSize) sizeToStreamSpace:(CGSize)size;\n+ (CGSize) sizeFromStreamSpace:(CGSize)size;\n+ (CGRect) rectToStreamSpace:(CGRect)rect withView:(UIView *)view;\n+ (CGRect) rectFromStreamSpace:(CGRect)rect withView:(UIView *)view;\n+ (CGRect) rectWithPoint:(CGPoint)point1 andPoint:(CGPoint)point2;\n\n/**\n *  Returns the string object from related enum values.\n */\n+ (NSString*) stringFromPointingExecutionState:(DJITapFlyMissionExecutionState)state;\n+ (NSString*) stringFromTrackingExecutionState:(DJIActiveTrackMissionExecutionState)state;\n+ (NSString*) stringFromByPassDirection:(DJIBypassDirection)direction;\n\n@end</code></pre>\n<p>It firstly imports the DJISDK and VideoPreviewer header files, then defines several methods to do the mission coordinate transformations.</p>\n<p>Moreover, here are the coordinate transformations class methods&#39; implementations:</p>\n<pre><code class=\"lang-objc\">+ (CGPoint) pointToStreamSpace:(CGPoint)point withView:(UIView *)view\n{\n    VideoPreviewer* previewer = [VideoPreviewer instance];\n    CGRect videoFrame = [previewer frame];\n    CGPoint videoPoint = [previewer convertPoint:point toVideoViewFromView:view];\n    CGPoint normalized = CGPointMake(videoPoint.x/videoFrame.size.width, videoPoint.y/videoFrame.size.height);\n    return normalized;\n}\n\n+ (CGPoint) pointFromStreamSpace:(CGPoint)point withView:(UIView *)view{\n    VideoPreviewer* previewer = [VideoPreviewer instance];\n    CGRect videoFrame = [previewer frame];\n    CGPoint videoPoint = CGPointMake(point.x*videoFrame.size.width, point.y*videoFrame.size.height);\n    return [previewer convertPoint:videoPoint fromVideoViewToView:view];\n}\n\n+ (CGSize) sizeToStreamSpace:(CGSize)size{\n    VideoPreviewer* previewer = [VideoPreviewer instance];\n    CGRect videoFrame = [previewer frame];\n    return CGSizeMake(size.width/videoFrame.size.width, size.height/videoFrame.size.height);\n}\n\n+ (CGSize) sizeFromStreamSpace:(CGSize)size{\n    VideoPreviewer* previewer = [VideoPreviewer instance];\n    CGRect videoFrame = [previewer frame];\n    return CGSizeMake(size.width*videoFrame.size.width, size.height*videoFrame.size.height);\n}\n\n+ (CGRect) rectToStreamSpace:(CGRect)rect withView:(UIView *)view\n{\n    CGPoint origin = [DemoUtility pointToStreamSpace:rect.origin withView:view];\n    CGSize size = [DemoUtility sizeToStreamSpace:rect.size];\n    return CGRectMake(origin.x, origin.y, size.width, size.height);\n}\n\n+ (CGRect) rectFromStreamSpace:(CGRect)rect withView:(UIView *)view\n{\n    CGPoint origin = [DemoUtility pointFromStreamSpace:rect.origin withView:view];\n    CGSize size = [DemoUtility sizeFromStreamSpace:rect.size];\n    return CGRectMake(origin.x, origin.y, size.width, size.height);\n}</code></pre>\n<p>The &quot;StreamSpace&quot; in the above method names means the video stream coordinate system. Those methods include tranformations of CGPoint, CGSize and CGRect, we will use them frequently later. For the remaining implementation of this class, please check the Github Source Code.</p>\n<h3 id=\"working-on-the-pointingtouchview\">Working on the PointingTouchView</h3>\n<p>Now let&#39;s go to PointingTouchView.h file and replace it with the following codes:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@interface PointingTouchView : UIView\n-(void) updatePoint:(CGPoint)point;\n-(void) updatePoint:(CGPoint)point andColor:(UIColor*)color;\n@end</code></pre>\n<p>Here, we create two methods to update the touching point and its color. </p>\n<p>Next, go to the PointingTouchView.m file and replace it with the following codes:</p>\n<pre><code class=\"lang-objc\">#import &quot;PointingTouchView.h&quot;\n#import &quot;DemoUtility.h&quot;\n\n@interface PointingTouchView ()\n\n@property(nonatomic, assign) CGPoint point;\n@property(nonatomic, strong) UIColor* fillColor;\n\n@end\n\n@implementation PointingTouchView\n\n-(void) awakeFromNib\n{\n    [super awakeFromNib];\n\n    self.point = INVALID_POINT;\n    self.fillColor = [[UIColor greenColor] colorWithAlphaComponent:0.5];\n}\n\n-(void) updatePoint:(CGPoint)point\n{\n    if (CGPointEqualToPoint(self.point, point)) {\n        return;\n    }\n\n    self.point = point;\n    [self setNeedsDisplay];\n}\n\n-(void) updatePoint:(CGPoint)point andColor:(UIColor*)color\n{\n    if (CGPointEqualToPoint(self.point, point) &amp;&amp; [self.fillColor isEqual:color]) {\n        return;\n    }\n\n    self.point = point;\n    self.fillColor = color;\n    [self setNeedsDisplay];\n}\n\n-(void) drawRect:(CGRect)rect\n{\n    [super drawRect:rect];\n    if (!CGPointEqualToPoint(self.point, INVALID_POINT)) {\n        CGContextRef context = UIGraphicsGetCurrentContext();\n        UIColor* strokeColor = [UIColor grayColor];\n        CGContextSetStrokeColorWithColor(context, strokeColor.CGColor);\n        UIColor* fillColor = self.fillColor;\n        CGContextSetFillColorWithColor(context, fillColor.CGColor); // Fill Color\n        CGContextSetLineWidth(context, 2.5);// Line width\n        CGContextAddArc(context, self.point.x, self.point.y, 40, 0, 2*M_PI, 0); // Draw a circle with radius 40\n        CGContextDrawPath(context, kCGPathFillStroke);\n    }\n}\n@end</code></pre>\n<p>In the code above, we implement the <code>updatePoint:</code> and <code>updatePoint:andColor:</code> methods to update the <code>point</code> and <code>fillColor</code> instance variables. Moreover, we implement the <code>-(void)drawRect:(CGRect)rect</code> method to draw a circle and fill with color for the touching point on the PointingTouchView. </p>\n<h3 id=\"implementing-the-tapflyviewcontroller\">Implementing the TapFlyViewController</h3>\n<h4 id=\"showing-live-video-stream\">Showing Live Video Stream</h4>\n<p>   In order to show the live video stream in the TapFlyViewController, we should import the following headers and implement the protocols of <code>DJICameraDelegate</code>, <code>DJIMissionManagerDelegate</code> firstly:</p>\n<pre><code class=\"lang-objc\">#import &quot;TapFlyViewController.h&quot;\n#import &quot;PointingTouchView.h&quot;\n#import &quot;DemoUtility.h&quot;\n#import &quot;StatusViewController.h&quot;\n\n@interface TapFlyViewController () &lt;DJICameraDelegate, DJIMissionManagerDelegate&gt;\n\n@end</code></pre>\n<p>  Then, invoke the <code>start</code> instance method of VideoPreviewer, set its view as <code>fpvView</code> property object and set its video stream decoder in the <code>viewWillAppear</code> method. We should also set DJICamera&#39;s delegate as TapFlyViewController in the <code>viewWillAppear</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [[VideoPreviewer instance] setDecoderWithProduct:[DJISDKManager product] andDecoderType:VideoPreviewerDecoderTypeSoftwareDecoder];\n    [[VideoPreviewer instance] setView:self.fpvView];\n\n    [DJIMissionManager sharedInstance].delegate = self;\n\n    DJICamera* camera = [DemoUtility fetchCamera];\n    if (camera) {\n        camera.delegate = self;\n    }\n\n    [[VideoPreviewer instance] start];\n}</code></pre>\n<p>Remember to invoke the <code>unSetView</code> method of VideoPreviewer and set its view to nil in the <code>viewWillDisappear</code> method to remove the previous glView:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [[VideoPreviewer instance] unSetView];\n    [[VideoPreviewer instance] setView:nil];\n}</code></pre>\n<p>Finally, let&#39;s implement the DJICamera&#39;s delegate method to show the live video stream on the <code>fpvView</code>:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJICameraDelegate Method\n-(void) camera:(DJICamera*)camera didReceiveVideoData:(uint8_t*)videoBuffer length:(size_t)length\n{\n    uint8_t* pBuffer = (uint8_t*)malloc(length);\n    memcpy(pBuffer, videoBuffer, length);\n    [[VideoPreviewer instance] push:pBuffer length:(int)length];\n}</code></pre>\n<h4 id=\"working-on-the-tapfly-mission\">Working on the TapFly Mission</h4>\n<h5 id=\"setup-uitapgesturerecognizer\">Setup UITapGestureRecognizer</h5>\n<p>   If we want to recognize the user&#39;s tap gesture on the screen, we need to create a UITapGestureRecognizer instance object in the <code>viewDidLoad</code> method and implement its action selector method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.title = @&quot;TapFly Mission&quot;;\n    UITapGestureRecognizer* tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(onScreenTouched:)];\n    [self.touchView addGestureRecognizer:tapGesture];    \n}</code></pre>\n<pre><code class=\"lang-objc\">-(void) onScreenTouched:(UIGestureRecognizer*)recognizer\n{\n    CGPoint point = [recognizer locationInView:self.touchView];\n    [self.touchView updatePoint:point andColor:[[UIColor greenColor] colorWithAlphaComponent:0.5]];\n\n    point = [DemoUtility pointToStreamSpace:point withView:self.touchView];\n    [self startTapFlyMissionWithPoint:point];\n}</code></pre>\n<p>In the <code>onScreenTouched:</code> method, we firstly get the CGPoint of touch event by invoking the <code>locationInView:</code> method of UIGestureRecognizer. Then we invoke the <code>updatePoint:andColor:</code> method of PointingTouchView to draw the point with green color on the screen. Lastly, we call the <code>pointToStreamSpace:withView:</code> method of DemoUtility to transform the touch point to a Video Stream Coordinate CGPoint object and pass it to the <code>startTapFlyMissionWithPoint</code> method to prepare the TapFly mission.</p>\n<h5 id=\"prepare-and-start-the-mission\">Prepare and Start the Mission</h5>\n<p>Before we start to create the DJITapFlyMission instance object, let&#39;s check the three properties we can set for each DJITapFlyMission:</p>\n<p><strong>1.</strong> AutoFlightSpeed</p>\n<p>You can set the aircraft&#39;s auto flight speed during the mission by setting this property for DJITapFlyMission. The range for it is [1, 10] m/s.</p>\n<p><strong>2.</strong> IsHorizontalObstacleAvoidanceEnabled</p>\n<p>If you want to allow the aircraft to bypass or move around an obstacle by going to the left or right of the obstacle when executing TapFly mission, you can set this property to YES. Otherwise, the aircraft will only go over an obstacle to avoid it.</p>\n<p><strong>3.</strong> ImageLocationToCalculateDirection</p>\n<p>This is where we should pass the coordinate transformation CGPoint property to, we can use the DemoUtility class&#39;s <code>pointToStreamSpace:withView:</code> method to do the coordinate transformation. This property is the image point from the video feed where the vision system should calculate the flight direction from.</p>\n<p>Now, let&#39;s implement the <code>startTapFlyMissionWithPoint:</code> method to prepare and start the TapFly mission as shown below:</p>\n<pre><code class=\"lang-objc\">-(void) startTapFlyMissionWithPoint:(CGPoint)point\n{\n    DJITapFlyMission* tapFlyMission = [[DJITapFlyMission alloc] init];\n    tapFlyMission.imageLocationToCalculateDirection = point;\n    tapFlyMission.autoFlightSpeed = self.speed;\n    tapFlyMission.isHorizontalObstacleAvoidanceEnabled = self.isHorizontalObstacleAvoidanceEnabled;\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] prepareMission:tapFlyMission withProgress:nil withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            weakReturn(target);\n            [target.touchView updatePoint:INVALID_POINT];\n            ShowResult(@&quot;Prepare Mission Error:%@&quot;, error.localizedDescription);\n        }\n        else\n        {\n            [target shouldShowStartMissionButton:YES];\n        }\n    }];\n}\n\n//Should Show StartMissionButton and hide StopMissionButton\n- (void) shouldShowStartMissionButton:(BOOL)show\n{\n    if (show) {\n        self.startMissionBtn.hidden = NO;\n        self.stopMissionBtn.hidden = YES;\n    }else\n    {\n        self.startMissionBtn.hidden = YES;\n        self.stopMissionBtn.hidden = NO;\n    }\n}</code></pre>\n<p>In the code above, we create an DJITapFlyMission instance object and pass the three properties to it. Then we invoke the <code>prepareMission:withProgress:withCompletion:</code> method of DJIMissionManager to prepare the mission. Once the mission is prepared successfully, we invoke the <code>showStartButton</code> method to show the Start Mission button for the user. Otherwise, invoke the <code>updatePoint</code> method of PointingTouchView by passing a  INVALID_POINT to remove the circle drawing on the view.</p>\n<p>Let&#39;s continue to implement the <code>onStartMissionButtonAction:</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onStartMissionButtonAction:(UIButton*)sender\n{\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n            ShowResult(@&quot;Start Mission:%@&quot;, error.localizedDescription);\n            if (!error) {\n                weakReturn(target);\n                [target shouldShowStartMissionButton:NO];\n            }else\n            {\n                ShowResult(@&quot;StartMission Failed: %@&quot;, error.description);\n            }\n    }];\n}</code></pre>\n<p>If we start the TapFly mission successfully, invoke the <code>shouldShowStartMissionButton:</code> method to hide the startMissionBtn and show the stopMissionBtn.</p>\n<p>During the TapFly mission execution, we can also implement the DJIMissionManagerDelegate methods to check the status. Let&#39;s set the DJIMissionManager&#39;s delegate as TapFlyViewController in the <code>viewWillAppear</code> method, and implement the following two delegate methods:</p>\n<pre><code class=\"lang-objc\">- (void)missionManager:(DJIMissionManager *_Nonnull)manager didFinishMissionExecution:(NSError *_Nullable)error\n{\n    ShowResult(@&quot;Mission Finished:%@&quot;, error.localizedDescription);\n    [self.touchView updatePoint:INVALID_POINT];\n    [self hideMissionControlButton];\n    self.isMissionRunning = NO;\n}\n\n- (void)missionManager:(DJIMissionManager *_Nonnull)manager missionProgressStatus:(DJIMissionProgressStatus *_Nonnull)missionProgress\n{\n    if ([missionProgress isKindOfClass:[DJITapFlyMissionStatus class]]) {\n        self.isMissionRunning = YES;\n        DJITapFlyMissionStatus* status = (DJITapFlyMissionStatus*)missionProgress;\n        CGPoint point = status.imageLocation;\n        point.x = point.x * self.fpvView.frame.size.width;\n        point.y = point.y * self.fpvView.frame.size.height;\n        if (CGPointEqualToPoint(point, CGPointZero)) {\n            point = INVALID_POINT;\n        }\n        if (status.executionState == DJITapFlyMissionExecutionStateExecuting) {\n            [self.touchView updatePoint:point andColor:[[UIColor greenColor] colorWithAlphaComponent:0.5]];\n            [self shouldShowStartMissionButton:NO];\n        }\n        else if (status.executionState == DJITapFlyMissionExecutionStateCannotExecute)\n        {\n            [self.touchView updatePoint:point andColor:[[UIColor redColor] colorWithAlphaComponent:0.5]];\n            [self shouldShowStartMissionButton:NO];\n        }\n\n        NSLog(@&quot;Direction:{%f, %f, %f} ExecState:%d&quot;, status.direction.x, status.direction.y, status.direction.z, (int)status.executionState);\n\n        [self.logString appendFormat:@&quot;Execution State:%@\\n&quot;, [DemoUtility stringFromPointingExecutionState:status.executionState]];\n        [self.logString appendFormat:@&quot;ByPass Direction:%@\\n&quot;, [DemoUtility stringFromByPassDirection:status.bypassDirection]];\n        [self.logString appendFormat:@&quot;Direction:{%f, %f, %f}\\n&quot;, status.direction.x, status.direction.y, status.direction.z];\n        [self.logString appendFormat:@&quot;View Point:{%f, %f}\\n&quot;, point.x, point.y];\n        [self.logString appendFormat:@&quot;Error:%@&quot;, status.error.localizedDescription];\n    }\n}</code></pre>\n<p>The first delegate method will be invoked when the mission finish executing. We can reset the UI and clear the circle drawing on the screen here.</p>\n<p>For the second delegate method, firstly, we need to check if the missionProgress is the <code>DJITapFlyMissionStatus</code> class. Then, we can get the <code>imageLocation</code> from it and transform it back to iOS UIView Coordinate System CGPoint object. With CGPoint object, we can update the circle&#39;s position and color drawing on the screen based on the <code>executionState</code>. Lastly, we can update the <code>logString</code> with status info.</p>\n<p>If you want to dynamically set the flight speed of TapFly mission, you can invoke the <code>setAutoFlightSpeed:withCompletion:</code> method of DJITapFlyMission in the <code>onSliderValueChanged:</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onSliderValueChanged:(UISlider*)slider\n{\n    float speed = slider.value * 10;\n    self.speed = speed;\n    self.speedLabel.text = [NSString stringWithFormat:@&quot;%0.1fm/s&quot;, speed];\n    if (self.isMissionRunning) {\n        [DJITapFlyMission setAutoFlightSpeed:self.speed withCompletion:^(NSError * _Nullable error) {\n          if(error){        \n            NSLog(@&quot;Set TapFly Auto Flight Speed:%0.1f Error:%@&quot;, speed, error.localizedDescription);\n          }\n        }];\n    }\n}</code></pre>\n<h5 id=\"stop-mission\">Stop Mission</h5>\n<p>Finally, let&#39;s implement the <code>onStopMissionButtonAction:</code> IBAction method to stop the TapFly mission:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onStopMissionButtonAction:(UIButton*)sender\n{\n\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] stopMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        ShowResult(@&quot;Stop Mission:%@&quot;, error.localizedDescription);\n        if (!error) {\n            weakReturn(target);\n            [target hideMissionControlButton];\n            target.isMissionRunning = NO;\n        }\n    }];\n}</code></pre>\n<p>For more implementation details of the TapFlyViewController file, please check the Github source code. </p>\n<p>Now let&#39;s build and run the project, if everything goes well, you should be able to use the TapFly mission of Phantom 4 now.</p>\n<blockquote>\n<p><strong>Important</strong>: Remember to switch the remote controller to <strong>P</strong> mode before you test the TapFly mission.</p>\n</blockquote>\n<p>Here are two gif animations for you to get a better understanding of using the TapFly mission, especially the <strong>Horizontal Obstacle Avoidance</strong> feature:</p>\n<ul>\n<li>Enable Horizontal Obstacle Avoidance</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyMissionHoriGif.gif\" alt=\"tapFlyMissionHoriGif\"></p>\n<p>   In the animation, you can see there are two flat surface obstacles stand towards the Phantom 4. We tap on the right obstacle and ask the Phantom 4 to fly towards it. With the help of the front obstacle sensors, Phantom 4 won&#39;t hit the obstacle and crash. You may notice that we switch on the &quot;Horizontal Obstacle Avoidance Enable&quot; before the TapFly mission start. </p>\n<p>   Press the <strong>GO</strong> button, Phantom 4 will start to fly towards it. When flying close to the obstacle, the Obstacle Sensing System will help to adjust the aircraft&#39;s attitude and fly towards the right side of it. </p>\n<ul>\n<li>Disable Horizontal Obstacle Avoidance</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyMissionUpwardsGif.gif\" alt=\"tapFlyMissionUpwardsGif\"></p>\n<p>   If we switch off the &quot;Horizontal Obstacle Avoidance Enable&quot;, when the Phantom 4 fly close to the obstacle, it will rise to avoid the obstacle and continue to fly towards the origin direction. When you want to stop the mission, just press the <strong>X</strong> button, Phantom 4 will stop immediately and hover there.</p>\n<h2 id=\"implementing-activetrack-mission\">Implementing ActiveTrack Mission</h2>\n<h3 id=\"working-on-the-ui-of-activetrackviewcontroller\">Working on the UI of ActiveTrackViewController</h3>\n<p><strong>1.</strong> Now let&#39;s create a new UIView class and name it as &quot;TrackingRenderView&quot;. We use this UIView to track the user&#39;s UITouch Event and draw the tracking rectangle of the object on it.</p>\n<p><strong>2.</strong> Let&#39;s go back to the ActiveTrackViewController object in the storyboard. Drag and drop two UIView objects to the view controller and adjust their size to be full screen. Create two IBOutlets for them in the class extension part of ActiveTrackViewController.m file and connect them between Storyboard and the .m file as shown below:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIView *fpvView;\n@property (weak, nonatomic) IBOutlet TrackingRenderView *renderView;</code></pre>\n<p>Remember to place the fpvView at the bottom, and change the top UIView object&#39;s class to &quot;TrackingRenderView&quot;.</p>\n<p><strong>3.</strong> Drag and drop a UILabel object, a UIButton object and a UISwitch object on top of the View of Active Track View Controller and place them on the right positions as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/activeTrackUI.png\" alt=\"activeTrackVC\"></p>\n<p>For more details of the UI customization, please check the Github source code of this demo project. Lastly, create two IBOutlet properties and two IBAction methods for them in the ActiveTrackViewController.m file as shown below:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIButton* stopButton;\n@property (weak, nonatomic) IBOutlet UILabel *retreatEnabledLabel;</code></pre>\n<pre><code class=\"lang-objc\">- (IBAction)recommendedConfigButtonAction:(id)sender \n{\n}\n\n- (IBAction) onStopButtonClicked:(id)sender\n{\n}</code></pre>\n<h3 id=\"implementing-the-trackingrenderview\">Implementing the TrackingRenderView</h3>\n<p>Let&#39;s go to TrackingRenderView.h file and replace it with the following codes:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@protocol TrackingRenderViewDelegate &lt;NSObject&gt;\n\n@optional\n\n-(void) renderViewDidTouchAtPoint:(CGPoint)point;\n\n-(void) renderViewDidMoveToPoint:(CGPoint)endPoint fromPoint:(CGPoint)startPoint isFinished:(BOOL)finished;\n\n@end\n\n@interface TrackingRenderView : UIView\n\n@property(nonatomic, weak) id&lt;TrackingRenderViewDelegate&gt; delegate;\n\n@property(nonatomic, assign) CGRect trackingRect;\n\n@property(nonatomic, assign) BOOL isDotLine;\n\n@property(nonatomic, strong) NSString* text;\n\n-(void) updateRect:(CGRect)rect fillColor:(UIColor*)fillColor;\n\n@end</code></pre>\n<p>You can see a few things are happening here:</p>\n<p><strong>1.</strong> Firstly, we create two TrackingRenderViewDelegate methods, they are used to track your single touch event and drawing rectangle touch event. </p>\n<p><strong>2.</strong> We use the <code>trackingRect</code> property to store the updated tracking CGRect of moveing subject and draw it on the TrackingRenderView. The <code>isDottedLine</code> BOOL value is used for drawing dotted line. The <code>text</code> NSString property is used to store and draw text on the TrackingRenderView.</p>\n<p><strong>3.</strong> Lastly, we create the <code>updateRect:fillColor:</code> method to update the tracking rect and fill its color.</p>\n<p>Next, let&#39;s come to the TrackingRenderView.m file and replace it with the following codes:</p>\n<pre><code class=\"lang-objc\">#import &quot;TrackingRenderView.h&quot;\n#define TEXT_RECT_WIDTH (40)\n\n@interface TrackingRenderView ()\n@property(nonatomic, strong) UIColor* fillColor;\n@property(nonatomic, assign) CGPoint startPoint;\n@property(nonatomic, assign) CGPoint endPoint;\n@property(nonatomic, assign) BOOL isMoved;\n@end\n\n@implementation TrackingRenderView\n#pragma mark - UIResponder Methods\n\n- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event\n{\n    self.isMoved = NO;\n    self.startPoint = [[touches anyObject] locationInView:self];\n}\n\n- (void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event\n{\n    self.isMoved = YES;\n    self.endPoint = [[touches anyObject] locationInView:self];\n    if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(renderViewDidMoveToPoint:fromPoint:isFinished:)]) {\n        [self.delegate renderViewDidMoveToPoint:self.endPoint fromPoint:self.startPoint isFinished:NO];\n    }\n}\n\n- (void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event\n{\n    self.endPoint = [[touches anyObject] locationInView:self];\n    if (self.isMoved) {\n        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(renderViewDidMoveToPoint:fromPoint:isFinished:)]) {\n            [self.delegate renderViewDidMoveToPoint:self.endPoint fromPoint:self.startPoint isFinished:YES];\n        }\n    }\n    else\n    {\n        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(renderViewDidTouchAtPoint:)]) {\n            [self.delegate renderViewDidTouchAtPoint:self.startPoint];\n        }\n    }\n}\n\n- (void)touchesCancelled:(nullable NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event\n{\n    self.endPoint = [[touches anyObject] locationInView:self];\n    if (self.isMoved) {\n        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(renderViewDidMoveToPoint:fromPoint:isFinished:)]) {\n            [self.delegate renderViewDidMoveToPoint:self.endPoint fromPoint:self.startPoint isFinished:YES];\n        }\n    }\n}\n\n-(void) updateRect:(CGRect)rect fillColor:(UIColor*)fillColor\n{\n    if (CGRectEqualToRect(rect, self.trackingRect)) {\n        return;\n    }\n    self.fillColor = fillColor;\n    self.trackingRect = rect;\n    [self setNeedsDisplay];\n}\n\n-(void) setText:(NSString *)text\n{\n    if ([_text isEqualToString:text]) {\n        return;\n    }\n    _text = text;\n    [self setNeedsDisplay];\n}\n\n-(void) drawRect:(CGRect)rect\n{\n    [super drawRect:rect];\n    if (CGRectEqualToRect(self.trackingRect, CGRectNull)) {\n        return;\n    }\n\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    UIColor* strokeColor = [UIColor grayColor];\n    CGContextSetStrokeColorWithColor(context, strokeColor.CGColor);\n    UIColor* fillColor = self.fillColor;\n    CGContextSetFillColorWithColor(context, fillColor.CGColor); //Fill Color\n    CGContextSetLineWidth(context, 1.8); //Width of line\n\n    if (self.isDottedLine) {\n        CGFloat lenghts[] = {10, 10};\n        CGContextSetLineDash(context, 0, lenghts, 2);\n    }\n    CGContextAddRect(context, self.trackingRect);\n    CGContextDrawPath(context, kCGPathFillStroke);\n    if (self.text) {\n        CGFloat origin_x = self.trackingRect.origin.x + 0.5*self.trackingRect.size.width - 0.5* TEXT_RECT_WIDTH;\n        CGFloat origin_y = self.trackingRect.origin.y + 0.5*self.trackingRect.size.height - 0.5* TEXT_RECT_WIDTH;\n        CGRect textRect = CGRectMake(origin_x , origin_y, TEXT_RECT_WIDTH, TEXT_RECT_WIDTH);\n        NSMutableParagraphStyle* paragraphStyle = [[NSParagraphStyle defaultParagraphStyle] mutableCopy];\n        paragraphStyle.lineBreakMode = NSLineBreakByCharWrapping;\n        paragraphStyle.alignment = NSTextAlignmentCenter;\n        UIFont* font = [UIFont boldSystemFontOfSize:35];\n        NSDictionary* dic = @{NSFontAttributeName:font,NSParagraphStyleAttributeName:paragraphStyle,NSForegroundColorAttributeName:[UIColor whiteColor]};\n        [self.text drawInRect:textRect withAttributes:dic];\n    }\n}\n@end</code></pre>\n<p>Here, we implement the four event-handling methods for touches to track user&#39;s multi touch and invoke the related TrackingRenderViewDelegate methods. Also, we implement the <code>-(void)drawRect:(CGRect)rect</code> method to draw the tracking rectangle, dotted line and text on the TrackingRenderView.</p>\n<h3 id=\"implementing-the-activetrackviewcontroller\">Implementing the ActiveTrackViewController</h3>\n<h4 id=\"showing-live-video-stream\">Showing Live Video Stream</h4>\n<p>   In order to show the live video stream of Phantom 4&#39;s camera on the app, let&#39;s come to ActiveTrackViewController.m file and implement its class extension part firstly. Import the following headers and implement the protocols of <code>DJICameraDelegate</code>, <code>DJIMissionManagerDelegate</code> and <code>TrackingRenderViewDelegate</code>:</p>\n<pre><code class=\"lang-objc\">#import &quot;ActiveTrackViewController.h&quot;\n#import &quot;TrackingRenderView.h&quot;\n#import &quot;DemoUtility.h&quot;\n#import &quot;StatusViewController.h&quot;\n\n@interface ActiveTrackViewController () &lt;DJICameraDelegate, DJIMissionManagerDelegate, TrackingRenderViewDelegate&gt;\n\n@end</code></pre>\n<p>  Next, we should invoke the <code>start</code> instance method of VideoPreviewer, set its view as <code>fpvView</code> property object and set its video stream decoder in the <code>viewWillAppear</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n    [[VideoPreviewer instance] setDecoderWithProduct:[DJISDKManager product] andDecoderType:VideoPreviewerDecoderTypeSoftwareDecoder];\n    [[VideoPreviewer instance] setView:self.fpvView];\n\n    [DJIMissionManager sharedInstance].delegate = self;  \n    DJICamera* camera = [DemoUtility fetchCamera];\n    if (camera) {\n        camera.delegate = self;\n    }\n\n    [[VideoPreviewer instance] start];\n}</code></pre>\n<p>Remember to invoke the <code>unSetView</code> method of VideoPreviewer and set its view to nil in the <code>viewWillDisappear</code> method to remove the previous glView:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n    [[VideoPreviewer instance] unSetView];\n    [[VideoPreviewer instance] setView:nil];\n}</code></pre>\n<p>Lastly, we should set DJICamera&#39;s delegate as ActiveTrackViewController in the <code>viewWillAppear</code> method and implement the following method to show the live video stream on the <code>fpvView</code>:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJICameraDelegate Method\n-(void) camera:(DJICamera*)camera didReceiveVideoData:(uint8_t*)videoBuffer length:(size_t)length\n{\n    uint8_t* pBuffer = (uint8_t*)malloc(length);\n    memcpy(pBuffer, videoBuffer, length);\n    [[VideoPreviewer instance] push:pBuffer length:(int)length];\n}</code></pre>\n<h4 id=\"setup-activetrack-mission\">Setup ActiveTrack Mission</h4>\n<h5 id=\"prepare-and-start-the-mission\">Prepare and Start the Mission</h5>\n<p>  <strong>1.</strong> The Phantom 4&#39;s ActiveTrack Mission can track both moving subjects and humans.</p>\n<ul>\n<li><p>Track Moving Subjects</p>\n<p>For moving subjests, you need to provide a CGRect struct of tracking rectangle to the DJIActiveTrackMission object&#39;s <code>rect</code> property.</p>\n</li>\n</ul>\n<pre><code class=\"lang-objc\">       DJIActiveTrackMission* mission = [[DJIActiveTrackMission alloc] init];\n       mission.rect = CGRectMake(10, 20, 50, 100);</code></pre>\n<ul>\n<li><p>Track Humans</p>\n<p>For humans, you can either provide a CGRect struct of tracking rectangle or a CGRect stuct with just CGPoint. Like you can tap on the human on your iPhone&#39;s screen.</p>\n</li>\n</ul>\n<pre><code class=\"lang-objc\">       DJIActiveTrackMission* mission = [[DJIActiveTrackMission alloc] init];\n       mission.rect = CGRectMake(10, 20, 0, 0);</code></pre>\n<p><strong>2.</strong> Now, let&#39;s set the TrackingRenderView&#39;s delegate as ActiveTrackViewController in the <code>viewDidLoad</code> method and implement the delegate methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];    \n    self.renderView.delegate = self;\n}</code></pre>\n<pre><code class=\"lang-objc\">#pragma mark TrackingRenderView Delegate Methods\n-(void) renderViewDidTouchAtPoint:(CGPoint)point\n{\n    if (self.isTrackingMissionRunning &amp;&amp; !self.isNeedConfirm) {\n        return;\n    }\n\n    if (self.isNeedConfirm) {\n        NSLog(@&quot;TrackingRect:{%0.1f, %0.1f, %0.1f, %0.1f} Point:{%0.1f, %0.1f}&quot;, self.currentTrackingRect.origin.x, self.currentTrackingRect.origin.y, self.currentTrackingRect.size.width, self.currentTrackingRect.size.height, point.x, point.y);\n        CGRect largeRect = CGRectInset(self.currentTrackingRect, -10, -10);\n        if (CGRectContainsPoint(largeRect, point)) {\n            [DJIActiveTrackMission acceptConfirmationWithCompletion:^(NSError * _Nullable error) {\n                ShowResult(@&quot;Confirm Tracking:%@&quot;, error.localizedDescription);\n            }];\n        }\n        else\n        {\n            [DJIActiveTrackMission rejectConfirmationWithCompletion:^(NSError * _Nullable error) {\n                ShowResult(@&quot;Cancel Tracking:%@&quot;, error.localizedDescription);\n            }];\n        }\n    }\n    else\n    {\n        weakSelf(target);\n        point = [DemoUtility pointToStreamSpace:point withView:self.renderView];\n        DJIActiveTrackMission* mission = [[DJIActiveTrackMission alloc] init];\n        mission.rect = CGRectMake(point.x, point.y, 0, 0);\n        [[DJIMissionManager sharedInstance] prepareMission:mission withProgress:nil withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                ShowResult(@&quot;Prepare Mission Error:%@&quot;, error.localizedDescription);\n                if (error) {\n                    weakReturn(target);\n                    target.renderView.isDottedLine = NO;\n                    [target.renderView updateRect:CGRectNull fillColor:nil];\n                }\n            }\n            else\n            {\n                [[DJIMissionManager sharedInstance] startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n                    ShowResult(@&quot;Start Mission:%@&quot;, error.localizedDescription);\n                    if (error) {\n                        weakReturn(target);\n                        target.renderView.isDottedLine = NO;\n                        [target.renderView updateRect:CGRectNull fillColor:nil];\n                    }\n                }];\n            }\n        }];\n    }\n}\n\n-(void) renderViewDidMoveToPoint:(CGPoint)endPoint fromPoint:(CGPoint)startPoint isFinished:(BOOL)finished\n{\n    if (self.isTrackingMissionRunning) {\n        return;\n    }\n\n    self.renderView.isDottedLine = YES;\n    self.renderView.text = nil;\n    CGRect rect = [DemoUtility rectWithPoint:startPoint andPoint:endPoint];\n    [self.renderView updateRect:rect fillColor:[[UIColor greenColor] colorWithAlphaComponent:0.5]];\n    if (finished) {\n        CGRect rect = [DemoUtility rectWithPoint:startPoint andPoint:endPoint];\n        [self startMissionWithRect:rect];\n    }\n}</code></pre>\n<p>  The <code>renderViewDidTouchAtPoint:</code> delegate method get invoked when you do single touch on the screen, there are two situations for it:</p>\n<ul>\n<li><p>If you draw a tracking rectangle on a moving subject, and the vision system need to confirm it, you can touch the rectangle and invoke the <code>acceptConfirmationWithCompletion:</code> method of the DJIActiveTrackMission class, if you want to reject the confirmation, you can touch outside the rectangle, and invoke the <code>rejectConfirmationWithCompletion:</code> method. </p>\n</li>\n<li><p>If you want to track a human, you can touch the human on the screen. By doing that, you will get a CGPoint from the delegate method and invoke the DemoUtility&#39;s <code>pointToStreamSpace:withView:</code> method to transform the touch CGPoint to a Video Stream Coordinate CGPoint object. Then pass it to the <code>rect</code> property of DJIActiveTrackMission and invoke the following method of DJIMissionManager to prepare the ActiveTrack mission:</p>\n</li>\n</ul>\n<pre><code class=\"lang-objc\">- (void)prepareMission:(DJIMission *_Nonnull)mission withProgress:(DJIMissionProgressHandler)preparationProgress withCompletion:(DJICompletionBlock)completion;</code></pre>\n<p>  Once the mission finish the preparation, you can invoke the following method to start the ActiveTrack mission:</p>\n<pre><code class=\"lang-objc\">- (void)startMissionExecutionWithCompletion:(DJICompletionBlock)completion;</code></pre>\n<p>   Moreover, the <code>renderViewDidMoveToPoint:fromPoint:isFinished:</code> delegate method get invoked when user try to draw a rectangle on the screen to track moving subject. You can get the startPoint and endPoint from the delegate method and invoke the DemoUtility&#39;s <code>rectWithPoint:andPoint:</code> method to convert them to a CGRect object. When you finish drawing the rectangle, invoke the <code>startMissionWithRect:</code> method to start the mission.  </p>\n<p><strong>3.</strong> Let&#39;s implement the <code>startMissionWithRect:</code> method here:</p>\n<pre><code class=\"lang-objc\">-(void) startMissionWithRect:(CGRect)rect\n{\n    CGRect normalizedRect = [DemoUtility rectToStreamSpace:rect withView:self.renderView];\n    weakSelf(target);\n    NSLog(@&quot;Start Mission:{%f, %f, %f, %f}&quot;, normalizedRect.origin.x, normalizedRect.origin.y, normalizedRect.size.width, normalizedRect.size.height);\n    DJIActiveTrackMission* trackMission = [[DJIActiveTrackMission alloc] init];\n    trackMission.rect = normalizedRect;\n    trackMission.isRetreatEnabled = self.isRetreatEnabled;\n    [[DJIMissionManager sharedInstance] prepareMission:trackMission withProgress:nil withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            weakReturn(target);\n            target.renderView.isDottedLine = NO;\n            [target.renderView updateRect:CGRectNull fillColor:nil];\n            target.isTrackingMissionRunning = NO;\n            ShowResult(@&quot;Prepare Error:%@&quot;, error.localizedDescription);\n        }\n        else\n        {\n            [[DJIMissionManager sharedInstance] startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n                ShowResult(@&quot;Start Mission:%@&quot;, error.localizedDescription);\n                if (error) {\n                    weakReturn(target);\n                    target.renderView.isDottedLine = NO;\n                    [target.renderView updateRect:CGRectNull fillColor:nil];\n                    target.isTrackingMissionRunning = NO;\n                }\n            }];\n        }\n    }];\n}</code></pre>\n<p>In the code above, we firstly invoke the <code>rectToStreamSpace:withView:</code> method of DemoUtility to transform the drawing rectangle to a Video Stream coordinate rectangle, call it <code>normalizedRect</code>. Then create the DJIActiveTrackMission instance object and pass the <code>normalizedRect</code> to its <code>rect</code> property. Also, you can set the <code>isRetreatEnabled</code> variable to enable the retreat feature. Here is the details of the retreat feature:</p>\n<pre><code class=\"lang-objc\">/**\n *  YES if the aircraft can retreat (fly backwards) when the target comes toward it. If no, the aircraft will not retreat and instead rotate the gimbal pitch down to track the target as it goes underneath. If the target goes beyond the gimbal&#39;s pitch stop, the target will be lost and the mission will stop. Default is NO.\n */\n@property(nonatomic, assign) BOOL isRetreatEnabled;</code></pre>\n<p>Moreover, invoke the <code>preparMission:withProgress:withCompletion:</code> and <code>startMissionExecutionWithCompletion:</code> methods of DJIMissionManager to start the ActiveTrack Mission.</p>\n<p>Finally, we can invoke the <code>setRecommendedConfigurationWithCompletion:</code> method of DJIActiveTrackMission in the <code>viewWillAppear:</code> method to set the recommended camera and gimbal configuration that optimizes performance for the ActiveTrack Mission in most environments:</p>\n<pre><code class=\"lang-objc\">-(void) viewWillAppear:(BOOL)animated\n{\n    [super viewWillAppear:animated];\n\n    [[VideoPreviewer instance] setDecoderWithProduct:[DJISDKManager product] andDecoderType:VideoPreviewerDecoderTypeSoftwareDecoder];\n    [[VideoPreviewer instance] setView:self.fpvView];\n    [DJIMissionManager sharedInstance].delegate = self;\n    DJICamera* camera = [DemoUtility fetchCamera];\n    if (camera) {\n        camera.delegate = self;\n    }\n    [DJIActiveTrackMission setRecommendedConfigurationWithCompletion:^(NSError * _Nullable error) { \n        if(error){\n                ShowResult(@&quot;Set Recommended Camera Settings:%@&quot;, error.localizedDescription);\n        }\n    }];\n}</code></pre>\n<h5 id=\"djimissionmanagerdelegate-method\">DJIMissionManagerDelegate Method</h5>\n<p>   During the ActiveTrack mission execution, we can use the DJIMissionManagerDelegate methods to update the tracking rectangle on the screen and get the status info of the mission. Let&#39;s implement them as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - DJIMissionManagerDelegate Methods\n- (void)missionManager:(DJIMissionManager *_Nonnull)manager didFinishMissionExecution:(NSError *_Nullable)error\n{\n    [self.renderView updateRect:CGRectNull fillColor:nil];\n    self.stopButton.hidden = YES;\n    self.isTrackingMissionRunning = NO;\n}\n\n- (void)missionManager:(DJIMissionManager *_Nonnull)manager missionProgressStatus:(DJIMissionProgressStatus *_Nonnull)missionProgress\n{\n    if ([missionProgress isKindOfClass:[DJIActiveTrackMissionStatus class]]) {\n        self.isTrackingMissionRunning = YES;\n        self.stopButton.hidden = NO;\n        DJIActiveTrackMissionStatus* status = (DJIActiveTrackMissionStatus*)missionProgress;\n        CGRect rect = [DemoUtility rectFromStreamSpace:status.trackingRect withView:self.renderView];\n        self.currentTrackingRect = rect;\n        if (status.executionState == DJIActiveTrackMissionExecutionStateWaitingForConfirmation) {\n            NSLog(@&quot;Mission Need Confirm...&quot;);\n            self.renderView.text = @&quot;?&quot;;\n            if (!self.isNeedConfirm) {\n                self.isNeedConfirm = YES;\n            }\n        }\n        else if (status.executionState == DJIActiveTrackMissionExecutionStateTargetLost)\n        {\n            NSLog(@&quot;Mission Target Lost...&quot;);\n            self.renderView.isDottedLine = NO;\n            self.renderView.text = nil;\n            self.isNeedConfirm = NO;\n            [self.renderView updateRect:CGRectNull fillColor:nil];\n        }\n        else if (status.executionState == DJIActiveTrackMissionExecutionStateTracking ||\n                 status.executionState == DJIActiveTrackMissionExecutionStateTrackingWithLowConfidence)\n        {\n            self.renderView.isDottedLine = NO;\n            self.renderView.text = nil;\n            self.isNeedConfirm = NO;\n            [self.renderView updateRect:rect fillColor:[[UIColor greenColor] colorWithAlphaComponent:0.5]];\n            NSLog(@&quot;Mission Tracking...&quot;);\n        }\n        else if (status.executionState == DJIActiveTrackMissionExecutionStateCannotContinue)\n        {\n            NSLog(@&quot;Mission Waiting...&quot;);\n            self.renderView.isDottedLine = NO;\n            self.renderView.text = nil;\n            self.isNeedConfirm = NO;\n            [self.renderView updateRect:rect fillColor:[[UIColor redColor] colorWithAlphaComponent:0.5]];\n        }\n\n        [self.logString appendFormat:@&quot;Execution State:%@\\n&quot;, [DemoUtility stringFromTrackingExecutionState:status.executionState]];\n        [self.logString appendFormat:@&quot;trackingRect:{%f, %f, %f, %f}\\n&quot;, status.trackingRect.origin.x, status.trackingRect.origin.y, status.trackingRect.size.width, status.trackingRect.size.height];\n        [self.logString appendFormat:@&quot;Error:%@&quot;, status.error.localizedDescription];\n\n    }\n}</code></pre>\n<p>   In the first delegate method, we invoke the <code>updateRect:fillColor:</code> method of TrackingRenderView to reset the rectangle drawing and reset the related properties.</p>\n<p>   In the second delegate method, we firstly check if the DJIMissionProgressStatus is <code>DJIActiveTrackMissionStatus</code> class. Then we do the <code>executionState</code> checking from the <code>DJIActiveTrackMissionStatus</code> object. There are several executionState as shown below:</p>\n<pre><code class=\"lang-objc\">/**\n *  Current ActiveTrack Mission execution state.\n */\ntypedef NS_ENUM(NSInteger, DJIActiveTrackMissionExecutionState)\n{\n    /**\n     *  The ActiveTrack Mission is tracking a target.\n     */\n    DJIActiveTrackMissionExecutionStateTracking,\n    /**\n     *  The ActiveTrack Mission is tracking a target with low confidence. This is only an indication that either the aircraft will soon ask for confirmation that the target is correct, or may loose tracking the target entirely if confidence doesn&#39;t improve.\n     */\n    DJIActiveTrackMissionExecutionStateTrackingWithLowConfidence,\n    /**\n     * At the start of a mission, when a mission is resumed or anytime the aircraft looses sufficient confidence the target it is tracking, the aircraft will ask for confirmation that it is tracking the correct object. The trackingRect in DJIActiveTrackMissionStatus can be used to see what object the aircraft is tracking. In this state, the aircraft will hover in place, but continue to track the target. The methods `acceptConfirmationWithCompletion:` or `rejectConfirmationWithCompletion` can be used to to confirm or reject the tracking rectangle.\n     */\n    DJIActiveTrackMissionExecutionStateWaitingForConfirmation,\n    /**\n     *  Used when tracking cannot continue for reasons other than low confidence. User returned error to see more details.\n     */\n    DJIActiveTrackMissionExecutionStateCannotContinue,\n    /**\n     *  The tracking target lost.\n     */\n    DJIActiveTrackMissionExecutionStateTargetLost,\n    /**\n     *  Unknown state.\n     */\n    DJIActiveTrackMissionExecutionStateUnknown,\n};</code></pre>\n<p>   In each checking, we update the TrackingRenderView&#39;s rectangle drawing and fill color. Also, we update the <code>logString</code> property with DJIActiveTrackMissionStatus object.</p>\n<h5 id=\"stop-mission\">Stop Mission</h5>\n<p>Finally, let&#39;s implement the <code>stopMissionExecutionWithCompletion:</code> method of DJIMissionManager to stop the ActiveTrack Mission. Replace the method content of the <code>onStopButtonClicked:</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction) onStopButtonClicked:(id)sender\n{\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] stopMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        ShowResult(@&quot;Stop Mission:%@&quot;, error.localizedDescription);\n        if (!error) {\n            weakReturn(target);\n            target.stopButton.hidden = YES;\n            [target.renderView updateRect:CGRectNull fillColor:nil];\n            target.isTrackingMissionRunning = NO;\n        }\n    }];\n}</code></pre>\n<p>In order to show the status log, let&#39;s implement the <code>prepareForSegue:sender:</code> method to pass the <code>logString</code> property to its <code>statusText</code> property.</p>\n<pre><code class=\"lang-objc\">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    StatusViewController *statusVC = (StatusViewController *)segue.destinationViewController;\n    [statusVC setStatusText:self.logString];\n}</code></pre>\n<p>For more implementation details of the ActiveTrackViewController.m file, please check the Github source code. </p>\n<p>Now let&#39;s build and run the project, if everything goes well, you should be able to use the ActiveTrack mission of Phantom 4 now. </p>\n<blockquote>\n<p><strong>Important</strong>: Remember to switch the remote controller to <strong>P</strong> mode before you test the ActiveTrack mission.</p>\n</blockquote>\n<p>Here is a gif animation for you to get a better understanding of using the ActiveTrack mission:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/ActiveTrackMissionGif.gif\" alt=\"ActiveTrackMissionGif\"></p>\n<p>   In the animation, you can see there is a person standing there, you can touch the screen to draw a green rectangle on him. Then the rectangle will turn red and a question mark will appear to ask you for confirmation. You can tap on the rectangle to confirm it or tap outside to reject it. </p>\n<p>   After the confirmation, the ActiveTrack mission starts. The person walks around and the green rectangle will follow it to track its movement. This means that Phantom 4 is now tracking you automatically!</p>\n<p>   Press the <strong>X</strong> button if you want to stop the ActiveTrack mission. By the way, you can try to switch on the &quot;RetreatEnabled&quot; switcher on the bottom right corner of the screen to enable the <strong>Retreat</strong> feature. Once you go towards the Phantom 4, it will fly backwards.</p>\n<h3 id=\"using-the-dji-assistant-2-for-mission-testing\">Using the DJI Assistant 2 for Mission Testing</h3>\n<p>Since most of our developers don&#39;t have a perfect testing environment, like a big indoor space, wide backyard, etc. If we need to go outdoors and bring our latop to debug and test our application everytime, it&#39;s time consuming and not efficient. </p>\n<p>Luckily, we have a new DJI Assistant 2 (Includes the 3D Simulator) for you to test the mission easily on your Mac. The simulator creates a virtual 3D environment from flight data transmitted to the Mac.</p>\n<p>You can check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-Assistant-2-Simulator\">Using DJI Assistant 2 Simulator</a> for its basic usage.</p>\n<p>Now you can connect your iPhone which is running the demo application to the remote controller, and start to test the <strong>TapFly</strong> and <strong>ActiveTrack</strong> missions on the simulator of the DJI Assistant 2.  </p>\n<p>Moreover, another good news is you can use the DJI Bridge App to test the application directly on the iOS Simulator! If you are not familiar with the DJI Bridge App, please check the <a href=\"./BridgeAppDemo.html\">DJI Bridge App Tutorial</a>. </p>\n<p>   Let&#39;s go to RootViewController.m file and add a Macro on top of the class extension part as shown below:</p>\n<pre><code class=\"lang-objc\">#define ENTER_DEBUG_MODE 1\n\n@interface RootViewController ()&lt;DJISDKManagerDelegate&gt;\n@property (weak, nonatomic) IBOutlet UIButton *tapFlyMissionButton;\n@property (weak, nonatomic) IBOutlet UIButton *activeTrackMissionButton;\n@end</code></pre>\n<p>  Then modify the DJISDKManagerDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    if (error) {\n        NSString* message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n        [self.tapFlyMissionButton setEnabled:NO];\n        [self.activeTrackMissionButton setEnabled:NO];\n        [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n#if ENTER_DEBUG_MODE\n        [DJISDKManager enterDebugModeWithDebugId:@&quot;192.168.1.106&quot;];\n#else\n        [DJISDKManager startConnectionToProduct];\n#endif\n    }\n}</code></pre>\n<p>  Now, make sure your Mac and your iPhone(Running DJI Bridge App) connect to the same WiFi network, pass the <strong>Debug ID</strong> on the DJI Bridge App to the <code>enterDebugModeWithDebugId:</code> method. Build and run the app on the iOS Simulator with Xcode, control the remote controller to take off the aircraft in the simulator. You can start to test the <strong>TapFly</strong> and <strong>ActiveTrack</strong> mission directly on your Mac now! </p>\n<p>  Here are two screenshots of testing the two missions on your Mac:</p>\n<ul>\n<li>TapFly Mission Test</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/tapFlyTest.png\" alt=\"setupButton\"></p>\n<ul>\n<li>AciveTrack Mission Test</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/iOS/Phantom4Missions/activeTrackTest.png\" alt=\"setupButton\"></p>\n<h3 id=\"summary\">Summary</h3>\n<p>  Congratulations! You&#39;ve finished the demo project and implement the two cool <strong>TapFly</strong> and <strong>ActiveTrack</strong> missions using DJI Mobile SDK. It&#39;s easy and straightforward. You&#39;ve learned how to use the DJITapFlyMission, DJIActiveTrackMission and DJIMissionManager to implement the features. Also, you know how to setup and use the simulator of DJI Assistant 2 and DJI Bridge App to test the two missions on your Mac easily. </p>\n<p>  But, In order to make a cool <strong>TapFly</strong> and <strong>ActiveTrack</strong> mission application, you still have a long way to go. You can add more necessary features like showing the battery percentage, GPS signal quality, add a checklist like DJI Go app to check the aircraft status before flying, etc. Good luck and hope you enjoy this tutorial!</p>","meta":{"title":"Creating a TapFly and ActiveTrack Missions Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-Phantom4Missions"},"locale":"en"}{"content":"<!-- toc -->\n\n<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to build a cool panorama app. With the help of the powerful DJI Mobile SDK and OpenCV libraries, it is actually easy. You will use the Waypoint feature of Intelligent Navigation and Virtual Stick to rotate the aircraft to take photos. The panorama application can be broken down into several simple tasks, all you need to do is to follow the tutorial step by step. Let&#39;s get started!</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/workFlow.png\" alt=\"several tasks\"></p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"implementing-the-fpv\">Implementing the FPV</h2>\n<p><strong>1.</strong> Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;PanoDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s import the <strong>DJISDK.framework</strong> and <strong>VideoPreviewer</strong> to the project. If you are not familiar with the process of importing DJI SDK and VideoPreviewer, please check these two tutorials: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> and <a href=\"./index.html#Implementing-the-First-Person-View\">Creating a Camera Application</a>, for details.</p>\n<p><strong>2.</strong> In the <strong>Main.storyboard</strong>, add a new View Controller called <strong>CaptureViewController</strong> and set it as the root View Controller for the new View Controller you just added in <strong>Main.storyboard</strong>:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/CaptureViewController.png\" alt=\"CaptureViewController\"></p>\n<p><strong>3.</strong> Add a UIView inside the View Controller and set it as an IBOutlet called &quot;<strong>fpvPreviewView</strong>&quot; in the <strong>CaptureViewController.h</strong>:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@interface CaptureViewController : UIViewController\n@property (strong, nonatomic) IBOutlet UIView *fpvPreviewView;\n@end</code></pre>\n<p>Import the <strong>DJISDK</strong> and <strong>VideoPreviewer</strong> header files to <strong>CaptureViewController.m</strong>. Then implement two delegate protocols as shown below:</p>\n<pre><code class=\"lang-objc\">#import &quot;CaptureViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &quot;VideoPreviewer.h&quot;\n\n#define weakSelf(__TARGET__) __weak typeof(self) __TARGET__=self\n#define weakReturn(__TARGET__) if(__TARGET__==nil)return;\n\n@interface CaptureViewController ()&lt;DJICameraDelegate, DJISDKManagerDelegate&gt;{</code></pre>\n<p><strong>4</strong>. In the <strong>viewDidAppear</strong> method, set <strong>fpvPreviewView</strong> instance as a view of <strong>VideoPreviewer</strong> to show the Video Stream, then invoke the <strong>registerApp</strong> method to register the app:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n{\n    [super viewDidLoad];\n    self.title = @&quot;Panorama Demo&quot;;\n}\n\n- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n\n    [[VideoPreviewer instance] setView:self.fpvPreviewView];\n    [self registerApp];\n}\n\n- (void) registerApp {\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<p>Also, implement the DJISDKManagerDelegate methods to do initial setup after register app success. Moreover, in the <code>sdkManagerProductDidChangeFrom</code> method, let&#39;s fetch a camera object and set its delegate and its playbackManager property&#39;s delegate as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (void)showAlertViewWithTitle:(NSString *)title withMessage:(NSString *)message\n{\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];\n    [alert addAction:okAction];\n    [self presentViewController:alert animated:YES completion:nil];\n}\n\n- (DJICamera*) fetchCamera {\n\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).camera;\n    }\n    return nil;\n}\n\n#pragma mark DJISDKManagerDelegate Method\n\n- (void)sdkManagerDidRegisterAppWithError:(NSError *)error {\n\n    NSString* message = @&quot;Register App Successfully!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else{\n        NSLog(@&quot;registerAppSuccess&quot;);\n        [DJISDKManager startConnectionToProduct];\n        [[VideoPreviewer instance] start];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n\n}\n\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    __weak DJICamera* camera = [self fetchCamera];\n    if (camera) {\n        [camera setDelegate:self];\n        [camera.playbackManager setDelegate:self];\n    }\n}</code></pre>\n<p> Furthermore, implement the <strong>DJICameraDelegate</strong> methods, as shown below:</p>\n<pre><code class=\"lang-objc\">\n#pragma mark - DJICameraDelegate Method\n-(void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size\n{\n    uint8_t* pBuffer = (uint8_t*)malloc(size);\n    memcpy(pBuffer, videoBuffer, size);\n    [[VideoPreviewer instance].dataQueue push:pBuffer length:(int)size];\n}\n\n- (void)camera:(DJICamera *)camera didUpdateSystemState:(DJICameraSystemState *)systemState\n{\n}</code></pre>\n<p><strong>5.</strong> Build and run the project on your mobile device, then connect your device to the aircraft. Now you can see view the camera&#39;s video stream on your device.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/viewFPVView.png\" alt=\"ffmpeg\"></p>\n<h2 id=\"rotating-with-virtual-stick\">Rotating with Virtual Stick</h2>\n<p>In order to generate a panorama, you need to take a series of photos from different angles while keeping the center of the drone still. This is easy to do with the gimbal on Inspire 1, but with the Phantom 3 you cannot control the gimbal&#39;s yaw angle using our SDK. Instead we will rotate the entire drone. Here&#39;s the instruction.</p>\n<p><strong>1.</strong> Add a <strong>Capture</strong> button in <strong>Capture View Controller</strong> in <strong>Main.storyboard</strong>. Name its <strong>IBOutlet</strong> as <strong>captureBtn</strong> respectively, and its <strong>IBAction</strong> as <strong>-(IBAction)onCaptureButtonClicked:(id)sender</strong>.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/captureButton.png\" alt=\"Capture button\"></p>\n<p><strong>2.</strong> Next, let&#39;s define the angle for each rotation and invoke the <strong>rotateDroneWithJoystick</strong> method in  <strong>-(IBAction)onCaptureButtonClicked:(id)sender</strong>:</p>\n<pre><code class=\"lang-objc\">#define PHOTO_NUMBER 8\n#define ROTATE_ANGLE 45.0</code></pre>\n<pre><code class=\"lang-objc\">-(IBAction)onCaptureButtonClicked:(id)sender {\n    [self rotateDroneWithJoystick];\n}</code></pre>\n<p>Furthermore, implement the <code>-(DJIFlightController*) fetchFlightController</code> method and configure the DJIFlightController object in the following <strong>DJISDKManagerDelegate</strong> method:</p>\n<pre><code class=\"lang-objc\">\n- (DJIFlightController*) fetchFlightController {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).flightController;\n    }\n    return nil;\n}\n\n- (void)sdkManagerProductDidChangeFrom:(DJIBaseProduct *)oldProduct to:(DJIBaseProduct *)newProduct\n{\n    DJICamera* camera = [self fetchCamera];\n    if (camera) {\n        [camera setDelegate:self];\n        [camera.playbackManager setDelegate:self];\n    }\n\n    DJIFlightController *flightController = [self fetchFlightController];\n    if (flightController) {\n        [flightController setDelegate:self];\n        [flightController setYawControlMode:DJIVirtualStickYawControlModeAngle];\n        [flightController setRollPitchCoordinateSystem:DJIVirtualStickFlightCoordinateSystemGround];\n        [flightController enableVirtualStickControlModeWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                NSLog(@&quot;Enable VirtualStickControlMode Failed&quot;);\n            }\n        }];\n    }\n}</code></pre>\n<p>As the code shown above, we configure the flightController&#39;s <strong>delegate</strong>, and <strong>yawControlMode</strong> properties. Then invoke the <code>enableVirtualStickControlModeWithCompletion</code> method to prepare for the virtual stick control.</p>\n<p><strong>3.</strong> Using the flightController virtual stick api is similar to sending commands using your remote controller. The virtual stick api can be used to directly specify the pitch, roll, yaw and throttle values of the drone and must be called with a certain frequency(Like 10 Hz) determined by the drone&#39;s flight controller, otherwise the flight controller will assume that the connection is lost, and the command may not be executed successfully. Hense, we should use a NSTimer to send virtual stick command in 10Hz as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (void)rotateDroneWithJoystick\n{\n\n   for(int i = 0;i &lt; PHOTO_NUMBER; i++){\n\n     float yawAngle = ROTATE_ANGLE*i;\n\n     if (yawAngle &gt; DJIVirtualStickYawControlMaxAngle) { //Filter the angle between -180 ~ 0, 0 ~ 180\n        yawAngle = yawAngle - 360;\n     }\n\n    NSTimer *timer =  [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(rotateDrone:) userInfo:@{@&quot;YawAngle&quot;:@(yawAngle)} repeats:YES];\n    [timer fire];\n\n    [[NSRunLoop currentRunLoop]addTimer:timer forMode:NSDefaultRunLoopMode];\n    [[NSRunLoop currentRunLoop]runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]];\n\n    [timer invalidate];\n    timer = nil;\n   }\n\n}\n\n- (void)rotateDrone:(NSTimer *)timer\n{\n    NSDictionary *dict = [timer userInfo];\n    float yawAngle = [[dict objectForKey:@&quot;YawAngle&quot;] floatValue];\n\n    DJIFlightController *flightController = [self fetchFlightController];\n\n    DJIVirtualStickFlightControlData vsFlightCtrlData;\n    vsFlightCtrlData.pitch = 0;\n    vsFlightCtrlData.roll = 0;\n    vsFlightCtrlData.verticalThrottle = 0;\n    vsFlightCtrlData.yaw = yawAngle;\n\n    [flightController sendVirtualStickFlightControlData:vsFlightCtrlData withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            NSLog(@&quot;Send FlightControl Data Failed %@&quot;, error.description);\n        }\n    }];\n\n}</code></pre>\n<p>You can set up the virtual stick flight control data by setting a <strong>DJIVirtualStickFlightControlData</strong> structure. As the code shows above, it use a for loop to control the drone to rotate 45 degrees for 8 times, each time the yawAngle will be updated, and assign its value to the corresponding yaw value of <strong>DJIVirtualStickFlightControlData</strong>:</p>\n<pre><code class=\"lang-objc\">- (void)sendVirtualStickFlightControlData:(DJIVirtualStickFlightControlData)controlData withCompletion:(DJICompletionBlock)completion;</code></pre>\n<p><strong>4.</strong> Now try to build and run the app, connect your mobile device to the remote controller, switch the flight mode to <strong>F</strong> (Function) mode, take off the drone and press the <strong>Capture</strong> button. You should see the drone rotates in 360 degrees, 45 degrees each time.</p>\n<p>Here is the gif animation example of using DJI PC Simulator to test this feature:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/virtualStickControl.gif\" alt=\"virtualStickControl\"></p>\n<p>If you are not familiar with the DJI PC Simulator, please check the <a href=\"../application-development-workflow/workflow-testing.html#DJI-PC-Simulator\">DJI PC Simulator Tutorial</a>.</p>\n<h2 id=\"shooting-a-series-of-photos\">Shooting a Series of Photos</h2>\n<p>We can invoke the following DJICamera method to shoot photos:</p>\n<pre><code class=\"lang-objc\">- (void)startShootPhoto:(DJICameraShootPhotoMode)shootMode withCompletion:(DJICompletionBlock)block;</code></pre>\n<p>Let&#39;s implement the <strong>rotateDroneWithJoystick</strong> method as shown below to make the drone shoot photos automatically once it finish 45 degrees&#39; rotation each time:</p>\n<pre><code class=\"lang-objc\">- (void)rotateDroneWithJoystick {\n\n weakSelf(target);\n\n    DJICamera *camera = [target fetchCamera];\n    [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n        weakReturn(target);\n        if (!error) {\n          dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n\n            for(int i = 0;i &lt; PHOTO_NUMBER; i++){\n\n            float yawAngle = ROTATE_ANGLE*i;\n\n            if (yawAngle &gt; DJIVirtualStickYawControlMaxAngle) { //Filter the angle between -180 ~ 0, 0 ~ 180\n               yawAngle = yawAngle - 360;\n             }\n\n            NSTimer *timer =  [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(rotateDrone:) userInfo:@{@&quot;YawAngle&quot;:@(yawAngle)} repeats:YES];\n            [timer fire];\n\n            [[NSRunLoop currentRunLoop]addTimer:timer forMode:NSDefaultRunLoopMode];\n            [[NSRunLoop currentRunLoop]runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]];\n\n            [timer invalidate];\n            timer = nil;\n\n            [camera startShootPhoto:DJICameraShootPhotoModeSingle withCompletion:nil];\n            sleep(2);\n            }\n\n            dispatch_async(dispatch_get_main_queue(), ^{\n            [self showAlertViewWithTitle:@&quot;Capture Photos&quot; withMessage:@&quot;Capture finished&quot;];\n           });\n\n            });\n        }\n    }];\n\n}</code></pre>\n<p>Firstly, we set DJICamera&#39;s <strong>cameraMode</strong> to &quot;DJICameraModeShootPhoto&quot; in case the camera mode is set to other values before we start the 360 degrees panorama shoot photo action using virtual stick.</p>\n<p>Then we should dispatch a new asynchronous thread to execute the virtual stick rotation and shoot photo actions. We use <code>sleep(2)</code> to sleep for 2 seconds between rotating the drone and shooting photo actions here to ensure each action is executed ordered(Shoot photo action may take around 2 seconds to finish). When the for loop finished, we can show an alert view in the main thread to notify the user &quot;Capture finished&quot;.</p>\n<h2 id=\"rotating-gimbal-to-shoot-photos\">Rotating Gimbal to Shoot Photos</h2>\n<p>If you have an Inspire 1, you will benefit from being able to shoot photos without moving the drone, taking advantage of the gimbal&#39;s 360 rotation capabilities. Rotating the gimbal while keeping the drone still in the air means you will have a stable photography platform, which helps you to create a wonderful panorama. Let&#39;s take a look at the implementation.</p>\n<p><strong>1.</strong> let&#39;s implement the <code>- (DJIGimbal*) fetchGimbal</code> method to fetch the gimbal component:</p>\n<pre><code class=\"lang-objc\">- (DJIGimbal*) fetchGimbal {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).gimbal;\n    }\n    return nil;\n}</code></pre>\n<p>It is necessary to reset the gimbal&#39;s position before rotating and  shooting photos, otherwise the gimbal may reach the maximum angle of  yaw axis when rotating 360 degrees. We can call <strong>DJIGimbal</strong>&#39;s <code>resetGimbalWithCompletion</code> method to reset the gimbal&#39;s pitch, roll and yaw back to the origin values. Here is the code: </p>\n<pre><code class=\"lang-objc\">//Reset Gimbal at the beginning\n    DJIGimbal *gimbal = [self fetchGimbal];\n\n    //Reset Gimbal at the beginning\n    [gimbal resetGimbalWithCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            NSLog(@&quot;ResetGimbal Failed: %@&quot;, [NSString stringWithFormat:@&quot;%@&quot;, error.description]);\n        }\n    }];\n    sleep(3);</code></pre>\n<p><strong>2.</strong> Rotate the gimbal clockwise from the origin position to 360 degrees(45 degrees each time), then take photos between each rotation. Let&#39;s implement the <strong>rotateGimbal</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">#pragma mark - Rotate Gimbal Methods\n- (void)rotateGimbal {\n\n    DJICamera *camera = [self fetchCamera];\n    weakSelf(target);\n    [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n        weakReturn(target);\n        if (!error) {\n            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                [target executeRotateGimbal];\n            });\n        }\n    }];\n}\n\n- (void)executeRotateGimbal\n{\n\n    DJIGimbal *gimbal = [self fetchGimbal];\n    DJICamera *camera = [self fetchCamera];\n\n    //Reset Gimbal at the beginning\n    [gimbal resetGimbalWithCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            NSLog(@&quot;ResetGimbal Failed: %@&quot;, [NSString stringWithFormat:@&quot;%@&quot;, error.description]);\n        }\n    }];\n    sleep(3);\n\n    //rotate the gimbal clockwise\n    float yawAngle = 0;\n\n    DJIGimbalAngleRotation pitchRotation = {NO, 0, DJIGimbalRotateDirectionClockwise};\n    DJIGimbalAngleRotation rollRotation = {NO, 0, DJIGimbalRotateDirectionClockwise};\n    DJIGimbalAngleRotation yawRotation = {YES, yawAngle, DJIGimbalRotateDirectionClockwise};\n\n    for(int i = 0; i &lt; PHOTO_NUMBER; i++){\n\n        [camera startShootPhoto:DJICameraShootPhotoModeSingle withCompletion:nil];\n        sleep(2);\n\n        yawAngle += ROTATE_ANGLE;\n        yawRotation.angle = yawAngle;\n        [gimbal rotateGimbalWithAngleMode:DJIGimbalAngleModeAbsoluteAngle pitch:pitchRotation roll:rollRotation yaw:yawRotation withCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                NSLog(@&quot;Rotate Gimbal Failed: %@&quot;, [NSString stringWithFormat:@&quot;%@&quot;, error.description]);\n            }\n        }];\n        sleep(2);\n\n    }\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [self showAlertViewWithTitle:@&quot;Capture Photos&quot; withMessage:@&quot;Capture finished&quot;];\n    });\n\n}</code></pre>\n<p>As it&#39;s shown above, we set the DJICamera&#39;s cameraMode to <strong>DJICameraModeShootPhoto</strong>, then dispatch a new asynchronous thread to execute the <code>executeRotateGimbal</code> method. Then in the executeRotateGimbal method, reset Gimbal&#39;s position and use a for loop to shoot photo and rotate gimbal 45 degrees each time. When the for loop finished, we can show an alert view in the main thread to notify the user &quot;Capture Photos finished&quot;.</p>\n<p><strong>3.</strong> Rewrite the <strong>onCaptureButtonClicked</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(IBAction)onCaptureButtonClicked:(id)sender {\n   [self rotateGimbal];\n}</code></pre>\n<p>Build and run the app, and try the capture button function of the app without taking off the Inspire 1. You should see the gimbal of Inspire 1 rotating 360 degrees and shoot photos smoothly.</p>\n<h2 id=\"shooting-photos-with-djiwaypointmission\">Shooting Photos with DJIWaypointMission</h2>\n<p><strong>Note: Please make sure the drone&#39;s battery energy percentage is more than 30% when you use DJIWaypointMission</strong></p>\n<p>It seems a bit inconvenient and odd to use <code>sleep(2)</code> between rotating the drone and shooting photos. Shouldn&#39;t there be an easier, more efficient way to implement this? Yes, the DJIWaypointMission is designed for executing series of actions within different waypoints, which is perfect for our application!</p>\n<p><strong>1.</strong> To use the DJIWaypointMission, firstly we should implement the <strong>DJIMissionManagerDelegate</strong> and <strong>DJIFlightControllerDelegate</strong> protocol in the class extension of <strong>CaptureViewController.m</strong> as shown below:</p>\n<pre><code class=\"lang-objc\">@interface CaptureViewController ()&lt;DJICameraDelegate, DJIPlaybackDelegate, DJISDKManagerDelegate, DJIMissionManagerDelegate, DJIFlightControllerDelegate&gt;{\n\n}</code></pre>\n<p>Then declare the following properties for setting up DJIWaypointMission:</p>\n<pre><code class=\"lang-objc\">@property (strong, nonatomic) UIAlertView* prepareMissionProgressAlert;\n@property (nonatomic) bool isMissionStarted;\n@property (atomic) CLLocationCoordinate2D aircraftLocation;\n@property (atomic) double aircraftAltitude;\n@property (atomic) DJIGPSSignalStatus gpsSignalStatus;\n@property (atomic) double aircraftYaw;\n@property (nonatomic, strong) DJIMission* mission;</code></pre>\n<p>Here we create a <strong>prepareMissionProgressAlert</strong> to show the prepare mission progress message. The &quot;aircraftLocation&quot;, &quot;aircraftAltitude&quot;, &quot;gpsSignalStatus&quot; and &quot;aircraftYaw&quot; properties will be updated as the latest flight controller system status of the drone.</p>\n<p>Moreover, initialize the <strong>isMissionStarted</strong> and <strong>aircraftLocation</strong> properties in the ViewDidLoad method:</p>\n<pre><code class=\"lang-objc\">\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.title = @&quot;Panorama Demo&quot;;\n\n    self.isMissionStarted = NO;\n    self.aircraftLocation = kCLLocationCoordinate2DInvalid;\n\n}</code></pre>\n<p><strong>2.</strong> There are three delegate methods need to be implemented, the <strong>DJISDKManagerDelegate</strong>, <strong>DJIMissionManagerDelegate</strong> and <strong>DJIFlightControllerDelegate</strong> methods:</p>\n<pre><code class=\"lang-objc\">#pragma mark DJISDKManagerDelegate Methods\n- (void)sdkManagerProductDidChangeFrom:(DJIBaseProduct *)oldProduct to:(DJIBaseProduct *)newProduct\n{\n    DJICamera* camera = [self fetchCamera];\n    if (camera) {\n        [camera setDelegate:self];\n        [camera.playbackManager setDelegate:self];\n    }\n\n    [[DJIMissionManager sharedInstance] setDelegate:self];\n\n    DJIFlightController *flightController = [self fetchFlightController];\n    if (flightController) {\n        [flightController setDelegate:self];\n        [flightController setYawControlMode:DJIVirtualStickYawControlModeAngle];\n        [flightController setRollPitchCoordinateSystem:DJIVirtualStickFlightCoordinateSystemGround];\n        [flightController enableVirtualStickControlModeWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                NSLog(@&quot;Enable VirtualStickControlMode Failed&quot;);\n            }\n        }];\n    }\n}\n\n#pragma mark - DJIMissionManagerDelegate Methods\n- (void)missionManager:(DJIMissionManager *)manager didFinishMissionExecution:(NSError *)error\n{\n    if (error) {\n        [self showAlertViewWithTitle:@&quot;Mission Execution Failed&quot; withMessage:[NSString stringWithFormat:@&quot;%@&quot;, error.description]];\n    }\n    else {\n\n        if (self.isMissionStarted) {\n            [self showAlertViewWithTitle:@&quot;Intelligent Navigation&quot; withMessage:@&quot;Mission Finished&quot;];\n            self.isMissionStarted = NO;\n        }\n    }\n\n}\n\n- (void)missionManager:(DJIMissionManager *)manager missionProgressStatus:(DJIMissionProgressStatus *)missionProgress\n{\n\n}\n\n#pragma mark - DJIFlightControllerDelegate Method\n- (void)flightController:(DJIFlightController *)fc didUpdateSystemState:(DJIFlightControllerCurrentState *)state\n{\n    self.aircraftLocation = CLLocationCoordinate2DMake(state.aircraftLocation.latitude, state.aircraftLocation.longitude);\n    self.gpsSignalStatus = state.gpsSignalStatus;\n    self.aircraftAltitude = state.altitude;\n    self.aircraftYaw = state.attitude.yaw;\n\n}</code></pre>\n<p>As the code shown above, we set the delegate of DJIMissionManager in the &quot;DJISDKManagerDelegate&quot; method, then notify the user the mission execution result by showing alert views in the &quot;DJIMissionManagerDelegate&quot; method. Lastly, we update the <strong>aircraftLocation</strong>, <strong>gpsSignalStatus</strong>, <strong>aircraftAltitude</strong> and <strong>aircraftYaw</strong> property values in the DJIFlightControllerDelegate method.</p>\n<p><strong>3.</strong> Now let&#39;s initialize the DJIWaypointMission by creating a new method named <code>initializeMission</code> as shown below:</p>\n<pre><code class=\"lang-objc\">- (DJIMission*) initializeMission {\n\n    DJIWaypointMission *mission = [[DJIWaypointMission alloc] init];\n    mission.maxFlightSpeed = 15.0;\n    mission.autoFlightSpeed = 4.0;\n\n    DJIWaypoint *wp1 = [[DJIWaypoint alloc] initWithCoordinate:self.aircraftLocation];\n    wp1.altitude = self.aircraftAltitude;\n\n    for (int i = 0; i &lt; PHOTO_NUMBER ; i++) {\n\n        double rotateAngle = ROTATE_ANGLE*i;\n\n        if (rotateAngle &gt; 180) { //Filter the angle between -180 ~ 0, 0 ~ 180\n            rotateAngle = rotateAngle - 360;\n        }\n\n        DJIWaypointAction *action1 = [[DJIWaypointAction alloc] initWithActionType:DJIWaypointActionTypeShootPhoto param:0];\n        DJIWaypointAction *action2 = [[DJIWaypointAction alloc] initWithActionType:DJIWaypointActionTypeRotateAircraft param:rotateAngle];\n        [wp1 addAction:action1];\n        [wp1 addAction:action2];\n    }\n\n    DJIWaypoint *wp2 = [[DJIWaypoint alloc] initWithCoordinate:self.aircraftLocation];\n    wp2.altitude = self.aircraftAltitude + 1;\n\n    [mission addWaypoint:wp1];\n    [mission addWaypoint:wp2];\n    [mission setFinishedAction:DJIWaypointMissionFinishedNoAction]; //Change the default action of Go Home to None\n\n    return mission;\n}</code></pre>\n<p>In the code above, we create a DJIWaypointMission object firstly and set its <strong>maxFlightSpeed</strong> and <strong>autoFlightSpeed</strong> properties. Then we use a for loop to create 16 <strong>DJIWaypointAction</strong> objects. Each step in the for loop, we create two <strong>DJIWaypointActions</strong>. Set the first waypoint action type as <strong>DJIWaypointActionTypeShootPhoto</strong>, the other waypoint action type as <strong>DJIWaypointActionTypeRotateAircraft</strong> with the appropriate rotate angles. Then add these two waypoint actions to the first DJIWaypoint.</p>\n<p>DJIWaypointMission requires at least two waypoints, and each waypoint must have different physical location, so we create another DJIWaypoint and control the drone to fly upwards 1 meter and take no action. </p>\n<p>Finally, add the two DJIWaypoint to the DJIWaypointMision object and set its <strong>finishAction</strong> type as DJIWaypointMissionFinishedNoAction. If we don&#39;t set the <strong>finishAction</strong> property, when the drone finish the waypoint mission, it will execute the go home command automatically instead of staying at the original position.</p>\n<p><strong>4.</strong> Once it&#39;s finished, let&#39;s create two new methods called <code>- (void)prepareWaypointMission</code> and <code>- (void)startWaypointMission</code> to upload waypoint mission to the drone and start the mission. Here is the code:</p>\n<pre><code class=\"lang-objc\">- (void)prepareWaypointMission {\n\n    self.mission = [self initializeMission];\n    if (self.mission == nil) return; //Initialization failed\n\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] prepareMission:self.mission withProgress:^(float progress) {\n\n        NSString *message = [NSString stringWithFormat:@&quot;Mission Upload %.2f%%&quot; ,progress*100];\n\n        if (target.prepareMissionProgressAlert == nil) {\n            target.prepareMissionProgressAlert = [[UIAlertView alloc] initWithTitle:nil message:message delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];\n            [target.prepareMissionProgressAlert show];\n        }\n        else {\n            [target.prepareMissionProgressAlert setMessage:message];\n        }\n\n        if (progress*100 == 100) {\n            [target.prepareMissionProgressAlert dismissWithClickedButtonIndex:0 animated:YES];\n            target.prepareMissionProgressAlert = nil;\n        }\n\n    } withCompletion:^(NSError * _Nullable error) {\n\n        if (target.prepareMissionProgressAlert) {\n            [target.prepareMissionProgressAlert dismissWithClickedButtonIndex:0 animated:YES];\n            target.prepareMissionProgressAlert = nil;\n        }\n\n        if (error) {\n            [target showAlertViewWithTitle:@&quot;Prepare Mission Failed&quot; withMessage:[NSString stringWithFormat:@&quot;%@&quot;, error.description]];\n        }else\n        {\n            [target showAlertViewWithTitle:@&quot;Prepare Mission Finished&quot; withMessage:nil];\n        }\n\n        [target startWaypointMission];\n    }];\n}\n\n- (void)startWaypointMission {\n\n    weakSelf(target);\n    [[DJIMissionManager sharedInstance] startMissionExecutionWithCompletion:^(NSError * _Nullable error) {\n        weakReturn(target);\n        target.isMissionStarted = YES;\n        if (error) {\n            NSLog(@&quot;Start Mission Failed: %@&quot;, error.description);\n        }\n    }];\n\n}</code></pre>\n<p>In the <code>prepareWaypointMission</code> method, we firstly call the <code>initializeMission</code> method and assign the DJIMission object to the <strong>mission</strong> property. Then we invoke DJIMissionManager&#39;s following method to upload waypoint mission task to the drone:</p>\n<pre><code class=\"lang-objc\">- (void)prepareMission:(DJIMission *_Nonnull)mission withProgress:(DJIMissionProgressHandler)preparationProgress withCompletion:(DJICompletionBlock)completion;</code></pre>\n<p>We can check the mission preparation progress and update the <strong>prepareMissionProgressAlert</strong> message contents in the <strong>preparationProgress</strong> block. Furthermore, notify users the prepare mission result by showing an alertView and call the <code>startWaypointMission</code> method in the completion block to start the waypoint mission.</p>\n<p>In the <code>startWaypointMission</code> method     we call the following method of DJIMissionManager to start the waypoint mission:</p>\n<pre><code class=\"lang-objc\">- (void)startMissionExecutionWithCompletion:(DJICompletionBlock)completion;</code></pre>\n<p><strong>5.</strong> Since the DJIWaypointMission relies on good GPS signal quality, you should check the GPS signal status before executing the waypoint mission. At the same time, you should also check whether the <strong>aircraftLocation</strong> is valid. Let&#39;s implement the  <strong>rotateDroneWithWaypointMission</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)rotateDroneWithWaypointMission {\n    if (CLLocationCoordinate2DIsValid(self.aircraftLocation) &amp;&amp; self.gpsSignalStatus != DJIGPSSignalStatusLevel0 &amp;&amp; self.gpsSignalStatus != DJIGPSSignalStatusLevel1) {\n        [self prepareWaypointMission];\n    }\n    else {\n        [self showAlertViewWithTitle:@&quot;GPS signal weak&quot; withMessage:@&quot;Rotate drone failed&quot;];\n    }\n}</code></pre>\n<p><strong>6.</strong> Lastly, replace the <strong>onCaptureButtonClicked</strong> method with the followings:</p>\n<pre><code class=\"lang-objc\">-(IBAction)onCaptureButtonClicked:(id)sender {\n    [self rotateDroneWithWaypointMission];\n}</code></pre>\n<p>Build and run your code, take off the drone and fly to an appropriate altitude and press the capture button to execute the waypoint mission. You should see the drone start to rotate and shoot photos automatically. </p>\n<p>So far we have three methods to rotate the drone and shoot photos, we had better create an alert view to ask the user to choose which method to control your drone.</p>\n<p>Let&#39;s update the <strong>onCaptureButtonClicked</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(IBAction)onCaptureButtonClicked:(id)sender {\n\n    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&quot;Select Mode&quot; message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;Cancel&quot; otherButtonTitles:@&quot;Rotate Aircraft&quot;, @&quot;Rotate Gimbal&quot;, @&quot;WaypointMission&quot;, nil];\n    alertView.tag = kCaptureModeAlertTag;\n    [alertView show];\n}</code></pre>\n<p>Here we use <strong>kCaptureModeAlertTag</strong> to distinguish the three types of alert views:</p>\n<pre><code class=\"lang-objc\">#define kCaptureModeAlertTag 100</code></pre>\n<p>Implement the <strong>UIAlertView</strong> delegate method:</p>\n<pre><code class=\"lang-objc\">#pragma mark UIAlertView Delegate Methods\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    if (alertView.tag == kCaptureModeAlertTag) {\n        if(buttonIndex == 1){\n            [self rotateDroneWithJoystick];\n        }else if(buttonIndex == 2){\n            [self rotateGimbal];\n        }else if (buttonIndex == 3){\n            [self rotateDroneWithWaypointMission];\n        }\n    }\n}</code></pre>\n<p>Now the user can choose their preferred methods to take 360 degrees Panorama photos.</p>\n<h2 id=\"selecting-and-downloading-photos\">Selecting and Downloading Photos</h2>\n<p>In order to download multiple photos, you should go through a series of playback modes. Firstly, enter <strong>Playback</strong> mode, then enter <strong>Multiple Preview</strong> mode, furthermore enter <strong>Multiple Edit</strong> mode, lastly, select all the photos you just capture, and download them.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/downloadPhotos.png\" alt=\"diagram.png\"></p>\n<p><strong>1.</strong> Add a new <strong>Download</strong> button in the CaptureViewController of Main.storyboard, then create its IBOutlet named <strong>downloadBtn</strong> and IBAction as <strong>-(IBAction)onDownloadButtonClicked:(id)sender</strong> in the CaptureViewController.h file as shown below: </p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/photoDownloadButton.png\" alt=\"Download Button\"></p>\n<p><strong>2.</strong> Add a new variable <strong>selectedPhotoNumber</strong> to record the number of photos selected in the class extension of &quot;CaptureViewController.m&quot; file:</p>\n<pre><code class=\"lang-objc\">   @property (nonatomic, assign) __block int selectedPhotoNumber;</code></pre>\n<p>Now, let&#39;s implement the <strong>DJIPlaybackDelegate</strong> method as shown below to update the selected photo num: </p>\n<pre><code class=\"lang-objc\">- (void)playbackManager:(DJIPlaybackManager *)playbackManager didUpdatePlaybackState:(DJICameraPlaybackState *)playbackState\n{\n    self.selectedPhotoNumber = playbackState.numberOfSelectedFiles;\n}</code></pre>\n<p><strong>3.</strong> Implement the <strong>onDownloadButtonClicked</strong> method to enter playback mode:  </p>\n<pre><code class=\"lang-objc\">-(IBAction)onDownloadButtonClicked:(id)sender {\n\n    weakSelf(target);\n    DJICamera *camera = [self fetchCamera];\n    [camera setCameraMode:DJICameraModePlayback withCompletion:^(NSError * _Nullable error) {\n        weakReturn(target);\n\n        if (error) {\n            NSLog(@&quot;Enter playback mode failed: %@&quot;, error.description);\n        }else {\n            [target selectPhotos];\n        }\n    }];\n}</code></pre>\n<p>Here we set the DJICamera&#39;s cameraMode as <strong>DJICameraModePlayback</strong>. If it succeeded, we can call the <strong>selectPhotos</strong> method to start selecting photos.</p>\n<p><strong>4</strong>. Once it&#39;s done, let&#39;s implement the <code>selectPhotos</code> method to select the latest photos you capture for the panorama:</p>\n<pre><code class=\"lang-objc\">-(void)selectPhotos {\n\n    weakSelf(target);\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n\n        weakReturn(target);\n        DJICamera *camera = [target fetchCamera];\n        [camera.playbackManager enterMultiplePreviewMode];\n        sleep(1);\n        [camera.playbackManager enterMultipleEditMode];\n        sleep(1);\n\n        while (self.selectedPhotoNumber != PHOTO_NUMBER) {\n            [camera.playbackManager selectAllFilesInPage];\n            sleep(1);\n\n            if(self.selectedPhotoNumber &gt; PHOTO_NUMBER){\n                for(int unselectFileIndex = 0; self.selectedPhotoNumber != PHOTO_NUMBER; unselectFileIndex++){\n                    [camera.playbackManager toggleFileSelectionAtIndex:unselectFileIndex];\n                    sleep(1);\n                }\n                break;\n            }\n            else if(self.selectedPhotoNumber &lt; PHOTO_NUMBER) {\n                [camera.playbackManager goToPreviousMultiplePreviewPage];\n                sleep(1);\n            }\n        }\n        [target downloadPhotos];\n    });\n}</code></pre>\n<p>It takes a few seconds for the drone to respond to commands, so you should dispatch an asynchronous thread to send commands and call the <code>sleep()</code> between them in case you freeze the UI interaction of in main thread. As shown in the flow diagram above, you should enter <strong>MultiplePreviewMode</strong> and <strong>MultipleEditMode</strong> before selecting photos. But how do we select the lastest 8 photos for panorama? Here is our strategy:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/selectPhotoDiagram.png\" alt=\"select photo diagram\"></p>\n<p>The default selected photo is the last photo. Select all photos in the last page. If you have selected more photos than you need, you can deselect the extra photos starting from the index 0. If you do not have enough photos selected, just go to previous page and repeat the procedure again until you select the exact number of photos you needed. Here is the gif animation for selecting photos:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/selectMultiPhotos.gif\" alt=\"multiple select photo\"></p>\n<p><strong>5.</strong> After you select all the photos, invoke the <strong>downloadPhotos</strong> method to download all the photos you need.</p>\n<p>Create and implement the <code>-(void)downloadPhotos</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void)downloadPhotos {\n    __block int finishedFileCount = 0;\n    __block NSMutableData* downloadedFileData;\n    __block long totalFileSize;\n    __block NSString* targetFileName;\n\n    self.imageArray=[NSMutableArray new];\n\n    DJICamera *camera = [self fetchCamera];\n    if (camera == nil) return;\n\n    weakSelf(target);\n    [camera.playbackManager downloadSelectedFilesWithPreparation:^(NSString * _Nullable fileName, DJIDownloadFileType fileType, NSUInteger fileSize, BOOL * _Nonnull skip) {\n\n        totalFileSize=(long)fileSize;\n        downloadedFileData=[NSMutableData new];\n        targetFileName=fileName;\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n            weakReturn(target);\n            [target showDownloadProgressAlert];\n            [target.downloadProgressAlert setTitle:[NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, finishedFileCount + 1, PHOTO_NUMBER]];\n            [target.downloadProgressAlert setMessage:[NSString stringWithFormat:@&quot;FileName:%@ FileSize:%0.1fKB Downloaded:0.0KB&quot;, fileName, fileSize / 1024.0]];\n        });\n\n    } process:^(NSData * _Nullable data, NSError * _Nullable error) {\n\n        weakReturn(target);\n        [downloadedFileData appendData:data];\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [target.downloadProgressAlert setMessage:[NSString stringWithFormat:@&quot;FileName:%@ FileSize:%0.1fKB Downloaded:%0.1fKB&quot;, targetFileName, totalFileSize / 1024.0, downloadedFileData.length / 1024.0]];\n        });\n\n    } fileCompletion:^{\n        weakReturn(target);\n        finishedFileCount++;\n\n        UIImage *downloadPhoto=[UIImage imageWithData:downloadedFileData];\n        [target.imageArray addObject:downloadPhoto];\n\n    } overallCompletion:^(NSError * _Nullable error) {\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [target.downloadProgressAlert dismissWithClickedButtonIndex:0 animated:YES];\n            target.downloadProgressAlert = nil;\n\n            if (error) {\n                UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:@&quot;Download failed&quot; message:[NSString stringWithFormat:@&quot;%@&quot;, error.description] delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [alertView show];\n            }else\n            {\n                UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, finishedFileCount, PHOTO_NUMBER] message:@&quot;download finished&quot; delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [alertView show];\n            }\n\n            DJICamera *camera = [target fetchCamera];\n            [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:@&quot;Set CameraMode to ShootPhoto Failed&quot; message:[NSString stringWithFormat:@&quot;%@&quot;, error.description] delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                    [alertView show];\n\n                }\n            }];\n\n        });\n\n    }];\n}\n\n-(void) showDownloadProgressAlert {\n    if (self.downloadProgressAlert == nil) {\n        self.downloadProgressAlert = [[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;&quot; delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];\n        [self.downloadProgressAlert show];\n    }\n}</code></pre>\n<p>In the code above, we firstly add several variables and init the <strong>imageArray</strong> object. Then call the DJIPlaybackManager&#39;s following method to download the selected photos:</p>\n<pre><code class=\"lang-objc\">- (void)downloadSelectedFilesWithPreparation:(DJIFileDownloadPreparingBlock)prepareBlock process:(DJIFileDownloadingBlock)dataBlock fileCompletion:(DJIFileDownloadCompletionBlock)fileCompletionBlock overallCompletion:(DJICompletionBlock)overallCompletionBlock;</code></pre>\n<p>In the <strong>DJIFileDownloadPreparingBlock</strong>, we initialize the &quot;downloadedFileData&quot; and dispatch a main thread to show alertView to user for notifying the current download progress. Then we append the &quot;downloadedFileData&quot; in the <strong>DJIFileDownloadingBlock</strong> and update the &quot;downloadProgressAlert&quot; message with the current process in the main thread. </p>\n<p>In the <strong>DJIFileDownloadCompletionBlock</strong>, we increase the &quot;finishedFileCount&quot; property value and save the downloaded photo image in the <strong>imageArray</strong>. in a local album in the <strong>DJIFileDownloadCompletionBlock</strong>. </p>\n<p>Finally, let&#39;s notify the users the download result by showing UIAlertView in the main thread in the <strong>overallCompletionBlock</strong>. Moreover, set the camera mode back to &quot;DJICameraModeShootPhoto&quot; after the photodownload finished.</p>\n<p>Build and run the code, press the <strong>capture</strong> button to rotate the drone and shoot photos, after it finished, press <strong>download</strong> button to download all the photos shoot. If everything goes well, you should see the following animation:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/downloadMultiPhotos.gif\" alt=\"downloadPhotos\"></p>\n<h2 id=\"using-opencv-to-create-panorama\">Using OpenCV to Create Panorama</h2>\n<h3 id=\"creating-stitching-view\">Creating Stitching View</h3>\n<p>Since we don&#39;t need the FPV view when stitching photos, we can create a new view controller called <strong>StitchingViewController</strong> to generate and present the panorama photo.</p>\n<p><strong>1.</strong> Embed the <strong>CaptureViewController</strong> in a navigation controller and add a new button called <strong>Stitch</strong> on it.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/navigationController.png\" alt=\"EmbedNavigationController\"></p>\n<p>Then create a new view controller called <strong>StitchingViewController</strong> and add it in the <strong>Main.storyboard</strong> correspondingly. Then add a button named <strong>Stitch</strong> in the <strong>CaptureViewController</strong> and set its action segue to show the <strong>StitchingViewController</strong>. Set the segue&#39;s identifier to <strong>Stitching</strong>.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/stitchSegue.png\" alt=\"embed navigation controller\"></p>\n<p><strong>2.</strong> Let&#39;s add an instance variable <strong>imageArray</strong> in the <strong>StitchingViewController.h</strong>:</p>\n<pre><code class=\"lang-objc\">@property (strong,nonatomic) NSMutableArray * imageArray;</code></pre>\n<p>Then add the <strong>prepareForSegue</strong> method to pass the downloaded photos to the next view controller in <strong>CaptureViewController.m</strong>:</p>\n<pre><code class=\"lang-objc\">//Pass the downloaded photos to StitchingViewController\n-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    if([segue.identifier isEqualToString:@&quot;Stitching&quot;]) {\n        [segue.destinationViewController setValue:self.imageArray forKey:@&quot;imageArray&quot;];\n    }\n}</code></pre>\n<p><strong>3.</strong> Add an activity indicator in the <strong>StitchingViewController</strong> in Main.storyboard, set its behavior to <strong>Hides When Stopped</strong>, then set its outlet as <strong>activityIndicator</strong> in the StitchingViewController.h file:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/activityIndicator.png\" alt=\"activity indicator\"></p>\n<h3 id=\"importing-opencv\">Importing OpenCV</h3>\n<p><strong>1.</strong> Build the <strong>opencv2.framework</strong> for iOS. You can check for more details in <a href=\"http://docs.opencv.org/doc/tutorials/introduction/ios_install/ios_install.html\" target=\"_blank\">Installation OpenCV in iOS</a>. If you have any difficulties compiling the source code, you can just download this project and copy the <strong>opencv2.framework</strong>. </p>\n<p><strong>2.</strong> Select the project target, go to <strong>Build Phases</strong> -&gt; <strong>Link Binary With Libraries</strong>. Click the &quot;+&quot; button at the bottom and add  the<strong>AssetsLibrary.framework</strong> library to your project. Click the &quot;+&quot; button, click on <strong>Add others</strong> and navigate to the directory where <strong>opencv2.framework</strong> is located and click open.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/opencvFramework.png\" alt=\"OpenCv framework\"></p>\n<p><strong>3.</strong> Add a PCH file into your project. Go to <strong>Build Setting</strong> -&gt; <strong>Precompile Prefix Header</strong>, set its value <strong>YES</strong>, and set <strong>Prefix Header</strong> to be the location of the PCH file.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/prefixHeader.png\" alt=\"Prefix header\"></p>\n<p>Open your PCH file and add the following lines of code:</p>\n<pre><code class=\"lang-objc\">#ifdef __cplusplus\n    #import &lt;opencv2/opencv.hpp&gt;\n#endif\n\n#ifdef __OBJC__\n    #import &lt;UIKit/UIKit.h&gt;\n    #import &lt;Foundation/Foundation.h&gt;\n#endif</code></pre>\n<p><strong>4.</strong> Build your project. If nothing wrong happens, you may successfully setup the OpenCV library in your Xcode project.</p>\n<h3 id=\"stitching-photos\">Stitching Photos</h3>\n<p><strong>1.</strong> In the OpenCV, all the image processing operations are usually carried out on the Mat structure. However, on iOS, to render an image on screen it has to be an instance of the UIImage class. In order to convert an OpenCV Mat to an UIImage we can use the Core Graphics framework in iOS. Find more details, please check <a href=\"http://docs.opencv.org/doc/tutorials/ios/image_manipulation/image_manipulation.html#opencviosimagemanipulation\" target=\"_blank\">Convert UIImage to cv::Mat</a>. You can define a <strong>OpenCVConversion</strong> class to deal with the conversion issue.</p>\n<p>Let&#39;s implement the <strong>OpenCVConversion.h</strong> file shown as below:</p>\n<pre><code class=\"lang-objc\">@interface OpenCVConversion : NSObject\n\n+ (cv::Mat)cvMatFromUIImage:(UIImage *)image;//convert UIImage to cv::Mat\n+ (cv::Mat)cvMatGrayFromUIImage:(UIImage *)image;//convert UIImage to gray cv::Mat\n+ (cv::Mat)cvMat3FromUIImage:(UIImage *)image; //convert UIImage to cv::Mat without alpha channel\n+(UIImage *)UIImageFromCVMat:(cv::Mat)cvMat;//convert cv::Mat to UIImage\n\n@end</code></pre>\n<p>Next, implement the <strong>OpenCVConversion.mm</strong> file:</p>\n<pre><code class=\"lang-objc\">#import &quot;OpenCVConversion.h&quot;\n\n@implementation OpenCVConversion\n\n+ (cv::Mat)cvMatFromUIImage:(UIImage *)image {\n    CGColorSpaceRef colorSpace = CGImageGetColorSpace(image.CGImage);\n    CGFloat cols = image.size.width;\n    CGFloat rows = image.size.height;\n\n    cv::Mat cvMat(rows, cols, CV_8UC4); // 8 bits per component, 4 channels (color channels + alpha)\n\n    CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,                 // Pointer to  data\n                                                    cols,                       // Width of bitmap\n                                                    rows,                       // Height of bitmap\n                                                    8,                          // Bits per component\n                                                    cvMat.step[0],              // Bytes per row\n                                                    colorSpace,                 // Colorspace\n                                                    kCGImageAlphaNoneSkipLast |\n                                                    kCGBitmapByteOrderDefault); // Bitmap info flags\n\n    CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), image.CGImage);\n    CGContextRelease(contextRef);\n\n    return cvMat;\n}\n\n\n+ (cv::Mat)cvMatGrayFromUIImage:(UIImage *)image {\n    CGColorSpaceRef colorSpace = CGImageGetColorSpace(image.CGImage);\n    CGFloat cols = image.size.width;\n    CGFloat rows = image.size.height;\n\n    cv::Mat cvMat(rows, cols, CV_8UC1); // 8 bits per component, 1 channels\n\n    CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,                 // Pointer to data\n                                                    cols,                       // Width of bitmap\n                                                    rows,                       // Height of bitmap\n                                                    8,                          // Bits per component\n                                                    cvMat.step[0],              // Bytes per row\n                                                    colorSpace,                 // Colorspace\n                                                    kCGImageAlphaNoneSkipLast |\n                                                    kCGBitmapByteOrderDefault); // Bitmap info flags\n\n    CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), image.CGImage);\n    CGContextRelease(contextRef);\n\n    return cvMat;\n}\n\n+ (cv::Mat)cvMat3FromUIImage:(UIImage *)image {\n    cv::Mat result=[self cvMatFromUIImage:image];\n    cv::cvtColor(result, result, CV_RGBA2RGB);\n    return result;\n}\n\n+(UIImage *)UIImageFromCVMat:(cv::Mat)cvMat\n{\n    NSData *data = [NSData dataWithBytes:cvMat.data length:cvMat.elemSize()*cvMat.total()];\n    CGColorSpaceRef colorSpace;\n\n    if (cvMat.elemSize() == 1) {\n        colorSpace = CGColorSpaceCreateDeviceGray();\n    } else {\n        colorSpace = CGColorSpaceCreateDeviceRGB();\n    }\n\n    CGDataProviderRef provider = CGDataProviderCreateWithCFData((__bridge CFDataRef)data);\n\n    // Creating CGImage from cv::Mat\n    CGImageRef imageRef = CGImageCreate(cvMat.cols,                                 //width\n                                        cvMat.rows,                                 //height\n                                        8,                                          //bits per component\n                                        8 * cvMat.elemSize(),                       //bits per pixel\n                                        cvMat.step[0],                            //bytesPerRow\n                                        colorSpace,                                 //colorspace\n                                        kCGImageAlphaNone|kCGBitmapByteOrderDefault,// bitmap info\n                                        provider,                                   //CGDataProviderRef\n                                        NULL,                                       //decode\n                                        false,                                      //should interpolate\n                                        kCGRenderingIntentDefault                   //intent\n                                        );\n\n\n    // Getting UIImage from CGImage\n    UIImage *finalImage = [UIImage imageWithCGImage:imageRef];\n    CGImageRelease(imageRef);\n    CGDataProviderRelease(provider);\n    CGColorSpaceRelease(colorSpace);\n\n    return finalImage;\n}\n\n@end</code></pre>\n<p><strong>2.</strong> In order to call OpenCV functions in objective-C, you should create a header file and a C++ file as the stitching wrapper file. Input a vector of cv::Mat and the reference of cv::Mat. This function will tell whether the stitching is successful and return the stitched cv::Mat through a <strong>result</strong> reference. The code in <strong>StitchingWrapper.h</strong> is shown below.</p>\n<pre><code class=\"lang-cpp\">#ifndef Stitching_Header_h\n#define Stitching_Header_h\n\nbool stitch (const cv::vector &lt;cv::Mat&gt; &amp; images, cv::Mat &amp;result);\n\n#endif</code></pre>\n<p>Then implement the <strong>StitchingWrapper.cpp</strong> file with the following code:</p>\n<pre><code class=\"lang-cpp\">#include &quot;stitchingWrapper.h&quot;\n#include &quot;opencv2/highgui/highgui.hpp&quot;\n#include &quot;opencv2/stitching/stitcher.hpp&quot;\n\nusing namespace cv;\n\nbool stitch (const cv::vector &lt;cv::Mat&gt; &amp; images, cv::Mat &amp;result) {\n    Stitcher stitcher = Stitcher::createDefault(false);\n    Stitcher::Status status = stitcher.stitch(images, result);\n\n    if (status != Stitcher::OK) {\n        return false;\n    }\n    return true;\n}</code></pre>\n<p><strong>3.</strong> Now you can customize your stitching method in the new class called <strong>Stitching</strong>. Here is the class method declaration for stitching implemented in the <strong>Stitching.h</strong> file. Users can input an image array and a reference of cv::Mat, it will return the stitching result:</p>\n<pre><code class=\"lang-objc\">#import &lt;Foundation/Foundation.h&gt;\n\n@interface Stitching : NSObject\n+ (bool) stitchImageWithArray:(NSMutableArray*)imageArray andResult:(cv::Mat &amp;) result;\n@end</code></pre>\n<p>Here is the code for <strong>Stitching.mm</strong> file: </p>\n<pre><code class=\"lang-objc\">#import &quot;Stitching.h&quot;\n#import &quot;StitchingWrapper.h&quot;\n#import &quot;OpenCVConversion.h&quot;\n\n#define COMPRESS_RATIO 0.2\n\n@implementation Stitching\n\n+ (bool) stitchImageWithArray:(NSMutableArray*)imageArray andResult:(cv::Mat &amp;) result {\n\n    NSMutableArray* compressedImageArray =[NSMutableArray new];\n    for(UIImage *rawImage in imageArray){\n        UIImage *compressedImage=[self compressedToRatio:rawImage ratio:COMPRESS_RATIO];\n        [compressedImageArray addObject:compressedImage];\n    }\n    [imageArray removeAllObjects];\n\n\n    if ([compressedImageArray count]==0) {\n        NSLog (@&quot;imageArray is empty&quot;);\n        return false;\n    }\n    cv::vector&lt;cv::Mat&gt; matArray;\n\n    for (id image in compressedImageArray) {\n        if ([image isKindOfClass: [UIImage class]]) {\n            cv::Mat matImage = [OpenCVConversion cvMat3FromUIImage:image];\n            matArray.push_back(matImage);\n        }\n    }\n    NSLog(@&quot;Stitching...&quot;);\n    if(!stitch(matArray, result)){\n        return false;\n    }\n\n    return true;\n}\n\n+ (UIImage *)compressedToRatio:(UIImage *)img ratio:(float)ratio {\n    CGSize compressedSize;\n    compressedSize.width=img.size.width*ratio;\n    compressedSize.height=img.size.height*ratio;\n    UIGraphicsBeginImageContext(compressedSize);\n    [img drawInRect:CGRectMake(0, 0, compressedSize.width, compressedSize.height)];\n    UIImage* compressedImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return compressedImage;\n}\n\n@end</code></pre>\n<p>Because of the limited computing ability and memory storage of mobile devices, we don&#39;t suggest you to process full resolution images, because the stitching process may take a long time or cause run out of memory problem. We call the <code>+ (UIImage *)compressedToRatio:(UIImage *)img ratio:(float)ratio</code> method to reduce the photo width and height by a ratio of <strong>COMPRESS_RATIO</strong>, which reduces the resolution dramatically(COMPRESS_RATIO<sup>2</sup>). Then we convert the images to cv::Mat and push them into cv::vector. Finally, we can call the <strong>stitch</strong> function in the <strong>StitchingWrapper.cpp</strong> file to do the actual stitching work.</p>\n<p><strong>4.</strong> Now add an <strong>UIImageView</strong> in the <strong>Main.storyboard</strong>, set its <strong>Mode</strong> to <strong>Aspect Fit</strong> and create its outlet, called <strong>imageView</strong> in the &quot;StitchingViewController.h&quot; file.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/set_imageView.png\" alt=\"Image View\"></p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/imageView.png\" alt=\"Image View\"></p>\n<p>Replace the <strong>StitchingViewController.mm</strong> with the following code:</p>\n<pre><code class=\"lang-objc\">#import &quot;StitchingViewController.h&quot;\n#import &quot;Stitching.h&quot;\n#import &quot;OpenCVConversion.h&quot;\n\n@implementation StitchingViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    __weak StitchingViewController *weakSelf = self;\n\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        cv::Mat stitchMat;\n        if(![Stitching stitchImageWithArray:_imageArray andResult:stitchMat]) {\n            [weakSelf showAlertWithTitle:@&quot;Stitching&quot; andMessage:@&quot;Stitching failed&quot;];\n            return;\n        }\n\n        cv::Mat cropedMat;\n        if(![Cropping cropWithMat:stitchMat andResult:cropedMat]){\n            [weakSelf showAlertWithTitle:@&quot;Cropping&quot; andMessage:@&quot;cropping failed&quot;];\n            return;\n        }\n\n        UIImage *stitchImage=[OpenCVConversion UIImageFromCVMat:cropedMat];\n        UIImageWriteToSavedPhotosAlbum(stitchImage, nil, nil, nil);\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n\n            [weakSelf showAlertWithTitle:@&quot;Save Photo Success&quot; andMessage:@&quot;Panoroma photo is saved to Album, please check it!&quot;];\n            _imageView.image=stitchImage;\n        });\n    });\n\n}\n\n//show the alert view in main thread\n-(void) showAlertWithTitle:(NSString *)title andMessage:(NSString *)message {\n    dispatch_async(dispatch_get_main_queue(), ^{\n        UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:title message:message delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n        [alertView show];\n        [_activityIndicator stopAnimating];\n    });\n}</code></pre>\n<p>Now download the latest photos and click the <strong>Stitch</strong> button. After a minute you should be able to see an amazing panorama photo!</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/uncropped_pano.PNG\" alt=\"uncropped pano\"></p>\n<h3 id=\"cropping-the-panorama\">Cropping the Panorama</h3>\n<p>So far, you have made an excellent panorama, but the uneven black edges are pretty annoying. Let&#39;s improve our code and make your panorama perfect!</p>\n<p><strong>1.</strong> Let&#39;s create a new class called <strong>Cropping</strong> to deal with the black edges problem.</p>\n<p>Replace the code in <strong>Cropping.h</strong> file with the followings:</p>\n<pre><code class=\"lang-objc\">#import &lt;Foundation/Foundation.h&gt;\n\n@interface Cropping : NSObject\n+ (bool) cropWithMat: (const cv::Mat &amp;)src andResult:(cv::Mat &amp;)dest;\n@end</code></pre>\n<p>Then implementation the <code>+ (bool) cropWithMat: (const cv::Mat &amp;)src andResult:(cv::Mat *)dest</code> method in the <strong>Cropping.mm</strong> file like this:</p>\n<pre><code class=\"lang-objc\">#import &quot;Cropping.h&quot;\n\n#define CUTBLACKTHREASHOLD 0.05\n\n@implementation Cropping\n\n+ (bool) cropWithMat: (const cv::Mat &amp;)src andResult: (cv::Mat &amp;)dest {\n    cv::Mat gray;\n    cvtColor(src, gray, CV_BGR2GRAY);//convert src to gray\n\n    cv::Rect roiRect(0,0,gray.cols,gray.rows); // start as the source image - ROI is the complete SRC-Image\n\n    while (1) {\n        NSLog(@&quot;%d %d %d %d&quot;,roiRect.x,roiRect.y,roiRect.width,roiRect.height);\n\n        bool isTopNotBlack=checkBlackRow(gray, roiRect.y,roiRect);\n        bool isLeftNotBlack=checkBlackColumn(gray, roiRect.x,roiRect);\n        bool isBottomNotBlack=checkBlackRow(gray, roiRect.y+roiRect.height,roiRect);\n        bool isRightNotBlack=checkBlackColumn(gray, roiRect.x+roiRect.width,roiRect);\n\n        if(isTopNotBlack &amp;&amp; isLeftNotBlack &amp;&amp; isBottomNotBlack &amp;&amp; isRightNotBlack) {\n            cv::Mat imageReference = src(roiRect);\n            imageReference.copyTo(dest);\n            return true;\n        }\n        // If not, scale ROI down\n        // if x is increased, width has to be decreased to compensate\n        if(!isLeftNotBlack) {\n            roiRect.x++;\n            roiRect.width--;\n        }\n        // same is valid for y\n        if(!isTopNotBlack) {\n            roiRect.y++;\n            roiRect.height--;\n        }\n        if(!isRightNotBlack) {\n            roiRect.width--;\n        }\n        if(!isBottomNotBlack) {\n            roiRect.height--;\n        }\n        if(roiRect.width &lt;= 0 || roiRect.height &lt;= 0) {\n            return false;\n        }\n    }\n}\n\nbool checkBlackRow(const cv::Mat&amp; roi, int y, const cv::Rect &amp;rect) {\n    int zeroCount = 0;\n    for(int x=rect.x; x&lt;rect.width; x++) {\n        if(roi.at&lt;uchar&gt;(y, x) == 0) {\n            zeroCount++;\n        }\n    }\n    if((zeroCount/(float)roi.cols)&gt;CUTBLACKTHREASHOLD) {\n        return false;\n    }\n    return true;\n}\n\n\nbool checkBlackColumn(const cv::Mat&amp; roi, int x,const cv::Rect &amp;rect) {\n    int zeroCount = 0;\n    for(int y=rect.y; y&lt;rect.height; y++) {\n        if(roi.at&lt;uchar&gt;(y, x) == 0) {\n            zeroCount++;\n        }\n    }\n    if((zeroCount/(float)roi.rows)&gt;CUTBLACKTHREASHOLD) {\n        return false;\n    }\n    return true;\n}\n\n@end</code></pre>\n<p>The <code>bool checkBlackRow(const cv::Mat&amp; roi, int y)</code> function checks whether the number of black pixels in row y is more than <strong>CUTBLACKTHREASHOLD</strong>, while the <code>bool checkBlackColumn(const cv::Mat&amp; roi, int x)</code> method checks the same for column x. These two functions indicate whether the row or column is part of a black edge that we don&#39;t need. </p>\n<p><code>+ (bool) cropWithMat: (const cv::Mat &amp;)src andResult: (cv::Mat &amp;)dest</code> converts the src cv::Mat to gray cv::Mat and initializes the <strong>roiRect</strong> to be the frame of <strong>src</strong> cv::Mat. Then it checks each of the four edges of the <strong>src</strong> Mat in <strong>roiRect</strong>. If an edge is black, it narrows the corresponding edge of <strong>roiRect</strong> and repeats checking and narrowing until none of the edges are black. Finally, it will copy the pixels in the <strong>roiRect</strong> of <strong>src</strong> to <strong>dest</strong> to complete the cropping process shown below.</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/cropping.png\" alt=\"cropping\"></p>\n<p><strong>2.</strong> Rewrite the <strong>Stitching.mm</strong> file as shown below: </p>\n<pre><code class=\"lang-objc\">#import &quot;StitchingViewController.h&quot;\n#import &quot;Stitching.h&quot;\n#import &quot;OpenCVConversion.h&quot;\n#import &quot;Cropping.h&quot;\n\n@implementation StitchingViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    __weak StitchingViewController *weakSelf = self;\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        cv::Mat stitchMat;\n        if(![Stitching stitchImageWithArray:_imageArray andResult:stitchMat]) {\n            [weakSelf showAlertWithTitle:@&quot;Stitching&quot; andMessage:@&quot;Stitching failed&quot;];\n            return;\n        }\n\n        cv::Mat cropedMat;\n        if(![Cropping cropWithMat:stitchMat andResult:cropedMat]){\n            [weakSelf showAlertWithTitle:@&quot;Cropping&quot; andMessage:@&quot;cropping failed&quot;];\n            return;\n        }\n\n        UIImage *stitchImage=[OpenCVConversion UIImageFromCVMat:cropedMat];\n        UIImageWriteToSavedPhotosAlbum(stitchImage, nil, nil, nil);\n\n        dispatch_async(dispatch_get_main_queue(), ^{\n\n            [weakSelf showAlertWithTitle:@&quot;Save Photo Success&quot; andMessage:@&quot;Panoroma photo is saved to Album, please check it!&quot;];\n            _imageView.image=stitchImage;\n        });\n    });\n\n}\n\n//show the alert view in main thread\n-(void) showAlertWithTitle:(NSString *)title andMessage:(NSString *)message {\n    dispatch_async(dispatch_get_main_queue(), ^{\n        UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:title message:message delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n        [alertView show];\n        [_activityIndicator stopAnimating];\n    });\n}\n\n@end</code></pre>\n<p>Build and run the app, shoot a series of photos, download them and stitch them together. You should generat a perfect panorama now! Here is an example:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PanoramaDemo/cropped_pano.PNG\" alt=\"cropped pano\"></p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you’ve learned how to use the Virtual Stick feature and the WaypointMission feature of Intelligent Navigation to control the aircraft to rotate and take photos. Also, you learn how to rotate the gimbal to take panorama photos too. Lastly, we used the OpenCV&#39;s features to stitch and crop photos into a cool panorama!</p>\n<p>   Congratulations! Now that you&#39;ve finished the demo project, you can use what you have learnt to start building your own panorama applications. You can improve the project by showing the aircraft&#39;s flight mode type, current GPS satellite count, vertical and horizontal flight speed and the flight altitude, etc. In order to make an amazing Panorama Application, you still have a long way to go! Good luck, and hope you enjoyed this tutorial!</p>","meta":{"title":"Creating a Panorama Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-PanoramaDemo"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI forum, or commenting in the Gitbook. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use DJI Mobile SDK to access the media resources in the SD card of the aircraft&#39;s camera. By the end of this tutorial you will have an app that you can use to preview photos, play videos, download or delete files and so on.</p>\n<p>In order for our app to manage photos and videos, however, it must first be able to take and record them. Fortunately, in our previous tutorial <a href=\"./index.html\">Creating a Camera Application</a> we show you how to implement <strong>Capture</strong> and <strong>Record</strong> functions. Make sure you have read through that tutorial first before embarking on this one.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial. </p>\n<p>Let&#39;s get started!</p>\n<h2 id=\"previewing-photos-and-videos\">Previewing Photos and Videos</h2>\n<h3 id=\"1-importing-the-sdk\">1. Importing the SDK</h3>\n<p>Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;PlaybackDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s import the <strong>DJISDK.framework</strong> to it. If you are not familiar with the process of importing and activating DJI SDK, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h3 id=\"2-importing-the-videopreviewer\">2. Importing the VideoPreviewer</h3>\n<p> <strong>1</strong>. We use the <strong>FFMPEG</strong> decoding library (found at <a href=\"http://ffmpeg.org\" target=\"_blank\"><a href=\"http://ffmpeg.org\">http://ffmpeg.org</a></a>) to do software video decoding here. For the hardware video decoding, we provide a <strong>DJIH264Decoder</strong> decoding library. You can find them in the <strong>VideoPreviewer</strong> folder, which you can download it from <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS/tree/master/Sample%20Code/VideoPreviewer\" target=\"_blank\">DJI iOS SDK Github Repository</a>. Download and copy the entire <strong>VideoPreviewer</strong> folder to your Xcode project&#39;s &quot;Frameworks&quot; folder and then add the &quot;VideoPreviewer.xcodeproj&quot; to the &quot;Frameworks&quot; folder in Xcode project navigator, as shown below:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/projectNavigator.png\" alt=\"projectNavigator\"></p>\n<blockquote>\n<p>Note: Please Make sure the <strong>VideoPreviewer</strong> folder and <strong>DJISDK.framework</strong> are in the same <strong>Frameworks</strong> folder like this:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/frameworksFolderStruct.png\" alt=\"frameworksFolderStruct\"></p>\n</blockquote>\n<p> <strong>2</strong>. Next, let&#39;s select the &quot;PlayBackDemo&quot; target and open the &quot;General&quot; tab. In the &quot;Embedded Binaries&quot; section, press &quot;+&quot; button to add the &quot;VideoPreviewer.framework&quot; as shown below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/addFrameworks.png\" alt=\"addFrameworks\">\n  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/addFrameworksResult.png\" alt=\"addFrameworksResult\"></p>\n<h3 id=\"3-switching-playback-modes\">3. Switching Playback Modes</h3>\n<p>  Now, let&#39;s delete the <strong>ViewController.h</strong> and <strong>ViewController.m</strong> files, which were created by Xcode when you created the project. Then, create a viewController named &quot;DJIRootViewController&quot; and set it as the <strong>Root View Controller</strong> in Main.storyboard. This demo and its code was written to be used with the iPad, so we&#39;ll have to adjust the User Interface of <strong>Main.storyboard</strong> accordingly. We&#39;ll change the <strong>Root View Controller</strong>&#39;s frame. Let&#39;s set its size to <strong>Freeform</strong> under the <strong>Size</strong> dropdown in the <strong>Simulated Metrics</strong> section. In the view section, change the width to <strong>1024</strong> and height to <strong>768</strong>. Take a look at the changes made below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/freeform.png\" alt=\"freeform\">\n  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/changeSize.png\" alt=\"changeSize\"></p>\n<p>Then, add a UIView inside the <strong>Root View Controller</strong> and set it as an IBOutlet called <strong>fpvPreviewView</strong>. Add two UIButtons and one UISegmentedControl at the bottom of the View Control and set their IBOutlets and IBActions. Here we set three segments in the UISegmentedControl: <strong>Capture</strong>, <strong>Record</strong> and <strong>Playback</strong>. Lastly, drag a UILabel to the top, horizontally center it in the view controller and hide it first.</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/rootViewController.png\" alt=\"RootViewController1\"></p>\n<p> Once that&#39;s done, enter the <strong>DJIRootViewController.m</strong> file and import the <strong>DJISDK</strong> and <strong>VideoPreviewer</strong> header files. Then implement the protocols in the class extension. Next, add the two <strong>UIButtons</strong>, the <strong>UISegmentedControl</strong> and the <strong>UILabel</strong>&#39;s IBOutlet properties. Add a boolean property named &quot;isRecording&quot; to check the record state. Lastly, add the IBAction methods for all the UI controls as below:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIRootViewController.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n#import &lt;VideoPreviewer/VideoPreviewer.h&gt;\n\n@interface DJIRootViewController ()&lt;DJICameraDelegate, DJISDKManagerDelegate, DJIPlaybackDelegate, DJIBaseProductDelegate&gt;\n@property (weak, nonatomic) IBOutlet UIButton *recordBtn;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *changeWorkModeSegmentControl;\n@property (weak, nonatomic) IBOutlet UIView *fpvPreviewView;\n@property (weak, nonatomic) IBOutlet UILabel *currentRecordTimeLabel;\n@property (assign, nonatomic) BOOL isRecording;\n\n- (IBAction)captureAction:(id)sender;\n- (IBAction)recordAction:(id)sender;\n- (IBAction)changeWorkModeAction:(id)sender;</code></pre>\n<p>In the viewDidAppear method, let&#39;s set the <strong>fpvPreviewView</strong> instance as a View of <strong>VideoPreviewer</strong> to show the Video Stream and reset it to nil by calling the cleanVideoPreview method in the viewWillDisappear method. Also, in the viewWillDisappear method, we set camera and its playbackManger property&#39;s delegate to nil. Then create a new method named &quot;registerApp&quot; for app registration.</p>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n    [[VideoPreviewer instance] setView:self.fpvPreviewView];\n    [self registerApp];\n}\n\n- (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n\n    __weak DJICamera* camera = [self fetchCamera];\n    if (camera &amp;&amp; camera.delegate == self) {\n        [camera setDelegate:nil];\n    }    \n\n    if (camera &amp;&amp; camera.playbackManager.delegate == self) {\n        [camera.playbackManager setDelegate:nil];\n    }\n\n    [self cleanVideoPreview];\n}\n\n- (void)cleanVideoPreview {\n    [[VideoPreviewer instance] unSetView];\n\n    if (self.fpvPreviewView != nil) {\n        [self.fpvPreviewView removeFromSuperview];\n        self.fpvPreviewView = nil;\n    }\n}\n\n- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}</code></pre>\n<p>Also, implement the DJISDKManagerDelegate methods to do initial setup after register app success. Moreover, in the <code>sdkManagerProductDidChangeFrom</code> method, let&#39;s fetch a camera object and set its delegate and its playbackManager property&#39;s delegate as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (DJICamera*) fetchCamera {\n\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).camera;\n    }\n    return nil;\n}\n\n#pragma mark DJISDKManagerDelegate Method\n\n- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n\n    }else\n    {\n        NSLog(@&quot;registerAppSuccess&quot;);\n        [DJISDKManager startConnectionToProduct];\n        [[VideoPreviewer instance] start];\n    }\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}\n\n-(void) sdkManagerProductDidChangeFrom:(DJIBaseProduct* _Nullable) oldProduct to:(DJIBaseProduct* _Nullable) newProduct\n{\n    if (newProduct) {\n        [newProduct setDelegate:self];\n        DJICamera* camera = [self fetchCamera];\n        if (camera != nil) {\n            camera.delegate = self;\n            camera.playbackManager.delegate = self;\n        }\n    }\n}</code></pre>\n<p>  Furthermore, implement the <strong>DJICameraDelegate</strong> methods, as shown below:</p>\n<pre><code class=\"lang-objc\">\n- (NSString *)formattingSeconds:(int)seconds\n{\n    NSDate *date = [NSDate dateWithTimeIntervalSince1970:seconds];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    [formatter setDateFormat:@&quot;mm:ss&quot;];\n    [formatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];\n\n    NSString *formattedTimeString = [formatter stringFromDate:date];\n    return formattedTimeString;\n}\n\n#pragma mark - DJICameraDelegate\n- (void)camera:(DJICamera *)camera didReceiveVideoData:(uint8_t *)videoBuffer length:(size_t)size\n{\n    [[VideoPreviewer instance] push:videoBuffer length:(int)size];\n}\n\n- (void)camera:(DJICamera *)camera didUpdateSystemState:(DJICameraSystemState *)systemState\n{   \n\n    //Update currentRecordTimeLabel State\n    self.isRecording = systemState.isRecording;\n    [self.currentRecordTimeLabel setHidden:!self.isRecording];\n    [self.currentRecordTimeLabel setText:[self formattingSeconds:systemState.currentVideoRecordingTimeInSeconds]];\n\n    //Update recordBtn State\n    if (self.isRecording) {\n        [self.recordBtn setTitle:@&quot;Stop Record&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.recordBtn setTitle:@&quot;Start Record&quot; forState:UIControlStateNormal];\n    }\n\n    //Update UISegmented Control&#39;s state\n    if (systemState.mode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.mode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }else if (systemState.mode == DJICameraModePlayback){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:2];\n    }\n}</code></pre>\n<p>  Lastly, implement the IBAction methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)captureAction:(id)sender {\n\n    __weak DJIRootViewController *weakSelf = self;\n    __weak DJICamera *camera = [self fetchCamera];\n\n    [camera startShootPhoto:DJICameraShootPhotoModeSingle withCompletion:^(NSError * _Nullable error) {\n        if (error) {\n            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Take Photo Error&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n            [errorAlert show];\n        }\n    }];\n\n}\n\n- (IBAction)recordAction:(id)sender {\n\n    __weak DJIRootViewController *weakSelf = self;\n    __weak DJICamera *camera = [self fetchCamera];\n\n    if (self.isRecording) {\n        [camera stopRecordVideoWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Stop Record Error&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n        }];\n\n    }else\n    {\n        [camera startRecordVideoWithCompletion:^(NSError * _Nullable error) {\n\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Start Record Error&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n        }];\n    }\n}\n\n- (IBAction)changeWorkModeAction:(id)sender {\n\n    __weak DJIRootViewController *weakSelf = self;\n    __weak DJICamera *camera = [self fetchCamera];\n\n    UISegmentedControl *segmentControl = (UISegmentedControl *)sender;\n    if (segmentControl.selectedSegmentIndex == 0) { //CaptureMode\n\n        [camera setCameraMode:DJICameraModeShootPhoto withCompletion:^(NSError * _Nullable error) {\n\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Set CameraWorkModeCapture Failed&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n\n        }];\n\n    }else if (segmentControl.selectedSegmentIndex == 1){ //RecordMode\n\n        [camera setCameraMode:DJICameraModeRecordVideo withCompletion:^(NSError * _Nullable error) {\n\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Set CameraWorkModeRecord Failed&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n\n        }];\n\n    }else if (segmentControl.selectedSegmentIndex == 2){  //PlaybackMode\n\n        [camera setCameraMode:DJICameraModePlayback withCompletion:^(NSError * _Nullable error) {\n\n            if (error) {\n                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@&quot;Set CameraWorkModePlayback Failed&quot; message:error.description delegate:weakSelf cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];\n                [errorAlert show];\n            }\n        }];\n    }\n}</code></pre>\n<p>  As you can see, we have implemented the <strong>Playback</strong> work mode method, just call the <strong>setCameraMode</strong> method of the <strong>DJICamera</strong> class and pass the <strong>DJICameraModePlayback</strong> value to it. Show an alertView in case there is any error.</p>\n<p>  For now, build and run the project in Xcode. You might got a warning of not implementing the <strong>DJIPlaybackDelegate</strong> method, please ignore it for now, we will implement it in the next part. </p>\n<p>  Try to use the <strong>Capture</strong> and <strong>Record</strong> feature to take photos and record videos. Then switch the <strong>Camera Mode</strong> by tapping on the UISegmentControl, switch to <strong>Playback</strong> mode to see if you can see the last photo you took or the last video you recorded. Here is a screenshot of what your playback mode should look like:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/singlePreview.jpg\" alt=\"singlePreview\"></p>\n<h3 id=\"4-previewing-single-files\">4. Previewing Single Files</h3>\n<p>We can switch to the <strong>Playback</strong> mode now. Let&#39;s add two <strong>UISwipeGestureRecognizer</strong>s to preview the previous and the next media files in the SD Card.</p>\n<p>Open the <strong>DJIRootViewController.m</strong> file, create two properties of <strong>UISwipeGestureRecognizer</strong> and name them <strong>swipeLeftGesture</strong> and <strong>swipeRightGesture</strong> in the class extension. Then initialize them in the <strong>initData</strong> method as follows:</p>\n<pre><code class=\"lang-objc\">\n- (void)viewDidLoad {\n    [super viewDidLoad];    \n    [self initData];\n}\n\n- (void)initData\n{\n\n    self.swipeLeftGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeLeftGestureAction:)];\n    self.swipeLeftGesture.direction = UISwipeGestureRecognizerDirectionLeft;\n    self.swipeRightGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeRightGestureAction:)];\n    self.swipeRightGesture.direction = UISwipeGestureRecognizerDirectionRight;\n\n    [self.view addGestureRecognizer:self.swipeLeftGesture];\n    [self.view addGestureRecognizer:self.swipeRightGesture];\n}</code></pre>\n<p>Implement the gesture action selector methods:</p>\n<pre><code class=\"lang-objc\">- (void)swipeLeftGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n     __weak DJICamera* camera = [self fetchCamera];\n     [camera.playbackManager goToNextSinglePreviewPage];\n}\n\n- (void)swipeRightGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n     __weak DJICamera* camera = [self fetchCamera];\n     [camera.playbackManager goToPreviousSinglePreviewPage];\n}</code></pre>\n<p>The above code uses the <strong>goToNextSinglePreviewPage</strong> and <strong>goToPreviousSinglePreviewPage</strong> methods of DJICamera&#39;s playbackManager to preview the next and previous files. Since there are two types of the media files in the SD Card, <strong>Photo</strong> and <strong>Video</strong>, we&#39;ll have to implement video playback feature as well.</p>\n<p>Open <strong>Main.storyboard</strong>, drag a UIView object and position it on the top of the viewController, then drag a UIButton to the view you just added as subview and named <strong>Stop</strong>. Next, drag a UIButton object to the center of the viewController, set its image as &quot;playVideo&quot;(You can get this image file from the project source code, in the Images.xcassets folder).</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/playbackButtons.jpg\" alt=\"playbackButtons\"></p>\n<p> Here we hide the <strong>Stop</strong> and the <strong>playVideo</strong> buttons. Now let&#39;s go to <strong>DJIRootViewController.m</strong> and create IBOutlets and IBActions for the newly added UIs:</p>\n<pre><code class=\"lang-objc\">@property (nonatomic, strong) IBOutlet UIView* playbackBtnsView;\n@property (weak, nonatomic) IBOutlet UIButton *playVideoBtn;\n\n- (IBAction)playVideoBtnAction:(id)sender;\n- (IBAction)stopVideoBtnAction:(id)sender;</code></pre>\n<p>Moreover, before implementing the IBAction methods, we&#39;ll add two new properties of the DJICameraSystemState class and the DJICameraPlaybackState class and named them as <strong>cameraSystemState</strong> and <strong>cameraPlaybackState</strong> respectively in the class extension as shown below:</p>\n<pre><code class=\"lang-objc\">@property (strong, nonatomic) DJICameraSystemState* cameraSystemState;\n@property (strong, nonatomic) DJICameraPlaybackState* cameraPlaybackState;</code></pre>\n<p>These properties are used to save the current camera system state and the playback state. Let&#39;s update the <strong>cameraSystemState</strong> property value and hide the <strong>playbackBtnsView</strong> based on <strong>DJICameraSystemState</strong>&#39;s mode in the <code>- (void)camera:(DJICamera *)camera didUpdateSystemState:(DJICameraSystemState *)systemState</code> delegate method:</p>\n<pre><code class=\"lang-objc\">-(void) camera:(DJICamera*)camera didUpdateSystemState:(DJICameraSystemState*)systemState\n{\n    self.cameraSystemState = systemState; //Update camera system state\n\n    //Update currentRecordTimeLabel State\n    self.isRecording = systemState.isRecording;\n    [self.currentRecordTimeLabel setHidden:!self.isRecording];\n    [self.currentRecordTimeLabel setText:[self formattingSeconds:systemState.currentVideoRecordingTimeInSeconds]];\n\n    //Update playbackBtnsView state\n    BOOL isPlayback = (systemState.mode == DJICameraModePlayback) || (systemState.mode == DJICameraModeMediaDownload);\n    self.playbackBtnsView.hidden = !isPlayback;\n\n    //Update recordBtn State\n    if (self.isRecording) {\n        [self.recordBtn setTitle:@&quot;Stop Record&quot; forState:UIControlStateNormal];\n    }else\n    {\n        [self.recordBtn setTitle:@&quot;Start Record&quot; forState:UIControlStateNormal];\n    }\n\n    //Update UISegmented Control&#39;s state\n    if (systemState.mode == DJICameraModeShootPhoto) {\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:0];\n    }else if (systemState.mode == DJICameraModeRecordVideo){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:1];\n    }else if (systemState.mode == DJICameraModePlayback){\n        [self.changeWorkModeSegmentControl setSelectedSegmentIndex:2];\n    }\n}</code></pre>\n<p>Additionally, implement the <code>- (void)playbackManager:(DJIPlaybackManager *)playbackManager didUpdatePlaybackState:(DJICameraPlaybackState *)playbackState</code> delegate method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)playbackManager:(DJIPlaybackManager *)playbackManager didUpdatePlaybackState:(DJICameraPlaybackState *)playbackState\n{\n    if (self.cameraSystemState.mode == DJICameraModePlayback) {   \n        self.cameraPlaybackState = playbackState;\n        [self updateUIWithPlaybackState:playbackState];\n\n    }else\n    {\n        [self.playVideoBtn setHidden:YES];\n    }\n}\n\n- (void)updateUIWithPlaybackState:(DJICameraPlaybackState *)playbackState\n{\n    if (playbackState.playbackMode == DJICameraPlaybackModeSingleFilePreview) {\n        if (playbackState.mediaFileType == DJICameraPlaybackFileFormatJPEG || playbackState.mediaFileType == DJICameraPlaybackFileFormatRAWDNG) { //Photo Type            \n            [self.playVideoBtn setHidden:YES];\n        }else if (playbackState.mediaFileType == DJICameraPlaybackFileFormatVIDEO) //Video Type\n        {\n            [self.playVideoBtn setHidden:NO];\n        }\n    }else if (playbackState.playbackMode == DJICameraPlaybackModeSingleVideoPlaybackStart)                \n    { //Playing Video\n        [self.playVideoBtn setHidden:YES];\n    }else if (playbackState.playbackMode == DJICameraPlaybackModeMultipleFilesPreview){\n        [self.playVideoBtn setHidden:YES];\n    }\n}</code></pre>\n<p>As you can see, we have updated the <strong>cameraPlaybackState</strong> property&#39;s value in the <code>- (void)playbackManager:(DJIPlaybackManager *)playbackManager didUpdatePlaybackState:(DJICameraPlaybackState *)playbackState</code> delegate method, and have also updated the <strong>playVideoBtn</strong>&#39;s hidden state based on the DJICameraSystemState&#39;s <strong>mode</strong> and the DJICameraPlaybackState&#39;s <strong>playbackMode</strong>.</p>\n<p>Finally, we can implement the <strong>IBAction</strong> methods as follows:</p>\n<pre><code class=\"lang-objc\">- (IBAction)playVideoBtnAction:(id)sender {\n    __weak DJICamera *camera = [self fetchCamera];\n    if (self.cameraPlaybackState.mediaFileType == DJICameraPlaybackFileFormatVIDEO) {\n        [camera.playbackManager startVideoPlayback];\n    }\n}\n\n- (IBAction)stopVideoBtnAction:(id)sender {\n    __weak DJICamera *camera = [self fetchCamera];\n    if (self.cameraPlaybackState.mediaFileType == DJICameraPlaybackFileFormatVIDEO) {\n        if (self.cameraPlaybackState.videoPlayProgress &gt; 0) {\n            [camera.playbackManager stopVideoPlayback];\n        }\n    }\n}</code></pre>\n<p>In the <strong>playVideoBtnAction</strong> and <strong>stopVideoBtnAction</strong> methods, we check if the media type is video, then call the <strong>startVideoPlayback</strong> and the <strong>stopVideoPlayback</strong> methods of the <strong>DJICamera</strong>&#39;s playbackManager to start and stop playing the video. </p>\n<p>Once it&#39;s done, build and run the project. Try swiping left and right in playbackMode to navigate through your photos and videos. If you see the play button at the center of the screen, press it to play the video.</p>\n<p>Playing your video through the playback app:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/playVideo.gif\" alt=\"playVideo\"></p>\n<h3 id=\"5-previewing-multiple-files\">5. Previewing Multiple Files</h3>\n<p>Before we move forward, let&#39;s explain the <strong>Playback mode</strong>. There are multiple playback modes in the camera, and we can check the <strong>DJICameraPlaybackMode</strong> enum type in the <strong>DJICameraPlaybackState.h</strong> file as follows:</p>\n<pre><code class=\"lang-objc\">/**\n *  A playback mode represents a task that the Playback manager is executing.\n */\ntypedef NS_ENUM (uint8_t, DJICameraPlaybackMode){\n    /**\n     *  Single file preview\n     */\n    DJICameraPlaybackModeSingleFilePreview = 0x00,\n    /**\n     *  Single photo zoomed\n     */\n    DJICameraPlaybackModeSinglePhotoZoomMode = 0x01,\n    /**\n     *  Single video play start\n     */\n    DJICameraPlaybackModeSingleVideoPlaybackStart = 0x02,\n    /**\n     *  Single video play pause\n     */\n    DJICameraPlaybackModeSingleVideoPlaybackPause = 0x03,\n    /**\n     *  Multiple file edit\n     */\n    DJICameraPlaybackModeMultipleFilesEdit = 0x04,\n    /**\n     *  Multiple file preview\n     */\n    DJICameraPlaybackModeMultipleFilesPreview = 0x05,\n    /**\n     *  Download file\n     */\n    DJICameraPlaybackModeDownload = 0x06,\n    /**\n     *  Unknown mode\n     */\n    DJICameraPlaybackModeUnknown = 0xFF,\n};</code></pre>\n<p>As shown in the code above, we can preview files in two ways: <strong>Single Preview</strong> and <strong>Multiple Preview</strong>. We can also zoom into out of photos, play videos, delete photos and videos and even download them. </p>\n<p>We will learn how to preview multiple files here. Here is what <strong>Multiple Preview</strong> looks like:</p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/multiplePreview.jpg\" alt=\"multiplePreview\"></p>\n<p>You can preview at most eight files at the same time. Since the preview images are shown in the <strong>fpvPreviewView</strong>, you cannot interact with them yet. Let&#39;s add buttons and swipe gestures to interact with them.</p>\n<p>First, we will create a new file named &quot;DJIPlaybackMultiSelectViewController&quot;, which will be a subclass of UIViewController. Make sure the check box for <strong>Also create XIB file</strong> is selected when creating the file. Then open the DJIPlaybackMultiSelectViewController.xib file and, under the <strong>Size</strong> dropdown in the <strong>Simulated Metrics</strong> section, set its size to <strong>Freeform</strong> . In the view section, change the width to &quot;1024&quot; and height to &quot;768&quot;. Take a look at the changes made below:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/freeform.png\" alt=\"freeform\">\n  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/changeSize.png\" alt=\"changeSize\"></p>\n<p>Then drag a <strong>UIView</strong> object to the viewController as subview and set its name to <strong>Buttons View</strong>. Next set its frame as follows:</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/buttonsViewFrame.png\" alt=\"buttonsViewFrame\"></p>\n<p>Moreover, drag eight <strong>UIButton</strong> objects to the <strong>Buttons View</strong> as subviews and position them as follows(You can check the demo project&#39;s <strong>DJIPlaybackMultiSelectViewController.xib</strong> file to get the details on how to setup these buttons&#39;s frame):</p>\n<p>  <img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/buttonsView.png\" alt=\"buttonsView\"></p>\n<p>These buttons represent eight media files when you are in the <strong>Multiple Preview Mode</strong>. Pressing any of these buttons will enter <strong>Single Preview Mode</strong>. </p>\n<p>Now let&#39;s open the <strong>DJIPlaybackMultiSelectViewController.h</strong> file and create two block properties as follows:</p>\n<pre><code class=\"lang-objc\">#import &lt;UIKit/UIKit.h&gt;\n\n@interface DJIPlaybackMultiSelectViewController : UIViewController\n\n@property (copy, nonatomic) void (^selectItemBtnAction)(int index);\n@property (copy, nonatomic) void (^swipeGestureAction)(UISwipeGestureRecognizerDirection direction);\n\n@end</code></pre>\n<p>The first block is used to check the selected button action with index, the second one is used to check the swipe gesture action.</p>\n<p>Then go to DJIPlaybackMultiSelectViewController.m file and create four UISwipeGestureRecognizer properties to represent the <strong>left</strong>, <strong>right</strong>, <strong>up</strong> and <strong>down</strong> swipe gestures. Additionally, create eight IBAction methods and link them to the UIButton objects in the DJIPlaybackMultiSelectViewController.xib file:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJIPlaybackMultiSelectViewController.h&quot;\n\n@interface DJIPlaybackMultiSelectViewController()\n\n@property(nonatomic, strong) UISwipeGestureRecognizer *swipeLeftGesture;\n@property(nonatomic, strong) UISwipeGestureRecognizer *swipeRightGesture;\n@property(nonatomic, strong) UISwipeGestureRecognizer *swipeUpGesture;\n@property(nonatomic, strong) UISwipeGestureRecognizer *swipeDownGesture;\n\n- (IBAction)selectFirstItemBtnAction:(id)sender;\n- (IBAction)selectSecondItemBtnAction:(id)sender;\n- (IBAction)selectThirdItemBtnAction:(id)sender;\n- (IBAction)selectFourthItemBtnAction:(id)sender;\n- (IBAction)selectFifthItemBtnAction:(id)sender;\n- (IBAction)selectSixthItemBtnAction:(id)sender;\n- (IBAction)selectSeventhItemBtnAction:(id)sender;\n- (IBAction)selectEighthItemBtnAction:(id)sender;\n\n@end</code></pre>\n<p>Init the swipe gestures properties in the viewDidLoad method and implement the action methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.swipeLeftGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeLeftGestureAction:)];\n    self.swipeLeftGesture.direction = UISwipeGestureRecognizerDirectionLeft;\n    self.swipeRightGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeRightGestureAction:)];\n    self.swipeRightGesture.direction = UISwipeGestureRecognizerDirectionRight;\n    self.swipeUpGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeUpGestureAction:)];\n    self.swipeUpGesture.direction = UISwipeGestureRecognizerDirectionUp;\n    self.swipeDownGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeDownGestureAction:)];\n    self.swipeDownGesture.direction = UISwipeGestureRecognizerDirectionDown;\n\n    [self.view addGestureRecognizer:self.swipeLeftGesture];\n    [self.view addGestureRecognizer:self.swipeRightGesture];\n    [self.view addGestureRecognizer:self.swipeUpGesture];\n    [self.view addGestureRecognizer:self.swipeDownGesture];\n\n}\n\n#pragma mark UIGestureAction Methods\n- (void)swipeLeftGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n    if (self.swipeGestureAction) {\n        self.swipeGestureAction(UISwipeGestureRecognizerDirectionLeft);\n    }\n}\n\n- (void)swipeRightGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n    if (self.swipeGestureAction) {\n        self.swipeGestureAction(UISwipeGestureRecognizerDirectionRight);\n    }\n}\n\n- (void)swipeUpGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n    if (self.swipeGestureAction) {\n        self.swipeGestureAction(UISwipeGestureRecognizerDirectionUp);\n    }\n}\n\n- (void)swipeDownGestureAction:(UISwipeGestureRecognizer *)gesture\n{\n    if (self.swipeGestureAction) {\n        self.swipeGestureAction(UISwipeGestureRecognizerDirectionDown);\n    }\n}</code></pre>\n<p>These four swipe gestures are for single and multiple files preview. Swipe left or right to preview files in <strong>Single Preview Mode</strong>, swipe up or down to preview files in <strong>Multiple Preview Mode</strong>. We invoke the <strong>swipeGestureAction</strong> block inside the swipe action method with a <strong>UISwipeGestureRecognizerDirection</strong> value.</p>\n<p>Next, implement the IBAction methods for the eight UIButtons as follows:</p>\n<pre><code class=\"lang-objc\">#pragma mark UIButton Action Methods\n- (IBAction)selectFirstItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(0);\n    }\n}\n\n- (IBAction)selectSecondItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(1);\n    }\n}\n\n- (IBAction)selectThirdItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(2);\n    }\n}\n\n- (IBAction)selectFourthItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(3);\n    }\n}\n\n- (IBAction)selectFifthItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(4);\n    }\n}\n\n- (IBAction)selectSixthItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(5);\n    }\n}\n\n- (IBAction)selectSeventhItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(6);\n    }\n}\n\n- (IBAction)selectEighthItemBtnAction:(id)sender {\n    if (self.selectItemBtnAction) {\n        self.selectItemBtnAction(7);\n    }\n}</code></pre>\n<p>We invoke the <strong>selectItemBtnAction</strong> block inside the IBAction methods with related button index. The index starts from 0 here because the file index counted in Playback Multiple Preview Mode starts from 0.</p>\n<p>Now, go back to <strong>DJIRootViewController.m</strong> file. Since we have added the swipe left and swipe right gestures in the DJIPlaybackMultiSelectViewController.m file, let&#39;s delete the <strong>swipeLeftGesture</strong> and <strong>swipeRightGesture</strong> properties and their related codes in the DJIRootViewController.m file to refactor the code structure. </p>\n<p>Then import the DJIPlaybackMultiSelectViewController.h header file and create a property of DJIPlaybackMultiSelectViewController named <strong>playbackMultiSelectVC</strong>. Next, we create a new method named <strong>initPlaybackMultiSelectVC</strong> and implement it in the <strong>viewDidLoad</strong> method:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self initData];\n    [self initPlaybackMultiSelectVC];\n\n}\n\n- (void)initPlaybackMultiSelectVC\n{\n    self.playbackMultiSelectVC = [[DJIPlaybackMultiSelectViewController alloc] initWithNibName:@&quot;DJIPlaybackMultiSelectViewController&quot; bundle:[NSBundle mainBundle]];\n    [self.playbackMultiSelectVC.view setFrame:self.view.frame];\n    [self.view insertSubview:self.playbackMultiSelectVC.view aboveSubview:self.fpvPreviewView];\n\n    __weak DJIRootViewController *weakSelf = self;\n    [self.playbackMultiSelectVC setSelectItemBtnAction:^(int index) {\n\n        __weak DJICamera* camera = [weakSelf fetchCamera];\n        if (weakSelf.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesPreview) {\n            [camera.playbackManager enterSinglePreviewModeWithIndex:index];\n        }else if (weakSelf.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit){\n            [camera.playbackManager toggleFileSelectionAtIndex:index];\n        }\n    }];\n\n    [self.playbackMultiSelectVC setSwipeGestureAction:^(UISwipeGestureRecognizerDirection direction) {\n\n        __weak DJICamera* camera = [weakSelf fetchCamera];\n\n        if (weakSelf.cameraPlaybackState.playbackMode == DJICameraPlaybackModeSingleFilePreview) {\n\n            if (direction == UISwipeGestureRecognizerDirectionLeft) {\n                [camera.playbackManager goToNextSinglePreviewPage];\n            }else if (direction == UISwipeGestureRecognizerDirectionRight){\n                [camera.playbackManager goToPreviousSinglePreviewPage];\n            }\n\n        }else if(weakSelf.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesPreview){\n\n            if (direction == UISwipeGestureRecognizerDirectionUp) {\n                [camera.playbackManager goToNextMultiplePreviewPage];\n            }else if (direction == UISwipeGestureRecognizerDirectionDown){\n                [camera.playbackManager goToPreviousMultiplePreviewPage];\n            }\n        }\n    }];\n}</code></pre>\n<p>So in the <strong>initPlaybackMultiSelectVC</strong> method, we init the <strong>playbackMultiSelectVC</strong> property first, and then we invoke the <strong>selectItemBtnAction</strong> block&#39;s setter method and implement the <strong>toggleFileSelectionAtIndex</strong> method of the <strong>DJICamera</strong>&#39;s playbackManager with selected index. This way, we can switch to Single Preview Mode from Multiple Preview Mode. </p>\n<p>Furthermore, we invoke the <strong>swipeGestureAction</strong> block&#39;s setter method and implement the preview files feature based on the <strong>UISwipeGestureRecognizerDirection</strong> value.</p>\n<p>Once this is done, go to <strong>Main.storyboard</strong> and drag a <strong>UIButton</strong> object to the <strong>playbackBtnsView</strong> as subView, naming it as <strong>Multi Pre</strong> and positioning it as follows:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/multiPreBtn.jpg\" alt=\"multiPreBtn\"></p>\n<p>Finally, create an IBAction method named <strong>multiPreviewButtonClicked</strong> and link it to the above UIButton in the <strong>Main.storyboard</strong>. Implement the method as shown below to enter Multiple Preview Mode:</p>\n<pre><code class=\"lang-objc\">- (IBAction)multiPreviewButtonClicked:(id)sender {\n\n    __weak DJICamera *camera = [self fetchCamera];\n    [camera.playbackManager enterMultiplePreviewMode];\n\n}</code></pre>\n<p>Let&#39;s build and run the project and try to enter Multiple Preview Mode. Use the swipe up and down gestures to preview files. Switch to the Single Preview Mode by pressing any of the eight preview images. Here is a screenshot:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/multiPre.jpg\" alt=\"multiPre\"></p>\n<h2 id=\"deleting-photos-and-videos\">Deleting Photos and Videos</h2>\n<p>You can now preview photos and videos in Single Preview Mode and Multiple Preview Mode. But what if you want to delete a file you don&#39;t like? Let&#39;s implement the delete files feature!</p>\n<p>Go to Main.storyboard and drag three UIButtons to the <strong>playbackBtnsView</strong> as subviews and named them <strong>Select</strong>, <strong>Select All</strong> and <strong>Delete</strong>. We hide the &quot;Select&quot; and &quot;Select All&quot; buttons here. Then go to the <strong>DJIRootViewController.m</strong> file and create two IBOutlets for the &quot;Select&quot; and &quot;Select All&quot; buttons, and also the three IBAction methods for the three buttons as follows:</p>\n<pre><code class=\"lang-objc\">@property (weak, nonatomic) IBOutlet UIButton *selectBtn;\n@property (weak, nonatomic) IBOutlet UIButton *selectAllBtn;\n\n- (IBAction)selectButtonAction:(id)sender;\n- (IBAction)deleteButtonAction:(id)sender;\n- (IBAction)selectAllBtnAction:(id)sender;</code></pre>\n<p>Next, implement the IBAction methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)selectButtonAction:(id)sender {\n    __weak DJICamera *camera = [self fetchCamera];\n    if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit) {\n        [camera.playbackManager exitMultipleEditMode];\n    }else\n    {\n        [camera.playbackManager enterMultipleEditMode];\n    }\n}\n\n- (IBAction)selectAllBtnAction:(id)sender {\n    __weak DJICamera *camera = [self fetchCamera];\n    if (self.cameraPlaybackState.isAllFilesInPageSelected) {\n        [camera.playbackManager unselectAllFilesInPage];\n    }\n    else\n    {\n        [camera.playbackManager selectAllFilesInPage];\n    }\n}</code></pre>\n<p>The above code implements the selectButtonAction method to enter and exit MultipleEditMode by calling the <strong>exitMultipleEditMode</strong> and <strong>enterMultipleEditMode</strong> methods of DJICamera&#39;s playbackManager. Then in selectAllBtnAction IBAction method, we use an if statement to check if all the files in the page are selected and invoke the <strong>selectAllFilesInPage</strong> and <strong>unselectAllFilesInPage</strong> methods of DJICamera&#39;s playbackManager.</p>\n<p>Moreover, update the <strong>selectBtn</strong> and <strong>selectAllBtn</strong> buttons&#39; hidden values in the following method:</p>\n<pre><code class=\"lang-objc\">\n- (void)updateUIWithPlaybackState:(DJICameraPlaybackState *)playbackState\n{\n    if (playbackState.playbackMode == DJICameraPlaybackModeSingleFilePreview) {\n\n        [self.selectBtn setHidden:YES];\n        [self.selectAllBtn setHidden:YES];\n\n        if (playbackState.mediaFileType == DJICameraPlaybackFileFormatJPEG || playbackState.mediaFileType == DJICameraPlaybackFileFormatRAWDNG) { //Photo Type\n\n           [self.playVideoBtn setHidden:YES];\n\n        }else if (playbackState.mediaFileType == DJICameraPlaybackFileFormatVIDEO) //Video Type    {\n           [self.playVideoBtn setHidden:NO];\n        }\n\n     }else if (playbackState.playbackMode == DJICameraPlaybackModeSingleVideoPlaybackStart){ //Playing Video\n\n        [self.selectBtn setHidden:YES];\n        [self.selectAllBtn setHidden:YES];\n        [self.playVideoBtn setHidden:YES];\n\n     }else if (playbackState.playbackMode == DJICameraPlaybackModeMultipleFilesPreview){\n\n        [self.selectBtn setHidden:NO];\n        [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        [self.selectAllBtn setHidden:NO];\n        [self.playVideoBtn setHidden:YES];\n\n     }else if (playbackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit){\n\n        [self.selectBtn setHidden:NO];\n        [self.selectBtn setTitle:@&quot;Cancel&quot; forState:UIControlStateNormal];\n        [self.selectAllBtn setHidden:NO];\n        [self.playVideoBtn setHidden:YES];\n\n     }   \n}</code></pre>\n<p>Before implementing the <strong>deleteButtonAction</strong> method, let&#39;s create two new properties in the class extension as follows:</p>\n<pre><code class=\"lang-objc\">@property (strong, nonatomic) UIAlertView* statusAlertView;\n@property (assign, nonatomic) int selectedFileCount;</code></pre>\n<p>Here, we create an <strong>int</strong> property named <strong>selectedFileCount</strong> to count the number of files currently selected in the Multiple Preview Mode. We also create a <strong>UIAlertView</strong> property named as <strong>statusAlertView</strong> to show alerts when deleting files.</p>\n<p>Create the following three methods to <strong>show</strong>, <strong>dismiss</strong> and <strong>update</strong> the alertView:</p>\n<pre><code class=\"lang-objc\">-(void) showStatusAlertView\n{\n    if (self.statusAlertView == nil) {\n        self.statusAlertView = [[UIAlertView alloc] initWithTitle:@&quot;&quot; message:@&quot;&quot; delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];\n        [self.statusAlertView show];\n    }\n}\n\n-(void) dismissStatusAlertView\n{\n    if (self.statusAlertView) {\n        [self.statusAlertView dismissWithClickedButtonIndex:0 animated:YES];\n        self.statusAlertView = nil;\n    }       \n}\n\n- (void)updateStatusAlertContentWithTitle:(NSString *)title message:(NSString *)message shouldDismissAfterDelay:(BOOL)dismiss\n{\n    if (self.statusAlertView) {\n        [self.statusAlertView setTitle:title];\n        [self.statusAlertView setMessage:message];\n\n        if (dismiss) {\n            [self performSelector:@selector(dismissStatusAlertView) withObject:nil afterDelay:2.0];\n        }\n    }   \n}</code></pre>\n<p>Furthermore, implement the <strong>deleteButtonAction</strong> action method as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)deleteButtonAction:(id)sender {\n\n    self.selectedFileCount = self.cameraPlaybackState.numberOfSelectedFiles;\n\n    if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit) {\n\n        if (self.selectedFileCount == 0) {\n            [self showStatusAlertView];\n            [self updateStatusAlertContentWithTitle:@&quot;Please select files to delete!&quot; message:@&quot;&quot; shouldDismissAfterDelay:YES];\n            return;\n        }else\n        {\n            NSString *title;\n            if (self.selectedFileCount == 1) {\n                title = @&quot;Delete Selected File?&quot;;\n            }else\n            {\n                title = @&quot;Delete Selected Files?&quot;;\n            }\n            UIAlertView *deleteAllSelFilesAlert = [[UIAlertView alloc] initWithTitle:title message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;NO&quot; otherButtonTitles:@&quot;YES&quot;, nil];\n            deleteAllSelFilesAlert.tag = kDeleteAllSelFileAlertTag;\n            [deleteAllSelFilesAlert show];\n        }\n\n    }else if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeSingleFilePreview){\n\n        UIAlertView *deleteCurrentFileAlert = [[UIAlertView alloc] initWithTitle:@&quot;Delete The Current File?&quot; message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;NO&quot; otherButtonTitles:@&quot;YES&quot;, nil];\n        deleteCurrentFileAlert.tag = kDeleteCurrentFileAlertTag;\n        [deleteCurrentFileAlert show];   \n    }\n\n}</code></pre>\n<p>The above code updates the <strong>selectedFileCount</strong> property value with <strong>cameraPlaybackState</strong>&#39;s &quot;numberOfSelectedFiles&quot; value. It then checks the <strong>playbackMode</strong> value of cameraPlaybackState to show alertViews in the &quot;DJICameraPlaybackModeMultipleFilesEdit&quot; and &quot;DJICameraPlaybackModeSingleFilePreview&quot; mode. Here we use macro definition for the UIAlertView&#39;s tag property:</p>\n<pre><code class=\"lang-objc\">#define kDeleteAllSelFileAlertTag 100\n#define kDeleteCurrentFileAlertTag 101</code></pre>\n<p>Finally, let&#39;s implement the UIAlertView delegate method as follows to call the <strong>deleteAllSelectedFiles</strong> and <strong>deleteCurrentPreviewFile</strong> methods of DJICamera&#39;s playbackManager to delete files and update selectBtn&#39;s title:</p>\n<pre><code class=\"lang-objc\">#pragma mark UIAlertView Delegate Method\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    if (alertView.tag == kDeleteAllSelFileAlertTag) {\n        if (buttonIndex == 1) {\n            [self.camera deleteAllSelectedFiles];\n            [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        }\n    }else if (alertView.tag == kDeleteCurrentFileAlertTag){\n        if (buttonIndex == 1) {\n            [self.camera deleteCurrentPreviewFile];\n            [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        }   \n    }\n}</code></pre>\n<p>Build and run the project, and try the select multiple files, delete single and multiple files features. Here&#39;s what it should look like:</p>\n<ul>\n<li>Deleting a Single File:</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/deleteSingleFile.gif\" alt=\"deleteSingleFile\"></p>\n<ul>\n<li>Deleting Multiple Files:</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/deleteMultiFiles.gif\" alt=\"deleteMultiFiles\"></p>\n<h2 id=\"downloading-and-saving-photos\">Downloading And Saving Photos</h2>\n<h3 id=\"1-downloading-photos\">1. Downloading Photos</h3>\n<p>Let&#39;s implement the download photo feature now. First, go to the <strong>Main.storyboard</strong> file and drag a <strong>UIButton</strong> object to the <strong>playbackBtnsView</strong> and name it &quot;Download&quot;. Then position it as shown below:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/download.jpg\" alt=\"download\"></p>\n<p>Then go to <strong>DJIRootViewController.m</strong> file and create the following property objects and IBAction methods in the class extension:</p>\n<pre><code class=\"lang-objc\">@property (strong, nonatomic) NSMutableData *downloadedImageData;\n@property (strong, nonatomic) NSTimer *updateImageDownloadTimer;\n@property (strong, nonatomic) NSError *downloadImageError;\n@property (strong, nonatomic) NSString* targetFileName;\n@property (assign, nonatomic) long totalFileSize;\n@property (assign, nonatomic) long currentDownloadSize;\n@property (assign, nonatomic) int downloadedFileCount;\n\n- (IBAction)downloadButtonAction:(id)sender;</code></pre>\n<p>Lets briefly explain what each of these properties is for.</p>\n<ul>\n<li><strong>downloadedImageData</strong> is used to store the downloaded image&#39;s <strong>NSData</strong></li>\n<li><strong>updateImageDownloadTimer</strong> is used to update the download progress status</li>\n<li><strong>downloadImageError</strong> is for NSError storage</li>\n<li><strong>targetFileName</strong> is used to store the current downloaded image file name</li>\n<li><strong>totalFileSize</strong> is for storing the total file size of each downloading image</li>\n<li><strong>currentDownloadSize</strong> is used to store the downloaded size of the image</li>\n<li><strong>downloadedFileCount</strong> is used to store the downloaded file count</li>\n</ul>\n<p>Let&#39;s init the <strong>downloadedImageData</strong> property in the <strong>initData</strong> method as follows:</p>\n<pre><code class=\"lang-objc\">- (void)initData\n{\n    self.downloadedImageData = [NSMutableData data];\n}</code></pre>\n<p>Before moving forward, we need to first explain the following method in <strong>DJICamera</strong> class:</p>\n<pre><code class=\"lang-objc\">/**\n *  Downloads the selected files. When this method is called. The dataBlock gets called continuously until all the data is downloaded.\n *  The prepare and completion blocks are called once for each file being downloaded. In the prepareBlock, you can get the forthcoming file&#39;s info, like file name, file size, etc.\n *\n *  If an error occurs before the downloading of any files, only the overallCompletionBlock will be called with an error returned.\n *  If an error occurs during the downloading of a file, both dataBlock and overallCompletionBlock will be called with an error returned.\n *\n *  @param prepareBlock         Callback to prepare each file for download.\n *  @param dataBlock            Callback while a file is downloading. The dataBlock can be called multiple times for a file.\n *  @param fileCompletionBlock  Callback after each file have been downloaded.\n *  @param finishBlock          Callback after the downloading is finished.\n */\n- (void)downloadSelectedFilesWithPreparation:(DJIFileDownloadPreparingBlock)prepareBlock process:(DJIFileDownloadingBlock)dataBlock fileCompletion:(DJIFileDownloadCompletionBlock)fileCompletionBlock overallCompletion:(DJICompletionBlock)overallCompletionBlock;</code></pre>\n<p>This method has three params, the first param <strong>prepareBlock</strong> is a file download preparing block. You can do some download initialization work here like showing an alertView to clarify the download file&#39;s file name, file size, etc. The second param <strong>dataBlock</strong> is a download data update block, you can append the downloaded data here and increase the downloaded size data. The third param <strong>fileCompletionBlock</strong> is a file download completion block, you can save the current downloaded image to the Photo Album here. The last param <strong>overallCompletionBlock</strong> is an overal file download completion block.</p>\n<p><strong>Important</strong>: We cannot update the download file status UI in the <strong>dataBlock</strong> block, since it will slow down the file download speed. So we should use the <strong>downloadedImageData</strong> property to append downloaded data and use the <strong>updateImageDownloadTimer</strong> to update the UI.</p>\n<p>So let&#39;s create three new methods here to set up the <strong>updateImageDownloadTimer</strong>:</p>\n<pre><code class=\"lang-objc\">- (void)updateDownloadProgress:(NSTimer *)updatedTimer\n{\n    if (self.downloadImageError) {\n\n        [self stopTimer];\n        [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        [self updateStatusAlertContentWithTitle:@&quot;Download Error&quot; message:[NSString stringWithFormat:@&quot;%@&quot;, self.downloadImageError] shouldDismissAfterDelay:YES];\n\n    }\n    else\n    {\n        NSString *title = [NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, self.downloadedFileCount + 1, self.selectedFileCount];\n        NSString *message = [NSString stringWithFormat:@&quot;FileName:%@, FileSize:%0.1fKB, Downloaded:%0.1fKB&quot;, self.targetFileName, self.totalFileSize / 1024.0, self.currentDownloadSize / 1024.0];\n        [self updateStatusAlertContentWithTitle:title message:message shouldDismissAfterDelay:NO];\n    }\n\n}\n\n- (void)startUpdateTimer\n{\n    if (self.updateImageDownloadTimer == nil) {\n        self.updateImageDownloadTimer = [NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(updateDownloadProgress:) userInfo:nil repeats:YES];\n    }\n}\n\n- (void)stopTimer\n{\n    if (self.updateImageDownloadTimer != nil) {\n        [self.updateImageDownloadTimer invalidate];\n        self.updateImageDownloadTimer = nil;\n    }\n}</code></pre>\n<p>As you can see, we use the startUpdateTimer and stopTimer methods to start and stop the <strong>updateImageDownloadTimer</strong>. Then we implement the <strong>updateDownloadProgress</strong> selector method to update the <strong>statusAlertView</strong>&#39;s title and message value.</p>\n<p>Next, create a new method name <strong>resetDownloadData</strong> to reset all the download related property values:</p>\n<pre><code class=\"lang-objc\">- (void)resetDownloadData\n{\n    self.downloadImageError = nil;\n    self.totalFileSize = 0;\n    self.currentDownloadSize = 0;\n    self.downloadedFileCount = 0;\n\n    [self.downloadedImageData setData:[NSData dataWithBytes:NULL length:0]];\n}</code></pre>\n<p>Furthermore, define two UIAlertView constant tag objects, implement the <strong>downloadButtonAction</strong> method and improve the UIAlertView Delegate Method with the following code:</p>\n<pre><code class=\"lang-objc\">\n#define kDownloadAllSelFileAlertTag 102\n#define kDownloadCurrentFileAlertTag 103\n\n- (IBAction)downloadButtonAction:(id)sender {\n\n    self.selectedFileCount = self.cameraPlaybackState.numberOfSelectedFiles;\n\n    if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeMultipleFilesEdit) {\n\n        if (self.selectedFileCount == 0) {\n            [self showStatusAlertView];\n            [self updateStatusAlertContentWithTitle:@&quot;Please select files to Download!&quot; message:@&quot;&quot; shouldDismissAfterDelay:YES];\n            return;\n        }else\n        {\n            NSString *title;\n            if (self.selectedFileCount == 1) {\n                title = @&quot;Download Selected File?&quot;;\n            }else\n            {\n                title = @&quot;Download Selected Files?&quot;;\n            }\n            UIAlertView *downloadSelFileAlert = [[UIAlertView alloc] initWithTitle:title message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;NO&quot; otherButtonTitles:@&quot;YES&quot;, nil];\n            downloadSelFileAlert.tag = kDownloadAllSelFileAlertTag;\n            [downloadSelFileAlert show];\n        }\n\n    }else if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeSingleFilePreview){\n\n        UIAlertView *downloadCurrentFileAlert = [[UIAlertView alloc] initWithTitle:@&quot;Download The Current File?&quot; message:@&quot;&quot; delegate:self cancelButtonTitle:@&quot;NO&quot; otherButtonTitles:@&quot;YES&quot;, nil];\n        downloadCurrentFileAlert.tag = kDownloadCurrentFileAlertTag;\n        [downloadCurrentFileAlert show];\n    }\n}\n\n#pragma mark UIAlertView Delegate Method\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    __weak DJICamera* camera = [self fetchCamera];\n\n    if (alertView.tag == kDeleteAllSelFileAlertTag) {\n\n        if (buttonIndex == 1) {\n            [camera.playbackManager deleteAllSelectedFiles];\n            [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        }\n\n    }else if (alertView.tag == kDeleteCurrentFileAlertTag){\n\n        if (buttonIndex == 1) {\n            [camera.playbackManager deleteCurrentPreviewFile];\n            [self.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n        }\n\n    }else if (alertView.tag == kDownloadAllSelFileAlertTag){\n\n        if (buttonIndex == 1) {\n            [self downloadFiles];\n        }\n\n    }else if (alertView.tag == kDownloadCurrentFileAlertTag){\n\n        if (buttonIndex == 1) {\n            [self downloadFiles];\n        }\n    }\n\n}</code></pre>\n<p>In <strong>downloadButtonAction</strong> method, we update the <strong>statusAlertView</strong>&#39;s title and message. And create two new <strong>UIAlertView</strong>s to ask users for permission to download files based on the <strong>cameraPlaybackState</strong>&#39;s <strong>playbackMode</strong> value. Finally, in the UIAlertView delegate method, we just implement the <strong>downloadFiles</strong> method once the <strong>OK</strong> button of alertView is pressed. </p>\n<p>Lastly, implement the <strong>downloadFiles</strong> method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void) downloadFiles\n{\n    [self resetDownloadData];\n\n    if (self.cameraPlaybackState.playbackMode == DJICameraPlaybackModeSingleFilePreview) {\n        self.selectedFileCount = 1;\n    }\n\n    __weak DJIRootViewController *weakSelf = self;\n    __weak DJICamera *camera = [self fetchCamera];\n\n    [camera.playbackManager downloadSelectedFilesWithPreparation:^(NSString * _Nullable fileName, DJIDownloadFileType fileType, NSUInteger fileSize, BOOL * _Nonnull skip) {\n\n        [weakSelf startUpdateTimer];\n        weakSelf.totalFileSize = (long)fileSize;\n        weakSelf.targetFileName = fileName;\n\n        [weakSelf showStatusAlertView];\n        NSString *title = [NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, weakSelf.downloadedFileCount + 1, self.selectedFileCount];\n        NSString *message = [NSString stringWithFormat:@&quot;FileName:%@, FileSize:%0.1fKB, Downloaded:0.0KB&quot;, fileName, weakSelf.totalFileSize / 1024.0];\n        [weakSelf updateStatusAlertContentWithTitle:title message:message shouldDismissAfterDelay:NO];\n\n    } process:^(NSData * _Nullable data, NSError * _Nullable error) {\n\n        /**\n         *  Important: Don&#39;t update Download Progress UI here, it will slow down the download file speed.\n         */\n\n        if (data) {\n            [weakSelf.downloadedImageData appendData:data];\n            weakSelf.currentDownloadSize += data.length;\n        }\n        weakSelf.downloadImageError = error;\n\n    } fileCompletion:^{\n\n        NSLog(@&quot;Completed Download&quot;);\n        weakSelf.downloadedFileCount++;\n\n        UIImage *downloadImage = [[UIImage alloc] initWithData:self.downloadedImageData];\n\n        [weakSelf.downloadedImageData setData:[NSData dataWithBytes:NULL length:0]]; //Reset DownloadedImageData when download one file finished\n        weakSelf.currentDownloadSize = 0.0f; //Reset currentDownloadSize when download one file finished\n\n        NSString *title = [NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, weakSelf.downloadedFileCount, weakSelf.selectedFileCount];\n        [weakSelf updateStatusAlertContentWithTitle:title message:@&quot;Completed&quot; shouldDismissAfterDelay:YES];\n\n    } overallCompletion:^(NSError * _Nullable error) {\n\n        NSLog(@&quot;DownloadFiles Error %@&quot;, error.description);\n    }];\n\n}</code></pre>\n<p>In this method, we call the <strong>resetDownloadData</strong> method to reset data first. We check if the playbackMode is <strong>DJICameraPlaybackModeSingleFilePreview</strong> and update the <strong>selectedFileCount</strong> variable&#39;s value. Then we call the following method of the <strong>DJICamera</strong>&#39;s playbackManager:</p>\n<pre><code class=\"lang-objc\">- (void)downloadSelectedFilesWithPreparation:(DJIFileDownloadPreparingBlock)prepareBlock process:(DJIFileDownloadingBlock)dataBlock fileCompletion:(DJIFileDownloadCompletionBlock)fileCompletionBlock overallCompletion:(DJICompletionBlock)overallCompletionBlock;</code></pre>\n<p>In the first block prepareBlock, we call the <strong>startUpdateTimer</strong> method to start updateImageDownloadTimer. Then, we update the <strong>totalFileSize</strong> and <strong>targetFileName</strong> variables. Next, we show statusAlertView and update its title and message with the download image info.</p>\n<p>In the second block dataBlock, we append the <strong>downloadedImageData</strong> with the downloaded image data and update the <strong>currentDownloadSize</strong> and <strong>downloadImageError</strong> variables&#39; values.</p>\n<p>In the third block completion, we increase the <strong>downloadedFileCount</strong> variable. We then create an UIImage object with <strong>downloadedImageData</strong>. Next, we reset downloadedImageData&#39;s data and currentDownloadSize&#39;s value. Moreover, we update <strong>statusAlertView</strong> with the image download info. </p>\n<h3 id=\"2-saving-downloaded-photos-to-photo-album\">2. Saving downloaded photos to Photo Album</h3>\n<p>Now, we have implemented the download photos features, but if we want to save the downloaded photos to the iOS Photo Album?</p>\n<p>To do this, we will create a new property of NSMutableArray class and name it <strong>downloadedImageArray</strong> and initialize it in the <strong>initData</strong> method, also resetting it in the <strong>resetDownloadData</strong> method as follows:</p>\n<pre><code class=\"lang-objc\">- (void)initData\n{\n    self.downloadedImageData = [NSMutableData data];\n    self.downloadedImageArray = [NSMutableArray array];\n}\n\n- (void)resetDownloadData\n{\n    self.downloadImageError = nil;\n    self.totalFileSize = 0;\n    self.currentDownloadSize = 0;\n    self.downloadedFileCount = 0;\n\n    [self.downloadedImageData setData:[NSData dataWithBytes:NULL length:0]];\n    [self.downloadedImageArray removeAllObjects];\n}</code></pre>\n<p>Once that&#39;s done, let&#39;s add two new methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)saveDownloadImage\n{\n    if (self.downloadedImageArray &amp;&amp; self.downloadedImageArray.count &gt; 0)\n    {\n        UIImage *image = [self.downloadedImageArray lastObject];\n        UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);\n        [self.downloadedImageArray removeLastObject];\n    }\n}\n\n- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo\n{\n\n    if (error != NULL)\n    {\n        // Show message when image saved failed\n        [self updateStatusAlertContentWithTitle:@&quot;Save Image Failed!&quot; message:[NSString stringWithFormat:@&quot;%@&quot;, error] shouldDismissAfterDelay:NO];\n    }\n    else\n    {\n        // Show message when image successfully saved\n        if (self.downloadedImageArray)\n        {\n            [self saveDownloadImage];\n\n            if (self.downloadedImageArray.count == 0)\n            {\n                [self updateStatusAlertContentWithTitle:@&quot;Stored to Photos Album&quot; message:@&quot;&quot; shouldDismissAfterDelay:YES];\n            }\n\n        }       \n    }\n\n}</code></pre>\n<p>In the saveDownloadImage method, we check if <strong>downloadedImageArray</strong> is empty and get its last UIImage, assigning it to the <strong>image</strong> variable. Then we use the <strong>UIImageWriteToSavedPhotosAlbum()</strong> method to save the image to the Photo Album and remove the last object from the downloadedImageArray.</p>\n<p>Next, in the selector method, we check if an error has occurred and invoke the <strong>saveDownloadImage</strong> method until the <strong>downloadedImageArray</strong> is empty. At the same time, we update the <strong>statusAlertView</strong> with related titles and messages.</p>\n<p>At the end, add the downloaded image object to downloadedImageArray, and call the stopTimer method and the saveDownloadImage method in the <strong>fileCompletionBlock</strong> block of the <strong>downloadFiles</strong> method:</p>\n<pre><code class=\"lang-objc\">\nfileCompletion:^{\n\n        NSLog(@&quot;Completed Download&quot;);\n        weakSelf.downloadedFileCount++;\n\n        UIImage *downloadImage = [[UIImage alloc] initWithData:self.downloadedImageData];\n        if (downloadImage) {\n            [weakSelf.downloadedImageArray addObject:downloadImage];\n        }\n\n        [weakSelf.downloadedImageData setData:[NSData dataWithBytes:NULL length:0]]; //Reset DownloadedImageData when download one file finished\n        weakSelf.currentDownloadSize = 0.0f; //Reset currentDownloadSize when download one file finished\n\n        NSString *title = [NSString stringWithFormat:@&quot;Download (%d/%d)&quot;, weakSelf.downloadedFileCount, weakSelf.selectedFileCount];\n        [weakSelf updateStatusAlertContentWithTitle:title message:@&quot;Completed&quot; shouldDismissAfterDelay:YES];\n\n        if (weakSelf.downloadedFileCount == weakSelf.selectedFileCount) { //Downloaded all the selected files\n            [weakSelf stopTimer];\n            [weakSelf.selectBtn setTitle:@&quot;Select&quot; forState:UIControlStateNormal];\n            [weakSelf saveDownloadImage];\n        }\n\n    } overallCompletion:^(NSError * _Nullable error) {\n\n        NSLog(@&quot;DownloadFiles Error %@&quot;, error.description);\n    }];</code></pre>\n<p>Let&#39;s build and run the project. Try to download photos in Single Preview Mode and Multiple Preview Mode. Once it&#39;s finished, go to the Photo Album to check if the downloaded photos exist:</p>\n<ul>\n<li>Selecting files and downloading them:</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/downloadFiles1.gif\" alt=\"downloadFiles1\"></p>\n<ul>\n<li>Download completion and photos being saved to the Photo Album:</li>\n</ul>\n<p><img src=\"../images/tutorials-and-samples/iOS/PlaybackDemo/downloadFiles2.gif\" alt=\"downloadFiles2\"></p>\n<h3 id=\"summary\">Summary</h3>\n<p>   In this tutorial, you have learned how to preview photos and videos in Single Preview Mode and Multiple Preview Mode, how to enter multiple edit mode and select files for deleting. You also learned how to download and save photos to the iOS Photo Album. Hope you enjoy it!</p>","meta":{"title":"Creating a Photo and Video Playback Application","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-PlaybackDemo"},"locale":"en"}{"content":"<!-- toc -->\n\n<p>This tutorial is designed for you to obtain a better understanding of the DJI Remote Logger Tool. It will teach you how to use it for showing application log messages on a simple webpage.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>  In order to use the DJI Remote Logger Tool, you should have two parts: <strong>DJI iOS Mobile SDK</strong> and <strong>Server Script</strong>. The remote logger feature is integrated inside the SDK, you can use this feature in your application directly. For the server part, there are two connection modes showing below:</p>\n<h3 id=\"http-mode\">HTTP Mode</h3>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/httpModeFinalOne.png\" alt=\"httpMode\"></p>\n<p>You can connect your iOS device and Mac to the same WiFi network or connect to a local wireless connection created on your Mac too. This would be helpful when you test your application outside without internet connection.</p>\n<h3 id=\"localhost-mode\">Localhost Mode</h3>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/localHostModeFinal.png\" alt=\"localHostMode\"></p>\n<p>If you don&#39;t have iOS device, you can use your Xcode Simulator too. Using the url string like <strong><a href=\"http://localhost:4567\">http://localhost:4567</a></strong> can work well with the server script.</p>\n<h2 id=\"setup-and-run-the-server\">Setup and Run the Server</h2>\n<p>  You can get the server script from the <strong>Server</strong> folder from the <strong>Github Page</strong>. Please follow the steps below to setup the server:</p>\n<ol>\n<li>Open your terminal app and go to the Server folder</li>\n<li>Run bash script with the command: <code>./run_log_server.bash</code></li>\n<li>Open the webpage with the address shown in the command line</li>\n</ol>\n<p>If everything goes well, you should see something similar to the following screenshots:</p>\n<hr>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/commandline.png\" alt=\"localHostMode\"></p>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/webpageView.png\" alt=\"webpage\"></p>\n<hr>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<h5 id=\"-1-lack-of-command-line-developer-tools\"><strong>1.</strong> Lack of command line developer tools</h5>\n<p>If you meet the following error, you may need to install the command line developer tools:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/xcodeSelectInstall.jpg\" alt=\"xcodeSelectInstall\"></p>\n<p>Run this command: <code>xcode-select -install</code>, then you will see the following dialog:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/xcodeSelect.png\" alt=\"xcodeSelect\"></p>\n<p>After installing it, try <code>./run_log_server.bash</code> command again. Problem should be solved.</p>\n<h5 id=\"-2-lack-of-ruby-install\"><strong>2.</strong> Lack of Ruby install</h5>\n<p>If you meet the following error, you may need to install ruby:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/installRuby.png\" alt=\"installRuby\"></p>\n<p>Run this command: <code>sudo brew install ruby</code>, after installing ruby successfully, try <code>./run_log_server.bash</code> command again. Problem should be solved.</p>\n<p>For other issues, please check the two problems above.</p>\n<h2 id=\"download-and-import-the-sdk\">Download and Import the SDK</h2>\n<p>You can download the iOS SDK from here: <a href=\"https://developer.dji.com/mobile-sdk/downloads\" target=\"_blank\"><a href=\"https://developer.dji.com/mobile-sdk/downloads\">https://developer.dji.com/mobile-sdk/downloads</a></a>.</p>\n<p>If you are not familiar with importing the SDK to your Xcode project, please check this tutorial on Github: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a></p>\n<h2 id=\"enable-remote-logging\">Enable Remote Logging</h2>\n<p><strong>1.</strong> Implement the <strong>DJISDKManagerDelegate</strong> protocol method in the ViewController.m file&#39;s extension part. Then create a new method named <strong>registerApp</strong> and invoke it in the viewDidAppear method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)registerApp\n{\n    NSString *appKey = @&quot;Enter Your App Key Here&quot;;\n    [DJISDKManager registerApp:appKey withDelegate:self];\n}\n\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    [self registerApp];    \n}</code></pre>\n<blockquote>\n<p><strong>Note:</strong> If you don&#39;t know how to apply as a DJI developer and get the App Key, please refer to the <a href=\"../quick-start/index.html\">Get Started</a>.</p>\n</blockquote>\n<p><strong>2</strong>. Next, let&#39;s implement the DJISDKManagerDelegate method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)sdkManagerDidRegisterAppWithError:(NSError *)error\n{\n    NSString* message = @&quot;Register App Successed!&quot;;\n    if (error) {\n        message = @&quot;Register App Failed! Please enter your App Key and check the network.&quot;;\n    }else\n    {\n        [DJISDKManager enableRemoteLoggingWithDeviceID:@&quot;Enter Device ID Here&quot; logServerURLString:@&quot;Enter URL Here&quot;];\n    }\n\n    [self showAlertViewWithTitle:@&quot;Register App&quot; withMessage:message];\n}</code></pre>\n<p>The delegate method above gets called when the app is registered. If the registration is successful, we can call the <code>+(void) enableRemoteLoggingWithDeviceID: (NSString * _Nullable) deviceID logServerURLString: (NSString*) url;</code> class method of <strong>DJISDKManager</strong> to enable remote logging feature of the SDK by passing the <strong>deviceID</strong> parameter and <strong>url</strong> parameter, which you can get from the server script command line. </p>\n<blockquote>\n<p><strong>Note:</strong> </p>\n<p><strong>1.</strong> The <strong>deviceID</strong> is used to distinguish different iOS devices. You can show log messages from different iOS devices on the same webpage.</p>\n<p><strong>2.</strong> The <strong>url</strong> is shown in the command line like this:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/webUrl.png\" alt=\"webUrl\"></p>\n</blockquote>\n<p><strong>3</strong>. Build and run the project in Xcode. If everything is OK, you will see a &quot;Register App Successed!&quot; alert once the application loads. </p>\n<h2 id=\"show-log-message-on-webpage\">Show Log Message on Webpage</h2>\n<p>   Go to Main.storyboard and drag a UIButton to the center of the view, name it &quot;Log SDK Version&quot; and create an IBAction method, named <code>- (IBAction)logSDKVersionButtonAction:(id)sender</code> for it in the ViewController.m file. Implement the IBAction method shown as below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)logSDKVersionButtonAction:(id)sender {\n   DJILogDebug(@&quot;SDK Version: %@&quot;, [DJISDKManager getSDKVersion]);\n}</code></pre>\n<p>   In the code above, we use <strong>DJILogDebug</strong> Macro to show SDK&#39;s version info. There are five types of log Macros, you can use them for different purposes:</p>\n<ul>\n<li>DJILogError( )</li>\n<li>DJILogWarn( )</li>\n<li>DJILogInfo( )</li>\n<li>DJILogDebug( )</li>\n<li>DJILogVerbose( )</li>\n</ul>\n<p>Finally, build and run the project, press the button, you may be able to see the SDK version log message on the webpage like the followings:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/screenshot.png\" alt=\"appScreenshot\"></p>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/webpageLog.png\" alt=\"webpageLog\"></p>\n<blockquote>\n<p><strong>Note</strong>: If you cannot see the logs on webpage and got the log message in the Xcode Console like this: \n<img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/consoleLog.png\" alt=\"consoleLog\"></p>\n<p>You can solve this issue by adding the following item, &quot;App Transport Security Settings&quot; in the <strong>Info.plist</strong> file and modify the &quot;Allow Arbitrary Loads&quot; BOOL value to YES:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/appTransport.png\" alt=\"appTransport\"></p>\n</blockquote>\n<p> Furthermore, the DJI Remote Logger Tool supports multiple iOS devices logging, you can assign different Device IDs for different iOS devices in the <code>+(void)enableRemoteLoggingWithDeviceID:logServerURLString:</code> class method of DJISDKManager.</p>\n<p> Also you can use url content filter for specific device&#39;s log like this: \n  <code>http://10.81.9.167:4567/?filter=113</code>. </p>\n<p> <img src=\"../images/tutorials-and-samples/iOS/RemoteLoggerDemo/multipleDevices.png\" alt=\"multipleDevices\"></p>\n<h3 id=\"summary\">Summary</h3>\n<p>  Congratulations! You&#39;ve learned how to use DJI Remote Logger Tool to show log messages of your application using DJI Mobile SDK. With DJI Remote Logger Tool, you can developer and debug your application with DJI Mobile SDK more efficiently. Hope you enjoy this tutorial, Thanks!</p>","meta":{"title":"DJI Remote Logger Tutorial","version":"v3.2","date":"2016-06-24T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/DJIRemoteLoggerDemo"},"locale":"en"}{"content":"<p><em>If you come across any mistakes or bugs in this tutorial, please let us know using a Github issue, a post on the DJI Forum. Please feel free to send us Github pull request and help us fix any issues.</em></p>\n<hr>\n<p>In this tutorial, you will learn how to use the DJISimulator in your Xcode project using DJI Mobile SDK. With the help of Virtual Stick control, you can input Virtual Stick flight control data and check the changes of simulator state in real time.</p>\n<p>You can download the project source code from Github Page by pressing the <strong>Github Tag</strong> on top of this tutorial.</p>\n<p>We use Phantom 4 as an example to make this demo.</p>\n<p>Let&#39;s get started!</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>DJISimulator is used to control the aircraft in a simulated environment based on the virtual stick input. The simulated aircraft state information will also be displayed on the screen.</p>\n<p>You can use the <code>DJISimulator</code> class in <code>DJIFlightController</code> to control the simulation. It allows both manual and automated flights to be simulated without actually flying the aircraft.</p>\n<p>Additionally, simulator initialization, monitoring and termination can be controlled directly through the SDK allowing for application development in continuous integration environments.</p>\n<h2 id=\"implementing-the-ui-of-the-application\">Implementing the UI of the Application</h2>\n<h3 id=\"importing-sdk-and-register-application\">Importing SDK and Register Application</h3>\n<p>Now, let&#39;s create a new project in Xcode, choose <strong>Single View Application</strong> template for your project and press &quot;Next&quot;, then enter &quot;DJISimulatorDemo&quot; in the <strong>Product Name</strong> field and keep the other default settings.</p>\n<p>Once the project is created, let&#39;s delete the <strong>ViewController.h</strong> and <strong>ViewController.m</strong> files, which were created by Xcode when you create the project. Then create a UIView Controller named <strong>RootViewController</strong> and set the class of original ViewController object in storyboard to &quot;RootViewController&quot;.</p>\n<p>Next, let&#39;s import the DJISDK.framework to the project and implement the registration process in the <strong>RootViewController</strong>. If you are not familiar with the process of importing and activating DJI SDK, please check this tutorial: <a href=\"../application-development-workflow/workflow-integrate.html#Xcode-Project-Integration\">Importing and Activating DJI SDK in Xcode Project</a> for details.</p>\n<h3 id=\"working-on-the-ui-of-application\">Working on the UI of Application</h3>\n<h4 id=\"creating-the-ui-of-rootviewcontroller\">Creating the UI of RootViewController</h4>\n<p>Let&#39;s open the &quot;Main.storyboard&quot; and make the <strong>RootViewController</strong> embed in a Navigation Controller and set it as the Storyboard Entry Point. Next, drag and drop two UILabel objects to the RootViewController and named them as &quot;Product Connection Status&quot; and &quot;Model: Not Available&quot;. Moreover, drag and drop a UIButton object and place under the two UILabels, named it as &quot;Open&quot;, then set its background image as &quot;btn.png&quot; file, which you can get it from the Github Sample Project. Lastly, setup the UI elements&#39; auto layout to support multiple device screen size.</p>\n<h4 id=\"creating-the-ui-of-djisimulatorviewcontroller\">Creating the UI of DJISimulatorViewController</h4>\n<p>Drag and drop another ViewController object from the Object Library to the right of <strong>RootViewController</strong> in the storyboard. Then create another UIViewController class file in the navigator and named it as &quot;DJISimulatorViewController&quot;, then set the class name in storyboard too.</p>\n<p>Furthermore, drag and drop 5 UIButton objects and place them on top, named them from the left to right as &quot;EnterVirtualStickControl&quot;, &quot;ExitVirtualStickControl&quot;, &quot;Start Simulator&quot;, &quot;Takeoff&quot; and &quot;Land&quot;. Make sure they are place inside a UIView object as subviews. Next, drag and drop a UILabel and place it under the 5 UIButton objects, named it as &quot;Simulator State&quot;. </p>\n<p>Lastly, place two UIImageView objects inside a UIView (Label it as &quot;VirtualStick Left&quot;) as subviews, and set their images as &quot;stick_base.png&quot; and &quot;stick_normal.png&quot;, which you can get them from the Github sample project. Now, the left joystick&#39;s UI has setuped. Similiarly, let&#39;s make the right joystick&#39;s UI in the same way. </p>\n<p>For more detail configurations of storyboard, please check the Github sample project. If everything goes well, you should see the following screenshot:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/SimulatorDemo/simulatorStoryboard.png\" alt=\"\"></p>\n<h2 id=\"working-on-rootviewcontroller\">Working on RootViewController</h2>\n<p>Let&#39;s open RootViewController.m file and create IBOutlets properties to link the UI elements in storyboard. Then add the following method to update the two UILabel objects&#39; content when product connection update: </p>\n<pre><code class=\"lang-objc\">-(void) updateStatusBasedOn:(DJIBaseProduct* )newConnectedProduct {\n    if (newConnectedProduct){\n        self.connectStatusLabel.text = NSLocalizedString(@&quot;Status: Product Connected&quot;, @&quot;&quot;);\n        self.modelNameLabel.text = [NSString stringWithFormat:NSLocalizedString(@&quot;Model: \\%@&quot;, @&quot;&quot;),newConnectedProduct.model];\n        self.modelNameLabel.hidden = NO;\n\n    }else {\n        self.connectStatusLabel.text = NSLocalizedString(@&quot;Status: Product Not Connected&quot;, @&quot;&quot;);\n        self.modelNameLabel.text = NSLocalizedString(@&quot;Model: Unknown&quot;, @&quot;&quot;);\n    }\n}</code></pre>\n<p>Next, invoke the above method at the end of both the <code>viewDidAppear</code> method and <code>sdkManagerProductDidChangeFrom:to:</code> method as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidAppear:(BOOL)animated\n{\n    ...\n\n    if(self.product){\n        [self updateStatusBasedOn:self.product];\n    }\n}</code></pre>\n<pre><code class=\"lang-objc\">- (void)sdkManagerProductDidChangeFrom:(DJIBaseProduct *)oldProduct to:(DJIBaseProduct *)newProduct\n{\n    ...\n\n    [self updateStatusBasedOn:newProduct];\n}</code></pre>\n<p>For more details of the implementation of RootViewController, please check the Github sample project.</p>\n<h2 id=\"implementing-virtualstickview\">Implementing VirtualStickView</h2>\n<p>In order to input some simulated data, like <code>pitch</code>, <code>roll</code>, <code>yaw</code> and <code>verticalThrottle</code>, you will need a virtual stick control. In our previous step, we have finished the UI of the virtual stick, let&#39;s work on the implementation.</p>\n<p>We implement the virtual stick control base on an open source Github project <a href=\"https://github.com/pyzhangxiang/joystick-ios\" target=\"_blank\">joystick_ios</a>, now create a new UIView class and named it as <strong>VirtualStickView</strong>. You can check the same class files in the Github Sample Project for implementation details, here we just explain the notification logic.</p>\n<p>The following method will be invoked in <code>touchEvent:</code>, <code>touchesEnded:withEvent:</code>, <code>touchesCancelled:withEvent:</code> and <code>onUpdateTimerTicked:</code> methods in VirtualStickView.m file:</p>\n<pre><code class=\"lang-objc\">- (void)notifyDir:(CGPoint)dir\n{\n    NSValue *vdir = [NSValue valueWithCGPoint:dir];\n    NSDictionary *userInfo = [NSDictionary dictionaryWithObjectsAndKeys:\n                              vdir, @&quot;dir&quot;, nil];\n\n    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];\n    [notificationCenter postNotificationName:@&quot;StickChanged&quot; object:self userInfo:userInfo];\n}</code></pre>\n<p>When you touch on the virtual stick image and drag it around inside the <strong>VirtualStickView</strong>, the NSNotificationCenter will post a notification with the name of &quot;StickChanged&quot; and the location of the current virtual stick, which uses a CGPoint to represent it.</p>\n<h2 id=\"implementing-djisimulatorviewcontroller\">Implementing DJISimulatorViewController</h2>\n<p>Once you finished implementing the VirtualStickView, let&#39;s continue to implement the last <strong>DJISimulatorViewController</strong>. Open the DJISimulatorViewController.m file and import the following header files and create related IBOutlet properties and IBAction methods:</p>\n<pre><code class=\"lang-objc\">#import &quot;DJISimulatorViewController.h&quot;\n#import &quot;VirtualStickView.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\n@interface DJISimulatorViewController ()&lt;DJISimulatorDelegate&gt;\n\n@property(nonatomic, weak) IBOutlet VirtualStickView *joystickLeft;\n@property(nonatomic, weak) IBOutlet VirtualStickView *joystickRight;\n\n@property (weak, nonatomic) IBOutlet UIButton *simulatorButton;\n@property (weak, nonatomic) IBOutlet UILabel *simulatorStateLabel;\n@property (assign, nonatomic) BOOL isSimulatorOn;\n@property (assign, nonatomic) float mXVelocity;\n@property (assign, nonatomic) float mYVelocity;\n@property (assign, nonatomic) float mYaw;\n@property (assign, nonatomic) float mThrottle;\n\n- (IBAction) onEnterVirtualStickControlButtonClicked:(id)sender;\n- (IBAction) onExitVirtualStickControlButtonClicked:(id)sender;\n- (IBAction) onTakeoffButtonClicked:(id)sender;\n- (IBAction) onSimulatorButtonClicked:(id)sender;\n- (IBAction) onLandButtonClicked:(id)sender;\n\n@end</code></pre>\n<p>Here, we first implement the <strong>DJISimulatorDelegate</strong> protocol in the interface. Then create IBOutlet properties for the left and right <code>VirtualStickView</code>, and the <code>simulatorButton</code>, <code>simulatorStateLabel</code>. The <code>isSimulatorOn</code> bool property is used to store the start state of DJISimulator. <code>mXVelocity</code>, <code>mYVelocity</code>, <code>mYaw</code> and <code>mThrottle</code> properties are used to store the <code>DJIVirtualStickFlightControlData</code> struct data of <code>DJIFlightController</code>.</p>\n<p>For the remaining five IBAction methods, they are related to the five UIButtons on top. We can use them to <strong>enter</strong> or <strong>exit</strong> virtual stick, <strong>take off</strong> or <strong>auto land</strong> the aircraft and <strong>start</strong> or <strong>stop</strong> simulator.</p>\n<p>Before we continue to implement the <strong>DJISimulatorViewController</strong>, let&#39;s create the <strong>DemoUtility</strong> class (Inherited from <code>NSObject</code>) to define some common methods:</p>\n<ul>\n<li>DemoUtility.h</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &lt;Foundation/Foundation.h&gt;\n#import &lt;UIKit/UIKit.h&gt;\n\n#define WeakRef(__obj) __weak typeof(self) __obj = self\n#define WeakReturn(__obj) if(__obj ==nil)return;\n\n@class DJIBaseProduct;\n@class DJIAircraft;\n@class DJIGimbal;\n@class DJIFlightController;\n\n@interface DemoUtility : NSObject\n\n+(DJIBaseProduct*) fetchProduct;\n+(DJIAircraft*) fetchAircraft;\n+(DJIFlightController*) fetchFlightController;\n+ (void)showAlertViewWithTitle:(NSString *)title message:(NSString *)message cancelAlertAction:(UIAlertAction*)cancelAlert defaultAlertAction:(UIAlertAction*)defaultAlert viewController:(UIViewController *)viewController;\n\n@end</code></pre>\n<ul>\n<li>DemoUtlity.m</li>\n</ul>\n<pre><code class=\"lang-objc\">#import &quot;DemoUtility.h&quot;\n#import &lt;DJISDK/DJISDK.h&gt;\n\n@implementation DemoUtility\n\n+(DJIBaseProduct*) fetchProduct {\n    return [DJISDKManager product];\n}\n\n+(DJIAircraft*) fetchAircraft {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]);\n    }\n    return nil;\n}\n\n+(DJIFlightController*) fetchFlightController {\n    if (![DJISDKManager product]) {\n        return nil;\n    }\n    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {\n        return ((DJIAircraft*)[DJISDKManager product]).flightController;\n    }\n    return nil;\n}\n\n+ (void)showAlertViewWithTitle:(NSString *)title message:(NSString *)message cancelAlertAction:(UIAlertAction*)cancelAlert defaultAlertAction:(UIAlertAction*)defaultAlert viewController:(UIViewController *)viewController{\n\n    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];\n\n    if (cancelAlert) {\n        [alertController addAction:cancelAlert];\n    }\n    if (defaultAlert) {\n        [alertController addAction: defaultAlert];\n    }\n\n    [viewController presentViewController:alertController animated:YES completion:nil];\n}\n\n@end</code></pre>\n<p>For the <code>fetchProduct</code>, <code>fetchAircraft</code> and <code>fetchFlightController</code> methods, they are used to get the latest DJIBaseProduct, DJIAircraft and DJIFlightController object. For the <code>showAlertViewWithTitle:message: cancelAlertAction:defaultAlertAction:viewController:</code> method, it&#39;s used to show an alertView for our developers.</p>\n<h3 id=\"working-on-the-virtual-stick-control-feature\">Working on the Virtual Stick Control feature</h3>\n<p>Now, let&#39;s come back to the &quot;DJISimulatorViewController.m&quot; file and implement the virtual stick feature. First, we create an NSNotificationCenter variable and invoke the <code>addObserver:selector:name:object:</code> method to observe the &quot;StickChanged&quot; notification, which is post from the <strong>VirtualStickView</strong>. When the notification is post, a selector method <code>onStickChanged:</code> will be invoked to send virtual stick flight control data as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    self.title = @&quot;DJISimulator Demo&quot;;\n\n    NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver: self\n                           selector: @selector (onStickChanged:)\n                               name: @&quot;StickChanged&quot;\n                             object: nil];</code></pre>\n<p>Next, implement the <code>onStickChanged:</code> select method and <code>setThrottle:andYaw:</code>, <code>setXVelocity:andYVelocity:</code> methods as shown below:</p>\n<pre><code class=\"lang-objc\">- (void)onStickChanged:(NSNotification*)notification\n{\n    NSDictionary *dict = [notification userInfo];\n    NSValue *vdir = [dict valueForKey:@&quot;dir&quot;];\n    CGPoint dir = [vdir CGPointValue];\n\n    VirtualStickView* virtualStick = (VirtualStickView*)notification.object;\n    if (joystick) {\n        if (virtualStick == self.virtualStickLeft) {\n            [self setThrottle:dir.y andYaw:dir.x];\n        }\n        else\n        {\n            [self setXVelocity:-dir.y andYVelocity:dir.x];\n        }\n    }\n}\n\n-(void) setThrottle:(float)y andYaw:(float)x\n{\n    self.mThrottle = y * -2;\n    self.mYaw = x * 30;\n\n    [self updateVirtualStick];\n}\n\n-(void) setXVelocity:(float)x andYVelocity:(float)y {\n    self.mXVelocity = x * DJIVirtualStickRollPitchControlMaxVelocity;\n    self.mYVelocity = y * DJIVirtualStickRollPitchControlMaxVelocity;\n    [self updateVirtualStick];\n}\n\n-(void) updateVirtualStick\n{\n    // In rollPitchVelocity mode, the pitch property in DJIVirtualStickFlightControlData represents the Y direction velocity.\n    // The roll property represents the X direction velocity.\n    DJIVirtualStickFlightControlData ctrlData = {0};\n    ctrlData.pitch = self.mYVelocity;\n    ctrlData.roll = self.mXVelocity;\n    ctrlData.yaw = self.mYaw;\n    ctrlData.verticalThrottle = self.mThrottle;\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    if (fc &amp;&amp; fc.isVirtualStickControlModeAvailable) {\n        [fc sendVirtualStickFlightControlData:ctrlData withCompletion:nil];\n    }\n}</code></pre>\n<p>In the code above, we implement the following features:</p>\n<p><strong>1.</strong> In the <code>onStickChanged:</code> method, we get the CGPoint object of the moving virtual stick&#39;s position, cast the notification object to get the <code>VirtualStickView</code> object. Then we invoke the <code>setThrottle:andYaw</code> and <code>setXVelocity:andYVelocity:</code> methods based on the current controlling virtual stick. </p>\n<p><strong>2.</strong> The range of VirtualStickView&#39;s movement is [-1, 1], up and down, left and right. Please check the follow diagram for details:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/SimulatorDemo/virtualStickControl.png\" alt=\"\"></p>\n<p> So the range of <strong>x</strong> and <strong>y</strong> value of <code>dir</code> variable is [-1, 1]. In the <code>setThrottle:andYaw:</code> method, we multiply <code>y</code> by -2 to change the range to [-2, 2] from bottom to top. Then multiply <code>x</code> by 30 to change the range to [-30, 30]. These range are tested by us to achieve a better control experience, you can take them for example. Moreover, you can learn the max and min values of control velocity for throttle and yaw in virtual stick control from the following const variables in <code>DJIFlightController</code>:</p>\n<ul>\n<li>Yaw control</li>\n</ul>\n<pre><code class=\"lang-objc\"> /**\n *  Yaw control angular velocity MAX value is 100 degrees/second.\n */\nDJI_API_EXTERN const float DJIVirtualStickYawControlMaxAngularVelocity;\n/**\n *  Yaw control angular velocity MIN value is -100 degrees/second.\n */\nDJI_API_EXTERN const float DJIVirtualStickYawControlMinAngularVelocity;</code></pre>\n<ul>\n<li>Throttle Control</li>\n</ul>\n<pre><code class=\"lang-objc\"> /**\n *  The vertical control velocity MIN value is -4 m/s in `VirtualStickControlMode`. Positive velocity is up.\n */\nDJI_API_EXTERN const float DJIVirtualStickVerticalControlMinVelocity;\n/**\n *  The vertical control velocity MAX value is 4 m/s in VirtualStickControlMode. Positive velocity is up.\n */\nDJI_API_EXTERN const float DJIVirtualStickVerticalControlMaxVelocity;</code></pre>\n<p>Lastly, invoke the <code>updateVirtualStick</code> method to send the virtual stick control data.</p>\n<p><strong>3.</strong> In the <code>setXVelocity:andYVelocity:</code> method, we multiply the <code>x</code> and <code>y</code> variables with <code>DJIVirtualStickRollPitchControlMaxVelocity</code> to change the range to [-15, 15] for pitch and roll axises velocity control, you can  learn the max and min values of control velocity for roll and pitch in virtual stick control from the following const variables in <code>DJIFlightController</code>:</p>\n<pre><code class=\"lang-objc\">/**\n *  Roll/Pitch control velocity MAX value is 15m/s.\n */\nDJI_API_EXTERN const float DJIVirtualStickRollPitchControlMaxVelocity;\n/**\n *  Roll/Pitch control velocity MIN value is -15m/s.\n */\nDJI_API_EXTERN const float DJIVirtualStickRollPitchControlMinVelocity;</code></pre>\n<p>Then invoke the <code>updateVirtualStick</code> method to send the virtual stick control data.</p>\n<p><strong>4.</strong> In the <code>updateVirtualStick</code> method, we first create and initialize a <code>DJIVirtualStickFlightControlData</code> variable and assign its <code>pitch</code>, <code>roll</code>, <code>yaw</code> and <code>verticalThrottle</code> values with <code>self.mYVelocity</code>, <code>self.mXVelocity</code>, <code>self.mYaw</code> and <code>self.mThrottle</code>. Then invoke the <code>sendVirtualStickFlightControlData:withCompletion:</code> method of DJIFlightController to send the simulated virtual stick control data to the aircraft. </p>\n<p>Once you finished the above step, let&#39;s implement the <strong>Enable Virtual Stick</strong> and <strong>Exit Virtual Stick</strong> IBAction methods:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onEnterVirtualStickControlButtonClicked:(id)sender\n{\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc) {\n        fc.yawControlMode = DJIVirtualStickYawControlModeAngularVelocity;\n        fc.rollPitchControlMode = DJIVirtualStickRollPitchControlModeVelocity;\n\n        [fc enableVirtualStickControlModeWithCompletion:^(NSError *error) {\n            if (error) {\n                [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Enter Virtual Stick Mode: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            }\n            else\n            {\n                [DemoUtility showAlertViewWithTitle:nil message:@&quot;Enter Virtual Stick Mode:Succeeded&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            }\n        }];\n    }\n    else\n    {\n        [DemoUtility showAlertViewWithTitle:nil message:@&quot;Component not exist.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n    }\n}</code></pre>\n<pre><code class=\"lang-objc\">-(IBAction) onExitVirtualStickControlButtonClicked:(id)sender\n{\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc) {\n        [fc disableVirtualStickControlModeWithCompletion:^(NSError * _Nullable error) {\n            if (error){\n                [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Exit Virtual Stick Mode: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            } else{\n                [DemoUtility showAlertViewWithTitle:nil message:@&quot;Exit Virtual Stick Mode:Succeeded&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            }\n        }];\n    }\n    else\n    {\n        [DemoUtility showAlertViewWithTitle:nil message:@&quot;Component not exist.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n    }\n}</code></pre>\n<p>In the <code>onEnterVirtualStickControlButtonClicked:</code> IBAction method, we first assign the <code>yawControlMode</code> and <code>rollPitchControlMode</code> properties of DJIFlightController to <code>DJIVirtualStickYawControlModeAngularVelocity</code> and <code>DJIVirtualStickRollPitchControlModeVelocity</code>. Then invoke the <code>enableVirtualStickControlModeWithCompletion:</code> method of DJIFlightController to enable the virtual stick control. </p>\n<p>Similiarly, in the <code>onExitVirtualStickControlButtonClicked:</code> IBAction method, we invoke the <code>disableVirtualStickControlModeWithCompletion:</code> method of DJIFlightController to disable virtual stick control.</p>\n<h3 id=\"implementing-djisimulator\">Implementing DJISimulator</h3>\n<p>  Before we implement the DJISimulator feature, we may need to update the <code>simulatorButton</code>&#39;s title and hidden state first. Let&#39;s override the <code>viewWillAppear:</code> and <code>viewWillDisappear:</code> methods as shown below:</p>\n<pre><code class=\"lang-objc\">-(void)viewWillAppear:(BOOL)animated {\n\n    [super viewWillAppear:animated];\n\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    if (fc &amp;&amp; fc.simulator) {\n        self.isSimulatorOn = fc.simulator.isSimulatorStarted;\n        [self updateSimulatorUI];\n\n        [fc.simulator addObserver:self forKeyPath:@&quot;isSimulatorStarted&quot; options:NSKeyValueObservingOptionNew context:nil];\n        [fc.simulator setDelegate:self];\n    }\n}\n\n-(void)viewWillDisappear:(BOOL)animated {\n\n    [super viewWillDisappear:animated];\n\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    if (fc &amp;&amp; fc.simulator) {\n        [fc.simulator removeObserver:self forKeyPath:@&quot;isSimulatorStarted&quot;];\n        [fc.simulator setDelegate:nil];\n    }\n}\n\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context {\n    if ([keyPath isEqualToString:@&quot;isSimulatorStarted&quot;]) {\n        self.isSimulatorOn = [[change objectForKey:NSKeyValueChangeNewKey] boolValue];\n        [self updateSimulatorUI];\n    }\n}\n\n-(void) updateSimulatorUI {\n    if (!self.isSimulatorOn) {\n        [self.simulatorButton setTitle:@&quot;Start Simulator&quot; forState:UIControlStateNormal];\n        [self.simulatorStateLabel setHidden:YES];\n    }\n    else {\n        [self.simulatorButton setTitle:@&quot;Stop Simulator&quot; forState:UIControlStateNormal];\n    }\n}</code></pre>\n<p>In the <code>viewWillAppear:</code> method, we first fetch the DJIFlightController object and update the <code>isSimulatorOn</code> variable, then invoke the <code>updateSimulatorUI</code> method to update the <code>simulatorButton</code> label. Furthermore, we use KVO here to observe the changes of <code>isSimulatorStarted</code> variable value of <code>DJISimulator</code>. Then set the delegate of the DJIFlightController&#39;s DJISimulator to self(DJISimulatorViewController).</p>\n<p>Next in the <code>viewWillDisappear:</code> method, we fetch the latest DJIFlightController object, then remove the observer of <code>isSimulatorStarted</code>, and set the delegate of DJISimulator to nil. </p>\n<p>Moreover, in the NSKeyValueObserving method, we fetch and update the latest <code>isSimulatorOn</code> property and invoke the <code>updateSimulatorUI</code> method to update the <code>simulatorButton</code>.</p>\n<p>Now, let&#39;s implement the <code>onSimulatorButtonClicked:</code> IBAction method as shown below:</p>\n<pre><code class=\"lang-objc\">- (IBAction)onSimulatorButtonClicked:(id)sender {\n\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc &amp;&amp; fc.simulator) {\n        if (!self.isSimulatorOn) {\n            // The initial aircraft&#39;s position in the simulator.\n            CLLocationCoordinate2D location = CLLocationCoordinate2DMake(22, 113);\n            [fc.simulator startSimulatorWithLocation:location updateFrequency:20 GPSSatellitesNumber:10 withCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Start simulator error: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n                } else {\n                    [DemoUtility showAlertViewWithTitle:nil message:@&quot;Start Simulator succeeded.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n                }\n            }];\n        }\n        else {\n            [fc.simulator stopSimulatorWithCompletion:^(NSError * _Nullable error) {\n                if (error) {\n                    [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Stop simulator error: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n                } else {\n                    [DemoUtility showAlertViewWithTitle:nil message:@&quot;Stop Simulator succeeded.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n                }\n            }];\n        }\n    }\n}</code></pre>\n<p>In the code above, we first check if the simulator is started, if not, then create an initial aircraft location with CLLocationCoordinate2DMake(22, 113). Next invoke the <code>startSimulatorWithLocation:updateFrequency:GPSSatellitesNumber:withCompletion:</code> method of <code>DJISimulator</code> with the frequency of 20 and GPS satellite number of 10 to start the simulator. For more details of this method, please check the following method&#39;s inline documentations:</p>\n<pre><code class=\"lang-objc\">/**\n *  Start simulator. Will result in error if simulation is already started.\n *\n *  @param location     Simulator coordinate latitude and longitude in degrees.\n *  @param frequency    Aircraft simulator state push frequency in Hz with range [2, 150]. A setting of 10 Hz will result in delegate method being called, 10 times per second.\n *  @param number       The initial number of GPS satellites with range [0, 20].\n *  @param block        The Completion block.\n */\n- (void)startSimulatorWithLocation:(CLLocationCoordinate2D)location updateFrequency:(NSUInteger)frequency GPSSatellitesNumber:(NSUInteger)number withCompletion:(DJICompletionBlock)block;</code></pre>\n<p>if the simulator has already started, we can invoke the <code>stopSimulatorWithCompletion:</code> method of DJISimulator to stop the simulator.</p>\n<p>Lastly, let&#39;s implement the DJI Simulator delegate method as shown below:</p>\n<pre><code class=\"lang-objc\">-(void)simulator:(DJISimulator *)simulator updateSimulatorState:(DJISimulatorState *)state {\n    [self.simulatorStateLabel setHidden:NO];\n    self.simulatorStateLabel.text = [NSString stringWithFormat:@&quot;Yaw: %0.2f Pitch: %0.2f, Roll: %0.2f\\n PosX: %0.2f PosY: %0.2f PosZ: %0.2f&quot;, state.yaw, state.pitch, state.roll, state.positionX, state.positionY, state.positionZ];\n}</code></pre>\n<p>This delegate method will be invoked when the simulator state is updated. We can update the <code>simulatorStateLabel</code>&#39;s hidden state and its text content here.</p>\n<h3 id=\"working-on-takeoff-and-autolanding-features\">Working on Takeoff and AutoLanding features</h3>\n<p>In order to simulate the aircraft&#39;s flight behaviour in a simulated environment, we will implement the take off and auto landing features here in the following two IBAction methods:</p>\n<pre><code class=\"lang-objc\">-(IBAction) onTakeoffButtonClicked:(id)sender\n{\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc) {\n        [fc takeoffWithCompletion:^(NSError *error) {\n            if (error) {\n                [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;Takeoff: %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n            } else {\n                [DemoUtility showAlertViewWithTitle:nil message:@&quot;Takeoff Success.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n            }\n        }];\n    }\n    else\n    {\n        [DemoUtility showAlertViewWithTitle:nil message:@&quot;Component not exist.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n    }\n}\n\n- (IBAction)onLandButtonClicked:(id)sender {\n\n    DJIFlightController* fc = [DemoUtility fetchFlightController];\n    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleCancel handler:nil];\n\n    if (fc) {\n        [fc autoLandingWithCompletion:^(NSError * _Nullable error) {\n            if (error) {\n                [DemoUtility showAlertViewWithTitle:nil message:[NSString stringWithFormat:@&quot;AutoLand : %@&quot;, error.description] cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n\n            } else {\n                [DemoUtility showAlertViewWithTitle:nil message:@&quot;AutoLand Succeeded.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n            }\n        }];\n    }\n    else\n    {\n        [DemoUtility showAlertViewWithTitle:nil message:@&quot;Component not exist.&quot; cancelAlertAction:cancelAction defaultAlertAction:nil viewController:self];\n    }\n}</code></pre>\n<p>In the <code>onTakeoffButtonClicked:</code> IBAction method, we invoke the <code>takeoffWithCompletion:</code> method of DJIFlightController to send the take off command to the aircraft. Similiarly, in the <code>onLandButtonClicked:</code> IBAction method, we invoke the <code>autoLandingWithCompletion:</code> method to send the auto landing command. It&#39;s just that simple and easy.</p>\n<p>We have gone through a long way so far, now, let&#39;s build and run the project, connect the demo application to  your Phantom 4 (Please check the <a href=\"../application-development-workflow/workflow-run.html\">Run Application</a> for more details) and check all the features we have implemented so far. </p>\n<p>If everything goes well, you should see something similiar to the following gif animation:</p>\n<p><img src=\"../images/tutorials-and-samples/iOS/SimulatorDemo/simulatorAnimation.gif\" alt=\"\"></p>\n<ul>\n<li>If the demo application is connected with Phantom 4 successfully, you should see the <code>connectButton</code> button is available to press and the <code>connectStatusLabel</code> and <code>modelNameLabel</code> show the correct infos.</li>\n<li>Press <strong>Open</strong> and enter the simulator demo page, press <strong>EnterVirtualStickControl</strong> button to enable virtual stick control, then press &quot;Start Simulator&quot; to start the simulator.</li>\n<li>Moreover, press the <strong>Takeoff</strong> button to send take off command to the aircraft, if the command executes successfully, you should see the <strong>PosZ</strong> value start to change, means that the aircraft is rising.</li>\n<li>Now you can drag the left and right virtual stick controls to simulate the flight behavious.</li>\n<li>Lastly, press the &quot;Land&quot; button to make the aircraft start auto landing, once it finish, you may notice the <strong>PosZ</strong> value become &quot;0.00&quot;. Press the &quot;Stop Simulator&quot; button to stop the simulator and then press &quot;ExitVirtualStickControl&quot; to disable the virtual stick control.</li>\n</ul>\n<h3 id=\"summary\">Summary</h3>\n<p>In this tutorial, you&#39;ve learned how to use the DJISimulator feature to simulate aircraft&#39;s flight behaviour in a simulated environment based on the virtual stick control input and show the changes of simulator state(Yaw,Pitch,Roll,PosX,PosY and PosZ) in real time. Also you&#39;ve learned how to use Virtual Stick control to send virtual stick flight control data to the aircraft.</p>\n<p>This demo is a simple demonstration of using DJISimulator, to have a better user experience, you can create a 3D simulated environment using 3D game engine like <a href=\"https://unity3d.com\" target=\"_blank\"> Unity3D </a> or <a href=\"http://cocos3d.org\" target=\"_blank\"> Cocos3D </a> to show the simulated data and aircraft flight behavious inside your mobile application (Like the Flight Simulator in DJI Go app)!  </p>\n<p>Furthermore, the DJISimulator allows for automated testing in continous integration environment(Like <a href=\"https://jenkins.io\" target=\"_blank\"> Jenkins </a>), it would help your DJI-SDK based application testing process. Good luck, and hope you enjoyed this tutorial!</p>","meta":{"title":"DJI Simulator Tutorial","version":"v3.2","date":"2016-07-13T00:00:00.000Z","github":"https://github.com/DJI-Mobile-SDK/iOS-SimulatorDemo"},"locale":"en"}{"content":"<h2 id=\"register-as-a-dji-developer\">Register as a DJI Developer</h2>\n<p>Register for a DJI Developer account here: <a href=\"http://developer.dji.com/register\" target=\"_blank\"><a href=\"http://developer.dji.com/register\">http://developer.dji.com/register</a></a>.</p>\n<p>During the registration process, email information and a credit card or phone number will need to be supplied to verify registration. Any credit card information given will only be used for verification and will not be charged.</p>\n<p>This guide assumes Xcode version 7.3 above and Android Studio version 2.1.1.</p>\n<h2 id=\"generate-an-app-key\">Generate an App Key</h2>\n<p>Every application needs a unique App Key to initialize the SDK.</p>\n<p>To create an App Key for an application:</p>\n<p>Go to the DJI developer <a href=\"http://developer.dji.com/en/user/apps\" target=\"_blank\">User Center</a></p>\n<ul>\n<li>Select the &quot;Apps&quot; tab on the left.</li>\n<li>Select the &quot;Create App&quot; button on the right.</li>\n<li><p>Enter the name, platform, package identifier, category and description of the application.</p>\n<ul>\n<li>For iOS, the package identifier is the <a href=\"http://developer.dji.com/en/user/mobile-sdk/ios-configuration\" target=\"_blank\">Bundle Identifier</a>.</li>\n<li>For Android, the package identifier is the <a href=\"http://developer.dji.com/en/user/mobile-sdk/android-configuration/\" target=\"_blank\">Package Name</a>.</li>\n</ul>\n</li>\n<li><p>An application activation email will be sent to complete App Key generation.</p>\n</li>\n<li>The App Key will appear in the user center, and can be copied and pasted into the application.</li>\n</ul>\n<h2 id=\"ios-sample-app\">iOS Sample App</h2>\n<p>The SDK doesn&#39;t need to be downloaded to run the iOS sample application as it&#39;s already included in the project.</p>\n<h3 id=\"ios-sample-code-setup\">iOS Sample Code Setup</h3>\n<p>Download or clone the iOS Sample Github Project from: <a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS\" target=\"_blank\"><a href=\"https://github.com/dji-sdk/Mobile-SDK-iOS\">https://github.com/dji-sdk/Mobile-SDK-iOS</a></a>.</p>\n<p>The sample code includes both an Objective C sample project and a Swift Sample project.</p>\n<p>To run the sample code, an <a href=\"#generate-an-app-key\">App Key</a> needs to be generated and inserted into the source files.</p>\n<h4 id=\"objective-c-app-key-setup\">Objective C App Key Setup</h4>\n<p>Navigate to the <strong>ObjcSampleCode</strong> folder and open the <strong>DJISdkDemo.xcodeproj</strong> project in Xcode.</p>\n<ul>\n<li><p>Change the <a href=\"http://developer.dji.com/en/user/mobile-sdk/ios-configuration\" target=\"_blank\">Bundle Identifier</a> to a unique identifier and use it to generate an <a href=\"#generate-an-app-key\">App Key</a>.</p>\n</li>\n<li><p>Paste the generated App Key string into the <code>appKey</code> variable definition in <strong>DJIRootViewController.m</strong>:</p>\n</li>\n</ul>\n<pre><code class=\"lang-objc\">- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    //Register App with App Key\n    NSString* appKey = @&quot;&quot;; //TODO: Please enter your App Key here\n\n    if ([appKey length] == 0) {\n        ShowResult(@&quot;Please enter your app key.&quot;);\n    }\n    else\n    {\n        [DJISDKManager registerApp:appKey withDelegate:self];\n    }\n\n    [self initUI];\n}</code></pre>\n<h4 id=\"swift-app-key-setup\">Swift App Key Setup</h4>\n<p>Navigate to the <strong>DJISDKSwiftDemo</strong> folder and open the <strong>DJISDKSwiftDemo.xcodeproj</strong> project in Xcode.</p>\n<ul>\n<li><p>Change the <a href=\"http://developer.dji.com/en/user/mobile-sdk/ios-configuration\" target=\"_blank\">Bundle Identifier</a> to a unique identifier and use it to generate an <a href=\"#generate-an-app-key\">App Key</a>.</p>\n</li>\n<li><p>Paste the generated App Key string into the <code>APP_KEY</code> variable definition in <strong>StartupViewController.swift</strong>:</p>\n</li>\n</ul>\n<pre><code class=\"lang-swift\">let APP_KEY = &quot;&quot;//TODO: Please enter App Key Here\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    if(APP_KEY.isEmpty){\n        showAlert(&quot;Please enter your app key.&quot;)\n    }else\n    {\n        DJISDKManager.registerApp(APP_KEY, withDelegate: self)\n    }\n\n    initUI();\n}</code></pre>\n<h2 id=\"android-sample-app\">Android Sample App</h2>\n<p>The SDK doesn&#39;t need to be downloaded to run the Android sample application as it&#39;s already included in the project. </p>\n<h3 id=\"android-sample-code-setup\">Android Sample Code Setup</h3>\n<p>Download or clone the Android Sample Github Project from: <a href=\"https://github.com/dji-sdk/Mobile-SDK-Android\" target=\"_blank\"><a href=\"https://github.com/dji-sdk/Mobile-SDK-Android\">https://github.com/dji-sdk/Mobile-SDK-Android</a></a>.</p>\n<p>Open the project in Android Studio and paste the generated <a href=\"#generate-an-app-key\">App Key</a> string into <code>android:value</code> in the &quot;com.dji.sdk.API_KEY&quot; meda-data element in the &quot;AndroidManifest.xml&quot; file.</p>\n<pre><code class=\"lang-xml\">&lt;!--\n    ADD API_KEY HERE and make sure you\n    are connected to the Internet before\n    the app is launched\n--&gt;\n&lt;meta-data\n    android:name=&quot;com.dji.sdk.API_KEY&quot;\n    android:value=&quot;&quot; /&gt;</code></pre>\n<h2 id=\"run-the-sample-app\">Run the Sample App</h2>\n<p>Compile the sample application to the Android or iOS Mobile Device. Then the Mobile Device can be connected to the DJI product to run the Sample App.</p>\n<p>For Aircraft that use Lightbridge as the wireless link between the Remote Controller and the Aircraft, the Mobile Device is connected to the product by USB.</p>\n<p>For Aircraft or products that use WiFi as a wireless link, the Mobile Device is connected to the product by WiFi.</p>\n<h4 id=\"usb-connection-procedure\">USB Connection Procedure</h4>\n<p><em>Phantom 4, Phantom 3 Professional, Phantom 3 Advanced, Inspire series, M100, M600:</em></p>\n<p>Turn on the Remote Controller.</p>\n<ul>\n<li>Turn on the Aircraft and wait until the Remote Controller has connected with the Aircraft.</li>\n<li>Connect iOS/Android Mobile Device to the Remote Controller using a <strong>Lightning</strong> (iOS) or <strong>USB</strong> (Android) cable.</li>\n<li>Run Sample App on the Mobile Device.</li>\n</ul>\n<blockquote>\n<p><strong>Notes:</strong> </p>\n<p>If you are using an Android Device, please make sure your DJI Remote Controller supports <a href=\"https://source.android.com/devices/accessories/protocol.html\" target=\"_blank\">AOA</a> before you test the Sample app. You can upgrade your DJI Remote Controller to the latest firmware and check if there is a dialog pops up when you connect the app to it like this:</p>\n<p><img src=\"../images/quick-start/android_dialog.png\" alt=\"dialog\"></p>\n<p>To learn how to change the default app for USB accessory, please check these two FAQs: <a href=\"../faq/index.html#How-do-I-reset-the-default-app-behavior-for-a-USB-Accessory-DJI-Product-on-Android-devices\">Android Device</a>, <a href=\"../faq/index.html#How-do-I-reset-the-default-app-behavior-for-a-USB-Accessory-DJI-Product-on-Samsung-devices\">Samsung Device</a>.</p>\n</blockquote>\n<h4 id=\"wifi-connection-procedure\">WiFi Connection Procedure</h4>\n<p><em>Phantom 3 Standard, Phantom 3 4K:</em></p>\n<p>Turn on the Remote Controller.  </p>\n<ul>\n<li>Connect Mobile Device to the WiFi network created by the Remote Controller.</li>\n<li>Turn on the Aircraft and wait until the Remote Controller has connected with the Aircraft.</li>\n<li>Run Sample App on the Mobile Device.</li>\n</ul>\n<p><em>Osmo:</em></p>\n<p>Turn on the Osmo.  </p>\n<ul>\n<li>Connect Mobile Device to the WiFi network created by the Osmo.</li>\n<li>Run Sample App on Mobile Device.</li>\n</ul>","meta":{"title":"Run Sample Application","date":"2016-06-24T00:00:00.000Z"},"locale":"en"}